// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cmo, use-js-string=true, version=6.0.1

//# unitInfo: Provides: Dune__exe__H42n42
//# unitInfo: Requires: Canvas, Creet, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Lwt, Stdlib__List, Stdlib__Printf, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_creet1_png$1 = "creet1.png",
    cst_creet2_png$1 = "creet2.png",
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Creet = global_data.Creet,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Random = global_data.Stdlib__Random,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Canvas = global_data.Canvas,
    cst_creet1_png = cst_creet1_png$1,
    cst_creet2_png = cst_creet2_png$1,
    cst_creet1_png$0 = cst_creet1_png$1,
    cst_creet2_png$0 = cst_creet2_png$1,
    _a_ =
      [0,
       [11, "Speed increased to ", [4, 0, 0, 0, [12, 37, [12, 10, 0]]]],
       "Speed increased to %d%%\n"],
    _b_ = [0, [11, "Speed: ", [4, 0, 0, 0, [12, 37, 0]]], "Speed: %d%%"];
   function init(param){
    var
     doc = Js_of_ocaml_Dom_html[2],
     body = doc.body,
     game_div = caml_call1(Js_of_ocaml_Dom_html[51], doc);
    caml_call2(Js_of_ocaml_Dom[5], body, game_div);
    var
     title = caml_call1(Js_of_ocaml_Dom_html[54], doc),
     t1 = caml_call1(Js_of_ocaml_Js[2], "H42N42 Simulation");
    title.textContent = t1;
    caml_call2(Js_of_ocaml_Dom[5], game_div, title);
    var
     canvas_width = 800,
     canvas_height = 600,
     canvas = caml_call3(Canvas[1], game_div, canvas_width, canvas_height),
     t3 = Js_of_ocaml_Dom_html[1],
     context = canvas.getContext(t3);
    caml_call1(Stdlib_Random[3], 0);
    function create_axis_aligned_creet(img_src, x, y){
     if(caml_call1(Stdlib_Random[15], 0)){
      var
       base_speed = 10.,
       dx = caml_call1(Stdlib_Random[15], 0) ? base_speed : -10.;
      return caml_call5(Creet[1], img_src, x, y, dx, 0.);
     }
     var
      base_speed$0 = 10.,
      dy = caml_call1(Stdlib_Random[15], 0) ? base_speed$0 : -10.;
     return caml_call5(Creet[1], img_src, x, y, 0., dy);
    }
    var
     creet1 = create_axis_aligned_creet(cst_creet1_png, 100., 200.),
     creet2 = create_axis_aligned_creet(cst_creet2_png, 400., 300.),
     creets = [0, [0, creet1, [0, creet2, 0]]],
     t5 = Js_of_ocaml_Js[34],
     last_spawn = [0, t5.now() / 1000.],
     spawn_interval = 2. + caml_call1(Stdlib_Random[14], 6.),
     t6 = Js_of_ocaml_Js[34],
     last_speed_increase = [0, t6.now() / 1000.];
    function spawn_and_speed_loop(param){
     var t7 = Js_of_ocaml_Js[34], current_time = t7.now() / 1000.;
     if(spawn_interval <= current_time - last_spawn[1]){
      var
       x = caml_call1(Stdlib_Random[14], canvas_width),
       y = caml_call1(Stdlib_Random[14], canvas_height),
       img_src =
         caml_call1(Stdlib_Random[15], 0)
          ? cst_creet1_png$0
          : cst_creet2_png$0,
       new_creet = create_axis_aligned_creet(img_src, x, y);
      creets[1] = [0, new_creet, creets[1]];
      last_spawn[1] = current_time;
     }
     if(1. <= current_time - last_speed_increase[1]){
      Creet[2][1] = Creet[2][1] + 0.15;
      var speed_percentage = Creet[2][1] * 100. | 0;
      caml_call2(Stdlib_Printf[2], _a_, speed_percentage);
      last_speed_increase[1] = current_time;
     }
     var
      t8 =
        caml_js_wrap_callback
         (function(param){return spawn_and_speed_loop(0);}),
      t10 = Js_of_ocaml_Dom_html[8];
     t10.setTimeout(t8, 1000.);
     return 0;
    }
    spawn_and_speed_loop(0);
    var t11 = Js_of_ocaml_Js[34], last_time = [0, t11.now() / 1000.];
    function game_loop(param){
     var
      t12 = Js_of_ocaml_Js[34],
      current_time = t12.now() / 1000.,
      dt = current_time - last_time[1];
     last_time[1] = current_time;
     context.fillStyle = "#eeeeee";
     context.fillRect(0., 0., 800, 600);
     context.fillStyle = "#3498db";
     context.fillRect(0., 0., 800, 30.);
     context.fillStyle = "#e74c3c";
     context.fillRect(0., 570., 800, 30.);
     context.fillStyle = "#000000";
     context.font = "16px Arial";
     var
      speed_text = caml_call2(Stdlib_Printf[4], _b_, Creet[2][1] * 100. | 0),
      t38 = runtime.caml_jsstring_of_string(speed_text);
     context.fillText(t38, 10., 50.);
     caml_call2
      (Stdlib_List[18],
       function(creet){
        caml_call4(Creet[3], creet, canvas_width, canvas_height, dt);
        return caml_call2(Creet[4], context, creet);
       },
       creets[1]);
     var
      t42 = caml_js_wrap_callback(function(param){game_loop(0); return 0;}),
      t43 = Js_of_ocaml_Dom_html[8];
     t43.requestAnimationFrame(t42);
     return caml_call1(Lwt[4], 0);
    }
    return game_loop(0);
   }
   var
    t44 =
      caml_call1
       (Js_of_ocaml_Dom_html[10],
        function(param){caml_call1(Lwt[11], init); return Js_of_ocaml_Js[8];}),
    t45 = Js_of_ocaml_Dom_html[8];
   t45.onload = t44;
   var Dune_exe_H42n42 = [0, init];
   runtime.caml_register_global(71, Dune_exe_H42n42, "Dune__exe__H42n42");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
