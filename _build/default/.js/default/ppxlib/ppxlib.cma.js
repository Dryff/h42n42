// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.0.1

//# unitInfo: Provides: Ppxlib__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppxlib = [0],
    Ppxlib$0 = [0, Ppxlib];
   runtime.caml_register_global(0, Ppxlib$0, "Ppxlib__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Import
//# unitInfo: Requires: Ppxlib_ast, Ppxlib_ast__Ast, Stdppx
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdppx = global_data.Stdppx,
    Ppxlib_ast_Ast = global_data.Ppxlib_ast__Ast,
    default_string_of_float = Stdppx[1],
    write_old_option_format = Stdppx[2],
    read_old_option_format = Stdppx[3],
    list_map = Stdppx[4],
    sexp_of_unit = Stdppx[5],
    sexp_of_bool = Stdppx[6],
    sexp_of_string = Stdppx[7],
    sexp_of_bytes = Stdppx[8],
    sexp_of_char = Stdppx[9],
    sexp_of_int = Stdppx[10],
    sexp_of_float = Stdppx[11],
    sexp_of_int32 = Stdppx[12],
    sexp_of_int64 = Stdppx[13],
    sexp_of_nativeint = Stdppx[14],
    sexp_of_ref = Stdppx[15],
    sexp_of_lazy_t = Stdppx[16],
    sexp_of_option = Stdppx[17],
    sexp_of_pair = Stdppx[18],
    sexp_of_triple = Stdppx[19],
    sexp_of_list = Stdppx[20],
    sexp_of_array = Stdppx[21],
    sexp_of_hashtbl = Stdppx[22],
    sexp_of_opaque = Stdppx[23],
    sexp_of_fun = Stdppx[24],
    Of_sexp_error = Stdppx[25],
    record_check_extra_fields = Stdppx[26],
    of_sexp_error = Stdppx[27],
    of_sexp_error_exn = Stdppx[28],
    unit_of_sexp = Stdppx[29],
    bool_of_sexp = Stdppx[30],
    string_of_sexp = Stdppx[31],
    bytes_of_sexp = Stdppx[32],
    char_of_sexp = Stdppx[33],
    int_of_sexp = Stdppx[34],
    float_of_sexp = Stdppx[35],
    int32_of_sexp = Stdppx[36],
    int64_of_sexp = Stdppx[37],
    nativeint_of_sexp = Stdppx[38],
    ref_of_sexp = Stdppx[39],
    lazy_t_of_sexp = Stdppx[40],
    option_of_sexp = Stdppx[41],
    pair_of_sexp = Stdppx[42],
    triple_of_sexp = Stdppx[43],
    list_of_sexp = Stdppx[44],
    array_of_sexp = Stdppx[45],
    hashtbl_of_sexp = Stdppx[46],
    opaque_of_sexp = Stdppx[47],
    fun_of_sexp = Stdppx[48],
    sexp_grammar_with_tags = Stdppx[49],
    sexp_grammar_with_tag_list = Stdppx[50],
    unit_sexp_grammar = Stdppx[51],
    bool_sexp_grammar = Stdppx[52],
    string_sexp_grammar = Stdppx[53],
    bytes_sexp_grammar = Stdppx[54],
    char_sexp_grammar = Stdppx[55],
    int_sexp_grammar = Stdppx[56],
    float_sexp_grammar = Stdppx[57],
    int32_sexp_grammar = Stdppx[58],
    int64_sexp_grammar = Stdppx[59],
    nativeint_sexp_grammar = Stdppx[60],
    sexp_t_sexp_grammar = Stdppx[61],
    ref_sexp_grammar = Stdppx[62],
    lazy_t_sexp_grammar = Stdppx[63],
    option_sexp_grammar = Stdppx[64],
    list_sexp_grammar = Stdppx[65],
    array_sexp_grammar = Stdppx[66],
    opaque_sexp_grammar = Stdppx[67],
    fun_sexp_grammar = Stdppx[68],
    sexp_of_exn = Stdppx[69],
    printexc_prefer_sexp = Stdppx[70],
    sexp_of_exn_opt = Stdppx[71],
    Exn_converter = Stdppx[72],
    Poly = Stdppx[73],
    compare = Stdppx[74],
    equal = Stdppx[75],
    symbol = Stdppx[76],
    symbol$0 = Stdppx[77],
    symbol$1 = Stdppx[78],
    symbol$2 = Stdppx[79],
    symbol$3 = Stdppx[80],
    symbol$4 = Stdppx[81],
    min = Stdppx[82],
    max = Stdppx[83],
    Bool = Stdppx[84],
    Bytes = Stdppx[85],
    Char = Stdppx[86],
    Exn = Stdppx[87],
    Float = Stdppx[88],
    Fn = Stdppx[89],
    Hashtbl = Stdppx[90],
    In_channel = Stdppx[91],
    Int = Stdppx[92],
    Either = Stdppx[93],
    List = Stdppx[94],
    Option = Stdppx[95],
    Result = Stdppx[96],
    NonEmptyList = Stdppx[97],
    Out_channel = Stdppx[98],
    String = Stdppx[99],
    symbol$5 = Stdppx[100],
    output = Stdppx[101],
    output_substring = Stdppx[102],
    map = Ppxlib_ast_Ast[1],
    iter = Ppxlib_ast_Ast[2],
    fold = Ppxlib_ast_Ast[3],
    fold_map = Ppxlib_ast_Ast[4],
    map_with_context = Ppxlib_ast_Ast[5],
    lift = Ppxlib_ast_Ast[6],
    lift_map_with_context = Ppxlib_ast_Ast[7],
    Ppxlib_Import =
      [0,
       default_string_of_float,
       write_old_option_format,
       read_old_option_format,
       list_map,
       sexp_of_unit,
       sexp_of_bool,
       sexp_of_string,
       sexp_of_bytes,
       sexp_of_char,
       sexp_of_int,
       sexp_of_float,
       sexp_of_int32,
       sexp_of_int64,
       sexp_of_nativeint,
       sexp_of_ref,
       sexp_of_lazy_t,
       sexp_of_option,
       sexp_of_pair,
       sexp_of_triple,
       sexp_of_list,
       sexp_of_array,
       sexp_of_hashtbl,
       sexp_of_opaque,
       sexp_of_fun,
       Of_sexp_error,
       record_check_extra_fields,
       of_sexp_error,
       of_sexp_error_exn,
       unit_of_sexp,
       bool_of_sexp,
       string_of_sexp,
       bytes_of_sexp,
       char_of_sexp,
       int_of_sexp,
       float_of_sexp,
       int32_of_sexp,
       int64_of_sexp,
       nativeint_of_sexp,
       ref_of_sexp,
       lazy_t_of_sexp,
       option_of_sexp,
       pair_of_sexp,
       triple_of_sexp,
       list_of_sexp,
       array_of_sexp,
       hashtbl_of_sexp,
       opaque_of_sexp,
       fun_of_sexp,
       sexp_grammar_with_tags,
       sexp_grammar_with_tag_list,
       unit_sexp_grammar,
       bool_sexp_grammar,
       string_sexp_grammar,
       bytes_sexp_grammar,
       char_sexp_grammar,
       int_sexp_grammar,
       float_sexp_grammar,
       int32_sexp_grammar,
       int64_sexp_grammar,
       nativeint_sexp_grammar,
       sexp_t_sexp_grammar,
       ref_sexp_grammar,
       lazy_t_sexp_grammar,
       option_sexp_grammar,
       list_sexp_grammar,
       array_sexp_grammar,
       opaque_sexp_grammar,
       fun_sexp_grammar,
       sexp_of_exn,
       printexc_prefer_sexp,
       sexp_of_exn_opt,
       Exn_converter,
       Poly,
       compare,
       equal,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       min,
       max,
       Bool,
       Bytes,
       Char,
       Exn,
       Float,
       Fn,
       Hashtbl,
       In_channel,
       Int,
       Either,
       List,
       Option,
       Result,
       NonEmptyList,
       Out_channel,
       String,
       symbol$5,
       output,
       output_substring,
       map,
       iter,
       fold,
       fold_map,
       map_with_context,
       lift,
       lift_map_with_context];
   runtime.caml_register_global(2, Ppxlib_Import, "Ppxlib__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Location
//# unitInfo: Requires: Astlib__Location, Ppxlib__Import, Ppxlib_ast__Location_error, Stdlib__Format, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Astlib_Location = global_data.Astlib__Location,
    Ppxlib_ast_Location_error = global_data.Ppxlib_ast__Location_error,
    Stdlib_Printexc = global_data.Stdlib__Printexc;
   function in_file(name){
    var loc = [0, name, 1, 0, -1];
    return [0, loc, loc, 1];
   }
   function set_filename(loc, fn){
    var
     _f_ = loc[1],
     loc_start = [0, fn, _f_[2], _f_[3], _f_[4]],
     _g_ = loc[2],
     loc_end = [0, fn, _g_[2], _g_[3], _g_[4]];
    return [0, loc_start, loc_end, loc[3]];
   }
   var none = in_file("_none_");
   function init(lexbuf, fname){lexbuf[12] = [0, fname, 1, 0, 0]; return 0;}
   function raise_errorf(loc, fmt){
    return caml_call2(Astlib_Location[7], loc, fmt);
   }
   var
    report_exception = Astlib_Location[8],
    _a_ =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            ", characters ",
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [12, 58, 0]]]]]]]]],
       'File "%s", line %d, characters %d-%d:'];
   function of_lexbuf(lexbuf){return [0, lexbuf[11], lexbuf[12], 0];}
   function print(ppf, t){
    return caml_call6
            (Stdlib_Format[143],
             ppf,
             _a_,
             t[1][1],
             t[1][2],
             t[1][4] - t[1][3] | 0,
             t[2][4] - t[1][3] | 0);
   }
   function compare_pos(p1, p2){
    function column(p){return p[4] - p[3] | 0;}
    var n = caml_call2(Ppxlib_Import[92][3], p1[2], p2[2]);
    if(0 !== n) return n;
    var _d_ = column(p2), _e_ = column(p1);
    return caml_call2(Ppxlib_Import[92][3], _e_, _d_);
   }
   function min_pos(p1, p2){
    var _c_ = compare_pos(p1, p2);
    return caml_call2(Ppxlib_Import[80], _c_, 0) ? p1 : p2;
   }
   function max_pos(p1, p2){
    var _b_ = compare_pos(p1, p2);
    return caml_call2(Ppxlib_Import[81], _b_, 0) ? p1 : p2;
   }
   function compare(loc1, loc2){
    var n = compare_pos(loc1[1], loc2[1]);
    return 0 === n ? compare_pos(loc1[2], loc2[2]) : n;
   }
   var
    of_exn = Ppxlib_ast_Location_error[1],
    register_error_of_exn = Ppxlib_ast_Location_error[2],
    message = Ppxlib_ast_Location_error[3],
    set_message = Ppxlib_ast_Location_error[4],
    make = Ppxlib_ast_Location_error[5],
    to_extension = Ppxlib_ast_Location_error[6],
    raise = Ppxlib_ast_Location_error[7],
    update_loc = Ppxlib_ast_Location_error[8],
    get_location = Ppxlib_ast_Location_error[9];
   function createf(loc, fmt){
    return caml_call2
            (Stdlib_Format[154],
             function(str){return caml_call3(make, loc, str, 0);},
             fmt);
   }
   function error_extensionf(loc, fmt){
    return caml_call2
            (Stdlib_Format[154],
             function(str){
              return caml_call1(to_extension, caml_call3(make, loc, str, 0));
             },
             fmt);
   }
   var Error = Astlib_Location[6];
   caml_call1
    (Stdlib_Printexc[9],
     function(param){
      if(param[1] !== Error) return 0;
      var e = param[2];
      return [0, caml_call1(message, e)];
     });
   var
    Ppxlib_Location =
      [0,
       in_file,
       set_filename,
       none,
       init,
       raise_errorf,
       of_lexbuf,
       report_exception,
       print,
       compare_pos,
       min_pos,
       max_pos,
       compare,
       [0,
        make,
        createf,
        message,
        set_message,
        register_error_of_exn,
        of_exn,
        to_extension,
        raise,
        update_loc,
        get_location],
       error_extensionf,
       Error];
   runtime.caml_register_global(7, Ppxlib_Location, "Ppxlib__Location");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_pattern0
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    Expected =
      [248, "Ppxlib__Ast_pattern0.Expected", runtime.caml_fresh_oo_id(0)];
   function fail(loc, expected){
    throw caml_maybe_attach_backtrace([0, Expected, loc, expected], 1);
   }
   var Ppxlib_Ast_pattern0 = [0, Expected, fail];
   runtime.caml_register_global
    (1, Ppxlib_Ast_pattern0, "Ppxlib__Ast_pattern0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_traverse0
//# unitInfo: Requires: CamlinternalOO, Ppxlib_ast__Ast, Ppxlib_traverse_builtins
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constr = "constr",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_float = "float",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_nativeint = "nativeint",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_other = "other",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_record = "record",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_tuple = "tuple",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_unit = "unit",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    _e_ =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_signature,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    _f_ = [0, cst_string, cst_option, cst_list, cst_int, cst_char, cst_bool],
    _g_ =
      [0,
       cst_array,
       cst_bool,
       cst_char,
       cst_int,
       cst_list,
       cst_option,
       cst_string],
    _h_ =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    shared =
      [0,
       cst_arg_label,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_case,
       cst_cases,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_traverse_builtins = global_data.Ppxlib_traverse_builtins,
    Ppxlib_ast_Ast = global_data.Ppxlib_ast__Ast,
    map =
      caml_call2
       (CamlinternalOO[19],
        _e_,
        function(_M_){
         caml_call2(CamlinternalOO[8], _M_, _h_);
         var
          _N_ =
            caml_call6
              (CamlinternalOO[18],
               _M_,
               0,
               0,
               _g_,
               Ppxlib_traverse_builtins[2],
               1)
             [1],
          _O_ =
            caml_call6
              (CamlinternalOO[18], _M_, 0, _f_, shared, Ppxlib_ast_Ast[1], 1)
             [1];
         return function(_Q_, _P_){
          var _R_ = caml_call2(CamlinternalOO[24], _P_, _M_);
          caml_call1(_N_, _R_);
          caml_call1(_O_, _R_);
          return caml_call3(CamlinternalOO[26], _P_, _R_, _M_);};
        }),
    iter =
      caml_call2
       (CamlinternalOO[19],
        _e_,
        function(_G_){
         caml_call2(CamlinternalOO[8], _G_, _h_);
         var
          _H_ =
            caml_call6
              (CamlinternalOO[18],
               _G_,
               0,
               0,
               _g_,
               Ppxlib_traverse_builtins[3],
               1)
             [1],
          _I_ =
            caml_call6
              (CamlinternalOO[18], _G_, 0, _f_, shared, Ppxlib_ast_Ast[2], 1)
             [1];
         return function(_K_, _J_){
          var _L_ = caml_call2(CamlinternalOO[24], _J_, _G_);
          caml_call1(_H_, _L_);
          caml_call1(_I_, _L_);
          return caml_call3(CamlinternalOO[26], _J_, _L_, _G_);};
        }),
    fold =
      caml_call2
       (CamlinternalOO[19],
        _e_,
        function(_A_){
         caml_call2(CamlinternalOO[8], _A_, _h_);
         var
          _B_ =
            caml_call6
              (CamlinternalOO[18],
               _A_,
               0,
               0,
               _g_,
               Ppxlib_traverse_builtins[4],
               1)
             [1],
          _C_ =
            caml_call6
              (CamlinternalOO[18], _A_, 0, _f_, shared, Ppxlib_ast_Ast[3], 1)
             [1];
         return function(_E_, _D_){
          var _F_ = caml_call2(CamlinternalOO[24], _D_, _A_);
          caml_call1(_B_, _F_);
          caml_call1(_C_, _F_);
          return caml_call3(CamlinternalOO[26], _D_, _F_, _A_);};
        }),
    fold_map =
      caml_call2
       (CamlinternalOO[19],
        _e_,
        function(_u_){
         caml_call2(CamlinternalOO[8], _u_, _h_);
         var
          _v_ =
            caml_call6
              (CamlinternalOO[18],
               _u_,
               0,
               0,
               _g_,
               Ppxlib_traverse_builtins[5],
               1)
             [1],
          _w_ =
            caml_call6
              (CamlinternalOO[18], _u_, 0, _f_, shared, Ppxlib_ast_Ast[4], 1)
             [1];
         return function(_y_, _x_){
          var _z_ = caml_call2(CamlinternalOO[24], _x_, _u_);
          caml_call1(_v_, _z_);
          caml_call1(_w_, _z_);
          return caml_call3(CamlinternalOO[26], _x_, _z_, _u_);};
        }),
    map_with_context =
      caml_call2
       (CamlinternalOO[19],
        _e_,
        function(_o_){
         caml_call2(CamlinternalOO[8], _o_, _h_);
         var
          _p_ =
            caml_call6
              (CamlinternalOO[18],
               _o_,
               0,
               0,
               _g_,
               Ppxlib_traverse_builtins[6],
               1)
             [1],
          _q_ =
            caml_call6
              (CamlinternalOO[18], _o_, 0, _f_, shared, Ppxlib_ast_Ast[5], 1)
             [1];
         return function(_s_, _r_){
          var _t_ = caml_call2(CamlinternalOO[24], _r_, _o_);
          caml_call1(_p_, _t_);
          caml_call1(_q_, _t_);
          return caml_call3(CamlinternalOO[26], _r_, _t_, _o_);};
        }),
    lift = [],
    _a_ =
      [0,
       cst_tuple,
       cst_string,
       cst_record,
       cst_option,
       cst_list,
       cst_int,
       cst_constr,
       cst_char,
       cst_bool],
    _b_ = [0, cst_list, cst_option],
    _c_ =
      [0,
       cst_unit,
       cst_tuple,
       cst_string,
       cst_record,
       cst_other,
       cst_nativeint,
       cst_int64,
       cst_int32,
       cst_int,
       cst_float,
       cst_constr,
       cst_char,
       cst_bool,
       cst_array],
    _d_ =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_unit,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_tuple,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_record,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_other,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_nativeint,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int64,
       cst_int32,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_float,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constr,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label];
   runtime.caml_update_dummy
    (lift,
     [0,
      0,
      function(_i_){
       caml_call2(CamlinternalOO[8], _i_, _d_);
       var
        _j_ =
          caml_call6
            (CamlinternalOO[18],
             _i_,
             0,
             _c_,
             _b_,
             Ppxlib_traverse_builtins[7],
             1)
           [1],
        _k_ =
          caml_call6
            (CamlinternalOO[18], _i_, 0, _a_, shared, Ppxlib_ast_Ast[6], 1)
           [1];
       return function(_m_, _l_){
        var _n_ = caml_call2(CamlinternalOO[24], _l_, _i_);
        caml_call1(_j_, _n_);
        caml_call1(_k_, _n_);
        return caml_call3(CamlinternalOO[26], _l_, _n_, _i_);};
      },
      0]);
   var
    Ppxlib_Ast_traverse0 =
      [0, map, iter, fold, fold_map, map_with_context, lift];
   runtime.caml_register_global
    (12, Ppxlib_Ast_traverse0, "Ppxlib__Ast_traverse0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_builder_generated
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function attribute(loc){
    return function(name){
     return function(payload){return [0, name, payload, loc];};};
   }
   function binding_op(loc){
    return function(op){
     return function(pat){
      return function(exp){return [0, op, pat, exp, loc];};};};
   }
   function case$0(lhs){
    return function(guard){
     return function(rhs){return [0, lhs, guard, rhs];};};
   }
   function pcl_constr(loc){
    return function(x0){
     return function(x1){return [0, [0, x0, x1], loc, 0];};};
   }
   function pcl_structure(loc){
    return function(x0){return [0, [1, x0], loc, 0];};
   }
   function pcl_fun(loc){
    return function(x0){
     return function(x1){
      return function(x2){
       return function(x3){return [0, [2, x0, x1, x2, x3], loc, 0];};};};};
   }
   function pcl_apply(loc){
    return function(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};};
   }
   function pcl_let(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [4, x0, x1, x2], loc, 0];};};};
   }
   function pcl_constraint(loc){
    return function(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0];};};
   }
   function pcl_extension(loc){
    return function(x0){return [0, [6, x0], loc, 0];};
   }
   function pcl_open(loc){
    return function(x0){
     return function(x1){return [0, [7, x0, x1], loc, 0];};};
   }
   function pcf_inherit(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [0, x0, x1, x2], loc, 0];};};};
   }
   function pcf_val(loc){return function(x0){return [0, [1, x0], loc, 0];};}
   function pcf_method(loc){
    return function(x0){return [0, [2, x0], loc, 0];};
   }
   function pcf_constraint(loc){
    return function(x0){return [0, [3, x0], loc, 0];};
   }
   function pcf_initializer(loc){
    return function(x0){return [0, [4, x0], loc, 0];};
   }
   function pcf_attribute(loc){
    return function(x0){return [0, [5, x0], loc, 0];};
   }
   function pcf_extension(loc){
    return function(x0){return [0, [6, x0], loc, 0];};
   }
   function class_infos(loc){
    return function(virt){
     return function(params){
      return function(name){
       return function(expr){return [0, virt, params, name, expr, loc, 0];};};};};
   }
   function class_signature(self){
    return function(fields){return [0, self, fields];};
   }
   function class_structure(self){
    return function(fields){return [0, self, fields];};
   }
   function pcty_constr(loc){
    return function(x0){
     return function(x1){return [0, [0, x0, x1], loc, 0];};};
   }
   function pcty_signature(loc){
    return function(x0){return [0, [1, x0], loc, 0];};
   }
   function pcty_arrow(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [2, x0, x1, x2], loc, 0];};};};
   }
   function pcty_extension(loc){
    return function(x0){return [0, [3, x0], loc, 0];};
   }
   function pcty_open(loc){
    return function(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0];};};
   }
   function pctf_inherit(loc){
    return function(x0){return [0, [0, x0], loc, 0];};
   }
   function pctf_val(loc){return function(x0){return [0, [1, x0], loc, 0];};}
   function pctf_method(loc){
    return function(x0){return [0, [2, x0], loc, 0];};
   }
   function pctf_constraint(loc){
    return function(x0){return [0, [3, x0], loc, 0];};
   }
   function pctf_attribute(loc){
    return function(x0){return [0, [4, x0], loc, 0];};
   }
   function pctf_extension(loc){
    return function(x0){return [0, [5, x0], loc, 0];};
   }
   function constructor_declaration(loc){
    return function(name){
     return function(vars){
      return function(args){
       return function(res){return [0, name, vars, args, res, loc, 0];};};};};
   }
   function ptyp_any(loc){return [0, 0, loc, 0, 0];}
   function ptyp_var(loc){
    return function(x0){return [0, [0, x0], loc, 0, 0];};
   }
   function ptyp_arrow(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [1, x0, x1, x2], loc, 0, 0];};};};
   }
   function ptyp_tuple(loc){
    return function(x0){return [0, [2, x0], loc, 0, 0];};
   }
   function ptyp_constr(loc){
    return function(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0, 0];};};
   }
   function ptyp_object(loc){
    return function(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0, 0];};};
   }
   function ptyp_class(loc){
    return function(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};};
   }
   function ptyp_alias(loc){
    return function(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};};
   }
   function ptyp_variant(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [7, x0, x1, x2], loc, 0, 0];};};};
   }
   function ptyp_poly(loc){
    return function(x0){
     return function(x1){return [0, [8, x0, x1], loc, 0, 0];};};
   }
   function ptyp_package(loc){
    return function(x0){return [0, [9, x0], loc, 0, 0];};
   }
   function ptyp_extension(loc){
    return function(x0){return [0, [10, x0], loc, 0, 0];};
   }
   function pdir_string(loc){return function(x0){return [0, [0, x0], loc];};}
   function pdir_int(loc){
    return function(x0){return function(x1){return [0, [1, x0, x1], loc];};};
   }
   function pdir_ident(loc){return function(x0){return [0, [2, x0], loc];};}
   function pdir_bool(loc){return function(x0){return [0, [3, x0], loc];};}
   function pexp_ident(loc){
    return function(x0){return [0, [0, x0], loc, 0, 0];};
   }
   function pexp_constant(loc){
    return function(x0){return [0, [1, x0], loc, 0, 0];};
   }
   function pexp_let(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [2, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_function(loc){
    return function(x0){return [0, [3, x0], loc, 0, 0];};
   }
   function pexp_fun(loc){
    return function(x0){
     return function(x1){
      return function(x2){
       return function(x3){return [0, [4, x0, x1, x2, x3], loc, 0, 0];};};};};
   }
   function pexp_apply(loc){
    return function(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};};
   }
   function pexp_match(loc){
    return function(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};};
   }
   function pexp_try(loc){
    return function(x0){
     return function(x1){return [0, [7, x0, x1], loc, 0, 0];};};
   }
   function pexp_tuple(loc){
    return function(x0){return [0, [8, x0], loc, 0, 0];};
   }
   function pexp_construct(loc){
    return function(x0){
     return function(x1){return [0, [9, x0, x1], loc, 0, 0];};};
   }
   function pexp_variant(loc){
    return function(x0){
     return function(x1){return [0, [10, x0, x1], loc, 0, 0];};};
   }
   function pexp_record(loc){
    return function(x0){
     return function(x1){return [0, [11, x0, x1], loc, 0, 0];};};
   }
   function pexp_field(loc){
    return function(x0){
     return function(x1){return [0, [12, x0, x1], loc, 0, 0];};};
   }
   function pexp_setfield(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [13, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_array(loc){
    return function(x0){return [0, [14, x0], loc, 0, 0];};
   }
   function pexp_ifthenelse(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [15, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_sequence(loc){
    return function(x0){
     return function(x1){return [0, [16, x0, x1], loc, 0, 0];};};
   }
   function pexp_while(loc){
    return function(x0){
     return function(x1){return [0, [17, x0, x1], loc, 0, 0];};};
   }
   function pexp_for(loc){
    return function(x0){
     return function(x1){
      return function(x2){
       return function(x3){
        return function(x4){return [0, [18, x0, x1, x2, x3, x4], loc, 0, 0];};};};};};
   }
   function pexp_constraint(loc){
    return function(x0){
     return function(x1){return [0, [19, x0, x1], loc, 0, 0];};};
   }
   function pexp_coerce(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [20, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_send(loc){
    return function(x0){
     return function(x1){return [0, [21, x0, x1], loc, 0, 0];};};
   }
   function pexp_new(loc){
    return function(x0){return [0, [22, x0], loc, 0, 0];};
   }
   function pexp_setinstvar(loc){
    return function(x0){
     return function(x1){return [0, [23, x0, x1], loc, 0, 0];};};
   }
   function pexp_override(loc){
    return function(x0){return [0, [24, x0], loc, 0, 0];};
   }
   function pexp_letmodule(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [25, x0, x1, x2], loc, 0, 0];};};};
   }
   function pexp_letexception(loc){
    return function(x0){
     return function(x1){return [0, [26, x0, x1], loc, 0, 0];};};
   }
   function pexp_assert(loc){
    return function(x0){return [0, [27, x0], loc, 0, 0];};
   }
   function pexp_lazy(loc){
    return function(x0){return [0, [28, x0], loc, 0, 0];};
   }
   function pexp_poly(loc){
    return function(x0){
     return function(x1){return [0, [29, x0, x1], loc, 0, 0];};};
   }
   function pexp_object(loc){
    return function(x0){return [0, [30, x0], loc, 0, 0];};
   }
   function pexp_newtype(loc){
    return function(x0){
     return function(x1){return [0, [31, x0, x1], loc, 0, 0];};};
   }
   function pexp_pack(loc){
    return function(x0){return [0, [32, x0], loc, 0, 0];};
   }
   function pexp_open(loc){
    return function(x0){
     return function(x1){return [0, [33, x0, x1], loc, 0, 0];};};
   }
   function pexp_letop(loc){
    return function(x0){return [0, [34, x0], loc, 0, 0];};
   }
   function pexp_extension(loc){
    return function(x0){return [0, [35, x0], loc, 0, 0];};
   }
   function pexp_unreachable(loc){return [0, 0, loc, 0, 0];}
   function extension_constructor(loc){
    return function(name){
     return function(kind){return [0, name, kind, loc, 0];};};
   }
   function include_infos(loc){
    return function(mod){return [0, mod, loc, 0];};
   }
   function label_declaration(loc){
    return function(name){
     return function(mutable){
      return function(type){return [0, name, mutable, type, loc, 0];};};};
   }
   function letop(let$0){
    return function(ands){
     return function(body){return [0, let$0, ands, body];};};
   }
   function location(start){
    return function(end){
     return function(ghost){return [0, start, end, ghost];};};
   }
   function module_binding(loc){
    return function(name){
     return function(expr){return [0, name, expr, 0, loc];};};
   }
   function module_declaration(loc){
    return function(name){
     return function(type){return [0, name, type, 0, loc];};};
   }
   function pmod_ident(loc){
    return function(x0){return [0, [0, x0], loc, 0];};
   }
   function pmod_structure(loc){
    return function(x0){return [0, [1, x0], loc, 0];};
   }
   function pmod_functor(loc){
    return function(x0){
     return function(x1){return [0, [2, x0, x1], loc, 0];};};
   }
   function pmod_apply(loc){
    return function(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};};
   }
   function pmod_constraint(loc){
    return function(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0];};};
   }
   function pmod_unpack(loc){
    return function(x0){return [0, [5, x0], loc, 0];};
   }
   function pmod_extension(loc){
    return function(x0){return [0, [6, x0], loc, 0];};
   }
   function module_substitution(loc){
    return function(name){
     return function(manifest){return [0, name, manifest, 0, loc];};};
   }
   function pmty_ident(loc){
    return function(x0){return [0, [0, x0], loc, 0];};
   }
   function pmty_signature(loc){
    return function(x0){return [0, [1, x0], loc, 0];};
   }
   function pmty_functor(loc){
    return function(x0){
     return function(x1){return [0, [2, x0, x1], loc, 0];};};
   }
   function pmty_with(loc){
    return function(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};};
   }
   function pmty_typeof(loc){
    return function(x0){return [0, [4, x0], loc, 0];};
   }
   function pmty_extension(loc){
    return function(x0){return [0, [5, x0], loc, 0];};
   }
   function pmty_alias(loc){
    return function(x0){return [0, [6, x0], loc, 0];};
   }
   function module_type_declaration(loc){
    return function(name){
     return function(type){return [0, name, type, 0, loc];};};
   }
   function otag(loc){
    return function(x0){
     return function(x1){return [0, [0, x0, x1], loc, 0];};};
   }
   function oinherit(loc){return function(x0){return [0, [1, x0], loc, 0];};}
   function open_infos(loc){
    return function(expr){
     return function(override){return [0, expr, override, loc, 0];};};
   }
   function ppat_any(loc){return [0, 0, loc, 0, 0];}
   function ppat_var(loc){
    return function(x0){return [0, [0, x0], loc, 0, 0];};
   }
   function ppat_alias(loc){
    return function(x0){
     return function(x1){return [0, [1, x0, x1], loc, 0, 0];};};
   }
   function ppat_constant(loc){
    return function(x0){return [0, [2, x0], loc, 0, 0];};
   }
   function ppat_interval(loc){
    return function(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0, 0];};};
   }
   function ppat_tuple(loc){
    return function(x0){return [0, [4, x0], loc, 0, 0];};
   }
   function ppat_construct(loc){
    return function(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};};
   }
   function ppat_variant(loc){
    return function(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};};
   }
   function ppat_record(loc){
    return function(x0){
     return function(x1){return [0, [7, x0, x1], loc, 0, 0];};};
   }
   function ppat_array(loc){
    return function(x0){return [0, [8, x0], loc, 0, 0];};
   }
   function ppat_or(loc){
    return function(x0){
     return function(x1){return [0, [9, x0, x1], loc, 0, 0];};};
   }
   function ppat_constraint(loc){
    return function(x0){
     return function(x1){return [0, [10, x0, x1], loc, 0, 0];};};
   }
   function ppat_type(loc){
    return function(x0){return [0, [11, x0], loc, 0, 0];};
   }
   function ppat_lazy(loc){
    return function(x0){return [0, [12, x0], loc, 0, 0];};
   }
   function ppat_unpack(loc){
    return function(x0){return [0, [13, x0], loc, 0, 0];};
   }
   function ppat_exception(loc){
    return function(x0){return [0, [14, x0], loc, 0, 0];};
   }
   function ppat_extension(loc){
    return function(x0){return [0, [15, x0], loc, 0, 0];};
   }
   function ppat_open(loc){
    return function(x0){
     return function(x1){return [0, [16, x0, x1], loc, 0, 0];};};
   }
   function position(fname){
    return function(lnum){
     return function(bol){
      return function(cnum){return [0, fname, lnum, bol, cnum];};};};
   }
   function rtag(loc){
    return function(x0){
     return function(x1){
      return function(x2){return [0, [0, x0, x1, x2], loc, 0];};};};
   }
   function rinherit(loc){return function(x0){return [0, [1, x0], loc, 0];};}
   function psig_value(loc){return function(x0){return [0, [0, x0], loc];};}
   function psig_type(loc){
    return function(x0){return function(x1){return [0, [1, x0, x1], loc];};};
   }
   function psig_typesubst(loc){
    return function(x0){return [0, [2, x0], loc];};
   }
   function psig_typext(loc){return function(x0){return [0, [3, x0], loc];};}
   function psig_exception(loc){
    return function(x0){return [0, [4, x0], loc];};
   }
   function psig_module(loc){return function(x0){return [0, [5, x0], loc];};}
   function psig_modsubst(loc){
    return function(x0){return [0, [6, x0], loc];};
   }
   function psig_recmodule(loc){
    return function(x0){return [0, [7, x0], loc];};
   }
   function psig_modtype(loc){return function(x0){return [0, [8, x0], loc];};}
   function psig_modtypesubst(loc){
    return function(x0){return [0, [9, x0], loc];};
   }
   function psig_open(loc){return function(x0){return [0, [10, x0], loc];};}
   function psig_include(loc){
    return function(x0){return [0, [11, x0], loc];};
   }
   function psig_class(loc){return function(x0){return [0, [12, x0], loc];};}
   function psig_class_type(loc){
    return function(x0){return [0, [13, x0], loc];};
   }
   function psig_attribute(loc){
    return function(x0){return [0, [14, x0], loc];};
   }
   function psig_extension(loc){
    return function(x0){return function(x1){return [0, [15, x0, x1], loc];};};
   }
   function pstr_eval(loc){
    return function(x0){return function(x1){return [0, [0, x0, x1], loc];};};
   }
   function pstr_value(loc){
    return function(x0){return function(x1){return [0, [1, x0, x1], loc];};};
   }
   function pstr_primitive(loc){
    return function(x0){return [0, [2, x0], loc];};
   }
   function pstr_type(loc){
    return function(x0){return function(x1){return [0, [3, x0, x1], loc];};};
   }
   function pstr_typext(loc){return function(x0){return [0, [4, x0], loc];};}
   function pstr_exception(loc){
    return function(x0){return [0, [5, x0], loc];};
   }
   function pstr_module(loc){return function(x0){return [0, [6, x0], loc];};}
   function pstr_recmodule(loc){
    return function(x0){return [0, [7, x0], loc];};
   }
   function pstr_modtype(loc){return function(x0){return [0, [8, x0], loc];};}
   function pstr_open(loc){return function(x0){return [0, [9, x0], loc];};}
   function pstr_class(loc){return function(x0){return [0, [10, x0], loc];};}
   function pstr_class_type(loc){
    return function(x0){return [0, [11, x0], loc];};
   }
   function pstr_include(loc){
    return function(x0){return [0, [12, x0], loc];};
   }
   function pstr_attribute(loc){
    return function(x0){return [0, [13, x0], loc];};
   }
   function pstr_extension(loc){
    return function(x0){return function(x1){return [0, [14, x0, x1], loc];};};
   }
   function toplevel_directive(loc){
    return function(name){return function(arg){return [0, name, arg, loc];};};
   }
   function type_declaration(loc){
    return function(name){
     return function(params){
      return function(cstrs){
       return function(kind){
        return function(private$0){
         return function(manifest){
          return [0, name, params, cstrs, kind, private$0, manifest, 0, loc];};};};};};};
   }
   function type_exception(loc){
    return function(constructor){return [0, constructor, loc, 0];};
   }
   function type_extension(loc){
    return function(path){
     return function(params){
      return function(constructors){
       return function(private$0){
        return [0, path, params, constructors, private$0, loc, 0];};};};};
   }
   function value_binding(loc){
    return function(pat){
     return function(expr){return [0, pat, expr, 0, loc];};};
   }
   function value_description(loc){
    return function(name){
     return function(type){
      return function(prim){return [0, name, type, prim, 0, loc];};};};
   }
   var
    M =
      [0,
       value_description,
       value_binding,
       type_extension,
       type_exception,
       type_declaration,
       toplevel_directive,
       pstr_extension,
       pstr_attribute,
       pstr_include,
       pstr_class_type,
       pstr_class,
       pstr_open,
       pstr_modtype,
       pstr_recmodule,
       pstr_module,
       pstr_exception,
       pstr_typext,
       pstr_type,
       pstr_primitive,
       pstr_value,
       pstr_eval,
       psig_extension,
       psig_attribute,
       psig_class_type,
       psig_class,
       psig_include,
       psig_open,
       psig_modtypesubst,
       psig_modtype,
       psig_recmodule,
       psig_modsubst,
       psig_module,
       psig_exception,
       psig_typext,
       psig_typesubst,
       psig_type,
       psig_value,
       rinherit,
       rtag,
       position,
       ppat_open,
       ppat_extension,
       ppat_exception,
       ppat_unpack,
       ppat_lazy,
       ppat_type,
       ppat_constraint,
       ppat_or,
       ppat_array,
       ppat_record,
       ppat_variant,
       ppat_construct,
       ppat_tuple,
       ppat_interval,
       ppat_constant,
       ppat_alias,
       ppat_var,
       ppat_any,
       oinherit,
       otag,
       module_type_declaration,
       pmty_alias,
       pmty_extension,
       pmty_typeof,
       pmty_with,
       pmty_functor,
       pmty_signature,
       pmty_ident,
       module_substitution,
       pmod_extension,
       pmod_unpack,
       pmod_constraint,
       pmod_apply,
       pmod_functor,
       pmod_structure,
       pmod_ident,
       module_declaration,
       module_binding,
       location,
       letop,
       label_declaration,
       extension_constructor,
       pexp_unreachable,
       pexp_extension,
       pexp_letop,
       pexp_open,
       pexp_pack,
       pexp_newtype,
       pexp_object,
       pexp_poly,
       pexp_lazy,
       pexp_assert,
       pexp_letexception,
       pexp_letmodule,
       pexp_override,
       pexp_setinstvar,
       pexp_new,
       pexp_send,
       pexp_coerce,
       pexp_constraint,
       pexp_for,
       pexp_while,
       pexp_sequence,
       pexp_ifthenelse,
       pexp_array,
       pexp_setfield,
       pexp_field,
       pexp_record,
       pexp_variant,
       pexp_construct,
       pexp_tuple,
       pexp_try,
       pexp_match,
       pexp_apply,
       pexp_fun,
       pexp_function,
       pexp_let,
       pexp_constant,
       pexp_ident,
       pdir_bool,
       pdir_ident,
       pdir_int,
       pdir_string,
       ptyp_extension,
       ptyp_package,
       ptyp_poly,
       ptyp_variant,
       ptyp_alias,
       ptyp_class,
       ptyp_object,
       ptyp_constr,
       ptyp_tuple,
       ptyp_arrow,
       ptyp_var,
       ptyp_any,
       constructor_declaration,
       pctf_extension,
       pctf_attribute,
       pctf_constraint,
       pctf_method,
       pctf_val,
       pctf_inherit,
       pcty_open,
       pcty_extension,
       pcty_arrow,
       pcty_signature,
       pcty_constr,
       class_structure,
       class_signature,
       pcf_extension,
       pcf_attribute,
       pcf_initializer,
       pcf_constraint,
       pcf_method,
       pcf_val,
       pcf_inherit,
       pcl_open,
       pcl_extension,
       pcl_constraint,
       pcl_let,
       pcl_apply,
       pcl_fun,
       pcl_structure,
       pcl_constr,
       case$0,
       binding_op,
       attribute,
       open_infos,
       include_infos,
       class_infos];
   function Make(Loc){
    var loc = Loc[1];
    function attribute(name){
     return function(payload){return [0, name, payload, loc];};
    }
    function binding_op(op){
     return function(pat){
      return function(exp){return [0, op, pat, exp, loc];};};
    }
    function case$0(lhs){
     return function(guard){
      return function(rhs){return [0, lhs, guard, rhs];};};
    }
    function pcl_constr(x0){
     return function(x1){return [0, [0, x0, x1], loc, 0];};
    }
    function pcl_structure(x0){return [0, [1, x0], loc, 0];}
    function pcl_fun(x0){
     return function(x1){
      return function(x2){
       return function(x3){return [0, [2, x0, x1, x2, x3], loc, 0];};};};
    }
    function pcl_apply(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};
    }
    function pcl_let(x0){
     return function(x1){
      return function(x2){return [0, [4, x0, x1, x2], loc, 0];};};
    }
    function pcl_constraint(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0];};
    }
    function pcl_extension(x0){return [0, [6, x0], loc, 0];}
    function pcl_open(x0){
     return function(x1){return [0, [7, x0, x1], loc, 0];};
    }
    function pcf_inherit(x0){
     return function(x1){
      return function(x2){return [0, [0, x0, x1, x2], loc, 0];};};
    }
    function pcf_val(x0){return [0, [1, x0], loc, 0];}
    function pcf_method(x0){return [0, [2, x0], loc, 0];}
    function pcf_constraint(x0){return [0, [3, x0], loc, 0];}
    function pcf_initializer(x0){return [0, [4, x0], loc, 0];}
    function pcf_attribute(x0){return [0, [5, x0], loc, 0];}
    function pcf_extension(x0){return [0, [6, x0], loc, 0];}
    function class_infos(virt){
     return function(params){
      return function(name){
       return function(expr){return [0, virt, params, name, expr, loc, 0];};};};
    }
    function class_signature(self){
     return function(fields){return [0, self, fields];};
    }
    function class_structure(self){
     return function(fields){return [0, self, fields];};
    }
    function pcty_constr(x0){
     return function(x1){return [0, [0, x0, x1], loc, 0];};
    }
    function pcty_signature(x0){return [0, [1, x0], loc, 0];}
    function pcty_arrow(x0){
     return function(x1){
      return function(x2){return [0, [2, x0, x1, x2], loc, 0];};};
    }
    function pcty_extension(x0){return [0, [3, x0], loc, 0];}
    function pcty_open(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0];};
    }
    function pctf_inherit(x0){return [0, [0, x0], loc, 0];}
    function pctf_val(x0){return [0, [1, x0], loc, 0];}
    function pctf_method(x0){return [0, [2, x0], loc, 0];}
    function pctf_constraint(x0){return [0, [3, x0], loc, 0];}
    function pctf_attribute(x0){return [0, [4, x0], loc, 0];}
    function pctf_extension(x0){return [0, [5, x0], loc, 0];}
    function constructor_declaration(name){
     return function(vars){
      return function(args){
       return function(res){return [0, name, vars, args, res, loc, 0];};};};
    }
    var ptyp_any = [0, 0, loc, 0, 0];
    function ptyp_var(x0){return [0, [0, x0], loc, 0, 0];}
    function ptyp_arrow(x0){
     return function(x1){
      return function(x2){return [0, [1, x0, x1, x2], loc, 0, 0];};};
    }
    function ptyp_tuple(x0){return [0, [2, x0], loc, 0, 0];}
    function ptyp_constr(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0, 0];};
    }
    function ptyp_object(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0, 0];};
    }
    function ptyp_class(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};
    }
    function ptyp_alias(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};
    }
    function ptyp_variant(x0){
     return function(x1){
      return function(x2){return [0, [7, x0, x1, x2], loc, 0, 0];};};
    }
    function ptyp_poly(x0){
     return function(x1){return [0, [8, x0, x1], loc, 0, 0];};
    }
    function ptyp_package(x0){return [0, [9, x0], loc, 0, 0];}
    function ptyp_extension(x0){return [0, [10, x0], loc, 0, 0];}
    function pdir_string(x0){return [0, [0, x0], loc];}
    function pdir_int(x0){return function(x1){return [0, [1, x0, x1], loc];};}
    function pdir_ident(x0){return [0, [2, x0], loc];}
    function pdir_bool(x0){return [0, [3, x0], loc];}
    function pexp_ident(x0){return [0, [0, x0], loc, 0, 0];}
    function pexp_constant(x0){return [0, [1, x0], loc, 0, 0];}
    function pexp_let(x0){
     return function(x1){
      return function(x2){return [0, [2, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_function(x0){return [0, [3, x0], loc, 0, 0];}
    function pexp_fun(x0){
     return function(x1){
      return function(x2){
       return function(x3){return [0, [4, x0, x1, x2, x3], loc, 0, 0];};};};
    }
    function pexp_apply(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};
    }
    function pexp_match(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};
    }
    function pexp_try(x0){
     return function(x1){return [0, [7, x0, x1], loc, 0, 0];};
    }
    function pexp_tuple(x0){return [0, [8, x0], loc, 0, 0];}
    function pexp_construct(x0){
     return function(x1){return [0, [9, x0, x1], loc, 0, 0];};
    }
    function pexp_variant(x0){
     return function(x1){return [0, [10, x0, x1], loc, 0, 0];};
    }
    function pexp_record(x0){
     return function(x1){return [0, [11, x0, x1], loc, 0, 0];};
    }
    function pexp_field(x0){
     return function(x1){return [0, [12, x0, x1], loc, 0, 0];};
    }
    function pexp_setfield(x0){
     return function(x1){
      return function(x2){return [0, [13, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_array(x0){return [0, [14, x0], loc, 0, 0];}
    function pexp_ifthenelse(x0){
     return function(x1){
      return function(x2){return [0, [15, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_sequence(x0){
     return function(x1){return [0, [16, x0, x1], loc, 0, 0];};
    }
    function pexp_while(x0){
     return function(x1){return [0, [17, x0, x1], loc, 0, 0];};
    }
    function pexp_for(x0){
     return function(x1){
      return function(x2){
       return function(x3){
        return function(x4){return [0, [18, x0, x1, x2, x3, x4], loc, 0, 0];};};};};
    }
    function pexp_constraint(x0){
     return function(x1){return [0, [19, x0, x1], loc, 0, 0];};
    }
    function pexp_coerce(x0){
     return function(x1){
      return function(x2){return [0, [20, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_send(x0){
     return function(x1){return [0, [21, x0, x1], loc, 0, 0];};
    }
    function pexp_new(x0){return [0, [22, x0], loc, 0, 0];}
    function pexp_setinstvar(x0){
     return function(x1){return [0, [23, x0, x1], loc, 0, 0];};
    }
    function pexp_override(x0){return [0, [24, x0], loc, 0, 0];}
    function pexp_letmodule(x0){
     return function(x1){
      return function(x2){return [0, [25, x0, x1, x2], loc, 0, 0];};};
    }
    function pexp_letexception(x0){
     return function(x1){return [0, [26, x0, x1], loc, 0, 0];};
    }
    function pexp_assert(x0){return [0, [27, x0], loc, 0, 0];}
    function pexp_lazy(x0){return [0, [28, x0], loc, 0, 0];}
    function pexp_poly(x0){
     return function(x1){return [0, [29, x0, x1], loc, 0, 0];};
    }
    function pexp_object(x0){return [0, [30, x0], loc, 0, 0];}
    function pexp_newtype(x0){
     return function(x1){return [0, [31, x0, x1], loc, 0, 0];};
    }
    function pexp_pack(x0){return [0, [32, x0], loc, 0, 0];}
    function pexp_open(x0){
     return function(x1){return [0, [33, x0, x1], loc, 0, 0];};
    }
    function pexp_letop(x0){return [0, [34, x0], loc, 0, 0];}
    function pexp_extension(x0){return [0, [35, x0], loc, 0, 0];}
    var pexp_unreachable = [0, 0, loc, 0, 0];
    function extension_constructor(name){
     return function(kind){return [0, name, kind, loc, 0];};
    }
    function include_infos(mod){return [0, mod, loc, 0];}
    function label_declaration(name){
     return function(mutable){
      return function(type){return [0, name, mutable, type, loc, 0];};};
    }
    function letop(let$0){
     return function(ands){
      return function(body){return [0, let$0, ands, body];};};
    }
    function location(start){
     return function(end){
      return function(ghost){return [0, start, end, ghost];};};
    }
    function module_binding(name){
     return function(expr){return [0, name, expr, 0, loc];};
    }
    function module_declaration(name){
     return function(type){return [0, name, type, 0, loc];};
    }
    function pmod_ident(x0){return [0, [0, x0], loc, 0];}
    function pmod_structure(x0){return [0, [1, x0], loc, 0];}
    function pmod_functor(x0){
     return function(x1){return [0, [2, x0, x1], loc, 0];};
    }
    function pmod_apply(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};
    }
    function pmod_constraint(x0){
     return function(x1){return [0, [4, x0, x1], loc, 0];};
    }
    function pmod_unpack(x0){return [0, [5, x0], loc, 0];}
    function pmod_extension(x0){return [0, [6, x0], loc, 0];}
    function module_substitution(name){
     return function(manifest){return [0, name, manifest, 0, loc];};
    }
    function pmty_ident(x0){return [0, [0, x0], loc, 0];}
    function pmty_signature(x0){return [0, [1, x0], loc, 0];}
    function pmty_functor(x0){
     return function(x1){return [0, [2, x0, x1], loc, 0];};
    }
    function pmty_with(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0];};
    }
    function pmty_typeof(x0){return [0, [4, x0], loc, 0];}
    function pmty_extension(x0){return [0, [5, x0], loc, 0];}
    function pmty_alias(x0){return [0, [6, x0], loc, 0];}
    function module_type_declaration(name){
     return function(type){return [0, name, type, 0, loc];};
    }
    function otag(x0){return function(x1){return [0, [0, x0, x1], loc, 0];};}
    function oinherit(x0){return [0, [1, x0], loc, 0];}
    function open_infos(expr){
     return function(override){return [0, expr, override, loc, 0];};
    }
    var ppat_any = [0, 0, loc, 0, 0];
    function ppat_var(x0){return [0, [0, x0], loc, 0, 0];}
    function ppat_alias(x0){
     return function(x1){return [0, [1, x0, x1], loc, 0, 0];};
    }
    function ppat_constant(x0){return [0, [2, x0], loc, 0, 0];}
    function ppat_interval(x0){
     return function(x1){return [0, [3, x0, x1], loc, 0, 0];};
    }
    function ppat_tuple(x0){return [0, [4, x0], loc, 0, 0];}
    function ppat_construct(x0){
     return function(x1){return [0, [5, x0, x1], loc, 0, 0];};
    }
    function ppat_variant(x0){
     return function(x1){return [0, [6, x0, x1], loc, 0, 0];};
    }
    function ppat_record(x0){
     return function(x1){return [0, [7, x0, x1], loc, 0, 0];};
    }
    function ppat_array(x0){return [0, [8, x0], loc, 0, 0];}
    function ppat_or(x0){
     return function(x1){return [0, [9, x0, x1], loc, 0, 0];};
    }
    function ppat_constraint(x0){
     return function(x1){return [0, [10, x0, x1], loc, 0, 0];};
    }
    function ppat_type(x0){return [0, [11, x0], loc, 0, 0];}
    function ppat_lazy(x0){return [0, [12, x0], loc, 0, 0];}
    function ppat_unpack(x0){return [0, [13, x0], loc, 0, 0];}
    function ppat_exception(x0){return [0, [14, x0], loc, 0, 0];}
    function ppat_extension(x0){return [0, [15, x0], loc, 0, 0];}
    function ppat_open(x0){
     return function(x1){return [0, [16, x0, x1], loc, 0, 0];};
    }
    function position(fname){
     return function(lnum){
      return function(bol){
       return function(cnum){return [0, fname, lnum, bol, cnum];};};};
    }
    function rtag(x0){
     return function(x1){
      return function(x2){return [0, [0, x0, x1, x2], loc, 0];};};
    }
    function rinherit(x0){return [0, [1, x0], loc, 0];}
    function psig_value(x0){return [0, [0, x0], loc];}
    function psig_type(x0){
     return function(x1){return [0, [1, x0, x1], loc];};
    }
    function psig_typesubst(x0){return [0, [2, x0], loc];}
    function psig_typext(x0){return [0, [3, x0], loc];}
    function psig_exception(x0){return [0, [4, x0], loc];}
    function psig_module(x0){return [0, [5, x0], loc];}
    function psig_modsubst(x0){return [0, [6, x0], loc];}
    function psig_recmodule(x0){return [0, [7, x0], loc];}
    function psig_modtype(x0){return [0, [8, x0], loc];}
    function psig_modtypesubst(x0){return [0, [9, x0], loc];}
    function psig_open(x0){return [0, [10, x0], loc];}
    function psig_include(x0){return [0, [11, x0], loc];}
    function psig_class(x0){return [0, [12, x0], loc];}
    function psig_class_type(x0){return [0, [13, x0], loc];}
    function psig_attribute(x0){return [0, [14, x0], loc];}
    function psig_extension(x0){
     return function(x1){return [0, [15, x0, x1], loc];};
    }
    function pstr_eval(x0){
     return function(x1){return [0, [0, x0, x1], loc];};
    }
    function pstr_value(x0){
     return function(x1){return [0, [1, x0, x1], loc];};
    }
    function pstr_primitive(x0){return [0, [2, x0], loc];}
    function pstr_type(x0){
     return function(x1){return [0, [3, x0, x1], loc];};
    }
    function pstr_typext(x0){return [0, [4, x0], loc];}
    function pstr_exception(x0){return [0, [5, x0], loc];}
    function pstr_module(x0){return [0, [6, x0], loc];}
    function pstr_recmodule(x0){return [0, [7, x0], loc];}
    function pstr_modtype(x0){return [0, [8, x0], loc];}
    function pstr_open(x0){return [0, [9, x0], loc];}
    function pstr_class(x0){return [0, [10, x0], loc];}
    function pstr_class_type(x0){return [0, [11, x0], loc];}
    function pstr_include(x0){return [0, [12, x0], loc];}
    function pstr_attribute(x0){return [0, [13, x0], loc];}
    function pstr_extension(x0){
     return function(x1){return [0, [14, x0, x1], loc];};
    }
    function toplevel_directive(name){
     return function(arg){return [0, name, arg, loc];};
    }
    function type_declaration(name){
     return function(params){
      return function(cstrs){
       return function(kind){
        return function(private$0){
         return function(manifest){
          return [0, name, params, cstrs, kind, private$0, manifest, 0, loc];};};};};};
    }
    function type_exception(constructor){return [0, constructor, loc, 0];}
    function type_extension(path){
     return function(params){
      return function(constructors){
       return function(private$0){
        return [0, path, params, constructors, private$0, loc, 0];};};};
    }
    function value_binding(pat){
     return function(expr){return [0, pat, expr, 0, loc];};
    }
    function value_description(name){
     return function(type){
      return function(prim){return [0, name, type, prim, 0, loc];};};
    }
    return [0,
            loc,
            value_description,
            value_binding,
            type_extension,
            type_exception,
            type_declaration,
            toplevel_directive,
            pstr_extension,
            pstr_attribute,
            pstr_include,
            pstr_class_type,
            pstr_class,
            pstr_open,
            pstr_modtype,
            pstr_recmodule,
            pstr_module,
            pstr_exception,
            pstr_typext,
            pstr_type,
            pstr_primitive,
            pstr_value,
            pstr_eval,
            psig_extension,
            psig_attribute,
            psig_class_type,
            psig_class,
            psig_include,
            psig_open,
            psig_modtypesubst,
            psig_modtype,
            psig_recmodule,
            psig_modsubst,
            psig_module,
            psig_exception,
            psig_typext,
            psig_typesubst,
            psig_type,
            psig_value,
            rinherit,
            rtag,
            position,
            ppat_open,
            ppat_extension,
            ppat_exception,
            ppat_unpack,
            ppat_lazy,
            ppat_type,
            ppat_constraint,
            ppat_or,
            ppat_array,
            ppat_record,
            ppat_variant,
            ppat_construct,
            ppat_tuple,
            ppat_interval,
            ppat_constant,
            ppat_alias,
            ppat_var,
            ppat_any,
            oinherit,
            otag,
            module_type_declaration,
            pmty_alias,
            pmty_extension,
            pmty_typeof,
            pmty_with,
            pmty_functor,
            pmty_signature,
            pmty_ident,
            module_substitution,
            pmod_extension,
            pmod_unpack,
            pmod_constraint,
            pmod_apply,
            pmod_functor,
            pmod_structure,
            pmod_ident,
            module_declaration,
            module_binding,
            location,
            letop,
            label_declaration,
            extension_constructor,
            pexp_unreachable,
            pexp_extension,
            pexp_letop,
            pexp_open,
            pexp_pack,
            pexp_newtype,
            pexp_object,
            pexp_poly,
            pexp_lazy,
            pexp_assert,
            pexp_letexception,
            pexp_letmodule,
            pexp_override,
            pexp_setinstvar,
            pexp_new,
            pexp_send,
            pexp_coerce,
            pexp_constraint,
            pexp_for,
            pexp_while,
            pexp_sequence,
            pexp_ifthenelse,
            pexp_array,
            pexp_setfield,
            pexp_field,
            pexp_record,
            pexp_variant,
            pexp_construct,
            pexp_tuple,
            pexp_try,
            pexp_match,
            pexp_apply,
            pexp_fun,
            pexp_function,
            pexp_let,
            pexp_constant,
            pexp_ident,
            pdir_bool,
            pdir_ident,
            pdir_int,
            pdir_string,
            ptyp_extension,
            ptyp_package,
            ptyp_poly,
            ptyp_variant,
            ptyp_alias,
            ptyp_class,
            ptyp_object,
            ptyp_constr,
            ptyp_tuple,
            ptyp_arrow,
            ptyp_var,
            ptyp_any,
            constructor_declaration,
            pctf_extension,
            pctf_attribute,
            pctf_constraint,
            pctf_method,
            pctf_val,
            pctf_inherit,
            pcty_open,
            pcty_extension,
            pcty_arrow,
            pcty_signature,
            pcty_constr,
            class_structure,
            class_signature,
            pcf_extension,
            pcf_attribute,
            pcf_initializer,
            pcf_constraint,
            pcf_method,
            pcf_val,
            pcf_inherit,
            pcl_open,
            pcl_extension,
            pcl_constraint,
            pcl_let,
            pcl_apply,
            pcl_fun,
            pcl_structure,
            pcl_constr,
            case$0,
            binding_op,
            attribute,
            open_infos,
            include_infos,
            class_infos];
   }
   var Ppxlib_Ast_builder_generated = [0, M, Make];
   runtime.caml_register_global
    (0, Ppxlib_Ast_builder_generated, "Ppxlib__Ast_builder_generated");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Loc
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function txt(t){return t[1];}
   function loc(t){return t[2];}
   function make(loc, txt){return [0, txt, loc];}
   function map(t, f){var _a_ = t[2]; return [0, caml_call1(f, t[1]), _a_];}
   var Ppxlib_Loc = [0, txt, loc, make, map];
   runtime.caml_register_global(0, Ppxlib_Loc, "Ppxlib__Loc");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Longident
//# unitInfo: Requires: Ppxlib__Import, Stdlib, Stdlib__Map, Stdlib__Printf, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ppxlib_Longident_flatten$1 = "Ppxlib.Longident.flatten",
    cst_src_longident_ml = "src/longident.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$2 = "",
    cst$3 = "()",
    cst$1 = ".",
    cst = " )",
    cst$0 = "( ",
    Stdlib = global_data.Stdlib,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Set = global_data.Stdlib__Set,
    compare = Ppxlib_Import[73][1],
    _a_ = [0, [2, 0, [12, 40, [2, 0, [12, 41, 0]]]], "%s(%s)"],
    cst_Ppxlib_Longident_flatten = cst_Ppxlib_Longident_flatten$1,
    cst_Ppxlib_Longident_flatten$0 = cst_Ppxlib_Longident_flatten$1,
    _b_ = [0, cst_src_longident_ml, 46, 10],
    _c_ = [1, 0],
    _d_ = [0, 0],
    _e_ = [1, 0],
    _f_ =
      [0,
       [11, "Ppxlib.Longident.parse(", [2, 0, [11, "): ", [3, 0, 0]]]],
       "Ppxlib.Longident.parse(%s): %S"],
    cst_empty_string = "empty string",
    cst_right_parenthesis_misplace = "right parenthesis misplaced",
    cst_application_in_path = "application in path",
    _g_ = [0, cst_src_longident_ml, 87, 16],
    cst_unbalanced_parenthesis = "unbalanced parenthesis";
   function is_normal_ident_char(param){
    a:
    {
     if(65 <= param){
      var _t_ = param - 91 | 0;
      if(5 < _t_ >>> 0){if(32 <= _t_) break a;} else if(4 !== _t_) break a;
     }
     else
      if(48 <= param){if(58 <= param) break a;} else if(39 !== param) break a;
     return 1;
    }
    return 0;
   }
   function short_name(string){
    a:
    {
     if
      (string !== "asr"
       &&
        string !== "land"
        &&
         string !== "lor"
         &&
          string !== "lsl"
          &&
           string !== "lsr"
           && string !== "lxor" && string !== "mod" && string !== "or"){
      var
       _r_ = caml_call2(Ppxlib_Import[99][61], string, is_normal_ident_char);
      break a;
     }
     var _r_ = 0;
    }
    if(_r_) return string;
    var _s_ = caml_call2(Stdlib[28], string, cst);
    return caml_call2(Stdlib[28], cst$0, _s_);
   }
   function name(param){
    switch(param[0]){
      case 0:
       var s = param[1]; return short_name(s);
      case 1:
       var
        b = param[2],
        a = param[1],
        _m_ = short_name(b),
        _n_ = caml_call2(Stdlib[28], cst$1, _m_),
        _o_ = name(a);
       return caml_call2(Stdlib[28], _o_, _n_);
      default:
       var b$0 = param[2], a$0 = param[1], _p_ = name(b$0), _q_ = name(a$0);
       return caml_call3(Stdlib_Printf[4], _a_, _q_, _p_);
    }
   }
   function sexp_of_t(t){return [0, name(t)];}
   function flatten_exn(lid$0){
    var accu = 0, param = lid$0;
    for(;;)
     switch(param[0]){
       case 0:
        var s = param[1]; return [0, s, accu];
       case 1:
        var s$0 = param[2], lid = param[1], accu$0 = [0, s$0, accu];
        accu = accu$0;
        param = lid;
        break;
       default: return caml_call1(Stdlib[1], cst_Ppxlib_Longident_flatten);
     }
   }
   function last_exn(param){
    switch(param[0]){
      case 0:
       var s = param[1]; return s;
      case 1:
       var s$0 = param[2]; return s$0;
      default: return caml_call1(Stdlib[1], cst_Ppxlib_Longident_flatten$0);
    }
   }
   function unflatten(init, l){
    return caml_call3
            (Ppxlib_Import[94][17],
             function(acc, s){return [1, acc, s];},
             init,
             l);
   }
   function parse(s$0){
    function invalid(variant){
     var _l_ = caml_call3(Stdlib_Printf[4], _f_, variant, s$0);
     return caml_call1(Stdlib[1], _l_);
    }
    if(caml_call2(Ppxlib_Import[77], caml_ml_string_length(s$0), 1))
     invalid(cst_empty_string);
    var len = caml_ml_string_length(s$0);
    a:
    {
     b:
     {
      c:
      {
       var lpos = -1, opened = 0, pos = 0;
       for(;;){
        if(caml_call2(Ppxlib_Import[81], pos, len)) break b;
        var match$0 = caml_string_get(s$0, pos);
        if(40 === match$0){
         var
          lpos$0 = caml_call2(Ppxlib_Import[76], opened, 0) ? pos : lpos,
          pos$0 = pos + 1 | 0,
          opened$0 = opened + 1 | 0;
         lpos = lpos$0;
         opened = opened$0;
         pos = pos$0;
        }
        else if(41 === match$0){
         var opened$1 = opened - 1 | 0;
         if(caml_call2(Ppxlib_Import[76], opened$1, 0)) break c;
         if(caml_call2(Ppxlib_Import[77], opened$1, 0)) break;
         var pos$1 = pos + 1 | 0;
         opened = opened$1;
         pos = pos$1;
        }
        else{var pos$2 = pos + 1 | 0; pos = pos$2;}
       }
       var par = _e_;
       break a;
      }
      var par = [0, [0, [0, lpos, pos]]];
      break a;
     }
     var par = caml_call2(Ppxlib_Import[78], opened, 0) ? _c_ : _d_;
    }
    var match$1 = caml_string_get(s$0, 0);
    if(0 !== par[0]) return invalid(cst_unbalanced_parenthesis);
    var _h_ = par[1];
    if(_h_){
     var match$2 = _h_[1], r = match$2[2], l$0 = match$2[1];
     if
      (caml_call2(Ppxlib_Import[92][8], r, caml_ml_string_length(s$0) - 1 | 0))
      invalid(cst_right_parenthesis_misplace);
     var
      _i_ =
        caml_call3
         (Ppxlib_Import[99][14], s$0, l$0 + 1 | 0, (r - l$0 | 0) - 1 | 0),
      inside = caml_call1(Ppxlib_Import[99][19], _i_),
      group =
        caml_call2(Ppxlib_Import[99][73], inside, cst$2) ? cst$3 : inside;
     if(caml_call2(Ppxlib_Import[92][5], l$0, 0)) return [0, group];
     var _j_ = caml_string_get(s$0, l$0 - 1 | 0);
     if(caml_call2(Ppxlib_Import[86][12], _j_, 46))
      return invalid(cst_application_in_path);
     var
      before = caml_call3(Ppxlib_Import[99][14], s$0, 0, l$0 - 1 | 0),
      match$3 = caml_call2(Ppxlib_Import[99][70], before, 46);
     if(! match$3)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
     var l$1 = match$3[2], s$1 = match$3[1];
     return [1, unflatten([0, s$1], l$1), group];
    }
    var _k_ = match$1 - 91 | 0;
    a:
    {
     if(5 < _k_ >>> 0){
      if(57 < _k_ + 26 >>> 0) break a;
     }
     else if(4 !== _k_) break a;
     var match = caml_call2(Ppxlib_Import[99][70], s$0, 46);
     if(! match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
     var l = match[2], s = match[1];
     return unflatten([0, s], l);
    }
    return [0, s$0];
   }
   var
    Map = caml_call1(Stdlib_Map[1], [0, compare]),
    Set = caml_call1(Stdlib_Set[1], [0, compare]),
    Ppxlib_Longident =
      [0, compare, sexp_of_t, flatten_exn, last_exn, parse, name, Map, Set];
   runtime.caml_register_global(32, Ppxlib_Longident, "Ppxlib__Longident");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_builder_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ppxlib_Ast_builder_intf = [0];
   runtime.caml_register_global
    (0, Ppxlib_Ast_builder_intf, "Ppxlib__Ast_builder_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_builder
//# unitInfo: Requires: Ppxlib__Ast_builder_generated, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Stdlib, Stdlib__Int32, Stdlib__Int64, Stdlib__Nativeint
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "()",
    cst$2 = "::",
    cst$3 = "[]",
    cst_unexpected_applicative_fun = "unexpected applicative functor type";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = "__",
    cst$0 = cst$4,
    cst = cst$4,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Ast_builder_generated = global_data.Ppxlib__Ast_builder_generated,
    Stdlib = global_data.Stdlib,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Longident = global_data.Ppxlib__Longident,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Int32 = global_data.Stdlib__Int32;
   function loc(x){return x[2];}
   function mk(loc, x){return [0, x, loc];}
   function map(f, t){var ___ = t[2]; return [0, caml_call1(f, t[1]), ___];}
   function map_lident(x){return map(function(x){return [0, x];}, x);}
   function lident(loc, x){
    var x$0 = caml_call1(Ppxlib_Longident[5], x);
    return [0, x$0, loc];
   }
   var
    Located = [0, loc, mk, map, map_lident, lident],
    include = Ppxlib_Ast_builder_generated[1],
    value_description = include[1],
    value_binding = include[2],
    type_extension = include[3],
    type_exception = include[4],
    type_declaration = include[5],
    toplevel_directive = include[6],
    pstr_extension = include[7],
    pstr_attribute = include[8],
    pstr_include = include[9],
    pstr_class_type = include[10],
    pstr_class = include[11],
    pstr_open = include[12],
    pstr_modtype = include[13],
    pstr_recmodule = include[14],
    pstr_module = include[15],
    pstr_exception = include[16],
    pstr_typext = include[17],
    pstr_type = include[18],
    pstr_primitive = include[19],
    pstr_value = include[20],
    pstr_eval = include[21],
    psig_extension = include[22],
    psig_attribute = include[23],
    psig_class_type = include[24],
    psig_class = include[25],
    psig_include = include[26],
    psig_open = include[27],
    psig_modtypesubst = include[28],
    psig_modtype = include[29],
    psig_recmodule = include[30],
    psig_modsubst = include[31],
    psig_module = include[32],
    psig_exception = include[33],
    psig_typext = include[34],
    psig_typesubst = include[35],
    psig_type = include[36],
    psig_value = include[37],
    rinherit = include[38],
    rtag = include[39],
    position = include[40],
    ppat_open = include[41],
    ppat_extension = include[42],
    ppat_exception = include[43],
    ppat_unpack = include[44],
    ppat_lazy = include[45],
    ppat_type = include[46],
    ppat_constraint = include[47],
    ppat_or = include[48],
    ppat_array = include[49],
    ppat_record = include[50],
    ppat_variant = include[51],
    ppat_construct = include[52],
    ppat_tuple = include[53],
    ppat_interval = include[54],
    ppat_constant = include[55],
    ppat_alias = include[56],
    ppat_var = include[57],
    ppat_any = include[58],
    oinherit = include[59],
    otag = include[60],
    module_type_declaration = include[61],
    pmty_alias = include[62],
    pmty_extension = include[63],
    pmty_typeof = include[64],
    pmty_with = include[65],
    pmty_functor = include[66],
    pmty_signature = include[67],
    pmty_ident = include[68],
    module_substitution = include[69],
    pmod_extension = include[70],
    pmod_unpack = include[71],
    pmod_constraint = include[72],
    pmod_apply = include[73],
    pmod_functor = include[74],
    pmod_structure = include[75],
    pmod_ident = include[76],
    module_declaration = include[77],
    module_binding = include[78],
    location = include[79],
    letop = include[80],
    label_declaration = include[81],
    extension_constructor = include[82],
    pexp_unreachable = include[83],
    pexp_extension = include[84],
    pexp_letop = include[85],
    pexp_open = include[86],
    pexp_pack = include[87],
    pexp_newtype = include[88],
    pexp_object = include[89],
    pexp_poly = include[90],
    pexp_lazy = include[91],
    pexp_assert = include[92],
    pexp_letexception = include[93],
    pexp_letmodule = include[94],
    pexp_override = include[95],
    pexp_setinstvar = include[96],
    pexp_new = include[97],
    pexp_send = include[98],
    pexp_coerce = include[99],
    pexp_constraint = include[100],
    pexp_for = include[101],
    pexp_while = include[102],
    pexp_sequence = include[103],
    pexp_ifthenelse = include[104],
    pexp_array = include[105],
    pexp_setfield = include[106],
    pexp_field = include[107],
    pexp_record = include[108],
    pexp_variant = include[109],
    pexp_construct = include[110],
    pexp_tuple = include[111],
    pexp_try = include[112],
    pexp_match = include[113],
    pexp_apply = include[114],
    pexp_fun = include[115],
    pexp_function = include[116],
    pexp_let = include[117],
    pexp_constant = include[118],
    pexp_ident = include[119],
    pdir_bool = include[120],
    pdir_ident = include[121],
    pdir_int = include[122],
    pdir_string = include[123],
    ptyp_extension = include[124],
    ptyp_package = include[125],
    ptyp_poly = include[126],
    ptyp_variant = include[127],
    ptyp_alias = include[128],
    ptyp_class = include[129],
    ptyp_object = include[130],
    ptyp_constr = include[131],
    ptyp_tuple = include[132],
    ptyp_arrow = include[133],
    ptyp_var = include[134],
    ptyp_any = include[135],
    pctf_extension = include[137],
    pctf_attribute = include[138],
    pctf_constraint = include[139],
    pctf_method = include[140],
    pctf_val = include[141],
    pctf_inherit = include[142],
    pcty_open = include[143],
    pcty_extension = include[144],
    pcty_arrow = include[145],
    pcty_signature = include[146],
    pcty_constr = include[147],
    class_structure = include[148],
    class_signature = include[149],
    pcf_extension = include[150],
    pcf_attribute = include[151],
    pcf_initializer = include[152],
    pcf_constraint = include[153],
    pcf_method = include[154],
    pcf_val = include[155],
    pcf_inherit = include[156],
    pcl_open = include[157],
    pcl_extension = include[158],
    pcl_constraint = include[159],
    pcl_let = include[160],
    pcl_apply = include[161],
    pcl_fun = include[162],
    pcl_structure = include[163],
    pcl_constr = include[164],
    case$0 = include[165],
    binding_op = include[166],
    attribute = include[167],
    open_infos = include[168],
    include_infos = include[169],
    class_infos = include[170],
    _a_ = include[136];
   function constructor_declaration(loc, name, vars, args, res, param){return caml_call5(_a_, loc, name, vars, args, res);
   }
   var
    Latest = [0, ppat_construct, constructor_declaration],
    cst_Ppxlib_Ast_builder_nonrec_ =
      "Ppxlib.Ast_builder.nonrec_type_declaration: don't use this function",
    _b_ = [0, 108],
    _c_ = [0, 76],
    _d_ = [0, 110],
    _e_ = [0, 108],
    _f_ = [0, 76],
    _g_ = [0, 110],
    _h_ = [0, cst$2],
    _i_ = [0, cst$3],
    _j_ = [0, cst$2],
    _k_ = [0, cst$3],
    _l_ =
      [0,
       [11, cst_unexpected_applicative_fun, 0],
       cst_unexpected_applicative_fun];
   function ppat_construct$0(loc, lid, p){
    return [0,
            [5,
             lid,
             caml_call2
              (Ppxlib_Import[95][3], p, function(p){return [0, 0, p];})],
            loc,
            0,
            0];
   }
   function constructor_declaration$0(loc, name, args, res){return [0, name, 0, args, res, loc, 0];
   }
   function pstr_value_list(loc, rec_flag, vbs){
    return vbs ? [0, caml_call3(pstr_value, loc, rec_flag, vbs), 0] : 0;
   }
   function nonrec_type_declaration(_Z_, _Y_, _X_, _W_, _V_, _U_, param){return caml_call1(Stdlib[2], cst_Ppxlib_Ast_builder_nonrec_);
   }
   function eint(loc, t){
    return caml_call2
            (pexp_constant, loc, [0, caml_call1(Ppxlib_Import[92][2], t), 0]);
   }
   function echar(loc, t){return caml_call2(pexp_constant, loc, [1, t]);}
   function estring(loc, t){
    return caml_call2(pexp_constant, loc, [2, t, loc, 0]);
   }
   function efloat(loc, t){return caml_call2(pexp_constant, loc, [3, t, 0]);}
   function eint32(loc, t){
    return caml_call2
            (pexp_constant, loc, [0, caml_call1(Stdlib_Int32[14], t), _b_]);
   }
   function eint64(loc, t){
    return caml_call2
            (pexp_constant, loc, [0, caml_call1(Stdlib_Int64[14], t), _c_]);
   }
   function enativeint(loc, t){
    return caml_call2
            (pexp_constant,
             loc,
             [0, caml_call1(Stdlib_Nativeint[15], t), _d_]);
   }
   function pint(loc, t){
    return caml_call2
            (ppat_constant, loc, [0, caml_call1(Ppxlib_Import[92][2], t), 0]);
   }
   function pchar(loc, t){return caml_call2(ppat_constant, loc, [1, t]);}
   function pstring(loc, t){
    return caml_call2(ppat_constant, loc, [2, t, loc, 0]);
   }
   function pfloat(loc, t){return caml_call2(ppat_constant, loc, [3, t, 0]);}
   function pint32(loc, t){
    return caml_call2
            (ppat_constant, loc, [0, caml_call1(Stdlib_Int32[14], t), _e_]);
   }
   function pint64(loc, t){
    return caml_call2
            (ppat_constant, loc, [0, caml_call1(Stdlib_Int64[14], t), _f_]);
   }
   function pnativeint(loc, t){
    return caml_call2
            (ppat_constant,
             loc,
             [0, caml_call1(Stdlib_Nativeint[15], t), _g_]);
   }
   function ebool(loc, t){
    var _T_ = caml_call1(Ppxlib_Import[84][1], t);
    return caml_call3
            (pexp_construct, loc, caml_call2(Located[5], loc, _T_), 0);
   }
   function pbool(loc, t){
    var _S_ = caml_call1(Ppxlib_Import[84][1], t);
    return ppat_construct$0(loc, caml_call2(Located[5], loc, _S_), 0);
   }
   function evar(loc, v){
    var _R_ = caml_call1(Ppxlib_Longident[5], v);
    return caml_call2(pexp_ident, loc, caml_call2(Located[2], loc, _R_));
   }
   function pvar(loc, v){
    return caml_call2(ppat_var, loc, caml_call2(Located[2], loc, v));
   }
   function eunit(loc){
    return caml_call3
            (pexp_construct, loc, caml_call2(Located[5], loc, cst), 0);
   }
   function punit(loc){
    return ppat_construct$0(loc, caml_call2(Located[5], loc, cst$0), 0);
   }
   function pexp_tuple$0(loc, l){
    if(l && ! l[2]){var x = l[1]; return x;}
    return caml_call2(pexp_tuple, loc, l);
   }
   function ppat_tuple$0(loc, l){
    if(l && ! l[2]){var x = l[1]; return x;}
    return caml_call2(ppat_tuple, loc, l);
   }
   function ptyp_tuple$0(loc, l){
    if(l && ! l[2]){var x = l[1]; return x;}
    return caml_call2(ptyp_tuple, loc, l);
   }
   function pexp_tuple_opt(loc, l){return l ? [0, pexp_tuple$0(loc, l)] : 0;}
   function ppat_tuple_opt(loc, l){return l ? [0, ppat_tuple$0(loc, l)] : 0;}
   function ptyp_poly$0(loc, vars, ty){
    return vars ? caml_call3(ptyp_poly, loc, vars, ty) : ty;
   }
   function pexp_apply$0(loc, e, el){
    if(! el) return e;
    var _N_ = e[1];
    a:
    if(typeof _N_ !== "number" && 5 === _N_[0]){
     if(e[4]) break a;
     var
      args = _N_[2],
      e$0 = _N_[1],
      _O_ = e$0[4],
      _P_ = e$0[3],
      _Q_ = e$0[2];
     return [0,
             [5, e$0, caml_call2(Ppxlib_Import[100], args, el)],
             _Q_,
             _P_,
             _O_];
    }
    return caml_call3(pexp_apply, loc, e, el);
   }
   function eapply(loc, e, el){
    return pexp_apply$0
            (loc,
             e,
             caml_call2
              (Ppxlib_Import[94][55], el, function(e){return [0, 0, e];}));
   }
   function eabstract(loc, ps, e){
    return caml_call3
            (Ppxlib_Import[94][57],
             ps,
             e,
             function(p, e){return caml_call5(pexp_fun, loc, 0, 0, p, e);});
   }
   function esequence(loc, el){
    var match = caml_call1(Ppxlib_Import[94][9], el);
    if(! match) return eunit(loc);
    var tl = match[2], hd = match[1];
    return caml_call3
            (Ppxlib_Import[94][17],
             function(acc, e){return caml_call3(pexp_sequence, loc, e, acc);},
             hd,
             tl);
   }
   function pconstruct(cd, arg){
    var _M_ = caml_call1(Located[4], cd[1]);
    return ppat_construct$0(cd[5], _M_, arg);
   }
   function econstruct(cd, arg){
    var _L_ = caml_call1(Located[4], cd[1]);
    return caml_call3(pexp_construct, cd[5], _L_, arg);
   }
   function elist_tail(loc, l, tail){
    if(! l) return tail;
    var
     l$0 = l[2],
     x = l[1],
     _K_ = [0, pexp_tuple$0(loc, [0, x, [0, elist_tail(loc, l$0, tail), 0]])];
    return caml_call3
            (pexp_construct, loc, caml_call2(Located[2], loc, _h_), _K_);
   }
   function elist(loc, l){
    var
     tail =
       caml_call3(pexp_construct, loc, caml_call2(Located[2], loc, _i_), 0);
    return elist_tail(loc, l, tail);
   }
   function plist_tail(loc, l, tail){
    if(! l) return tail;
    var
     l$0 = l[2],
     x = l[1],
     _J_ = [0, ppat_tuple$0(loc, [0, x, [0, plist_tail(loc, l$0, tail), 0]])];
    return ppat_construct$0(loc, caml_call2(Located[2], loc, _j_), _J_);
   }
   function plist(loc, l){
    var tail = ppat_construct$0(loc, caml_call2(Located[2], loc, _k_), 0);
    return plist_tail(loc, l, tail);
   }
   function unapplied_type_constr_conv_wit(loc, ident, f){
    switch(ident[0]){
      case 0:
       var n = ident[1];
       return caml_call2(pexp_ident, loc, [0, [0, caml_call1(f, n)], loc]);
      case 1:
       var n$0 = ident[2], path = ident[1];
       return caml_call2
               (pexp_ident, loc, [0, [1, path, caml_call1(f, n$0)], loc]);
      default: return caml_call2(Ppxlib_Location[5], [0, loc], _l_);
    }
   }
   function type_constr_conv(apply_loc, param, f, args){
    var loc = param[2], longident = param[1], loc$0 = [0, loc[1], loc[2], 1];
    if(1 === longident[0]){
     var module_path = longident[1];
     if(2 === module_path[0]){
      var
       n = longident[2],
       suffix_n =
         function(functor){
          var
           _H_ = caml_call2(Stdlib[28], cst$1, n),
           _I_ = caml_call1(Ppxlib_Import[99][69], functor);
          return caml_call2(Stdlib[28], _I_, _H_);
         };
      a:
      {
       b:
       {
        var functor_args = 0, param$0 = module_path;
        c:
        for(;;)
         switch(param$0[0]){
           case 0:
            break b;
           case 1:
            break c;
           default:
            var
             arg = param$0[2],
             rest = param$0[1],
             functor_args$0 = [0, arg, functor_args];
            functor_args = functor_args$0;
            param$0 = rest;
         }
        var
         functor$0 = param$0[2],
         functor_path = param$0[1],
         match = [0, [1, functor_path, suffix_n(functor$0)]];
        break a;
       }
       var functor = param$0[1], match = [0, [0, suffix_n(functor)]];
      }
      var
       ident$0 = match[1],
       _F_ =
         caml_call2
          (Ppxlib_Import[94][55],
           functor_args,
           function(path){
            return caml_call2
                    (pexp_pack,
                     loc$0,
                     caml_call2(pmod_ident, loc$0, [0, path, loc$0]));
           }),
       _G_ = caml_call2(Ppxlib_Import[100], _F_, args);
      return eapply
              (apply_loc,
               unapplied_type_constr_conv_wit(loc$0, ident$0, f),
               _G_);
     }
    }
    var ident = unapplied_type_constr_conv_wit(loc$0, longident, f);
    return args ? eapply(apply_loc, ident, args) : ident;
   }
   function unapplied_type_constr_conv(loc, longident, f){return type_constr_conv(loc, longident, f, 0);
   }
   function gather_args(n, x){
    if(caml_call2(Ppxlib_Import[76], n, 0)) return [0, [0, x, 0]];
    var _D_ = x[1];
    a:
    if(typeof _D_ !== "number" && 5 === _D_[0]){
     if(x[4]) break a;
     var
      args = _D_[2],
      body = _D_[1],
      _E_ = caml_call1(Ppxlib_Import[94][1], args);
     if(! caml_call2(Ppxlib_Import[80], _E_, n)) return 0;
     var
      match =
        gather_args(n - caml_call1(Ppxlib_Import[94][1], args) | 0, body);
     if(! match) return 0;
     var match$0 = match[1], args$0 = match$0[2], body$0 = match$0[1];
     return [0, [0, body$0, caml_call2(Ppxlib_Import[100], args$0, args)]];
    }
    return 0;
   }
   function eta_reduce(expr$0){
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       f:
       {
        g:
        h:
        i:
        {
         j:
         {
          k:
          l:
          {
           m:
           {
            var acc = 0, expr = expr$0;
            n:
            for(;;){
             var _q_ = expr[1];
             if(typeof _q_ === "number") break d;
             if(4 !== _q_[0]) break c;
             if(_q_[2]) break e;
             if(expr[4]) break f;
             var
              body = _q_[4],
              subpat = _q_[3],
              label = _q_[1],
              _r_ = subpat[1];
             if(typeof _r_ === "number") break i;
             switch(_r_[0]){
               case 0:
                if(subpat[4]) break j;
                var name = _r_[1], acc$0 = [0, [0, label, name, 0], acc];
                acc = acc$0;
                expr = body;
                break;
               case 10:
                var _s_ = _r_[1], _t_ = _s_[1];
                if(typeof _t_ === "number") break l;
                if(0 !== _t_[0]) break k;
                if(_s_[4]) break m;
                if(subpat[4]) break n;
                var
                 ty = _r_[2],
                 name$0 = _t_[1],
                 acc$1 = [0, [0, label, name$0, [0, ty]], acc];
                acc = acc$1;
                expr = body;
                break;
               default: break h;
             }
            }
            break g;
           }
           break g;
          }
          break g;
         }
         break g;
        }
        var match = [0, caml_call1(Ppxlib_Import[94][9], acc)];
        break a;
       }
       break b;
      }
      break b;
     }
     var match = [0, caml_call1(Ppxlib_Import[94][9], acc)];
    }
    var
     params = match[1],
     match$0 = gather_args(caml_call1(Ppxlib_Import[94][1], params), expr);
    if(! match$0) return 0;
    var _v_ = match$0[1], f_ident = _v_[1], _w_ = f_ident[1];
    if(typeof _w_ !== "number" && 0 === _w_[0]){
     var args = _v_[2];
     if
      (!
       caml_call3
        (Ppxlib_Import[94][23],
         function(_y_, param){
          var
           param_label = param[1],
           arg = _y_[2],
           arg_label = _y_[1],
           param$0 = param[2],
           _z_ = caml_call2(Ppxlib_Import[73][3], arg_label, param_label);
          if(_z_){
           var _A_ = arg[1];
           a:
           if(typeof _A_ !== "number" && 0 === _A_[0]){
            var _C_ = _A_[1][1];
            if(0 !== _C_[0]) break a;
            if(arg[4]) break a;
            var name = _C_[1];
            return caml_call2(Ppxlib_Import[99][73], name, param$0[1]);
           }
           var _B_ = 0;
          }
          else
           var _B_ = _z_;
          return _B_;
         },
         args,
         params))
      return 0;
     var loc = expr$0[2];
     if
      (caml_call2
        (Ppxlib_Import[94][22],
         function(param){
          var ty = param[3];
          return caml_call1(Ppxlib_Import[95][1], ty);
         },
         params))
      var
       _u_ = caml_call1(ptyp_any, loc),
       ty$0 =
         caml_call3
          (Ppxlib_Import[94][57],
           params,
           _u_,
           function(param, acc){
            var ty_opt = param[3], param_label = param[1], loc = param[2][2];
            if(ty_opt)
             var ty = ty_opt[1], ty$0 = ty;
            else
             var ty$0 = caml_call1(ptyp_any, loc);
            return caml_call4(ptyp_arrow, loc, param_label, ty$0, acc);
           }),
       _x_ = caml_call3(pexp_constraint, loc, f_ident, ty$0);
     else
      var _x_ = f_ident;
     return [0, _x_];
    }
    return 0;
   }
   function eta_reduce_if_possible(expr){
    var _p_ = eta_reduce(expr);
    return caml_call2(Ppxlib_Import[95][4], _p_, expr);
   }
   function eta_reduce_if_possible_and_non(expr, rec_flag){return rec_flag ? expr : eta_reduce_if_possible(expr);
   }
   function Make(Loc){
    var
     include = caml_call1(Ppxlib_Ast_builder_generated[2], Loc),
     loc = include[1],
     value_description = include[2],
     value_binding = include[3],
     type_extension = include[4],
     type_exception = include[5],
     type_declaration = include[6],
     toplevel_directive = include[7],
     pstr_extension = include[8],
     pstr_attribute = include[9],
     pstr_include = include[10],
     pstr_class_type = include[11],
     pstr_class = include[12],
     pstr_open = include[13],
     pstr_modtype = include[14],
     pstr_recmodule = include[15],
     pstr_module = include[16],
     pstr_exception = include[17],
     pstr_typext = include[18],
     pstr_type = include[19],
     pstr_primitive = include[20],
     pstr_value = include[21],
     pstr_eval = include[22],
     psig_extension = include[23],
     psig_attribute = include[24],
     psig_class_type = include[25],
     psig_class = include[26],
     psig_include = include[27],
     psig_open = include[28],
     psig_modtypesubst = include[29],
     psig_modtype = include[30],
     psig_recmodule = include[31],
     psig_modsubst = include[32],
     psig_module = include[33],
     psig_exception = include[34],
     psig_typext = include[35],
     psig_typesubst = include[36],
     psig_type = include[37],
     psig_value = include[38],
     rinherit = include[39],
     rtag = include[40],
     position = include[41],
     ppat_open = include[42],
     ppat_extension = include[43],
     ppat_exception = include[44],
     ppat_unpack = include[45],
     ppat_lazy = include[46],
     ppat_type = include[47],
     ppat_constraint = include[48],
     ppat_or = include[49],
     ppat_array = include[50],
     ppat_record = include[51],
     ppat_variant = include[52],
     ppat_construct = include[53],
     ppat_interval = include[55],
     ppat_constant = include[56],
     ppat_alias = include[57],
     ppat_var = include[58],
     ppat_any = include[59],
     oinherit = include[60],
     otag = include[61],
     module_type_declaration = include[62],
     pmty_alias = include[63],
     pmty_extension = include[64],
     pmty_typeof = include[65],
     pmty_with = include[66],
     pmty_functor = include[67],
     pmty_signature = include[68],
     pmty_ident = include[69],
     module_substitution = include[70],
     pmod_extension = include[71],
     pmod_unpack = include[72],
     pmod_constraint = include[73],
     pmod_apply = include[74],
     pmod_functor = include[75],
     pmod_structure = include[76],
     pmod_ident = include[77],
     module_declaration = include[78],
     module_binding = include[79],
     location = include[80],
     letop = include[81],
     label_declaration = include[82],
     extension_constructor = include[83],
     pexp_unreachable = include[84],
     pexp_extension = include[85],
     pexp_letop = include[86],
     pexp_open = include[87],
     pexp_pack = include[88],
     pexp_newtype = include[89],
     pexp_object = include[90],
     pexp_poly = include[91],
     pexp_lazy = include[92],
     pexp_assert = include[93],
     pexp_letexception = include[94],
     pexp_letmodule = include[95],
     pexp_override = include[96],
     pexp_setinstvar = include[97],
     pexp_new = include[98],
     pexp_send = include[99],
     pexp_coerce = include[100],
     pexp_constraint = include[101],
     pexp_for = include[102],
     pexp_while = include[103],
     pexp_sequence = include[104],
     pexp_ifthenelse = include[105],
     pexp_array = include[106],
     pexp_setfield = include[107],
     pexp_field = include[108],
     pexp_record = include[109],
     pexp_variant = include[110],
     pexp_construct = include[111],
     pexp_try = include[113],
     pexp_match = include[114],
     pexp_fun = include[116],
     pexp_function = include[117],
     pexp_let = include[118],
     pexp_constant = include[119],
     pexp_ident = include[120],
     pdir_bool = include[121],
     pdir_ident = include[122],
     pdir_int = include[123],
     pdir_string = include[124],
     ptyp_extension = include[125],
     ptyp_package = include[126],
     ptyp_variant = include[128],
     ptyp_alias = include[129],
     ptyp_class = include[130],
     ptyp_object = include[131],
     ptyp_constr = include[132],
     ptyp_arrow = include[134],
     ptyp_var = include[135],
     ptyp_any = include[136],
     pctf_extension = include[138],
     pctf_attribute = include[139],
     pctf_constraint = include[140],
     pctf_method = include[141],
     pctf_val = include[142],
     pctf_inherit = include[143],
     pcty_open = include[144],
     pcty_extension = include[145],
     pcty_arrow = include[146],
     pcty_signature = include[147],
     pcty_constr = include[148],
     class_structure = include[149],
     class_signature = include[150],
     pcf_extension = include[151],
     pcf_attribute = include[152],
     pcf_initializer = include[153],
     pcf_constraint = include[154],
     pcf_method = include[155],
     pcf_val = include[156],
     pcf_inherit = include[157],
     pcl_open = include[158],
     pcl_extension = include[159],
     pcl_constraint = include[160],
     pcl_let = include[161],
     pcl_apply = include[162],
     pcl_fun = include[163],
     pcl_structure = include[164],
     pcl_constr = include[165],
     case$0 = include[166],
     binding_op = include[167],
     attribute = include[168],
     open_infos = include[169],
     include_infos = include[170],
     class_infos = include[171],
     _m_ = include[137];
    function constructor_declaration(name, vars, args, res, param){return caml_call4(_m_, name, vars, args, res);
    }
    var Latest = [0, ppat_construct, constructor_declaration];
    function ppat_construct$0(lid, p){
     return [0,
             [5,
              lid,
              caml_call2
               (Ppxlib_Import[95][3], p, function(p){return [0, 0, p];})],
             loc,
             0,
             0];
    }
    function constructor_declaration$0(name, args, res){return [0, name, 0, args, res, loc, 0];
    }
    function nonrec_type_declaration$0
    (name, params, cstrs, kind, private$0, manifest){
     return nonrec_type_declaration
             (loc, name, params, cstrs, kind, private$0, manifest);
    }
    var
     map = Located[3],
     map_lident = Located[4],
     _n_ = Located[2],
     _o_ = Located[5];
    function loc$0(param){return Loc[1];}
    function mk(x){return caml_call2(_n_, Loc[1], x);}
    function lident(x){return caml_call2(_o_, Loc[1], x);}
    function pexp_tuple(l){return pexp_tuple$0(loc, l);}
    function ppat_tuple(l){return ppat_tuple$0(loc, l);}
    function ptyp_tuple(l){return ptyp_tuple$0(loc, l);}
    function pexp_tuple_opt$0(l){return pexp_tuple_opt(loc, l);}
    function ppat_tuple_opt$0(l){return ppat_tuple_opt(loc, l);}
    function ptyp_poly(vars, ty){return ptyp_poly$0(loc, vars, ty);}
    function pexp_apply(e, el){return pexp_apply$0(loc, e, el);}
    function eint$0(t){return eint(loc, t);}
    function echar$0(t){return echar(loc, t);}
    function estring$0(t){return estring(loc, t);}
    function efloat$0(t){return efloat(loc, t);}
    function eint32$0(t){return eint32(loc, t);}
    function eint64$0(t){return eint64(loc, t);}
    function enativeint$0(t){return enativeint(loc, t);}
    function ebool$0(t){return ebool(loc, t);}
    function evar$0(t){return evar(loc, t);}
    function pint$0(t){return pint(loc, t);}
    function pchar$0(t){return pchar(loc, t);}
    function pstring$0(t){return pstring(loc, t);}
    function pfloat$0(t){return pfloat(loc, t);}
    function pint32$0(t){return pint32(loc, t);}
    function pint64$0(t){return pint64(loc, t);}
    function pnativeint$0(t){return pnativeint(loc, t);}
    function pbool$0(t){return pbool(loc, t);}
    function pvar$0(t){return pvar(loc, t);}
    var eunit$0 = eunit(loc), punit$0 = punit(loc);
    function eapply$0(e, el){return eapply(loc, e, el);}
    function eabstract$0(ps, e){return eabstract(loc, ps, e);}
    function esequence$0(el){return esequence(loc, el);}
    function elist_tail$0(l, tail){return elist_tail(loc, l, tail);}
    function plist_tail$0(l, tail){return plist_tail(loc, l, tail);}
    function elist$0(l){return elist(loc, l);}
    function plist$0(l){return plist(loc, l);}
    function type_constr_conv$0(ident, f, args){
     return type_constr_conv(loc, ident, f, args);
    }
    function unapplied_type_constr_conv$0(ident, f){
     return unapplied_type_constr_conv(loc, ident, f);
    }
    return [0,
            [0, loc$0, mk, map, map_lident, lident],
            loc,
            value_description,
            value_binding,
            type_extension,
            type_exception,
            type_declaration,
            toplevel_directive,
            pstr_extension,
            pstr_attribute,
            pstr_include,
            pstr_class_type,
            pstr_class,
            pstr_open,
            pstr_modtype,
            pstr_recmodule,
            pstr_module,
            pstr_exception,
            pstr_typext,
            pstr_type,
            pstr_primitive,
            pstr_value,
            pstr_eval,
            psig_extension,
            psig_attribute,
            psig_class_type,
            psig_class,
            psig_include,
            psig_open,
            psig_modtypesubst,
            psig_modtype,
            psig_recmodule,
            psig_modsubst,
            psig_module,
            psig_exception,
            psig_typext,
            psig_typesubst,
            psig_type,
            psig_value,
            rinherit,
            rtag,
            position,
            ppat_open,
            ppat_extension,
            ppat_exception,
            ppat_unpack,
            ppat_lazy,
            ppat_type,
            ppat_constraint,
            ppat_or,
            ppat_array,
            ppat_record,
            ppat_variant,
            ppat_tuple,
            ppat_interval,
            ppat_constant,
            ppat_alias,
            ppat_var,
            ppat_any,
            oinherit,
            otag,
            module_type_declaration,
            pmty_alias,
            pmty_extension,
            pmty_typeof,
            pmty_with,
            pmty_functor,
            pmty_signature,
            pmty_ident,
            module_substitution,
            pmod_extension,
            pmod_unpack,
            pmod_constraint,
            pmod_apply,
            pmod_functor,
            pmod_structure,
            pmod_ident,
            module_declaration,
            module_binding,
            location,
            letop,
            label_declaration,
            extension_constructor,
            pexp_unreachable,
            pexp_extension,
            pexp_letop,
            pexp_open,
            pexp_pack,
            pexp_newtype,
            pexp_object,
            pexp_poly,
            pexp_lazy,
            pexp_assert,
            pexp_letexception,
            pexp_letmodule,
            pexp_override,
            pexp_setinstvar,
            pexp_new,
            pexp_send,
            pexp_coerce,
            pexp_constraint,
            pexp_for,
            pexp_while,
            pexp_sequence,
            pexp_ifthenelse,
            pexp_array,
            pexp_setfield,
            pexp_field,
            pexp_record,
            pexp_variant,
            pexp_construct,
            pexp_tuple,
            pexp_try,
            pexp_match,
            pexp_apply,
            pexp_fun,
            pexp_function,
            pexp_let,
            pexp_constant,
            pexp_ident,
            pdir_bool,
            pdir_ident,
            pdir_int,
            pdir_string,
            ptyp_extension,
            ptyp_package,
            ptyp_poly,
            ptyp_variant,
            ptyp_alias,
            ptyp_class,
            ptyp_object,
            ptyp_constr,
            ptyp_tuple,
            ptyp_arrow,
            ptyp_var,
            ptyp_any,
            pctf_extension,
            pctf_attribute,
            pctf_constraint,
            pctf_method,
            pctf_val,
            pctf_inherit,
            pcty_open,
            pcty_extension,
            pcty_arrow,
            pcty_signature,
            pcty_constr,
            class_structure,
            class_signature,
            pcf_extension,
            pcf_attribute,
            pcf_initializer,
            pcf_constraint,
            pcf_method,
            pcf_val,
            pcf_inherit,
            pcl_open,
            pcl_extension,
            pcl_constraint,
            pcl_let,
            pcl_apply,
            pcl_fun,
            pcl_structure,
            pcl_constr,
            case$0,
            binding_op,
            attribute,
            open_infos,
            include_infos,
            class_infos,
            eint$0,
            echar$0,
            estring$0,
            efloat$0,
            eint32$0,
            eint64$0,
            enativeint$0,
            ebool$0,
            pint$0,
            pchar$0,
            pstring$0,
            pfloat$0,
            pint32$0,
            pint64$0,
            pnativeint$0,
            pbool$0,
            eunit$0,
            punit$0,
            evar$0,
            pvar$0,
            eapply$0,
            eabstract$0,
            esequence$0,
            ppat_tuple_opt$0,
            pexp_tuple_opt$0,
            pconstruct,
            econstruct,
            elist_tail$0,
            elist$0,
            plist_tail$0,
            plist$0,
            pstr_value_list,
            nonrec_type_declaration$0,
            unapplied_type_constr_conv$0,
            type_constr_conv$0,
            eta_reduce,
            eta_reduce_if_possible,
            eta_reduce_if_possible_and_non,
            Latest,
            ppat_construct$0,
            constructor_declaration$0];
   }
   function make(loc){return Make([0, loc]);}
   var
    Ppxlib_Ast_builder =
      [0,
       [0,
        Located,
        value_description,
        value_binding,
        type_extension,
        type_exception,
        type_declaration,
        toplevel_directive,
        pstr_extension,
        pstr_attribute,
        pstr_include,
        pstr_class_type,
        pstr_class,
        pstr_open,
        pstr_modtype,
        pstr_recmodule,
        pstr_module,
        pstr_exception,
        pstr_typext,
        pstr_type,
        pstr_primitive,
        pstr_value,
        pstr_eval,
        psig_extension,
        psig_attribute,
        psig_class_type,
        psig_class,
        psig_include,
        psig_open,
        psig_modtypesubst,
        psig_modtype,
        psig_recmodule,
        psig_modsubst,
        psig_module,
        psig_exception,
        psig_typext,
        psig_typesubst,
        psig_type,
        psig_value,
        rinherit,
        rtag,
        position,
        ppat_open,
        ppat_extension,
        ppat_exception,
        ppat_unpack,
        ppat_lazy,
        ppat_type,
        ppat_constraint,
        ppat_or,
        ppat_array,
        ppat_record,
        ppat_variant,
        ppat_tuple$0,
        ppat_interval,
        ppat_constant,
        ppat_alias,
        ppat_var,
        ppat_any,
        oinherit,
        otag,
        module_type_declaration,
        pmty_alias,
        pmty_extension,
        pmty_typeof,
        pmty_with,
        pmty_functor,
        pmty_signature,
        pmty_ident,
        module_substitution,
        pmod_extension,
        pmod_unpack,
        pmod_constraint,
        pmod_apply,
        pmod_functor,
        pmod_structure,
        pmod_ident,
        module_declaration,
        module_binding,
        location,
        letop,
        label_declaration,
        extension_constructor,
        pexp_unreachable,
        pexp_extension,
        pexp_letop,
        pexp_open,
        pexp_pack,
        pexp_newtype,
        pexp_object,
        pexp_poly,
        pexp_lazy,
        pexp_assert,
        pexp_letexception,
        pexp_letmodule,
        pexp_override,
        pexp_setinstvar,
        pexp_new,
        pexp_send,
        pexp_coerce,
        pexp_constraint,
        pexp_for,
        pexp_while,
        pexp_sequence,
        pexp_ifthenelse,
        pexp_array,
        pexp_setfield,
        pexp_field,
        pexp_record,
        pexp_variant,
        pexp_construct,
        pexp_tuple$0,
        pexp_try,
        pexp_match,
        pexp_apply$0,
        pexp_fun,
        pexp_function,
        pexp_let,
        pexp_constant,
        pexp_ident,
        pdir_bool,
        pdir_ident,
        pdir_int,
        pdir_string,
        ptyp_extension,
        ptyp_package,
        ptyp_poly$0,
        ptyp_variant,
        ptyp_alias,
        ptyp_class,
        ptyp_object,
        ptyp_constr,
        ptyp_tuple$0,
        ptyp_arrow,
        ptyp_var,
        ptyp_any,
        pctf_extension,
        pctf_attribute,
        pctf_constraint,
        pctf_method,
        pctf_val,
        pctf_inherit,
        pcty_open,
        pcty_extension,
        pcty_arrow,
        pcty_signature,
        pcty_constr,
        class_structure,
        class_signature,
        pcf_extension,
        pcf_attribute,
        pcf_initializer,
        pcf_constraint,
        pcf_method,
        pcf_val,
        pcf_inherit,
        pcl_open,
        pcl_extension,
        pcl_constraint,
        pcl_let,
        pcl_apply,
        pcl_fun,
        pcl_structure,
        pcl_constr,
        case$0,
        binding_op,
        attribute,
        open_infos,
        include_infos,
        class_infos,
        Latest,
        ppat_construct$0,
        constructor_declaration$0,
        eint,
        echar,
        estring,
        efloat,
        eint32,
        eint64,
        enativeint,
        ebool,
        pint,
        pchar,
        pstring,
        pfloat,
        pint32,
        pint64,
        pnativeint,
        pbool,
        eunit,
        punit,
        evar,
        pvar,
        eapply,
        eabstract,
        esequence,
        ppat_tuple_opt,
        pexp_tuple_opt,
        pconstruct,
        econstruct,
        elist_tail,
        elist,
        plist_tail,
        plist,
        pstr_value_list,
        nonrec_type_declaration,
        unapplied_type_constr_conv,
        type_constr_conv,
        eta_reduce,
        eta_reduce_if_possible,
        eta_reduce_if_possible_and_non],
       Make,
       make];
   runtime.caml_register_global(23, Ppxlib_Ast_builder, "Ppxlib__Ast_builder");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Caller_id
//# unitInfo: Requires: Ppxlib__Import, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    cst_src_caller_id_ml = "src/caller_id.ml";
   function get(skip){
    var
     skip$0 = [0, cst_src_caller_id_ml, skip],
     stack = runtime.caml_get_current_callstack(16),
     len = caml_call1(Stdlib_Printexc[20], stack),
     pos = 0;
    for(;;){
     if(caml_call2(Ppxlib_Import[76], pos, len)) return 0;
     var
      _a_ = caml_call2(Stdlib_Printexc[21], stack, pos),
      _b_ = caml_call1(Stdlib_Printexc[22], _a_),
      match = caml_call1(Stdlib_Printexc[19][3], _b_);
     if(! match) return 0;
     var loc = match[1];
     if(! caml_call2(Ppxlib_Import[94][25], loc[1], skip$0)) return [0, loc];
     var pos$0 = pos + 1 | 0;
     pos = pos$0;
    }
   }
   var Ppxlib_Caller_id = [0, get];
   runtime.caml_register_global(3, Ppxlib_Caller_id, "Ppxlib__Caller_id");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Spellcheck
//# unitInfo: Requires: Ppxlib__Import, Stdlib, Stdlib__ArrayLabels, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    cst$0 = ", ",
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Cutoff_met =
      [248, "Ppxlib__Spellcheck.Cutoff_met", runtime.caml_fresh_oo_id(0)],
    _a_ =
      [0,
       [11, "Hint: Did you mean ", [2, 0, [2, 0, [2, 0, [12, 63, 0]]]]],
       "Hint: Did you mean %s%s%s?"],
    cst_or = " or ";
   function levenshtein_distance(s, t, cutoff){
    var m = caml_ml_string_length(s), n = caml_ml_string_length(t);
    if(! caml_call2(Ppxlib_Import[76], cutoff, 0)){
     var _h_ = caml_call1(Stdlib[18], m - n | 0);
     if(! caml_call2(Ppxlib_Import[81], _h_, cutoff)){
      var
       d = caml_call3(Stdlib_ArrayLabels[2], m + 1 | 0, n + 1 | 0, 0),
       _i_ = 0;
      if(m >= 0){
       var i$0 = _i_;
       for(;;){
        caml_check_bound(caml_check_bound(d, i$0)[1 + i$0], 0)[1] = i$0;
        var _G_ = i$0 + 1 | 0;
        if(m === i$0) break;
        i$0 = _G_;
       }
      }
      var _j_ = 0;
      if(n >= 0){
       var j$0 = _j_;
       for(;;){
        caml_check_bound(caml_check_bound(d, 0)[1], j$0)[1 + j$0] = j$0;
        var _F_ = j$0 + 1 | 0;
        if(n === j$0) break;
        j$0 = _F_;
       }
      }
      var line_min = [0, 0];
      try{
       var _l_ = 1;
       if(n >= 1){
        var j = _l_;
        for(;;){
         var
          _o_ = caml_call2(Ppxlib_Import[81], line_min[1], cutoff - 1 | 0),
          _p_ = _o_ ? caml_call2(Ppxlib_Import[81], j, cutoff - 1 | 0) : _o_;
         if(_p_) throw caml_maybe_attach_backtrace(Cutoff_met, 1);
         line_min[1] = caml_call2(Ppxlib_Import[83], m, n);
         var _q_ = 1;
         if(m >= 1){
          var i = _q_;
          for(;;){
           var
            _s_ = caml_string_get(t, j - 1 | 0),
            _t_ = caml_string_get(s, i - 1 | 0);
           if(caml_call2(Ppxlib_Import[86][8], _t_, _s_))
            var
             _u_ = j - 1 | 0,
             _v_ = i - 1 | 0,
             value =
               caml_check_bound(caml_check_bound(d, _v_)[1 + _v_], _u_)
                [1 + _u_];
           else
            var
             _x_ = j - 1 | 0,
             _y_ = i - 1 | 0,
             _A_ = j - 1 | 0,
             _z_ =
               caml_check_bound(caml_check_bound(d, _y_)[1 + _y_], _x_)
                [1 + _x_]
               + 1
               | 0,
             _B_ =
               caml_check_bound(caml_check_bound(d, i)[1 + i], _A_)[1 + _A_]
               + 1
               | 0,
             _D_ = i - 1 | 0,
             _C_ = caml_call2(Ppxlib_Import[82], _B_, _z_),
             _E_ =
               caml_check_bound(caml_check_bound(d, _D_)[1 + _D_], j)[1 + j]
               + 1
               | 0,
             value = caml_call2(Ppxlib_Import[82], _E_, _C_);
           caml_check_bound(caml_check_bound(d, i)[1 + i], j)[1 + j] = value;
           line_min[1] = caml_call2(Ppxlib_Import[82], line_min[1], value);
           var _w_ = i + 1 | 0;
           if(m === i) break;
           i = _w_;
          }
         }
         var _r_ = j + 1 | 0;
         if(n === j) break;
         j = _r_;
        }
       }
       var
        _m_ = caml_check_bound(caml_check_bound(d, m)[1 + m], n)[1 + n],
        _n_ =
          caml_call2(Ppxlib_Import[77], _m_, cutoff)
           ? [0, caml_check_bound(caml_check_bound(d, m)[1 + m], n)[1 + n]]
           : 0,
        distance = _n_;
      }
      catch(_H_){
       var _k_ = caml_wrap_exception(_H_);
       if(_k_ !== Cutoff_met) throw caml_maybe_attach_backtrace(_k_, 0);
       var distance = 0;
      }
      return distance;
     }
    }
    return 0;
   }
   function spellcheck(names, name){
    var switcher = caml_ml_string_length(name) - 1 | 0;
    if(3 < switcher >>> 0)
     var _b_ = 1 < switcher - 4 >>> 0 ? 3 : 2, cutoff = _b_;
    else
     var cutoff = 2 <= switcher ? 1 : 0;
    var
     suggestions =
       caml_call3
         (Ppxlib_Import[94][17],
          function(acc, registered_name){
           var
            names_at_best_distance = acc[2],
            best_distance = acc[1],
            match = levenshtein_distance(name, registered_name, cutoff);
           if(! match) return acc;
           var dist = match[1];
           return caml_call2(Ppxlib_Import[77], dist, best_distance)
                   ? [0, dist, [0, registered_name, 0]]
                   : caml_call2
                      (Ppxlib_Import[78], dist, best_distance)
                     ? acc
                     : [0, dist, [0, registered_name, names_at_best_distance]];
          },
          [0, Ppxlib_Import[92][1], 0],
          names)
        [2],
     _c_ = caml_call1(Ppxlib_Import[94][9], suggestions),
     _d_ = caml_call1(Ppxlib_Import[99][76], name),
     match = caml_call1(caml_call1(Ppxlib_Import[94][31], _d_), _c_);
    if(! match) return 0;
    var
     rev_rest = match[2],
     last = match[1],
     _e_ = caml_call1(Ppxlib_Import[94][66], rev_rest) ? cst : cst_or,
     _f_ = caml_call1(Ppxlib_Import[94][9], rev_rest),
     _g_ = caml_call2(Ppxlib_Import[99][7], cst$0, _f_);
    return [0, caml_call4(Stdlib_Printf[4], _a_, _g_, _e_, last)];
   }
   var Ppxlib_Spellcheck = [0, Cutoff_met, levenshtein_distance, spellcheck];
   runtime.caml_register_global(9, Ppxlib_Spellcheck, "Ppxlib__Spellcheck");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Name
//# unitInfo: Requires: Ppxlib__Caller_id, Ppxlib__Import, Ppxlib__Location, Ppxlib__Spellcheck, Stdlib, Stdlib__Format, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    cst$6 = " '",
    cst_with_name = " with name '",
    cst$7 = ".",
    cst$4 = "@ ",
    cst_Cannot_register = "Cannot register ",
    cst_Did_you_put_it_at_the_wron = "Did you put it at the wrong level?",
    cst_Hint = "Hint:",
    cst_available = "available",
    cst_for = "for",
    cst_is = "is",
    cst_ocaml_extension_constructo = "ocaml.extension_constructor",
    cst_s$1 = "s",
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial =
      [17,
       [0, cst$4, 1, 0],
       [11,
        "the",
        [17,
         [0, cst$4, 1, 0],
         [11,
          "context",
          [17,
           [0, cst$4, 1, 0],
           [11,
            "of",
            [17, [0, cst$4, 1, 0], [2, 0, [17, [0, cst$4, 1, 0], [15, 0]]]]]]]]]],
    partial$0 = [17, 3, [11, cst_Did_you_put_it_at_the_wron, 0]],
    partial$1 =
      [17,
       [0, cst$4, 1, 0],
       [11,
        cst_for,
        [17,
         [0, cst$4, 1, 0],
         [15,
          [17,
           [0, cst$4, 1, 0],
           [11,
            "and",
            [17, [0, cst$4, 1, 0], [15, [16, [12, 46, [17, 0, partial$0]]]]]]]]]]],
    partial$2 =
      [17,
       [0, cst$4, 1, 0],
       [11,
        cst_for,
        [17,
         [0, cst$4, 1, 0],
         [15,
          [16,
           [12, 46, [17, 0, [17, 3, [11, cst_Did_you_put_it_at_the_wron, 0]]]]]]]]],
    cst$2 = cst$5,
    cst$3 = cst$5,
    partial$3 = [2, 0, [12, 39, [2, 0, 0]]],
    cst$1 = "_",
    kind = "extension",
    cst = cst$7,
    cst$0 = cst$7,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib = global_data.Stdlib,
    Ppxlib_Spellcheck = global_data.Ppxlib__Spellcheck,
    Ppxlib_Caller_id = global_data.Ppxlib__Caller_id;
   function fold_dot_suffixes(name, acc, f){
    function collapse_after_at(param){
     if(! param) return 0;
     var parts = param[2], part = param[1];
     if(! caml_call1(Ppxlib_Import[99][53], part)){
      var _z_ = caml_string_get(part, 0);
      if(caml_call2(Ppxlib_Import[86][8], _z_, 64)){
       var _A_ = [0, caml_call2(Ppxlib_Import[99][56], part, 1), parts];
       return [0, caml_call2(Ppxlib_Import[99][7], cst, _A_), 0];
      }
     }
     return [0, part, collapse_after_at(parts)];
    }
    var
     parts$1 = collapse_after_at(caml_call2(Ppxlib_Import[99][70], name, 46)),
     acc$0 = acc,
     parts = parts$1;
    for(;;){
     if(! parts) return acc$0;
     var
      parts$0 = parts[2],
      part = parts[1],
      acc$1 =
        caml_call2
         (f,
          caml_call2(Ppxlib_Import[99][7], cst$0, [0, part, parts$0]),
          acc$0);
     acc$0 = acc$1;
     parts = parts$0;
    }
   }
   function dot_suffixes(name){
    return fold_dot_suffixes(name, 0, function(x, acc){return [0, x, acc];});
   }
   function split_path(s){
    var i = 0;
    for(;;){
     if(caml_call2(Ppxlib_Import[76], i, caml_ml_string_length(s)))
      return [0, s, 0];
     if(46 === caml_string_get(s, i)){
      var i$0 = i + 1 | 0;
      a:
      {
       var i$2 = i$0;
       for(;;){
        if(caml_call2(Ppxlib_Import[76], i$2, caml_ml_string_length(s)))
         return [0, s, 0];
        var match = caml_string_get(s, i$2);
        if(65 <= match) break;
        if(46 !== match) break a;
        var i$4 = i$2 + 1 | 0;
        i$2 = i$4;
       }
       if(91 > match){
        var _y_ = [0, caml_call2(Ppxlib_Import[99][56], s, i$2)];
        return [0, caml_call2(Ppxlib_Import[99][54], s, i$2 - 1 | 0), _y_];
       }
      }
      var i$3 = i$2 + 1 | 0;
      i = i$3;
     }
     else{var i$1 = i + 1 | 0; i = i$1;}
    }
   }
   function make(name){
    var _x_ = dot_suffixes(name);
    return [0, name, caml_call1(Ppxlib_Import[99][82][38], _x_)];
   }
   function name(t){return t[1];}
   function matches(t, matched){
    return caml_call2(Ppxlib_Import[99][82][31], matched, t[2]);
   }
   var Pattern = [0, make, name, matches];
   function split_outer_namespace(name){
    var match = caml_call2(Ppxlib_Import[99][62], name, 46);
    if(! match) return 0;
    var
     i = match[1],
     n = caml_ml_string_length(name),
     before_dot = caml_call3(Ppxlib_Import[99][14], name, 0, i),
     after_dot =
       caml_call3(Ppxlib_Import[99][14], name, i + 1 | 0, (n - i | 0) - 1 | 0);
    return [0, [0, before_dot, after_dot]];
   }
   function create_set(fully_qualified_names){
    return caml_call3
            (Ppxlib_Import[94][17],
             function(acc, name){
              return fold_dot_suffixes
                      (name,
                       acc,
                       function(x, acc){
                        return caml_call2(Ppxlib_Import[99][82][2], x, acc);
                       });
             },
             Ppxlib_Import[99][82][1],
             fully_qualified_names);
   }
   var
    attributes =
      create_set
       (caml_list_of_js_array
         (["ocaml.alert",
           "ocaml.boxed",
           "ocaml.deprecated",
           "ocaml.deprecated_mutable",
           "ocaml.doc",
           cst_ocaml_extension_constructo,
           "ocaml.immediate",
           "ocaml.immediate64",
           "ocaml.inline",
           "ocaml.inlined",
           "ocaml.local",
           "ocaml.noalloc",
           "ocaml.ppwarning",
           "ocaml.remove_aliases",
           "ocaml.specialise",
           "ocaml.specialised",
           "ocaml.tailcall",
           "ocaml.text",
           "ocaml.unboxed",
           "ocaml.unroll",
           "ocaml.unrolled",
           "ocaml.untagged",
           "ocaml.warn_on_literal_pattern",
           "ocaml.warnerror",
           "ocaml.warning",
           "ocaml.toplevel_printer",
           "toplevel_printer"])),
    extensions =
      create_set([0, "ocaml.error", [0, cst_ocaml_extension_constructo, 0]]);
   function is_allowlisted(kind, name){
    return 482562044 <= kind
            ? caml_call2(Ppxlib_Import[99][82][31], name, attributes)
            : caml_call2(Ppxlib_Import[99][82][31], name, extensions);
   }
   function get_attribute_list(param){
    return caml_call1(Ppxlib_Import[99][82][10], attributes);
   }
   function get_extension_list(param){
    return caml_call1(Ppxlib_Import[99][82][10], extensions);
   }
   function create_reserved(param){
    return caml_call2(Ppxlib_Import[90][1], 0, 16);
   }
   var tbl = create_reserved(0);
   function reserve(ns$0){
    var ns = ns$0, tbl$0 = tbl;
    for(;;){
     var match = split_outer_namespace(ns);
     if(! match) return caml_call3(Ppxlib_Import[90][32], tbl$0, ns, 0);
     var
      match$0 = match[1],
      rest_ns = match$0[2],
      outer_ns = match$0[1],
      match$1 =
        caml_call3
         (Ppxlib_Import[90][34],
          tbl$0,
          outer_ns,
          function(param){return [0, create_reserved(0)];});
     if(! match$1) return 0;
     var rest_tbl = match$1[1];
     ns = rest_ns;
     tbl$0 = rest_tbl;
    }
   }
   function is_in_reserved_namespaces(name$0){
    var name = name$0, tbl$0 = tbl;
    for(;;){
     var match = split_outer_namespace(name);
     if(! match){
      var match$3 = caml_call2(Ppxlib_Import[90][33], tbl$0, name);
      if(match$3 && ! match$3[1]) return 1;
      return 0;
     }
     var
      match$0 = match[1],
      rest = match$0[2],
      ns = match$0[1],
      match$1 = caml_call2(Ppxlib_Import[90][33], tbl$0, ns);
     if(! match$1) return 0;
     var match$2 = match$1[1];
     if(! match$2) return 1;
     var rest_tbl = match$2[1];
     name = rest;
     tbl$0 = rest_tbl;
    }
   }
   reserve("merlin");
   reserve("reason");
   reserve("refmt");
   reserve("ns");
   reserve("res");
   reserve("metaocaml");
   reserve("ocamlformat");
   reserve("ppxlib.migration");
   var
    cst_attribute = "attribute",
    _a_ =
      [0,
       [11,
        cst_Cannot_register,
        [2,
         0,
         [11,
          cst_with_name,
          [2,
           0,
           [11,
            "' as it matches an ",
            [2, 0, [11, " reserved by the compiler", 0]]]]]]],
       "Cannot register %s with name '%s' as it matches an %s reserved by the compiler"],
    _b_ =
      [0,
       [11,
        cst_Cannot_register,
        [2,
         0,
         [11,
          cst_with_name,
          [2, 0, [11, "' as its namespace is marked as reserved", 0]]]]],
       "Cannot register %s with name '%s' as its namespace is marked as reserved"],
    _c_ = [0, "src/name.ml", 0],
    _d_ =
      [0,
       [11, " declared at ", [2, 0, [12, 58, [4, 0, 0, 0, 0]]]],
       " declared at %s:%d"],
    cst_s = cst_s$1,
    cst_on = " on ",
    _e_ =
      [0,
       [11,
        "Some ppx-es tried to register conflicting transformations: ",
        [2,
         0,
         [11,
          cst$6,
          [2,
           0,
           [12,
            39,
            [2, 0, [2, 0, [11, " matches ", [2, 0, [11, cst$6, partial$3]]]]]]]]]],
       "Some ppx-es tried to register conflicting transformations: %s '%s'%s%s matches %s '%s'%s"],
    cst_s$0 = cst_s$1,
    cst_a = "a",
    _f_ =
      [0,
       [17,
        [0, cst$4, 1, 0],
        [11,
         "but",
         [17,
          [0, cst$4, 1, 0],
          [11,
           cst_is,
           [17,
            [0, cst$4, 1, 0],
            [11,
             "used",
             [17,
              [0, cst$4, 1, 0],
              [11, "here", [17, [0, cst$4, 1, 0], [11, "in", partial]]]]]]]]]],
       "@ but@ is@ used@ here@ in@ the@ context@ of@ %s@ %a"],
    cst_an = "an",
    _g_ = [0, [12, 44, [17, [0, cst$4, 1, 0], 0]], ",@ "],
    _h_ =
      [0,
       [18,
        [1, [0, 0, cst$5]],
        [11,
         cst_Hint,
         [17,
          [0, cst$4, 1, 0],
          [12,
           96,
           [2,
            0,
            [12,
             39,
             [17,
              [0, cst$4, 1, 0],
              [11,
               cst_is,
               [17, [0, cst$4, 1, 0], [11, cst_available, partial$1]]]]]]]]]],
       "@[Hint:@ `%s'@ is@ available@ for@ %a@ and@ %a%t.@]@\nDid you put it at the wrong level?"],
    _i_ =
      [0,
       [18,
        [1, [0, 0, cst$5]],
        [11,
         cst_Hint,
         [17,
          [0, cst$4, 1, 0],
          [12,
           96,
           [2,
            0,
            [12,
             39,
             [17,
              [0, cst$4, 1, 0],
              [11,
               cst_is,
               [17, [0, cst$4, 1, 0], [11, cst_available, partial$2]]]]]]]]]],
       "@[Hint:@ `%s'@ is@ available@ for@ %a%t.@]@\nDid you put it at the wrong level?"],
    _j_ = [0, [2, 0, [11, ".\n", [2, 0, 0]]], "%s.\n%s"],
    _k_ = [0, [2, 0, 0], "%s"];
   function ignore_checks(name){
    var _w_ = is_in_reserved_namespaces(name);
    return _w_ ? _w_ : caml_call2(Ppxlib_Import[99][58], name, cst$1);
   }
   function create(kind, current_file, string_of_context){
    return [0,
            caml_call2(Ppxlib_Import[90][1], 0, 16),
            [0, current_file, _c_],
            kind,
            string_of_context];
   }
   function get_all_for_context(t, context){
    return caml_call3
            (Ppxlib_Import[90][34],
             t[1],
             context,
             function(param){return [0, Ppxlib_Import[99][81][1]];});
   }
   function check_collisions_local(caller, all_for_context, t, context, name){
    var
     match = caml_call2(Ppxlib_Import[99][81][43], name, all_for_context[1]);
    if(! match) return 0;
    var e = match[1];
    function declared_at(param){
     if(! param) return cst$2;
     var loc = param[1];
     return caml_call3(Stdlib_Printf[4], _d_, loc[1], loc[2]);
    }
    var match$0 = caml_call1(t[4], context);
    if(match$0)
     var
      s = match$0[1],
      _q_ = caml_call2(Stdlib[28], s, cst_s),
      context$0 = caml_call2(Stdlib[28], cst_on, _q_);
    else
     var context$0 = cst$3;
    var
     _r_ = declared_at(e[2]),
     _s_ = e[1],
     _t_ = t[3],
     _u_ = declared_at(caller),
     _v_ = caml_call1(Ppxlib_Import[99][67], t[3]);
    return caml_call9
            (Stdlib_Printf[10],
             Stdlib[2],
             _e_,
             _v_,
             name,
             context$0,
             _u_,
             _t_,
             _s_,
             _r_);
   }
   function check_collisions(t, context, name){
    var
     caller = caml_call1(Ppxlib_Caller_id[1], t[2]),
     all_for_context = get_all_for_context(t, context);
    return check_collisions_local(caller, all_for_context, t, context, name);
   }
   function register(kind$1, t, context, name){
    if(482562044 <= kind$1)
     var list = attributes, kind$0 = cst_attribute;
    else
     var list = extensions, kind$0 = kind;
    if(caml_call2(Ppxlib_Import[99][82][31], name, list))
     caml_call5(Stdlib_Printf[10], Stdlib[2], _a_, kind$0, name, kind$0);
    else if(is_in_reserved_namespaces(name))
     caml_call4(Stdlib_Printf[10], Stdlib[2], _b_, kind$0, name);
    var
     caller = caml_call1(Ppxlib_Caller_id[1], t[2]),
     all = get_all_for_context(t, context);
    check_collisions_local(caller, all, t, context, name);
    var t$0 = [0, name, caller];
    all[1] =
     fold_dot_suffixes
      (name,
       all[1],
       function(name, acc){
        return caml_call3(Ppxlib_Import[99][81][2], name, t$0, acc);
       });
    return 0;
   }
   function spellcheck(t, context, opt, name){
    var
     allowlist = opt ? opt[1] : 0,
     all_for_context = get_all_for_context(t, context),
     all =
       caml_call3
        (Ppxlib_Import[99][81][23],
         function(key, param, acc){return [0, key, acc];},
         all_for_context[1],
         0),
     _n_ = caml_call2(Ppxlib_Import[100], all, allowlist),
     x = caml_call2(Ppxlib_Spellcheck[3], _n_, name);
    if(x) return x;
    if(caml_call2(Ppxlib_Import[99][81][31], name, all_for_context[1]))
     return 0;
    var
     other_contexts =
       caml_call3
        (Ppxlib_Import[90][12],
         function(ctx, all_from_context, acc){
          if
           (caml_call2(Ppxlib_Import[73][6], context, ctx)
            &&
             caml_call2(Ppxlib_Import[99][81][31], name, all_from_context[1])){
           var match = caml_call1(t[4], ctx);
           if(! match) return acc;
           var s = match[1];
           return [0, caml_call2(Stdlib[28], s, cst_s$0), acc];
          }
          return acc;
         },
         t[1],
         0),
     pp_text = Stdlib_Format[139];
    function current_context(ppf){
     var match = caml_call1(t[4], context);
     if(match){
      var s = match[1];
      if(s !== cst$5){
       var _p_ = caml_string_get(s, 0) - 97 | 0;
       a:
       {
        if(24 >= _p_ >>> 0)
         switch(_p_){
           case 0:
           case 4:
           case 8:
           case 14:
           case 20:
           case 24:
            var a_or_an = cst_an; break a;
         }
        var a_or_an = cst_a;
       }
       return caml_call5(Stdlib_Format[143], ppf, _f_, a_or_an, pp_text, s);
      }
     }
     return 0;
    }
    var
     match =
       caml_call2
        (Ppxlib_Import[94][44],
         function(x, y){return - caml_call2(Ppxlib_Import[99][71], x, y) | 0;},
         other_contexts);
    if(! match) return 0;
    var c = match[1];
    if(! match[2])
     return [0,
             caml_call5
              (Stdlib_Format[147], _i_, name, pp_text, c, current_context)];
    var
     rev_others = match[2],
     others = caml_call1(Ppxlib_Import[94][9], rev_others),
     _o_ =
       caml_call2
        (Stdlib_Format[136],
         [0,
          function(ppf, param){
           return caml_call2(Stdlib_Format[143], ppf, _g_);
          }],
         pp_text);
    return [0,
            caml_call7
             (Stdlib_Format[147],
              _h_,
              name,
              _o_,
              others,
              pp_text,
              c,
              current_context)];
   }
   function createf(t, context, allowlist, fmt, name){
    return caml_call3
            (Stdlib_Printf[10],
             function(msg){
              var match = spellcheck(t, context, allowlist, name[1]);
              if(! match)
               return caml_call3(Ppxlib_Location[13][2], name[2], _k_, msg);
              var s = match[1];
              return caml_call4(Ppxlib_Location[13][2], name[2], _j_, msg, s);
             },
             fmt,
             name[1]);
   }
   function raise_errorf(t, context, allowlist, fmt, name){
    var _m_ = createf(t, context, allowlist, fmt, name);
    return caml_call1(Ppxlib_Location[13][8], _m_);
   }
   function error_extensionf(t, context, allowlist, fmt, name){
    var _l_ = createf(t, context, allowlist, fmt, name);
    return caml_call1(Ppxlib_Location[13][7], _l_);
   }
   var
    Error = [0, createf, raise_errorf, error_extensionf],
    raise_errorf$0 = Error[2],
    Ppxlib_Name =
      [0,
       Pattern,
       split_path,
       dot_suffixes,
       [0,
        create,
        register,
        check_collisions,
        spellcheck,
        Error,
        raise_errorf$0],
       [0, get_attribute_list, get_extension_list, is_allowlisted],
       [0, reserve, is_in_reserved_namespaces],
       ignore_checks];
   runtime.caml_register_global(41, Ppxlib_Name, "Ppxlib__Name");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Common
//# unitInfo: Requires: Astlib__Pprintast, CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_builder_generated, Ppxlib__Ast_traverse0, Ppxlib__Import, Ppxlib__Location, Ppxlib__Name, Ppxlib_ast__Ast_helper_lite, Stdlib__Buffer, Stdlib__Format, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Attributes_not_allowed_her = "Attributes not allowed here",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_functor_parameter = "functor_parameter",
    cst_go = "go",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_not_a_type_parameter = "not a type parameter",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_return_true = "return_true",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_t$1 = "t",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    _a_ =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    _b_ =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_signature,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    shared =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_ast_Ast_helper_lite = global_data.Ppxlib_ast__Ast_helper_lite,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Name = global_data.Ppxlib__Name,
    Ppxlib_Ast_builder_generated = global_data.Ppxlib__Ast_builder_generated,
    Ppxlib_Ast_traverse0 = global_data.Ppxlib__Ast_traverse0,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Format = global_data.Stdlib__Format,
    Astlib_Pprintast = global_data.Astlib__Pprintast;
   function lident(x){return [0, x];}
   function core_type_of_type_declaration(td){
    var
     loc = td[1][2],
     _av_ =
       caml_call2
        (Ppxlib_Import[94][55], td[2], function(_ax_){return _ax_[1];}),
     _aw_ = caml_call2(Ppxlib_Ast_builder[1][1][3], lident, td[1]);
    return caml_call3(Ppxlib_Ast_builder[1][131], loc, _aw_, _av_);
   }
   function chop(n, or_more, string, pos, f){
    var target = pos[1] - n | 0;
    for(;;){
     a:
     if(caml_call2(Ppxlib_Import[78], pos[1], 0)){
      if(! or_more && ! caml_call2(Ppxlib_Import[78], pos[1], target))
       break a;
      if(caml_call1(f, runtime.caml_string_get(string, pos[1] - 1 | 0))){pos[1] = pos[1] - 1 | 0; continue;}
     }
     return caml_call2(Ppxlib_Import[80], pos[1], target);
    }
   }
   var
    cnt = [0, 0],
    _e_ =
      [0, [2, 0, [11, "__", [4, 3, [0, 2, 3], 0, [12, 95, 0]]]], "%s__%03i_"],
    cst_x = "_x",
    _f_ = [0, [11, cst_not_a_type_parameter, 0], cst_not_a_type_parameter],
    _g_ = [0, [11, cst_not_a_type_parameter, 0], cst_not_a_type_parameter];
   function gen_symbol(opt, param){
    var prefix = opt ? opt[1] : cst_x;
    cnt[1] = cnt[1] + 1 | 0;
    var pos = [0, runtime.caml_ml_string_length(prefix)];
    a:
    {
     if
      (chop(1, 0, prefix, pos, caml_call1(Ppxlib_Import[86][8], 95))
       &&
        chop
         (3,
          1,
          prefix,
          pos,
          function(param){return 9 < param - 48 >>> 0 ? 0 : 1;})
        && chop(2, 0, prefix, pos, caml_call1(Ppxlib_Import[86][8], 95))){
      var prefix$0 = caml_call2(Ppxlib_Import[99][54], prefix, pos[1]);
      break a;
     }
     var prefix$0 = prefix;
    }
    return caml_call3(Stdlib_Printf[4], _e_, prefix$0, cnt[1]);
   }
   function name_type_params_in_td_res(td){
    function name_param(i, param){
     var variance = param[2], tp = param[1], v = tp[1];
     function _at_(ptyp_desc){
      return [0, [0, ptyp_desc, tp[2], tp[3], tp[4]], variance];
     }
     if(typeof v === "number")
      var
       _as_ = caml_call1(Ppxlib_Import[86][1], 97 + (i % 26 | 0) | 0),
       _au_ =
         [0,
          [0,
           gen_symbol
            ([0, caml_call2(Ppxlib_Import[99][1], (i / 26 | 0) + 1 | 0, _as_)],
             0)]];
     else
      var
       _au_ =
         0 === v[0]
          ? [0, v]
          : [1, caml_call2(Ppxlib_Location[13][2], tp[2], _f_)];
     return caml_call2(Ppxlib_Import[96][5], _au_, _at_);
    }
    var
     _ar_ = caml_call2(Ppxlib_Import[94][56], td[2], name_param),
     match =
       caml_call1
        (caml_call1
          (Ppxlib_Import[94][64],
           function(param){
            if(0 === param[0]){var o = param[1]; return [0, o];}
            var e = param[1];
            return [1, e];
           }),
         _ar_),
     errors = match[2],
     ptype_params = match[1];
    if(! errors)
     return [0,
             [0,
              td[1],
              ptype_params,
              td[3],
              td[4],
              td[5],
              td[6],
              td[7],
              td[8]]];
    var q = errors[2], t = errors[1];
    return [1, [0, t, q]];
   }
   function name_type_params_in_td(td){
    var match = name_type_params_in_td_res(td);
    if(0 === match[0]){var res = match[1]; return res;}
    var err = match[1][1];
    return caml_call1(Ppxlib_Location[13][8], err);
   }
   function combinator_type_of_type_declar(td, f){
    var
     td$0 = name_type_params_in_td(td),
     _ap_ = core_type_of_type_declaration(td$0),
     result_type = caml_call2(f, td$0[1][2], _ap_);
    return caml_call3
            (Ppxlib_Import[94][57],
             td$0[2],
             result_type,
             function(param, acc){
              var tp = param[1], loc = tp[2], _aq_ = caml_call2(f, loc, tp);
              return caml_call4(Ppxlib_Ast_builder[1][133], loc, 0, _aq_, acc);
             });
   }
   function string_of_core_type(ct){
    var
     buf = caml_call1(Stdlib_Buffer[1], 128),
     ppf = caml_call1(Stdlib_Format[120], buf);
    caml_call2(Astlib_Pprintast[5], ppf, ct);
    caml_call2(Stdlib_Format[43], ppf, 0);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function get_type_param_name_res(param){
    var ty = param[1], loc = ty[2], match = ty[1];
    if(typeof match !== "number" && 0 === match[0]){
     var name = match[1];
     return [0, caml_call2(Ppxlib_Ast_builder[1][1][2], loc, name)];
    }
    return [1, [0, caml_call2(Ppxlib_Location[13][2], loc, _g_), 0]];
   }
   function get_type_param_name(t){
    var match = get_type_param_name_res(t);
    if(0 === match[0]){var e = match[1]; return e;}
    var err = match[1][1];
    return caml_call1(Ppxlib_Location[13][8], err);
   }
   var
    Type_is_recursive =
      [248, "Ppxlib__Common.Type_is_recursive", runtime.caml_fresh_oo_id(0)],
    _c_ = [0, "type_names"],
    _d_ =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_return_true,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_go,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    type_is_recursive =
      caml_call2
       (CamlinternalOO[19],
        [0,
         cst_bool,
         cst_cases,
         cst_case,
         cst_char,
         cst_value_binding,
         cst_extension_constructor_kind,
         cst_core_type,
         cst_structure,
         cst_list,
         cst_label_declaration,
         cst_module_binding,
         cst_position,
         cst_toplevel_directive,
         cst_directive_argument,
         cst_object_field_desc,
         cst_class_type_field_desc,
         cst_open_infos,
         cst_pattern_desc,
         cst_signature_item,
         cst_extension_constructor,
         cst_toplevel_phrase,
         cst_extension,
         cst_location,
         cst_variance,
         cst_package_type,
         cst_virtual_flag,
         cst_module_type_desc,
         cst_rec_flag,
         cst_payload,
         cst_type_exception,
         cst_label,
         cst_letop,
         cst_location_stack,
         cst_value_description,
         cst_module_declaration,
         cst_class_type_declaration,
         cst_longident_loc,
         cst_closed_flag,
         cst_directive_argument_desc,
         cst_return_true,
         cst_attribute,
         cst_class_infos,
         cst_signature_item_desc,
         cst_go,
         cst_int,
         cst_loc,
         cst_row_field_desc,
         cst_override_flag,
         cst_structure_item_desc,
         cst_class_field_desc,
         cst_binding_op,
         cst_module_expr_desc,
         cst_class_signature,
         cst_type_extension,
         cst_class_field_kind,
         cst_module_type_declaration,
         cst_arg_label,
         cst_row_field,
         cst_longident,
         cst_string,
         cst_pattern,
         cst_include_description,
         cst_signature,
         cst_class_type_field,
         cst_attributes,
         cst_open_description,
         cst_with_constraint,
         cst_include_declaration,
         cst_class_type_desc,
         cst_private_flag,
         cst_injectivity,
         cst_open_declaration,
         cst_object_field,
         cst_array,
         cst_constant,
         cst_class_expr,
         cst_functor_parameter,
         cst_direction_flag,
         cst_core_type_desc,
         cst_type_declaration,
         cst_constructor_declaration,
         cst_option,
         cst_type_kind,
         cst_module_expr,
         cst_module_substitution,
         cst_class_description,
         cst_expression,
         cst_class_type,
         cst_structure_item,
         cst_include_infos,
         cst_class_declaration,
         cst_module_type,
         cst_class_expr_desc,
         cst_class_structure,
         cst_mutable_flag,
         cst_expression_desc,
         cst_constructor_arguments,
         cst_class_field],
        function(_V_){
         var
          _W_ = caml_call2(CamlinternalOO[3], _V_, cst),
          _X_ = caml_call2(CamlinternalOO[3], _V_, cst$0),
          _Y_ = caml_call3(CamlinternalOO[4], _V_, _d_, _c_),
          ___ = _Y_[21],
          _ab_ = _Y_[70],
          _ae_ = _Y_[99],
          _Z_ = _Y_[9],
          _$_ = _Y_[52],
          _aa_ = _Y_[59],
          _ac_ = _Y_[71],
          _ad_ = _Y_[95],
          _af_ =
            caml_call6
             (CamlinternalOO[18], _V_, 0, 0, _a_, Ppxlib_Ast_traverse0[2], 1),
          _ah_ = _af_[30],
          _ag_ = _af_[1];
         caml_call2
          (CamlinternalOO[11],
           _V_,
           [0,
            ___,
            function(self_1, param){throw Type_is_recursive;},
            _ab_,
            function(self_1, ctype){
             var _ao_ = ctype[1];
             if(typeof _ao_ !== "number")
              switch(_ao_[0]){
                case 1:
                 return 0;
                case 3:
                 var match = _ao_[1][1];
                 if(0 === match[0]){
                  var id = match[1];
                  if(caml_call2(Ppxlib_Import[94][25], id, self_1[1 + _ae_]))
                   return caml_call2(self_1[1][1 + ___], self_1, 0);
                 }
                 break;
              }
             return caml_call1(caml_call1(_ah_, self_1), ctype);
            },
            _ac_,
            function(self_1, cd){
             var match = cd[3];
             if(0 === match[0]){
              var
               args = match[1],
               _am_ = caml_call1(self_1[1][1 + _ab_], self_1);
              return caml_call2(Ppxlib_Import[94][77], args, _am_);
             }
             var
              fields = match[1],
              _an_ = caml_call1(self_1[1][1 + _$_], self_1);
             return caml_call2(Ppxlib_Import[94][77], fields, _an_);
            },
            _ad_,
            function(self_1, param){return 0;},
            _aa_,
            function(self_1, param){
             if(! self_1[1 + _W_]) return 0;
             try{
              var _ak_ = caml_call1(self_1[1][1 + _Z_], self_1);
              caml_call2(Ppxlib_Import[94][77], self_1[1 + _X_], _ak_);
             }
             catch(_al_){
              var _aj_ = caml_wrap_exception(_al_);
              if(_aj_ === Type_is_recursive) return 1;
              throw caml_maybe_attach_backtrace(_aj_, 0);
             }
             return 0;
            }]);
         return function(env, _ai_, rec_flag, tds){
          var self = caml_call2(CamlinternalOO[24], _ai_, _V_);
          self[1 + _X_] = tds;
          self[1 + _W_] = rec_flag;
          caml_call1(_ag_, self);
          self[1 + _ae_] =
           caml_call2
            (Ppxlib_Import[94][55], tds, function(td){return td[1][1];});
          return caml_call3(CamlinternalOO[26], _ai_, self, _V_);};
        }),
    _i_ =
      [0,
       [11, cst_Attributes_not_allowed_her, 0],
       cst_Attributes_not_allowed_her];
   function really_recursive(rec_flag, tds){
    var _U_ = caml_call3(type_is_recursive[1], 0, rec_flag, tds);
    return caml_call2(runtime.caml_get_public_method(_U_, 23080, 1), _U_, 0);
   }
   function last(x, l){
    var x$0 = x, l$0 = l;
    for(;;){
     if(! l$0) return x$0;
     var l$1 = l$0[2], x$1 = l$0[1];
     x$0 = x$1;
     l$0 = l$1;
    }
   }
   function loc_of_name_and_payload(name, payload){
    switch(payload[0]){
      case 0:
       var match = payload[1];
       if(! match) return name[2];
       var
        l = match[2],
        x = match[1],
        init = x[2],
        _P_ = init[3],
        _Q_ = last(x, l)[2][2];
       return [0, init[1], _Q_, _P_];
      case 1:
       var match$0 = payload[1];
       if(! match$0) return name[2];
       var
        l$0 = match$0[2],
        x$0 = match$0[1],
        init$0 = x$0[2],
        _R_ = init$0[3],
        _S_ = last(x$0, l$0)[2][2];
       return [0, init$0[1], _S_, _R_];
      case 2:
       var t = payload[1]; return t[2];
      default:
       var match$1 = payload[2], x$1 = payload[1];
       if(! match$1) return x$1[2];
       var e = match$1[1], _T_ = x$1[2];
       return [0, _T_[1], e[2][2], _T_[3]];
    }
   }
   function loc_of_payload(param){
    var attr_payload = param[2], attr_name = param[1];
    return loc_of_name_and_payload(attr_name, attr_payload);
   }
   function loc_of_attribute(param){
    var attr_payload = param[2], attr_name = param[1];
    if(caml_call2(Ppxlib_Import[73][3], attr_name[2], Ppxlib_Location[3]))
     return loc_of_name_and_payload(attr_name, attr_payload);
    var
     init = attr_name[2],
     _N_ = init[3],
     _O_ = loc_of_name_and_payload(attr_name, attr_payload)[2];
    return [0, init[1], _O_, _N_];
   }
   function loc_of_extension(param){
    var payload = param[2], name = param[1];
    if(caml_call2(Ppxlib_Import[73][3], name[2], Ppxlib_Location[3]))
     return loc_of_name_and_payload(name, payload);
    var
     init = name[2],
     _L_ = init[3],
     _M_ = loc_of_name_and_payload(name, payload)[2];
    return [0, init[1], _M_, _L_];
   }
   function curry_applications(expr){
    var match = expr[1];
    if(typeof match !== "number" && 5 === match[0]){
     var
      orig_forward_args = match[2],
      f = match[1],
      loc = expr[2],
      loop =
        function(param){
         if(! param) return f;
         var
          rev_front_args = param[2],
          last_arg = param[1],
          _K_ = loop(rev_front_args);
         return caml_call3
                 (Ppxlib_Ast_builder_generated[1][114],
                  loc,
                  _K_,
                  [0, last_arg, 0]);
        };
     return loop(caml_call1(Ppxlib_Import[94][9], orig_forward_args));
    }
    return expr;
   }
   function _h_(attr){
    var name = attr[1];
    if(caml_call1(Ppxlib_Name[7], name[1])) return 0;
    var loc = loc_of_attribute(attr);
    return [0, caml_call2(Ppxlib_Location[13][2], loc, _i_)];
   }
   var _j_ = Ppxlib_Import[94][69];
   function attributes_errors(_J_){return caml_call2(_j_, _J_, _h_);}
   var
    _k_ = caml_call1(CamlinternalOO[16], _b_),
    _l_ = caml_call2(CamlinternalOO[8], _k_, shared)[94],
    _m_ =
      caml_call6
        (CamlinternalOO[18], _k_, 0, 0, _a_, Ppxlib_Ast_traverse0[3], 1)
       [1];
   caml_call3
    (CamlinternalOO[10],
     _k_,
     _l_,
     function(self_2, a, acc){
      var _I_ = caml_call2(_j_, [0, a, 0], _h_);
      return caml_call2(Ppxlib_Import[100], _I_, acc);
     });
   caml_call1(CamlinternalOO[17], _k_);
   var _n_ = caml_call2(CamlinternalOO[24], 0, _k_);
   caml_call1(_m_, _n_);
   var
    collect_attributes_errors = caml_call3(CamlinternalOO[26], 0, _n_, _k_);
   function assert_no_attributes(l){
    var match = caml_call2(_j_, l, _h_);
    if(! match) return 0;
    var err = match[1];
    return caml_call1(Ppxlib_Location[13][8], err);
   }
   var
    _o_ = caml_call1(CamlinternalOO[16], _b_),
    _p_ = caml_call2(CamlinternalOO[8], _o_, shared)[94],
    _q_ =
      caml_call6
        (CamlinternalOO[18], _o_, 0, 0, _a_, Ppxlib_Ast_traverse0[2], 1)
       [1];
   caml_call3
    (CamlinternalOO[10],
     _o_,
     _p_,
     function(self_3, a){return assert_no_attributes([0, a, 0]);});
   caml_call1(CamlinternalOO[17], _o_);
   var _r_ = caml_call2(CamlinternalOO[24], 0, _o_);
   caml_call1(_q_, _r_);
   var
    assert_no_attributes_in = caml_call3(CamlinternalOO[26], 0, _r_, _o_),
    cst_ocaml_ppwarning = "ocaml.ppwarning",
    cst_t = cst_t$1,
    cst_t$0 = cst_t$1,
    _s_ = [0, [2, 0, [4, 0, 0, 0, 0]], "%s%d"];
   function attribute_of_warning(loc, s){
    var _H_ = caml_call2(Ppxlib_Ast_builder[1][175], loc, s);
    return [0,
            [0, cst_ocaml_ppwarning, loc],
            [0, [0, caml_call3(Ppxlib_Ast_builder[1][22], loc, _H_, 0), 0]],
            loc];
   }
   function is_polymorphic_variant(td, sig){
    var _G_ = td[4];
    if(typeof _G_ === "number" && ! _G_){
     var match$0 = td[6];
     if(! match$0) return sig ? 374637448 : 974048726;
     var typ$0 = match$0[1], param = typ$0;
     for(;;){
      var match = param[1];
      if(typeof match !== "number")
       switch(match[0]){
         case 3:
          return 374637448;
         case 6:
          var typ = match[1]; param = typ; continue;
         case 7:
          return -491008483;
       }
      return 974048726;
     }
    }
    return 974048726;
   }
   function mk_named_sig(loc, sg_name, handle_polymorphic_variant, param){
    if(param && ! param[2]){
     var td = param[1];
     if
      (caml_call2(Ppxlib_Import[99][72], td[1][1], cst_t)
       && caml_call1(Ppxlib_Import[94][66], td[3])){
      if(! handle_polymorphic_variant){
       var _E_ = is_polymorphic_variant(td, 1);
       if(caml_call2(Ppxlib_Import[73][3], _E_, -491008483)) return 0;
      }
      var arity = caml_call1(Ppxlib_Import[94][1], td[2]);
      if(caml_call2(Ppxlib_Import[81], arity, 4)) return 0;
      var
       mty =
         caml_call2(Ppxlib_Import[76], arity, 0)
          ? sg_name
          : caml_call3(Stdlib_Printf[4], _s_, sg_name, arity),
       td$0 = name_type_params_in_td(td),
       _w_ = td$0[1],
       _x_ =
         caml_call2
          (Ppxlib_Import[94][55], td$0[2], function(_F_){return _F_[1];}),
       _y_ = caml_call1(Ppxlib_Ast_builder[1][1][4], td$0[1]),
       _z_ = [0, caml_call3(Ppxlib_Ast_builder[1][131], loc, _y_, _x_)],
       for_subst =
         caml_call8
          (Ppxlib_ast_Ast_helper_lite[9][1],
           [0, loc],
           0,
           [0, td$0[2]],
           0,
           0,
           0,
           _z_,
           _w_),
       _A_ =
         [0,
          [4,
           caml_call2(Ppxlib_Ast_builder[1][1][5], loc, cst_t$0),
           for_subst],
          0],
       _B_ = caml_call2(Ppxlib_Ast_builder[1][1][5], loc, mty),
       _C_ = caml_call2(Ppxlib_Ast_builder[1][68], loc, _B_),
       _D_ = caml_call3(Ppxlib_Ast_builder[1][65], loc, _C_, _A_);
      return [0, caml_call2(Ppxlib_Ast_builder[1][168], loc, _D_)];
     }
    }
    return 0;
   }
   function exn_to_loc_error(exn){
    var match = caml_call1(Ppxlib_Location[13][6], exn);
    if(! match) throw caml_maybe_attach_backtrace(exn, 1);
    var error = match[1];
    return error;
   }
   function return$0(e){return [0, e, 0];}
   function symbol_bind(param, f){
    var
     errors1 = param[2],
     x = param[1],
     match = caml_call1(f, x),
     errors2 = match[2],
     y = match[1];
    return [0, y, caml_call2(Ppxlib_Import[100], errors1, errors2)];
   }
   function symbol_map(param, f){
    var errors = param[2], x = param[1];
    return [0, caml_call1(f, x), errors];
   }
   function of_result(result, default$0){
    if(0 === result[0]){var x = result[1]; return [0, x, 0];}
    var errors = result[1];
    return [0, default$0, caml_call1(Ppxlib_Import[97][3], errors)];
   }
   function combine_errors(list){
    var
     _t_ =
       caml_call2(Ppxlib_Import[94][70], list, function(_v_){return _v_[2];});
    return [0,
            caml_call2
             (Ppxlib_Import[94][55], list, function(_u_){return _u_[1];}),
            _t_];
   }
   var
    With_errors =
      [0, return$0, symbol_bind, symbol_map, of_result, combine_errors],
    Ppxlib_Common =
      [0,
       lident,
       core_type_of_type_declaration,
       name_type_params_in_td_res,
       name_type_params_in_td,
       combinator_type_of_type_declar,
       gen_symbol,
       string_of_core_type,
       assert_no_attributes,
       assert_no_attributes_in,
       attributes_errors,
       collect_attributes_errors,
       get_type_param_name_res,
       get_type_param_name,
       type_is_recursive,
       really_recursive,
       loc_of_payload,
       loc_of_attribute,
       loc_of_extension,
       curry_applications,
       attribute_of_warning,
       is_polymorphic_variant,
       mk_named_sig,
       exn_to_loc_error,
       With_errors];
   runtime.caml_register_global(30, Ppxlib_Common, "Ppxlib__Common");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_pattern_generated
//# unitInfo: Requires: Ppxlib__Ast_pattern0, Ppxlib__Common
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_alias$2 = "alias",
    cst_any$1 = "any",
    cst_apply$2 = "apply",
    cst_array$1 = "array",
    cst_arrow$1 = "arrow",
    cst_attribute$3 = "attribute",
    cst_class$2 = "class",
    cst_class_type$1 = "class_type",
    cst_constant$1 = "constant",
    cst_constr$2 = "constr",
    cst_constraint$5 = "constraint",
    cst_construct$1 = "construct",
    cst_exception$2 = "exception",
    cst_extension$10 = "extension",
    cst_fun$1 = "fun",
    cst_functor$1 = "functor",
    cst_ident$3 = "ident",
    cst_include$1 = "include",
    cst_inherit$1 = "inherit",
    cst_lazy$1 = "lazy",
    cst_let$1 = "let",
    cst_method$1 = "method",
    cst_modsubst$1 = "modsubst",
    cst_modtype$2 = "modtype",
    cst_modtypesubst$1 = "modtypesubst",
    cst_module$2 = "module",
    cst_object$1 = "object",
    cst_open$6 = "open",
    cst_poly$1 = "poly",
    cst_recmodule$1 = "recmodule",
    cst_record$3 = "record",
    cst_signature$1 = "signature",
    cst_string$1 = "string",
    cst_structure$1 = "structure",
    cst_tuple$3 = "tuple",
    cst_type$3 = "type",
    cst_typesubst$1 = "typesubst",
    cst_typext$1 = "typext",
    cst_unpack$1 = "unpack",
    cst_val$1 = "val",
    cst_value$1 = "value",
    cst_var$1 = "var",
    cst_variant$3 = "variant";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppxlib_Ast_pattern0 = global_data.Ppxlib__Ast_pattern0,
    Ppxlib_Common = global_data.Ppxlib__Common,
    cst_Nolabel = "Nolabel",
    nolabel =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return typeof x === "number"
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Nolabel);};};};
       }],
    cst_Labelled = "Labelled",
    cst_Optional = "Optional",
    cst_constr = cst_constr$2,
    cst_structure = cst_structure$1,
    cst_fun = cst_fun$1,
    cst_apply = cst_apply$2,
    cst_let = cst_let$1,
    cst_constraint = cst_constraint$5,
    cst_extension = cst_extension$10,
    cst_open = cst_open$6,
    cst_inherit = cst_inherit$1,
    cst_val = cst_val$1,
    cst_method = cst_method$1,
    cst_constraint$0 = cst_constraint$5,
    cst_initializer = "initializer",
    cst_attribute = cst_attribute$3,
    cst_extension$0 = cst_extension$10,
    cst_virtual = "virtual",
    cst_concrete = "concrete",
    cst_constr$0 = cst_constr$2,
    cst_signature = cst_signature$1,
    cst_arrow = cst_arrow$1,
    cst_extension$1 = cst_extension$10,
    cst_open$0 = cst_open$6,
    cst_inherit$0 = cst_inherit$1,
    cst_val$0 = cst_val$1,
    cst_method$0 = cst_method$1,
    cst_constraint$1 = cst_constraint$5,
    cst_attribute$0 = cst_attribute$3,
    cst_extension$2 = cst_extension$10,
    cst_Closed = "Closed";
   function labelled(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(typeof x !== "number" && 0 === x[0]){
                 var x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Labelled);};};};
            }];
   }
   function optional(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(typeof x !== "number" && 1 === x[0]){
                 var x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Optional);};};};
            }];
   }
   function attribute(param){
    var name = param[1];
    return function(param){
     var payload = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var
                  k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                  k$1 = caml_call4(payload, ctx, loc, x[2], k$0);
                 return k$1;};};};
             }];};
   }
   function binding_op(param){
    var op = param[1];
    return function(param){
     var pat = param[1];
     return function(param){
      var exp = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  var
                   k$0 = caml_call4(op, ctx, x[1][2], x[1][1], k),
                   k$1 = caml_call4(pat, ctx, loc, x[2], k$0),
                   k$2 = caml_call4(exp, ctx, loc, x[3], k$1);
                  return k$2;};};};
              }];};};
   }
   function case$0(param){
    var lhs = param[1];
    return function(param){
     var guard = param[1];
     return function(param){
      var rhs = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  var
                   k$0 = caml_call4(lhs, ctx, loc, x[1], k),
                   k$1 = caml_call4(guard, ctx, loc, x[2], k$0),
                   k$2 = caml_call4(rhs, ctx, loc, x[3], k$1);
                  return k$2;};};};
              }];};};
   }
   function pcl_loc(_N_, param){
    var f2 = param[1], f1 = _N_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function pcl_attributes(_M_, param){
    var f2 = param[1], f1 = _M_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function pcl_constr(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(0 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_constr);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pcl_structure(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(1 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_structure);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pcl_fun(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return function(param){
       var f3 = param[1];
       return [0,
               function(ctx){
                return function(loc){
                 return function(x){
                  return function(k){
                   caml_call1(Ppxlib_Common[8], x[3]);
                   var loc = x[2], x$0 = x[1];
                   if(2 !== x$0[0])
                    return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_fun);
                   var x3 = x$0[4], x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                   ctx[1] = ctx[1] + 1 | 0;
                   var
                    k$0 = caml_call4(f0, ctx, loc, x0, k),
                    k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                    k$2 = caml_call4(f2, ctx, loc, x2, k$1),
                    k$3 = caml_call4(f3, ctx, loc, x3, k$2);
                   return k$3;};};};
               }];};};};
   }
   function pcl_apply(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(3 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_apply);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pcl_let(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[3]);
                  var loc = x[2], x$0 = x[1];
                  if(4 !== x$0[0])
                   return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_let);
                  var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                   k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                  return k$2;};};};
              }];};};
   }
   function pcl_constraint(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(5 !== x$0[0])
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_constraint);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pcl_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(6 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_extension);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pcl_open(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(7 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_open);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pcf_loc(_L_, param){
    var f2 = param[1], f1 = _L_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function pcf_attributes(_K_, param){
    var f2 = param[1], f1 = _K_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function pcf_inherit(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[3]);
                  var loc = x[2], x$0 = x[1];
                  if(0 !== x$0[0])
                   return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_inherit);
                  var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                   k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                  return k$2;};};};
              }];};};
   }
   function pcf_val(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(1 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_val);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pcf_method(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(2 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_method);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pcf_constraint(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(3 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_constraint$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pcf_initializer(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(4 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_initializer);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pcf_attribute(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(5 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_attribute);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pcf_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(6 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_extension$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function cfk_virtual(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(0 !== x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_virtual);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function cfk_concrete(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(0 === x[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_concrete);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function class_infos_attributes(_J_, param){
    var f2 = param[1], f1 = _J_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[5],
                 k$0 = caml_call4(f1, ctx, loc, x[6], k),
                 x$0 = [0, x[1], x[2], x[3], x[4], x[5], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function class_infos(param){
    var virt = param[1];
    return function(param){
     var params = param[1];
     return function(param){
      var name = param[1];
      return function(param){
       var expr = param[1];
       return [0,
               function(ctx){
                return function(loc){
                 return function(x){
                  return function(k){
                   caml_call1(Ppxlib_Common[8], x[6]);
                   var
                    k$0 = caml_call4(virt, ctx, loc, x[1], k),
                    k$1 = caml_call4(params, ctx, loc, x[2], k$0),
                    k$2 = caml_call4(name, ctx, x[3][2], x[3][1], k$1),
                    k$3 = caml_call4(expr, ctx, loc, x[4], k$2);
                   return k$3;};};};
               }];};};};
   }
   function class_signature(param){
    var self = param[1];
    return function(param){
     var fields = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var
                  k$0 = caml_call4(self, ctx, loc, x[1], k),
                  k$1 = caml_call4(fields, ctx, loc, x[2], k$0);
                 return k$1;};};};
             }];};
   }
   function class_structure(param){
    var self = param[1];
    return function(param){
     var fields = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var
                  k$0 = caml_call4(self, ctx, loc, x[1], k),
                  k$1 = caml_call4(fields, ctx, loc, x[2], k$0);
                 return k$1;};};};
             }];};
   }
   function pcty_loc(_I_, param){
    var f2 = param[1], f1 = _I_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function pcty_attributes(_H_, param){
    var f2 = param[1], f1 = _H_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function pcty_constr(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(0 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_constr$0);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pcty_signature(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(1 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_signature);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pcty_arrow(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[3]);
                  var loc = x[2], x$0 = x[1];
                  if(2 !== x$0[0])
                   return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_arrow);
                  var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                   k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                  return k$2;};};};
              }];};};
   }
   function pcty_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(3 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_extension$1);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pcty_open(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(4 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_open$0);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pctf_loc(_G_, param){
    var f2 = param[1], f1 = _G_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function pctf_attributes(_F_, param){
    var f2 = param[1], f1 = _F_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function pctf_inherit(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(0 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_inherit$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pctf_val(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(1 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_val$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pctf_method(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(2 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_method$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pctf_constraint(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(3 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_constraint$1);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pctf_attribute(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(4 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_attribute$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pctf_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(5 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_extension$2);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   var
    closed =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Closed)
                   : (ctx[1] = ctx[1] + 1 | 0, k);};};};
       }],
    cst_Open = "Open",
    open =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Open);};};};
       }],
    cst_integer = "integer",
    cst_char = "char",
    cst_string = cst_string$1,
    cst_float = "float",
    cst_tuple = cst_tuple$3,
    cst_record = cst_record$3,
    cst_any = cst_any$1;
   function pconst_integer(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(0 !== x[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_integer);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pconst_char(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(1 !== x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_char);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pconst_string(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  if(2 !== x[0])
                   return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_string);
                  var x2 = x[3], x1 = x[2], x0 = x[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                   k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                  return k$2;};};};
              }];};};
   }
   function pconst_float(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(3 !== x[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_float);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pcstr_tuple(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(0 !== x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_tuple);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pcstr_record(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(0 === x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_record);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function constructor_declaration_attrib(_E_, param){
    var f2 = param[1], f1 = _E_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[5],
                 k$0 = caml_call4(f1, ctx, loc, x[6], k),
                 x$0 = [0, x[1], x[2], x[3], x[4], x[5], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function constructor_declaration(param){
    var name = param[1];
    return function(param){
     var vars = param[1];
     return function(param){
      var args = param[1];
      return function(param){
       var res = param[1];
       return [0,
               function(ctx){
                return function(loc){
                 return function(x){
                  return function(k){
                   caml_call1(Ppxlib_Common[8], x[6]);
                   var
                    k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                    k$1 = caml_call4(vars, ctx, loc, x[2], k$0),
                    k$2 = caml_call4(args, ctx, loc, x[3], k$1),
                    k$3 = caml_call4(res, ctx, loc, x[4], k$2);
                   return k$3;};};};
               }];};};};
   }
   function ptyp_loc(_D_, param){
    var f2 = param[1], f1 = _D_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function ptyp_attributes(_C_, param){
    var f2 = param[1], f1 = _C_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[4], k),
                 x$0 = [0, x[1], x[2], x[3], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   var
    ptyp_any =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           caml_call1(Ppxlib_Common[8], x[4]);
           var loc = x[2], x$0 = x[1];
           return typeof x$0 === "number"
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_any);};};};
       }],
    cst_var = cst_var$1,
    cst_arrow$0 = cst_arrow$1,
    cst_tuple$0 = cst_tuple$3,
    cst_constr$1 = cst_constr$2,
    cst_object = cst_object$1,
    cst_class = cst_class$2,
    cst_alias = cst_alias$2,
    cst_variant = cst_variant$3,
    cst_poly = cst_poly$1,
    cst_package = "package",
    cst_extension$3 = cst_extension$10,
    cst_Upto = "Upto";
   function ptyp_var(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 0 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_var);};};};
            }];
   }
   function ptyp_arrow(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[4]);
                  var loc = x[2], x$0 = x[1];
                  if(typeof x$0 !== "number" && 1 === x$0[0]){
                   var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                   ctx[1] = ctx[1] + 1 | 0;
                   var
                    k$0 = caml_call4(f0, ctx, loc, x0, k),
                    k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                    k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                   return k$2;
                  }
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_arrow$0);};};};
              }];};};
   }
   function ptyp_tuple(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 2 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_tuple$0);};};};
            }];
   }
   function ptyp_constr(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 3 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_constr$1);};};};
             }];};
   }
   function ptyp_object(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 4 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_object);};};};
             }];};
   }
   function ptyp_class(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 5 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_class);};};};
             }];};
   }
   function ptyp_alias(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 6 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_alias);};};};
             }];};
   }
   function ptyp_variant(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[4]);
                  var loc = x[2], x$0 = x[1];
                  if(typeof x$0 !== "number" && 7 === x$0[0]){
                   var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                   ctx[1] = ctx[1] + 1 | 0;
                   var
                    k$0 = caml_call4(f0, ctx, loc, x0, k),
                    k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                    k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                   return k$2;
                  }
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_variant);};};};
              }];};};
   }
   function ptyp_poly(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 8 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_poly);};};};
             }];};
   }
   function ptyp_package(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 9 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_package);};};};
            }];
   }
   function ptyp_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 10 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2
                        (Ppxlib_Ast_pattern0[2], loc, cst_extension$3);};};};
            }];
   }
   var
    upto =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Upto)
                   : (ctx[1] = ctx[1] + 1 | 0, k);};};};
       }],
    cst_Downto = "Downto",
    downto =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Downto);};};};
       }],
    cst_string$0 = cst_string$1,
    cst_int = "int",
    cst_ident = cst_ident$3,
    cst_bool = "bool",
    cst_ident$0 = cst_ident$3,
    cst_constant = cst_constant$1,
    cst_let$0 = cst_let$1,
    cst_function = "function",
    cst_fun$0 = cst_fun$1,
    cst_apply$0 = cst_apply$2,
    cst_match = "match",
    cst_try = "try",
    cst_tuple$1 = cst_tuple$3,
    cst_construct = cst_construct$1,
    cst_variant$0 = cst_variant$3,
    cst_record$0 = cst_record$3,
    cst_field = "field",
    cst_setfield = "setfield",
    cst_array = cst_array$1,
    cst_ifthenelse = "ifthenelse",
    cst_sequence = "sequence",
    cst_while = "while",
    cst_for = "for",
    cst_constraint$2 = cst_constraint$5,
    cst_coerce = "coerce",
    cst_send = "send",
    cst_new = "new",
    cst_setinstvar = "setinstvar",
    cst_override = "override",
    cst_letmodule = "letmodule",
    cst_letexception = "letexception",
    cst_assert = "assert",
    cst_lazy = cst_lazy$1,
    cst_poly$0 = cst_poly$1,
    cst_object$0 = cst_object$1,
    cst_newtype = "newtype",
    cst_pack = "pack",
    cst_open$1 = cst_open$6,
    cst_letop = "letop",
    cst_extension$4 = cst_extension$10,
    cst_unreachable = "unreachable";
   function pdira_loc(_B_, param){
    var f2 = param[1], f1 = _B_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function pdir_string(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(0 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_string$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pdir_int(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var loc = x[2], x$0 = x[1];
                 if(1 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_int);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pdir_ident(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(2 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_ident);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pdir_bool(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(3 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_bool);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pexp_loc(_A_, param){
    var f2 = param[1], f1 = _A_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function pexp_attributes(_z_, param){
    var f2 = param[1], f1 = _z_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[4], k),
                 x$0 = [0, x[1], x[2], x[3], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function pexp_ident(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 0 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_ident$0);};};};
            }];
   }
   function pexp_constant(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 1 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_constant);};};};
            }];
   }
   function pexp_let(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[4]);
                  var loc = x[2], x$0 = x[1];
                  if(typeof x$0 !== "number" && 2 === x$0[0]){
                   var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                   ctx[1] = ctx[1] + 1 | 0;
                   var
                    k$0 = caml_call4(f0, ctx, loc, x0, k),
                    k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                    k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                   return k$2;
                  }
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_let$0);};};};
              }];};};
   }
   function pexp_function(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 3 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_function);};};};
            }];
   }
   function pexp_fun(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return function(param){
       var f3 = param[1];
       return [0,
               function(ctx){
                return function(loc){
                 return function(x){
                  return function(k){
                   caml_call1(Ppxlib_Common[8], x[4]);
                   var loc = x[2], x$0 = x[1];
                   if(typeof x$0 !== "number" && 4 === x$0[0]){
                    var x3 = x$0[4], x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                    ctx[1] = ctx[1] + 1 | 0;
                    var
                     k$0 = caml_call4(f0, ctx, loc, x0, k),
                     k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                     k$2 = caml_call4(f2, ctx, loc, x2, k$1),
                     k$3 = caml_call4(f3, ctx, loc, x3, k$2);
                    return k$3;
                   }
                   return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_fun$0);};};};
               }];};};};
   }
   function pexp_apply(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 5 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_apply$0);};};};
             }];};
   }
   function pexp_match(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 6 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_match);};};};
             }];};
   }
   function pexp_try(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 7 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_try);};};};
             }];};
   }
   function pexp_tuple(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 8 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_tuple$1);};};};
            }];
   }
   function pexp_construct(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 9 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_construct);};};};
             }];};
   }
   function pexp_variant(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 10 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_variant$0);};};};
             }];};
   }
   function pexp_record(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 11 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_record$0);};};};
             }];};
   }
   function pexp_field(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 12 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_field);};};};
             }];};
   }
   function pexp_setfield(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[4]);
                  var loc = x[2], x$0 = x[1];
                  if(typeof x$0 !== "number" && 13 === x$0[0]){
                   var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                   ctx[1] = ctx[1] + 1 | 0;
                   var
                    k$0 = caml_call4(f0, ctx, loc, x0, k),
                    k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0),
                    k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                   return k$2;
                  }
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_setfield);};};};
              }];};};
   }
   function pexp_array(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 14 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_array);};};};
            }];
   }
   function pexp_ifthenelse(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[4]);
                  var loc = x[2], x$0 = x[1];
                  if(typeof x$0 !== "number" && 15 === x$0[0]){
                   var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                   ctx[1] = ctx[1] + 1 | 0;
                   var
                    k$0 = caml_call4(f0, ctx, loc, x0, k),
                    k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                    k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                   return k$2;
                  }
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_ifthenelse);};};};
              }];};};
   }
   function pexp_sequence(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 16 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_sequence);};};};
             }];};
   }
   function pexp_while(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 17 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_while);};};};
             }];};
   }
   function pexp_for(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return function(param){
       var f3 = param[1];
       return function(param){
        var f4 = param[1];
        return [0,
                function(ctx){
                 return function(loc){
                  return function(x){
                   return function(k){
                    caml_call1(Ppxlib_Common[8], x[4]);
                    var loc = x[2], x$0 = x[1];
                    if(typeof x$0 !== "number" && 18 === x$0[0]){
                     var
                      x4 = x$0[5],
                      x3 = x$0[4],
                      x2 = x$0[3],
                      x1 = x$0[2],
                      x0 = x$0[1];
                     ctx[1] = ctx[1] + 1 | 0;
                     var
                      k$0 = caml_call4(f0, ctx, loc, x0, k),
                      k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                      k$2 = caml_call4(f2, ctx, loc, x2, k$1),
                      k$3 = caml_call4(f3, ctx, loc, x3, k$2),
                      k$4 = caml_call4(f4, ctx, loc, x4, k$3);
                     return k$4;
                    }
                    return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_for);};};};
                }];};};};};
   }
   function pexp_constraint(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 19 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_constraint$2);};};};
             }];};
   }
   function pexp_coerce(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[4]);
                  var loc = x[2], x$0 = x[1];
                  if(typeof x$0 !== "number" && 20 === x$0[0]){
                   var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                   ctx[1] = ctx[1] + 1 | 0;
                   var
                    k$0 = caml_call4(f0, ctx, loc, x0, k),
                    k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                    k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                   return k$2;
                  }
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_coerce);};};};
              }];};};
   }
   function pexp_send(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 21 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_send);};};};
             }];};
   }
   function pexp_new(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 22 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_new);};};};
            }];
   }
   function pexp_setinstvar(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 23 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_setinstvar);};};};
             }];};
   }
   function pexp_override(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 24 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_override);};};};
            }];
   }
   function pexp_letmodule(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[4]);
                  var loc = x[2], x$0 = x[1];
                  if(typeof x$0 !== "number" && 25 === x$0[0]){
                   var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                   ctx[1] = ctx[1] + 1 | 0;
                   var
                    k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                    k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                    k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                   return k$2;
                  }
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_letmodule);};};};
              }];};};
   }
   function pexp_letexception(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 26 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_letexception);};};};
             }];};
   }
   function pexp_assert(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 27 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_assert);};};};
            }];
   }
   function pexp_lazy(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 28 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_lazy);};};};
            }];
   }
   function pexp_poly(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 29 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_poly$0);};};};
             }];};
   }
   function pexp_object(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 30 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_object$0);};};};
            }];
   }
   function pexp_newtype(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 31 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_newtype);};};};
             }];};
   }
   function pexp_pack(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 32 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_pack);};};};
            }];
   }
   function pexp_open(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 33 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_open$1);};};};
             }];};
   }
   function pexp_letop(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 34 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_letop);};};};
            }];
   }
   function pexp_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 35 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2
                        (Ppxlib_Ast_pattern0[2], loc, cst_extension$4);};};};
            }];
   }
   var
    pexp_unreachable =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           caml_call1(Ppxlib_Common[8], x[4]);
           var loc = x[2], x$0 = x[1];
           return typeof x$0 === "number"
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_unreachable);};};};
       }],
    cst_decl = "decl",
    cst_rebind = "rebind",
    cst_Unit = "Unit";
   function extension_constructor_attribut(_y_, param){
    var f2 = param[1], f1 = _y_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[3],
                 k$0 = caml_call4(f1, ctx, loc, x[4], k),
                 x$0 = [0, x[1], x[2], x[3], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function extension_constructor(param){
    var name = param[1];
    return function(param){
     var kind = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var
                  k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                  k$1 = caml_call4(kind, ctx, loc, x[2], k$0);
                 return k$1;};};};
             }];};
   }
   function pext_decl(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  if(0 !== x[0])
                   return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_decl);
                  var x2 = x[3], x1 = x[2], x0 = x[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                   k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                  return k$2;};};};
              }];};};
   }
   function pext_rebind(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(0 === x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_rebind);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
                return k$0;};};};
            }];
   }
   var
    unit =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Unit)
                   : (ctx[1] = ctx[1] + 1 | 0, k);};};};
       }],
    cst_Named = "Named",
    cst_Injective = "Injective";
   function named(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(! x)
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Named);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function include_infos_attributes(_x_, param){
    var f2 = param[1], f1 = _x_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function include_infos(param){
    var mod = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var k$0 = caml_call4(mod, ctx, loc, x[1], k);
                return k$0;};};};
            }];
   }
   var
    injective =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Injective)
                   : (ctx[1] = ctx[1] + 1 | 0, k);};};};
       }],
    cst_NoInjectivity = "NoInjectivity",
    noinjectivity =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_NoInjectivity);};};};
       }],
    cst_Lident = "Lident",
    cst_Ldot = "Ldot",
    cst_Lapply = "Lapply",
    cst_ident$1 = cst_ident$3,
    cst_structure$0 = cst_structure$1,
    cst_functor = cst_functor$1,
    cst_apply$1 = cst_apply$2,
    cst_constraint$3 = cst_constraint$5,
    cst_unpack = cst_unpack$1,
    cst_extension$5 = cst_extension$10,
    cst_ident$2 = cst_ident$3,
    cst_signature$0 = cst_signature$1,
    cst_functor$0 = cst_functor$1,
    cst_with = "with",
    cst_typeof = "typeof",
    cst_extension$6 = cst_extension$10,
    cst_alias$0 = cst_alias$2,
    cst_Immutable = "Immutable";
   function label_declaration_attributes(_w_, param){
    var f2 = param[1], f1 = _w_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[4],
                 k$0 = caml_call4(f1, ctx, loc, x[5], k),
                 x$0 = [0, x[1], x[2], x[3], x[4], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function label_declaration(param){
    var name = param[1];
    return function(param){
     var mutable = param[1];
     return function(param){
      var type = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[5]);
                  var
                   k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                   k$1 = caml_call4(mutable, ctx, loc, x[2], k$0),
                   k$2 = caml_call4(type, ctx, loc, x[3], k$1);
                  return k$2;};};};
              }];};};
   }
   function letop(param){
    var let$0 = param[1];
    return function(param){
     var ands = param[1];
     return function(param){
      var body = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  var
                   k$0 = caml_call4(let$0, ctx, loc, x[1], k),
                   k$1 = caml_call4(ands, ctx, loc, x[2], k$0),
                   k$2 = caml_call4(body, ctx, loc, x[3], k$1);
                  return k$2;};};};
              }];};};
   }
   function location(param){
    var start = param[1];
    return function(param){
     var end = param[1];
     return function(param){
      var ghost = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  var
                   k$0 = caml_call4(start, ctx, loc, x[1], k),
                   k$1 = caml_call4(end, ctx, loc, x[2], k$0),
                   k$2 = caml_call4(ghost, ctx, loc, x[3], k$1);
                  return k$2;};};};
              }];};};
   }
   function lident(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(0 !== x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Lident);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function ldot(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(1 !== x[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Ldot);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function lapply(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(2 !== x[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Lapply);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function module_binding_attributes(_v_, param){
    var f2 = param[1], f1 = _v_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[4],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0, x[4]],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function module_binding(param){
    var name = param[1];
    return function(param){
     var expr = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var
                  k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                  k$1 = caml_call4(expr, ctx, loc, x[2], k$0);
                 return k$1;};};};
             }];};
   }
   function module_declaration_attributes(_u_, param){
    var f2 = param[1], f1 = _u_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[4],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0, x[4]],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function module_declaration(param){
    var name = param[1];
    return function(param){
     var type = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var
                  k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                  k$1 = caml_call4(type, ctx, loc, x[2], k$0);
                 return k$1;};};};
             }];};
   }
   function pmod_loc(_t_, param){
    var f2 = param[1], f1 = _t_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function pmod_attributes(_s_, param){
    var f2 = param[1], f1 = _s_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function pmod_ident(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(0 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_ident$1);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
                return k$0;};};};
            }];
   }
   function pmod_structure(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(1 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_structure$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pmod_functor(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(2 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_functor);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pmod_apply(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(3 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_apply$1);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pmod_constraint(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(4 !== x$0[0])
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_constraint$3);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pmod_unpack(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(5 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_unpack);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pmod_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(6 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_extension$5);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function module_substitution_attributes(_r_, param){
    var f2 = param[1], f1 = _r_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[4],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0, x[4]],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function module_substitution(param){
    var name = param[1];
    return function(param){
     var manifest = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var
                  k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                  k$1 = caml_call4(manifest, ctx, x[2][2], x[2][1], k$0);
                 return k$1;};};};
             }];};
   }
   function pmty_loc(_q_, param){
    var f2 = param[1], f1 = _q_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function pmty_attributes(_p_, param){
    var f2 = param[1], f1 = _p_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function pmty_ident(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(0 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_ident$2);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
                return k$0;};};};
            }];
   }
   function pmty_signature(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(1 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_signature$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pmty_functor(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(2 !== x$0[0])
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_functor$0);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pmty_with(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(3 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_with);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pmty_typeof(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(4 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_typeof);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pmty_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(5 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_extension$6);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pmty_alias(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(6 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_alias$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
                return k$0;};};};
            }];
   }
   function module_type_declaration_attrib(_o_, param){
    var f2 = param[1], f1 = _o_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[4],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0, x[4]],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function module_type_declaration(param){
    var name = param[1];
    return function(param){
     var type = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var
                  k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                  k$1 = caml_call4(type, ctx, loc, x[2], k$0);
                 return k$1;};};};
             }];};
   }
   var
    immutable =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Immutable)
                   : (ctx[1] = ctx[1] + 1 | 0, k);};};};
       }],
    cst_Mutable = "Mutable",
    mutable =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Mutable);};};};
       }],
    cst_Otag = "Otag",
    cst_Oinherit = "Oinherit",
    cst_Override = "Override";
   function pof_loc(_n_, param){
    var f2 = param[1], f1 = _n_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function pof_attributes(_m_, param){
    var f2 = param[1], f1 = _m_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function otag(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var loc = x[2], x$0 = x[1];
                 if(0 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Otag);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function oinherit(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(0 === x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Oinherit);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function open_infos_attributes(_l_, param){
    var f2 = param[1], f1 = _l_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[3],
                 k$0 = caml_call4(f1, ctx, loc, x[4], k),
                 x$0 = [0, x[1], x[2], x[3], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function open_infos(param){
    var expr = param[1];
    return function(param){
     var override = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var
                  k$0 = caml_call4(expr, ctx, loc, x[1], k),
                  k$1 = caml_call4(override, ctx, loc, x[2], k$0);
                 return k$1;};};};
             }];};
   }
   var
    override =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Override)
                   : (ctx[1] = ctx[1] + 1 | 0, k);};};};
       }],
    cst_Fresh = "Fresh",
    fresh =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Fresh);};};};
       }],
    cst_any$0 = cst_any$1;
   function ppat_loc(_k_, param){
    var f2 = param[1], f1 = _k_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function ppat_attributes(_j_, param){
    var f2 = param[1], f1 = _j_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[4], k),
                 x$0 = [0, x[1], x[2], x[3], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   var
    ppat_any =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           caml_call1(Ppxlib_Common[8], x[4]);
           var loc = x[2], x$0 = x[1];
           return typeof x$0 === "number"
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_any$0);};};};
       }],
    cst_var$0 = cst_var$1,
    cst_alias$1 = cst_alias$2,
    cst_constant$0 = cst_constant$1,
    cst_interval = "interval",
    cst_tuple$2 = cst_tuple$3,
    cst_construct$0 = cst_construct$1,
    cst_variant$1 = cst_variant$3,
    cst_record$1 = cst_record$3,
    cst_array$0 = cst_array$1,
    cst_or = "or",
    cst_constraint$4 = cst_constraint$5,
    cst_type = cst_type$3,
    cst_lazy$0 = cst_lazy$1,
    cst_unpack$0 = cst_unpack$1,
    cst_exception = cst_exception$2,
    cst_extension$7 = cst_extension$10,
    cst_open$2 = cst_open$6,
    cst_PStr = "PStr",
    cst_PSig = "PSig",
    cst_PTyp = "PTyp",
    cst_PPat = "PPat",
    cst_Private = "Private";
   function ppat_var(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 0 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_var$0);};};};
            }];
   }
   function ppat_alias(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 1 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_alias$1);};};};
             }];};
   }
   function ppat_constant(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 2 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_constant$0);};};};
            }];
   }
   function ppat_interval(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 3 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_interval);};};};
             }];};
   }
   function ppat_tuple(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 4 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_tuple$2);};};};
            }];
   }
   function ppat_construct(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 5 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_construct$0);};};};
             }];};
   }
   function ppat_variant(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 6 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_variant$1);};};};
             }];};
   }
   function ppat_record(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 7 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_record$1);};};};
             }];};
   }
   function ppat_array(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 8 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_array$0);};};};
            }];
   }
   function ppat_or(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 9 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_or);};};};
             }];};
   }
   function ppat_constraint(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 10 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, loc, x0, k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_constraint$4);};};};
             }];};
   }
   function ppat_type(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 11 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_type);};};};
            }];
   }
   function ppat_lazy(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 12 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_lazy$0);};};};
            }];
   }
   function ppat_unpack(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 13 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, x0[2], x0[1], k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_unpack$0);};};};
            }];
   }
   function ppat_exception(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 14 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_exception);};};};
            }];
   }
   function ppat_extension(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[4]);
                var loc = x[2], x$0 = x[1];
                if(typeof x$0 !== "number" && 15 === x$0[0]){
                 var x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2
                        (Ppxlib_Ast_pattern0[2], loc, cst_extension$7);};};};
            }];
   }
   function ppat_open(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[4]);
                 var loc = x[2], x$0 = x[1];
                 if(typeof x$0 !== "number" && 16 === x$0[0]){
                  var x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                  return k$1;
                 }
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_open$2);};};};
             }];};
   }
   function pstr(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(0 !== x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_PStr);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(1 !== x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_PSig);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function ptyp(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(2 !== x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_PTyp);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function ppat(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(3 !== x[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_PPat);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function position(param){
    var fname = param[1];
    return function(param){
     var lnum = param[1];
     return function(param){
      var bol = param[1];
      return function(param){
       var cnum = param[1];
       return [0,
               function(ctx){
                return function(loc){
                 return function(x){
                  return function(k){
                   var
                    k$0 = caml_call4(fname, ctx, loc, x[1], k),
                    k$1 = caml_call4(lnum, ctx, loc, x[2], k$0),
                    k$2 = caml_call4(bol, ctx, loc, x[3], k$1),
                    k$3 = caml_call4(cnum, ctx, loc, x[4], k$2);
                   return k$3;};};};
               }];};};};
   }
   var
    private$0 =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Private)
                   : (ctx[1] = ctx[1] + 1 | 0, k);};};};
       }],
    cst_Public = "Public",
    public$0 =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Public);};};};
       }],
    cst_Nonrecursive = "Nonrecursive",
    nonrecursive =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Nonrecursive)
                   : (ctx[1] = ctx[1] + 1 | 0, k);};};};
       }],
    cst_Recursive = "Recursive",
    recursive =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Recursive);};};};
       }],
    cst_Rtag = "Rtag",
    cst_Rinherit = "Rinherit",
    cst_value = cst_value$1,
    cst_type$0 = cst_type$3,
    cst_typesubst = cst_typesubst$1,
    cst_typext = cst_typext$1,
    cst_exception$0 = cst_exception$2,
    cst_module = cst_module$2,
    cst_modsubst = cst_modsubst$1,
    cst_recmodule = cst_recmodule$1,
    cst_modtype = cst_modtype$2,
    cst_modtypesubst = cst_modtypesubst$1,
    cst_open$3 = cst_open$6,
    cst_include = cst_include$1,
    cst_class$0 = cst_class$2,
    cst_class_type = cst_class_type$1,
    cst_attribute$1 = cst_attribute$3,
    cst_extension$8 = cst_extension$10,
    cst_eval = "eval",
    cst_value$0 = cst_value$1,
    cst_primitive = "primitive",
    cst_type$1 = cst_type$3,
    cst_typext$0 = cst_typext$1,
    cst_exception$1 = cst_exception$2,
    cst_module$0 = cst_module$2,
    cst_recmodule$0 = cst_recmodule$1,
    cst_modtype$0 = cst_modtype$2,
    cst_open$4 = cst_open$6,
    cst_class$1 = cst_class$2,
    cst_class_type$0 = cst_class_type$1,
    cst_include$0 = cst_include$1,
    cst_attribute$2 = cst_attribute$3,
    cst_extension$9 = cst_extension$10,
    cst_def = "def",
    cst_dir = "dir",
    cst_abstract = "abstract";
   function prf_loc(_i_, param){
    var f2 = param[1], f1 = _i_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function prf_attributes(_h_, param){
    var f2 = param[1], f1 = _h_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function rtag(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return function(param){
      var f2 = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[3]);
                  var loc = x[2], x$0 = x[1];
                  if(0 !== x$0[0])
                   return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Rtag);
                  var x2 = x$0[3], x1 = x$0[2], x0 = x$0[1];
                  ctx[1] = ctx[1] + 1 | 0;
                  var
                   k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                   k$1 = caml_call4(f1, ctx, loc, x1, k$0),
                   k$2 = caml_call4(f2, ctx, loc, x2, k$1);
                  return k$2;};};};
              }];};};
   }
   function rinherit(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var loc = x[2], x$0 = x[1];
                if(0 === x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Rinherit);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_loc(_g_, param){
    var f2 = param[1], f1 = _g_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function psig_value(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(0 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_value);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_type(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var loc = x[2], x$0 = x[1];
                 if(1 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_type$0);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function psig_typesubst(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(2 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_typesubst);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_typext(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(3 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_typext);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_exception(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(4 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_exception$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_module(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(5 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_module);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_modsubst(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(6 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_modsubst);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_recmodule(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(7 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_recmodule);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_modtype(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(8 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_modtype);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_modtypesubst(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(9 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_modtypesubst);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_open(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(10 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_open$3);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_include(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(11 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_include);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_class(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(12 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_class$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_class_type(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(13 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_class_type);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_attribute(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(14 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_attribute$1);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function psig_extension(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var loc = x[2], x$0 = x[1];
                 if(15 !== x$0[0])
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_extension$8);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pstr_loc(_f_, param){
    var f2 = param[1], f1 = _f_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, loc, k),
                 k$1 = caml_call4(f2, ctx, loc, x, k$0);
                return k$1;};};};
            }];
   }
   function pstr_eval(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var loc = x[2], x$0 = x[1];
                 if(0 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_eval);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pstr_value(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var loc = x[2], x$0 = x[1];
                 if(1 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_value$0);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pstr_primitive(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(2 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_primitive);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_type(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var loc = x[2], x$0 = x[1];
                 if(3 !== x$0[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_type$1);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pstr_typext(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(4 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_typext$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_exception(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(5 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_exception$1);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_module(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(6 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_module$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_recmodule(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(7 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_recmodule$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_modtype(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(8 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_modtype$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_open(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(9 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_open$4);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_class(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(10 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_class$1);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_class_type(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(11 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_class_type$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_include(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(12 !== x$0[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_include$0);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_attribute(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var loc = x[2], x$0 = x[1];
                if(13 !== x$0[0])
                 return caml_call2
                         (Ppxlib_Ast_pattern0[2], loc, cst_attribute$2);
                var x0 = x$0[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function pstr_extension(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var loc = x[2], x$0 = x[1];
                 if(14 !== x$0[0])
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_extension$9);
                 var x1 = x$0[2], x0 = x$0[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, loc, x0, k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function toplevel_directive(param){
    var name = param[1];
    return function(param){
     var arg = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 var
                  k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                  k$1 = caml_call4(arg, ctx, loc, x[2], k$0);
                 return k$1;};};};
             }];};
   }
   function ptop_def(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(0 !== x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_def);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function ptop_dir(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(0 === x[0])
                 return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_dir);
                var x0 = x[1];
                ctx[1] = ctx[1] + 1 | 0;
                var k$0 = caml_call4(f0, ctx, loc, x0, k);
                return k$0;};};};
            }];
   }
   function type_declaration_attributes(_e_, param){
    var f2 = param[1], f1 = _e_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[8],
                 k$0 = caml_call4(f1, ctx, loc, x[7], k),
                 x$0 = [0, x[1], x[2], x[3], x[4], x[5], x[6], 0, x[8]],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function type_declaration(param){
    var name = param[1];
    return function(param){
     var params = param[1];
     return function(param){
      var cstrs = param[1];
      return function(param){
       var kind = param[1];
       return function(param){
        var private$0 = param[1];
        return function(param){
         var manifest = param[1];
         return [0,
                 function(ctx){
                  return function(loc){
                   return function(x){
                    return function(k){
                     caml_call1(Ppxlib_Common[8], x[7]);
                     var
                      k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                      k$1 = caml_call4(params, ctx, loc, x[2], k$0),
                      k$2 = caml_call4(cstrs, ctx, loc, x[3], k$1),
                      k$3 = caml_call4(kind, ctx, loc, x[4], k$2),
                      k$4 = caml_call4(private$0, ctx, loc, x[5], k$3),
                      k$5 = caml_call4(manifest, ctx, loc, x[6], k$4);
                     return k$5;};};};
                 }];};};};};};
   }
   function type_exception_attributes(_d_, param){
    var f2 = param[1], f1 = _d_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[2],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function type_exception(param){
    var constructor = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                caml_call1(Ppxlib_Common[8], x[3]);
                var k$0 = caml_call4(constructor, ctx, loc, x[1], k);
                return k$0;};};};
            }];
   }
   function type_extension_attributes(_c_, param){
    var f2 = param[1], f1 = _c_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[5],
                 k$0 = caml_call4(f1, ctx, loc, x[6], k),
                 x$0 = [0, x[1], x[2], x[3], x[4], x[5], 0],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function type_extension(param){
    var path = param[1];
    return function(param){
     var params = param[1];
     return function(param){
      var constructors = param[1];
      return function(param){
       var private$0 = param[1];
       return [0,
               function(ctx){
                return function(loc){
                 return function(x){
                  return function(k){
                   caml_call1(Ppxlib_Common[8], x[6]);
                   var
                    k$0 = caml_call4(path, ctx, x[1][2], x[1][1], k),
                    k$1 = caml_call4(params, ctx, loc, x[2], k$0),
                    k$2 = caml_call4(constructors, ctx, loc, x[3], k$1),
                    k$3 = caml_call4(private$0, ctx, loc, x[4], k$2);
                   return k$3;};};};
               }];};};};
   }
   var
    ptype_abstract =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           if(typeof x === "number" && ! x){
            ctx[1] = ctx[1] + 1 | 0;
            return k;
           }
           return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_abstract);};};};
       }],
    cst_variant$2 = cst_variant$3,
    cst_record$2 = cst_record$3,
    cst_open$5 = cst_open$6;
   function ptype_variant(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(typeof x !== "number" && 0 === x[0]){
                 var x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_variant$2);};};};
            }];
   }
   function ptype_record(param){
    var f0 = param[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                if(typeof x !== "number" && 1 === x[0]){
                 var x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var k$0 = caml_call4(f0, ctx, loc, x0, k);
                 return k$0;
                }
                return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_record$2);};};};
            }];
   }
   var
    ptype_open =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           if(typeof x === "number" && x){ctx[1] = ctx[1] + 1 | 0; return k;}
           return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_open$5);};};};
       }],
    cst_Covariant = "Covariant";
   function value_binding_attributes(_b_, param){
    var f2 = param[1], f1 = _b_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[4],
                 k$0 = caml_call4(f1, ctx, loc, x[3], k),
                 x$0 = [0, x[1], x[2], 0, x[4]],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function value_binding(param){
    var pat = param[1];
    return function(param){
     var expr = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 caml_call1(Ppxlib_Common[8], x[3]);
                 var
                  k$0 = caml_call4(pat, ctx, loc, x[1], k),
                  k$1 = caml_call4(expr, ctx, loc, x[2], k$0);
                 return k$1;};};};
             }];};
   }
   function value_description_attributes(_a_, param){
    var f2 = param[1], f1 = _a_[1];
    return [0,
            function(ctx){
             return function(loc){
              return function(x){
               return function(k){
                var
                 loc = x[5],
                 k$0 = caml_call4(f1, ctx, loc, x[4], k),
                 x$0 = [0, x[1], x[2], x[3], 0, x[5]],
                 k$1 = caml_call4(f2, ctx, loc, x$0, k$0);
                return k$1;};};};
            }];
   }
   function value_description(param){
    var name = param[1];
    return function(param){
     var type = param[1];
     return function(param){
      var prim = param[1];
      return [0,
              function(ctx){
               return function(loc){
                return function(x){
                 return function(k){
                  caml_call1(Ppxlib_Common[8], x[4]);
                  var
                   k$0 = caml_call4(name, ctx, x[1][2], x[1][1], k),
                   k$1 = caml_call4(type, ctx, loc, x[2], k$0),
                   k$2 = caml_call4(prim, ctx, loc, x[3], k$1);
                  return k$2;};};};
              }];};};
   }
   var
    covariant =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Covariant)
                   : (ctx[1] = ctx[1] + 1 | 0, k);};};};
       }],
    cst_Contravariant = "Contravariant",
    contravariant =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return 1 === x
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Contravariant);};};};
       }],
    cst_NoVariance = "NoVariance",
    novariance =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return 2 <= x
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_NoVariance);};};};
       }],
    cst_Virtual = "Virtual",
    virtual =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Virtual)
                   : (ctx[1] = ctx[1] + 1 | 0, k);};};};
       }],
    cst_Concrete = "Concrete",
    concrete =
      [0,
       function(ctx){
        return function(loc){
         return function(x){
          return function(k){
           return x
                   ? (ctx[1] = ctx[1] + 1 | 0, k)
                   : caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_Concrete);};};};
       }],
    cst_type$2 = cst_type$3,
    cst_module$1 = cst_module$2,
    cst_modtype$1 = cst_modtype$2,
    cst_modtypesubst$0 = cst_modtypesubst$1,
    cst_typesubst$0 = cst_typesubst$1,
    cst_modsubst$0 = cst_modsubst$1;
   function pwith_type(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(0 !== x[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_type$2);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pwith_module(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(1 !== x[0])
                  return caml_call2(Ppxlib_Ast_pattern0[2], loc, cst_module$1);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                  k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
                 return k$1;};};};
             }];};
   }
   function pwith_modtype(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(2 !== x[0])
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_modtype$1);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pwith_modtypesubst(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(3 !== x[0])
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_modtypesubst$0);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pwith_typesubst(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(4 !== x[0])
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_typesubst$0);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                  k$1 = caml_call4(f1, ctx, loc, x1, k$0);
                 return k$1;};};};
             }];};
   }
   function pwith_modsubst(param){
    var f0 = param[1];
    return function(param){
     var f1 = param[1];
     return [0,
             function(ctx){
              return function(loc){
               return function(x){
                return function(k){
                 if(5 !== x[0])
                  return caml_call2
                          (Ppxlib_Ast_pattern0[2], loc, cst_modsubst$0);
                 var x1 = x[2], x0 = x[1];
                 ctx[1] = ctx[1] + 1 | 0;
                 var
                  k$0 = caml_call4(f0, ctx, x0[2], x0[1], k),
                  k$1 = caml_call4(f1, ctx, x1[2], x1[1], k$0);
                 return k$1;};};};
             }];};
   }
   var
    Ppxlib_Ast_pattern_generated =
      [0,
       nolabel,
       labelled,
       optional,
       attribute,
       binding_op,
       case$0,
       pcl_loc,
       pcl_attributes,
       pcl_constr,
       pcl_structure,
       pcl_fun,
       pcl_apply,
       pcl_let,
       pcl_constraint,
       pcl_extension,
       pcl_open,
       pcf_loc,
       pcf_attributes,
       pcf_inherit,
       pcf_val,
       pcf_method,
       pcf_constraint,
       pcf_initializer,
       pcf_attribute,
       pcf_extension,
       cfk_virtual,
       cfk_concrete,
       class_infos_attributes,
       class_infos,
       class_signature,
       class_structure,
       pcty_loc,
       pcty_attributes,
       pcty_constr,
       pcty_signature,
       pcty_arrow,
       pcty_extension,
       pcty_open,
       pctf_loc,
       pctf_attributes,
       pctf_inherit,
       pctf_val,
       pctf_method,
       pctf_constraint,
       pctf_attribute,
       pctf_extension,
       closed,
       open,
       pconst_integer,
       pconst_char,
       pconst_string,
       pconst_float,
       pcstr_tuple,
       pcstr_record,
       constructor_declaration_attrib,
       constructor_declaration,
       ptyp_loc,
       ptyp_attributes,
       ptyp_any,
       ptyp_var,
       ptyp_arrow,
       ptyp_tuple,
       ptyp_constr,
       ptyp_object,
       ptyp_class,
       ptyp_alias,
       ptyp_variant,
       ptyp_poly,
       ptyp_package,
       ptyp_extension,
       upto,
       downto,
       pdira_loc,
       pdir_string,
       pdir_int,
       pdir_ident,
       pdir_bool,
       pexp_loc,
       pexp_attributes,
       pexp_ident,
       pexp_constant,
       pexp_let,
       pexp_function,
       pexp_fun,
       pexp_apply,
       pexp_match,
       pexp_try,
       pexp_tuple,
       pexp_construct,
       pexp_variant,
       pexp_record,
       pexp_field,
       pexp_setfield,
       pexp_array,
       pexp_ifthenelse,
       pexp_sequence,
       pexp_while,
       pexp_for,
       pexp_constraint,
       pexp_coerce,
       pexp_send,
       pexp_new,
       pexp_setinstvar,
       pexp_override,
       pexp_letmodule,
       pexp_letexception,
       pexp_assert,
       pexp_lazy,
       pexp_poly,
       pexp_object,
       pexp_newtype,
       pexp_pack,
       pexp_open,
       pexp_letop,
       pexp_extension,
       pexp_unreachable,
       extension_constructor_attribut,
       extension_constructor,
       pext_decl,
       pext_rebind,
       unit,
       named,
       include_infos_attributes,
       include_infos,
       injective,
       noinjectivity,
       label_declaration_attributes,
       label_declaration,
       letop,
       location,
       lident,
       ldot,
       lapply,
       module_binding_attributes,
       module_binding,
       module_declaration_attributes,
       module_declaration,
       pmod_loc,
       pmod_attributes,
       pmod_ident,
       pmod_structure,
       pmod_functor,
       pmod_apply,
       pmod_constraint,
       pmod_unpack,
       pmod_extension,
       module_substitution_attributes,
       module_substitution,
       pmty_loc,
       pmty_attributes,
       pmty_ident,
       pmty_signature,
       pmty_functor,
       pmty_with,
       pmty_typeof,
       pmty_extension,
       pmty_alias,
       module_type_declaration_attrib,
       module_type_declaration,
       immutable,
       mutable,
       pof_loc,
       pof_attributes,
       otag,
       oinherit,
       open_infos_attributes,
       open_infos,
       override,
       fresh,
       ppat_loc,
       ppat_attributes,
       ppat_any,
       ppat_var,
       ppat_alias,
       ppat_constant,
       ppat_interval,
       ppat_tuple,
       ppat_construct,
       ppat_variant,
       ppat_record,
       ppat_array,
       ppat_or,
       ppat_constraint,
       ppat_type,
       ppat_lazy,
       ppat_unpack,
       ppat_exception,
       ppat_extension,
       ppat_open,
       pstr,
       psig,
       ptyp,
       ppat,
       position,
       private$0,
       public$0,
       nonrecursive,
       recursive,
       prf_loc,
       prf_attributes,
       rtag,
       rinherit,
       psig_loc,
       psig_value,
       psig_type,
       psig_typesubst,
       psig_typext,
       psig_exception,
       psig_module,
       psig_modsubst,
       psig_recmodule,
       psig_modtype,
       psig_modtypesubst,
       psig_open,
       psig_include,
       psig_class,
       psig_class_type,
       psig_attribute,
       psig_extension,
       pstr_loc,
       pstr_eval,
       pstr_value,
       pstr_primitive,
       pstr_type,
       pstr_typext,
       pstr_exception,
       pstr_module,
       pstr_recmodule,
       pstr_modtype,
       pstr_open,
       pstr_class,
       pstr_class_type,
       pstr_include,
       pstr_attribute,
       pstr_extension,
       toplevel_directive,
       ptop_def,
       ptop_dir,
       type_declaration_attributes,
       type_declaration,
       type_exception_attributes,
       type_exception,
       type_extension_attributes,
       type_extension,
       ptype_abstract,
       ptype_variant,
       ptype_record,
       ptype_open,
       value_binding_attributes,
       value_binding,
       value_description_attributes,
       value_description,
       covariant,
       contravariant,
       novariance,
       virtual,
       concrete,
       pwith_type,
       pwith_module,
       pwith_modtype,
       pwith_modtypesubst,
       pwith_typesubst,
       pwith_modsubst];
   runtime.caml_register_global
    (201, Ppxlib_Ast_pattern_generated, "Ppxlib__Ast_pattern_generated");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_pattern
//# unitInfo: Requires: Ppxlib__Ast_pattern0, Ppxlib__Ast_pattern_generated, Ppxlib__Common, Ppxlib__Import, Ppxlib__Location, Stdlib, Stdlib__Int32, Stdlib__Int64, Stdlib__Nativeint, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "::",
    cst$3 = "[]",
    cst_false$0 = "false",
    cst_list$1 = "list",
    cst_true$0 = "true",
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = cst$3,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Ast_pattern0 = global_data.Ppxlib__Ast_pattern0,
    Ppxlib_Ast_pattern_generated = global_data.Ppxlib__Ast_pattern_generated,
    Expected = Ppxlib_Ast_pattern0[1],
    fail = Ppxlib_Ast_pattern0[2],
    _a_ = [0, [2, 0, [11, " expected", 0]], "%s expected"];
   function restore_context(ctx, backup){ctx[1] = backup;}
   function incr_matched(c){c[1] = c[1] + 1 | 0;}
   function parse_res(param, loc, on_error, x, k){
    var f = param[1];
    try{var _v_ = [0, caml_call4(f, [0, 0], loc, x, k)]; return _v_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Expected) throw caml_maybe_attach_backtrace(exn, 0);
     var expected = exn[3], loc$0 = exn[2];
     if(! on_error)
      return [1,
              [0, caml_call3(Ppxlib_Location[13][2], loc$0, _a_, expected), 0]];
     var f$0 = on_error[1];
     return [0, caml_call1(f$0, 0)];
    }
   }
   function parse(param, loc, on_error, x, k){
    var f = param[1], match = parse_res([0, f], loc, on_error, x, k);
    if(0 === match[0]){var r = match[1]; return r;}
    var r$0 = match[1][1];
    return caml_call1(Ppxlib_Location[13][8], r$0);
   }
   function create(t, f){return [0, t, f];}
   function parse_res$0(param, loc, x){
    var f = param[2], t = param[1];
    return parse_res(t, loc, 0, x, f);
   }
   function parse$0(param, loc, x){
    var f = param[2], t = param[1];
    return parse(t, loc, 0, x, f);
   }
   var
    symbol =
      [0,
       function(ctx, loc, x, k){incr_matched(ctx); return caml_call1(k, x);}],
    symbol$0 =
      [0,
       function(ctx, loc, x, k){
        incr_matched(ctx);
        return caml_call1(k, [0, x, loc]);
       }],
    drop = [0, function(ctx, loc, param, k){incr_matched(ctx); return k;}],
    _b_ = [0, [1, 0], "%C"],
    _c_ = [0, [3, 0, 0], "%S"],
    cst_Bool = "Bool",
    cst_false = cst_false$0;
   function as(param){
    var f1 = param[1];
    return [0,
            function(ctx, loc, x, k){
             var k$0 = caml_call4(f1, ctx, loc, x, caml_call1(k, x));
             return k$0;
            }];
   }
   function cst(to_string, opt, v){
    var equal = opt ? opt[1] : Ppxlib_Import[73][2];
    return [0,
            function(ctx, loc, x, k){
             return caml_call2(equal, x, v)
                     ? (incr_matched(ctx), k)
                     : caml_call2(fail, loc, caml_call1(to_string, v));
            }];
   }
   function int$0(v){return cst(Ppxlib_Import[92][2], 0, v);}
   function char$0(v){return cst(caml_call1(Stdlib_Printf[4], _b_), 0, v);}
   function string(v){return cst(caml_call1(Stdlib_Printf[4], _c_), 0, v);}
   function float$0(v){return cst(Ppxlib_Import[88][1], 0, v);}
   function int32(v){return cst(Stdlib_Int32[14], 0, v);}
   function int64(v){return cst(Stdlib_Int64[14], 0, v);}
   function nativeint(v){return cst(Stdlib_Nativeint[15], 0, v);}
   function bool(v){return cst(Ppxlib_Import[84][1], 0, v);}
   function bool$0(param){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return x !== cst_false$0
                     ? x
                       !== cst_true$0
                       ? caml_call2(fail, loc, cst_Bool)
                       : caml_call4(func, ctx, loc, 1, k)
                     : caml_call4(func, ctx, loc, 0, k);
            }];
   }
   var
    false$0 =
      [0,
       function(ctx, loc, x, k){
        return x
                ? caml_call2(fail, loc, cst_false)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_true = cst_true$0,
    true$0 =
      [0,
       function(ctx, loc, x, k){
        return x
                ? (ctx[1] = ctx[1] + 1 | 0, k)
                : caml_call2(fail, loc, cst_true);
       }],
    nil =
      [0,
       function(ctx, loc, x, k){
        return x ? caml_call2(fail, loc, cst$0) : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_None = "None";
   function symbol$1(_u_, param){
    var f1 = param[1], f0 = _u_[1];
    return [0,
            function(ctx, loc, x, k){
             if(! x) return caml_call2(fail, loc, cst$1);
             var x1 = x[2], x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var
              k$0 = caml_call4(f0, ctx, loc, x0, k),
              k$1 = caml_call4(f1, ctx, loc, x1, k$0);
             return k$1;
            }];
   }
   var
    none =
      [0,
       function(ctx, loc, x, k){
        return x
                ? caml_call2(fail, loc, cst_None)
                : (ctx[1] = ctx[1] + 1 | 0, k);
       }],
    cst_Some = "Some";
   function some(param){
    var f0 = param[1];
    return [0,
            function(ctx, loc, x, k){
             if(! x) return caml_call2(fail, loc, cst_Some);
             var x0 = x[1];
             ctx[1] = ctx[1] + 1 | 0;
             var k$0 = caml_call4(f0, ctx, loc, x0, k);
             return k$0;
            }];
   }
   function pair(_t_, param){
    var f2 = param[1], f1 = _t_[1];
    return [0,
            function(ctx, loc, param, k){
             var
              x2 = param[2],
              x1 = param[1],
              k$0 = caml_call4(f1, ctx, loc, x1, k),
              k$1 = caml_call4(f2, ctx, loc, x2, k$0);
             return k$1;
            }];
   }
   function triple(_s_, _r_, param){
    var f3 = param[1], f2 = _r_[1], f1 = _s_[1];
    return [0,
            function(ctx, loc, param, k){
             var
              x3 = param[3],
              x2 = param[2],
              x1 = param[1],
              k$0 = caml_call4(f1, ctx, loc, x1, k),
              k$1 = caml_call4(f2, ctx, loc, x2, k$0),
              k$2 = caml_call4(f3, ctx, loc, x3, k$1);
             return k$2;
            }];
   }
   function alt(_o_, param){
    var f2 = param[1], f1 = _o_[1];
    return [0,
            function(ctx, loc, x, k){
             var backup = ctx[1];
             try{var _q_ = caml_call4(f1, ctx, loc, x, k); return _q_;}
             catch(e1$0){
              var e1 = caml_wrap_exception(e1$0), m1 = ctx[1];
              restore_context(ctx, backup);
              try{var _p_ = caml_call4(f2, ctx, loc, x, k); return _p_;}
              catch(e2$0){
               var e2 = caml_wrap_exception(e2$0), m2 = ctx[1];
               if(! caml_call2(Ppxlib_Import[81], m1, m2))
                throw caml_maybe_attach_backtrace(e2, 0);
               restore_context(ctx, m1);
               throw caml_maybe_attach_backtrace(e1, 0);
              }
             }
            }];
   }
   function map(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(func, ctx, loc, x, caml_call1(f, k));
            }];
   }
   function map$0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(func, ctx, loc, x, caml_call2(f, loc, k));
            }];
   }
   function map_result(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call1(f, caml_call4(func, ctx, loc, x, k));
            }];
   }
   function symbol_map(t, f){return map(t, f);}
   function map0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(func, ctx, loc, x, caml_call1(k, f));
            }];
   }
   function map1(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4
                     (func,
                      ctx,
                      loc,
                      x,
                      function(a){return caml_call1(k, caml_call1(f, a));});
            }];
   }
   function map2(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4
                     (func,
                      ctx,
                      loc,
                      x,
                      function(a, b){return caml_call1(k, caml_call2(f, a, b));});
            }];
   }
   function map0$0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4
                     (func, ctx, loc, x, caml_call1(k, caml_call1(f, loc)));
            }];
   }
   function map1$0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4
                     (func,
                      ctx,
                      loc,
                      x,
                      function(a){return caml_call1(k, caml_call2(f, loc, a));});
            }];
   }
   function map2$0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4
                     (func,
                      ctx,
                      loc,
                      x,
                      function(a, b){
                       return caml_call1(k, caml_call3(f, loc, a, b));
                      });
            }];
   }
   function map_value(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(func, ctx, loc, caml_call1(f, x), k);
            }];
   }
   function map_value$0(param, f){
    var func = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(func, ctx, loc, caml_call2(f, loc, x), k);
            }];
   }
   function alt_option(some, none){
    var _n_ = map0(none, 0);
    return alt(map1(some, function(x){return [0, x];}), _n_);
   }
   function many(param){
    var f = param[1];
    return [0,
            function(ctx, loc, l, k){
             function aux(accu, param){
              if(! param)
               return caml_call1(k, caml_call1(Ppxlib_Import[94][9], accu));
              var xs = param[2], x = param[1];
              return caml_call4
                      (f, ctx, loc, x, function(x){return aux([0, x, accu], xs);});
             }
             return aux(0, l);
            }];
   }
   function loc(param){
    var f = param[1];
    return [0,
            function(ctx, loc, x, k){
             return caml_call4(f, ctx, x[2], x[1], k);
            }];
   }
   function pack0(t){return map(t, function(f){return caml_call1(f, 0);});}
   function pack2(t){
    return map(t, function(f, x, y){return caml_call1(f, [0, x, y]);});
   }
   function pack3(t){
    return map(t, function(f, x, y, z){return caml_call1(f, [0, x, y, z]);});
   }
   var
    nolabel = Ppxlib_Ast_pattern_generated[1],
    labelled = Ppxlib_Ast_pattern_generated[2],
    optional = Ppxlib_Ast_pattern_generated[3],
    attribute = Ppxlib_Ast_pattern_generated[4],
    binding_op = Ppxlib_Ast_pattern_generated[5],
    case$0 = Ppxlib_Ast_pattern_generated[6],
    pcl_loc = Ppxlib_Ast_pattern_generated[7],
    pcl_attributes = Ppxlib_Ast_pattern_generated[8],
    pcl_constr = Ppxlib_Ast_pattern_generated[9],
    pcl_structure = Ppxlib_Ast_pattern_generated[10],
    pcl_fun = Ppxlib_Ast_pattern_generated[11],
    pcl_apply = Ppxlib_Ast_pattern_generated[12],
    pcl_let = Ppxlib_Ast_pattern_generated[13],
    pcl_constraint = Ppxlib_Ast_pattern_generated[14],
    pcl_extension = Ppxlib_Ast_pattern_generated[15],
    pcl_open = Ppxlib_Ast_pattern_generated[16],
    pcf_loc = Ppxlib_Ast_pattern_generated[17],
    pcf_attributes = Ppxlib_Ast_pattern_generated[18],
    pcf_inherit = Ppxlib_Ast_pattern_generated[19],
    pcf_val = Ppxlib_Ast_pattern_generated[20],
    pcf_method = Ppxlib_Ast_pattern_generated[21],
    pcf_constraint = Ppxlib_Ast_pattern_generated[22],
    pcf_initializer = Ppxlib_Ast_pattern_generated[23],
    pcf_attribute = Ppxlib_Ast_pattern_generated[24],
    pcf_extension = Ppxlib_Ast_pattern_generated[25],
    cfk_virtual = Ppxlib_Ast_pattern_generated[26],
    cfk_concrete = Ppxlib_Ast_pattern_generated[27],
    class_infos_attributes = Ppxlib_Ast_pattern_generated[28],
    class_infos = Ppxlib_Ast_pattern_generated[29],
    class_signature = Ppxlib_Ast_pattern_generated[30],
    class_structure = Ppxlib_Ast_pattern_generated[31],
    pcty_loc = Ppxlib_Ast_pattern_generated[32],
    pcty_attributes = Ppxlib_Ast_pattern_generated[33],
    pcty_constr = Ppxlib_Ast_pattern_generated[34],
    pcty_signature = Ppxlib_Ast_pattern_generated[35],
    pcty_arrow = Ppxlib_Ast_pattern_generated[36],
    pcty_extension = Ppxlib_Ast_pattern_generated[37],
    pcty_open = Ppxlib_Ast_pattern_generated[38],
    pctf_loc = Ppxlib_Ast_pattern_generated[39],
    pctf_attributes = Ppxlib_Ast_pattern_generated[40],
    pctf_inherit = Ppxlib_Ast_pattern_generated[41],
    pctf_val = Ppxlib_Ast_pattern_generated[42],
    pctf_method = Ppxlib_Ast_pattern_generated[43],
    pctf_constraint = Ppxlib_Ast_pattern_generated[44],
    pctf_attribute = Ppxlib_Ast_pattern_generated[45],
    pctf_extension = Ppxlib_Ast_pattern_generated[46],
    closed = Ppxlib_Ast_pattern_generated[47],
    open = Ppxlib_Ast_pattern_generated[48],
    pconst_integer = Ppxlib_Ast_pattern_generated[49],
    pconst_char = Ppxlib_Ast_pattern_generated[50],
    pconst_string = Ppxlib_Ast_pattern_generated[51],
    pconst_float = Ppxlib_Ast_pattern_generated[52],
    pcstr_tuple = Ppxlib_Ast_pattern_generated[53],
    pcstr_record = Ppxlib_Ast_pattern_generated[54],
    constructor_declaration_attrib = Ppxlib_Ast_pattern_generated[55],
    constructor_declaration = Ppxlib_Ast_pattern_generated[56],
    ptyp_loc = Ppxlib_Ast_pattern_generated[57],
    ptyp_attributes = Ppxlib_Ast_pattern_generated[58],
    ptyp_any = Ppxlib_Ast_pattern_generated[59],
    ptyp_var = Ppxlib_Ast_pattern_generated[60],
    ptyp_arrow = Ppxlib_Ast_pattern_generated[61],
    ptyp_tuple = Ppxlib_Ast_pattern_generated[62],
    ptyp_constr = Ppxlib_Ast_pattern_generated[63],
    ptyp_object = Ppxlib_Ast_pattern_generated[64],
    ptyp_class = Ppxlib_Ast_pattern_generated[65],
    ptyp_alias = Ppxlib_Ast_pattern_generated[66],
    ptyp_variant = Ppxlib_Ast_pattern_generated[67],
    ptyp_poly = Ppxlib_Ast_pattern_generated[68],
    ptyp_package = Ppxlib_Ast_pattern_generated[69],
    ptyp_extension = Ppxlib_Ast_pattern_generated[70],
    upto = Ppxlib_Ast_pattern_generated[71],
    downto = Ppxlib_Ast_pattern_generated[72],
    pdira_loc = Ppxlib_Ast_pattern_generated[73],
    pdir_string = Ppxlib_Ast_pattern_generated[74],
    pdir_int = Ppxlib_Ast_pattern_generated[75],
    pdir_ident = Ppxlib_Ast_pattern_generated[76],
    pdir_bool = Ppxlib_Ast_pattern_generated[77],
    pexp_loc = Ppxlib_Ast_pattern_generated[78],
    pexp_attributes = Ppxlib_Ast_pattern_generated[79],
    pexp_ident = Ppxlib_Ast_pattern_generated[80],
    pexp_constant = Ppxlib_Ast_pattern_generated[81],
    pexp_let = Ppxlib_Ast_pattern_generated[82],
    pexp_function = Ppxlib_Ast_pattern_generated[83],
    pexp_fun = Ppxlib_Ast_pattern_generated[84],
    pexp_apply = Ppxlib_Ast_pattern_generated[85],
    pexp_match = Ppxlib_Ast_pattern_generated[86],
    pexp_try = Ppxlib_Ast_pattern_generated[87],
    pexp_tuple = Ppxlib_Ast_pattern_generated[88],
    pexp_construct = Ppxlib_Ast_pattern_generated[89],
    pexp_variant = Ppxlib_Ast_pattern_generated[90],
    pexp_record = Ppxlib_Ast_pattern_generated[91],
    pexp_field = Ppxlib_Ast_pattern_generated[92],
    pexp_setfield = Ppxlib_Ast_pattern_generated[93],
    pexp_array = Ppxlib_Ast_pattern_generated[94],
    pexp_ifthenelse = Ppxlib_Ast_pattern_generated[95],
    pexp_sequence = Ppxlib_Ast_pattern_generated[96],
    pexp_while = Ppxlib_Ast_pattern_generated[97],
    pexp_for = Ppxlib_Ast_pattern_generated[98],
    pexp_constraint = Ppxlib_Ast_pattern_generated[99],
    pexp_coerce = Ppxlib_Ast_pattern_generated[100],
    pexp_send = Ppxlib_Ast_pattern_generated[101],
    pexp_new = Ppxlib_Ast_pattern_generated[102],
    pexp_setinstvar = Ppxlib_Ast_pattern_generated[103],
    pexp_override = Ppxlib_Ast_pattern_generated[104],
    pexp_letmodule = Ppxlib_Ast_pattern_generated[105],
    pexp_letexception = Ppxlib_Ast_pattern_generated[106],
    pexp_assert = Ppxlib_Ast_pattern_generated[107],
    pexp_lazy = Ppxlib_Ast_pattern_generated[108],
    pexp_poly = Ppxlib_Ast_pattern_generated[109],
    pexp_object = Ppxlib_Ast_pattern_generated[110],
    pexp_newtype = Ppxlib_Ast_pattern_generated[111],
    pexp_pack = Ppxlib_Ast_pattern_generated[112],
    pexp_open = Ppxlib_Ast_pattern_generated[113],
    pexp_letop = Ppxlib_Ast_pattern_generated[114],
    pexp_extension = Ppxlib_Ast_pattern_generated[115],
    pexp_unreachable = Ppxlib_Ast_pattern_generated[116],
    extension_constructor_attribut = Ppxlib_Ast_pattern_generated[117],
    extension_constructor = Ppxlib_Ast_pattern_generated[118],
    pext_decl = Ppxlib_Ast_pattern_generated[119],
    pext_rebind = Ppxlib_Ast_pattern_generated[120],
    unit = Ppxlib_Ast_pattern_generated[121],
    named = Ppxlib_Ast_pattern_generated[122],
    include_infos_attributes = Ppxlib_Ast_pattern_generated[123],
    include_infos = Ppxlib_Ast_pattern_generated[124],
    injective = Ppxlib_Ast_pattern_generated[125],
    noinjectivity = Ppxlib_Ast_pattern_generated[126],
    label_declaration_attributes = Ppxlib_Ast_pattern_generated[127],
    label_declaration = Ppxlib_Ast_pattern_generated[128],
    letop = Ppxlib_Ast_pattern_generated[129],
    location = Ppxlib_Ast_pattern_generated[130],
    lident = Ppxlib_Ast_pattern_generated[131],
    ldot = Ppxlib_Ast_pattern_generated[132],
    lapply = Ppxlib_Ast_pattern_generated[133],
    module_binding_attributes = Ppxlib_Ast_pattern_generated[134],
    module_binding = Ppxlib_Ast_pattern_generated[135],
    module_declaration_attributes = Ppxlib_Ast_pattern_generated[136],
    module_declaration = Ppxlib_Ast_pattern_generated[137],
    pmod_loc = Ppxlib_Ast_pattern_generated[138],
    pmod_attributes = Ppxlib_Ast_pattern_generated[139],
    pmod_ident = Ppxlib_Ast_pattern_generated[140],
    pmod_structure = Ppxlib_Ast_pattern_generated[141],
    pmod_functor = Ppxlib_Ast_pattern_generated[142],
    pmod_apply = Ppxlib_Ast_pattern_generated[143],
    pmod_constraint = Ppxlib_Ast_pattern_generated[144],
    pmod_unpack = Ppxlib_Ast_pattern_generated[145],
    pmod_extension = Ppxlib_Ast_pattern_generated[146],
    module_substitution_attributes = Ppxlib_Ast_pattern_generated[147],
    module_substitution = Ppxlib_Ast_pattern_generated[148],
    pmty_loc = Ppxlib_Ast_pattern_generated[149],
    pmty_attributes = Ppxlib_Ast_pattern_generated[150],
    pmty_ident = Ppxlib_Ast_pattern_generated[151],
    pmty_signature = Ppxlib_Ast_pattern_generated[152],
    pmty_functor = Ppxlib_Ast_pattern_generated[153],
    pmty_with = Ppxlib_Ast_pattern_generated[154],
    pmty_typeof = Ppxlib_Ast_pattern_generated[155],
    pmty_extension = Ppxlib_Ast_pattern_generated[156],
    pmty_alias = Ppxlib_Ast_pattern_generated[157],
    module_type_declaration_attrib = Ppxlib_Ast_pattern_generated[158],
    module_type_declaration = Ppxlib_Ast_pattern_generated[159],
    immutable = Ppxlib_Ast_pattern_generated[160],
    mutable = Ppxlib_Ast_pattern_generated[161],
    pof_loc = Ppxlib_Ast_pattern_generated[162],
    pof_attributes = Ppxlib_Ast_pattern_generated[163],
    otag = Ppxlib_Ast_pattern_generated[164],
    oinherit = Ppxlib_Ast_pattern_generated[165],
    open_infos_attributes = Ppxlib_Ast_pattern_generated[166],
    open_infos = Ppxlib_Ast_pattern_generated[167],
    override = Ppxlib_Ast_pattern_generated[168],
    fresh = Ppxlib_Ast_pattern_generated[169],
    ppat_loc = Ppxlib_Ast_pattern_generated[170],
    ppat_attributes = Ppxlib_Ast_pattern_generated[171],
    ppat_any = Ppxlib_Ast_pattern_generated[172],
    ppat_var = Ppxlib_Ast_pattern_generated[173],
    ppat_alias = Ppxlib_Ast_pattern_generated[174],
    ppat_constant = Ppxlib_Ast_pattern_generated[175],
    ppat_interval = Ppxlib_Ast_pattern_generated[176],
    ppat_tuple = Ppxlib_Ast_pattern_generated[177],
    ppat_construct = Ppxlib_Ast_pattern_generated[178],
    ppat_variant = Ppxlib_Ast_pattern_generated[179],
    ppat_record = Ppxlib_Ast_pattern_generated[180],
    ppat_array = Ppxlib_Ast_pattern_generated[181],
    ppat_or = Ppxlib_Ast_pattern_generated[182],
    ppat_constraint = Ppxlib_Ast_pattern_generated[183],
    ppat_type = Ppxlib_Ast_pattern_generated[184],
    ppat_lazy = Ppxlib_Ast_pattern_generated[185],
    ppat_unpack = Ppxlib_Ast_pattern_generated[186],
    ppat_exception = Ppxlib_Ast_pattern_generated[187],
    ppat_extension = Ppxlib_Ast_pattern_generated[188],
    ppat_open = Ppxlib_Ast_pattern_generated[189],
    pstr = Ppxlib_Ast_pattern_generated[190],
    psig = Ppxlib_Ast_pattern_generated[191],
    ptyp = Ppxlib_Ast_pattern_generated[192],
    ppat = Ppxlib_Ast_pattern_generated[193],
    position = Ppxlib_Ast_pattern_generated[194],
    private$0 = Ppxlib_Ast_pattern_generated[195],
    public$0 = Ppxlib_Ast_pattern_generated[196],
    nonrecursive = Ppxlib_Ast_pattern_generated[197],
    recursive = Ppxlib_Ast_pattern_generated[198],
    prf_loc = Ppxlib_Ast_pattern_generated[199],
    prf_attributes = Ppxlib_Ast_pattern_generated[200],
    rtag = Ppxlib_Ast_pattern_generated[201],
    rinherit = Ppxlib_Ast_pattern_generated[202],
    psig_loc = Ppxlib_Ast_pattern_generated[203],
    psig_value = Ppxlib_Ast_pattern_generated[204],
    psig_type = Ppxlib_Ast_pattern_generated[205],
    psig_typesubst = Ppxlib_Ast_pattern_generated[206],
    psig_typext = Ppxlib_Ast_pattern_generated[207],
    psig_exception = Ppxlib_Ast_pattern_generated[208],
    psig_module = Ppxlib_Ast_pattern_generated[209],
    psig_modsubst = Ppxlib_Ast_pattern_generated[210],
    psig_recmodule = Ppxlib_Ast_pattern_generated[211],
    psig_modtype = Ppxlib_Ast_pattern_generated[212],
    psig_modtypesubst = Ppxlib_Ast_pattern_generated[213],
    psig_open = Ppxlib_Ast_pattern_generated[214],
    psig_include = Ppxlib_Ast_pattern_generated[215],
    psig_class = Ppxlib_Ast_pattern_generated[216],
    psig_class_type = Ppxlib_Ast_pattern_generated[217],
    psig_attribute = Ppxlib_Ast_pattern_generated[218],
    psig_extension = Ppxlib_Ast_pattern_generated[219],
    pstr_loc = Ppxlib_Ast_pattern_generated[220],
    pstr_eval = Ppxlib_Ast_pattern_generated[221],
    pstr_value = Ppxlib_Ast_pattern_generated[222],
    pstr_primitive = Ppxlib_Ast_pattern_generated[223],
    pstr_type = Ppxlib_Ast_pattern_generated[224],
    pstr_typext = Ppxlib_Ast_pattern_generated[225],
    pstr_exception = Ppxlib_Ast_pattern_generated[226],
    pstr_module = Ppxlib_Ast_pattern_generated[227],
    pstr_recmodule = Ppxlib_Ast_pattern_generated[228],
    pstr_modtype = Ppxlib_Ast_pattern_generated[229],
    pstr_open = Ppxlib_Ast_pattern_generated[230],
    pstr_class = Ppxlib_Ast_pattern_generated[231],
    pstr_class_type = Ppxlib_Ast_pattern_generated[232],
    pstr_include = Ppxlib_Ast_pattern_generated[233],
    pstr_attribute = Ppxlib_Ast_pattern_generated[234],
    pstr_extension = Ppxlib_Ast_pattern_generated[235],
    toplevel_directive = Ppxlib_Ast_pattern_generated[236],
    ptop_def = Ppxlib_Ast_pattern_generated[237],
    ptop_dir = Ppxlib_Ast_pattern_generated[238],
    type_declaration_attributes = Ppxlib_Ast_pattern_generated[239],
    type_declaration = Ppxlib_Ast_pattern_generated[240],
    type_exception_attributes = Ppxlib_Ast_pattern_generated[241],
    type_exception = Ppxlib_Ast_pattern_generated[242],
    type_extension_attributes = Ppxlib_Ast_pattern_generated[243],
    type_extension = Ppxlib_Ast_pattern_generated[244],
    ptype_abstract = Ppxlib_Ast_pattern_generated[245],
    ptype_variant = Ppxlib_Ast_pattern_generated[246],
    ptype_record = Ppxlib_Ast_pattern_generated[247],
    ptype_open = Ppxlib_Ast_pattern_generated[248],
    value_binding_attributes = Ppxlib_Ast_pattern_generated[249],
    value_binding = Ppxlib_Ast_pattern_generated[250],
    value_description_attributes = Ppxlib_Ast_pattern_generated[251],
    value_description = Ppxlib_Ast_pattern_generated[252],
    covariant = Ppxlib_Ast_pattern_generated[253],
    contravariant = Ppxlib_Ast_pattern_generated[254],
    novariance = Ppxlib_Ast_pattern_generated[255],
    virtual = Ppxlib_Ast_pattern_generated[256],
    concrete = Ppxlib_Ast_pattern_generated[257],
    pwith_type = Ppxlib_Ast_pattern_generated[258],
    pwith_module = Ppxlib_Ast_pattern_generated[259],
    pwith_modtype = Ppxlib_Ast_pattern_generated[260],
    pwith_modtypesubst = Ppxlib_Ast_pattern_generated[261],
    pwith_typesubst = Ppxlib_Ast_pattern_generated[262],
    pwith_modsubst = Ppxlib_Ast_pattern_generated[263],
    cst_Nolabel = "Nolabel",
    cst_list = cst_list$1,
    cst_list$0 = cst_list$1;
   function echar(t){
    return caml_call1(pexp_constant, caml_call1(pconst_char, t));
   }
   function estring(t){
    return caml_call1(pexp_constant, caml_call3(pconst_string, t, drop, drop));
   }
   function efloat(t){
    return caml_call1(pexp_constant, caml_call2(pconst_float, t, drop));
   }
   function pchar(t){
    return caml_call1(ppat_constant, caml_call1(pconst_char, t));
   }
   function pstring(t){
    return caml_call1(ppat_constant, caml_call3(pconst_string, t, drop, drop));
   }
   function pfloat(t){
    return caml_call1(ppat_constant, caml_call2(pconst_float, t, drop));
   }
   function const_int(t){
    var f = t[1];
    return caml_call2
            (pconst_integer,
             [0,
              function(ctx, loc, x, k){
               return caml_call4(f, ctx, loc, caml_int_of_string(x), k);
              }],
             none);
   }
   function const_int32(t){
    var _m_ = some(char$0(108)), f = t[1];
    return caml_call2
            (pconst_integer,
             [0,
              function(ctx, loc, x, k){
               return caml_call4(f, ctx, loc, caml_int_of_string(x), k);
              }],
             _m_);
   }
   function const_int64(t){
    var _l_ = some(char$0(76)), f = t[1];
    return caml_call2
            (pconst_integer,
             [0,
              function(ctx, loc, x, k){
               return caml_call4
                       (f, ctx, loc, runtime.caml_int64_of_string(x), k);
              }],
             _l_);
   }
   function const_nativeint(t){
    var _k_ = some(char$0(110)), f = t[1];
    return caml_call2
            (pconst_integer,
             [0,
              function(ctx, loc, x, k){
               return caml_call4(f, ctx, loc, caml_int_of_string(x), k);
              }],
             _k_);
   }
   function eint(t){return caml_call1(pexp_constant, const_int(t));}
   function eint32(t){return caml_call1(pexp_constant, const_int32(t));}
   function eint64(t){return caml_call1(pexp_constant, const_int64(t));}
   function enativeint(t){
    return caml_call1(pexp_constant, const_nativeint(t));
   }
   function pint(t){return caml_call1(ppat_constant, const_int(t));}
   function pint32(t){return caml_call1(ppat_constant, const_int32(t));}
   function pint64(t){return caml_call1(ppat_constant, const_int64(t));}
   function pnativeint(t){
    return caml_call1(ppat_constant, const_nativeint(t));
   }
   function single_expr_payload(t){
    return caml_call1(pstr, symbol$1(caml_call2(pstr_eval, t, nil), nil));
   }
   function no_label(t){
    return pair(cst(function(param){return cst_Nolabel;}, 0, 0), t);
   }
   function ebool(t){
    return caml_call2(pexp_construct, caml_call1(lident, bool$0(t)), none);
   }
   function pbool(t){
    return caml_call2(ppat_construct, caml_call1(lident, bool$0(t)), none);
   }
   function extension(_j_, param){
    var f2 = param[1], f1 = _j_[1];
    return [0,
            function(ctx, loc, param, k){
             var
              payload = param[2],
              name = param[1],
              k$0 = caml_call4(f1, ctx, name[2], name[1], k),
              k$1 = caml_call4(f2, ctx, loc, payload, k$0);
             return k$1;
            }];
   }
   function elist(param){
    var f = param[1];
    return [0,
            function(ctx, loc, e$0, k){
             a:
             {
              b:
              c:
              {
               d:
               {
                e:
                f:
                {
                 g:
                 {
                  h:
                  {
                   i:
                   {
                    j:
                    {
                     var e = e$0, acc = 0;
                     for(;;){
                      caml_call1(Ppxlib_Common[8], e[4]);
                      var _d_ = e[1];
                      if(typeof _d_ === "number") break c;
                      if(9 !== _d_[0]) break b;
                      var _e_ = _d_[1][1];
                      if(0 !== _e_[0]) break;
                      var _f_ = _e_[1];
                      if(_f_ !== cst$2) break d;
                      var match = _d_[2];
                      if(! match) break j;
                      var arg = match[1];
                      caml_call1(Ppxlib_Common[8], arg[4]);
                      var _g_ = arg[1];
                      if(typeof _g_ === "number") break f;
                      if(8 !== _g_[0]) break e;
                      var _h_ = _g_[1];
                      if(! _h_) break i;
                      var _i_ = _h_[2];
                      if(! _i_) break h;
                      if(_i_[2]) break g;
                      var tl = _i_[1], hd = _h_[1], acc$0 = [0, hd, acc];
                      e = tl;
                      acc = acc$0;
                     }
                     break b;
                    }
                    break b;
                   }
                   break e;
                  }
                  break e;
                 }
                 break e;
                }
                var l = caml_call2(fail, arg[2], cst_list$0);
                break a;
               }
               if(_f_ !== cst$3) break b;
               if(_d_[2]) break b;
               var l = caml_call1(Ppxlib_Import[94][9], acc);
               break a;
              }
              var l = caml_call2(fail, e[2], cst_list);
             }
             incr_matched(ctx);
             return caml_call1
                     (k,
                      caml_call2
                       (Ppxlib_Import[94][55],
                        l,
                        function(x){
                         return caml_call4(f, ctx, x[2], x, function(x){return x;});
                        }));
            }];
   }
   function esequence(param){
    var f = param[1];
    return [0,
            function(ctx, loc, expr, k){
             a:
             {
              var expr$0 = expr, acc = 0;
              for(;;){
               var match = expr$0[1];
               if(typeof match === "number") break;
               if(16 !== match[0]) break a;
               var
                next = match[2],
                expr$1 = match[1],
                acc$0 = [0, expr$1, acc];
               expr$0 = next;
               acc = acc$0;
              }
             }
             return caml_call1
                     (k,
                      caml_call2
                       (Ppxlib_Import[94][15],
                        function(expr){
                         return caml_call4
                                 (f, ctx, expr[2], expr, function(x){return x;});
                        },
                        [0, expr$0, acc]));
            }];
   }
   function of_func(f){return [0, f];}
   function to_func(param){var f = param[1]; return f;}
   var
    Ppxlib_Ast_pattern =
      [0,
       parse,
       parse_res,
       [0, create, parse$0, parse_res$0],
       symbol,
       symbol$0,
       drop,
       as,
       alt,
       alt_option,
       alt,
       map,
       map$0,
       map_result,
       symbol_map,
       map0,
       map1,
       map2,
       map0$0,
       map1$0,
       map2$0,
       map_value,
       map_value$0,
       nil,
       symbol$1,
       many,
       int$0,
       char$0,
       string,
       float$0,
       int32,
       int64,
       nativeint,
       bool,
       ebool,
       pbool,
       cst,
       none,
       some,
       pair,
       pair,
       triple,
       loc,
       pack0,
       pack2,
       pack3,
       nolabel,
       labelled,
       optional,
       binding_op,
       case$0,
       pcl_loc,
       pcl_attributes,
       pcl_constr,
       pcl_structure,
       pcl_fun,
       pcl_apply,
       pcl_let,
       pcl_constraint,
       pcl_extension,
       pcl_open,
       pcf_loc,
       pcf_attributes,
       pcf_inherit,
       pcf_val,
       pcf_method,
       pcf_constraint,
       pcf_initializer,
       pcf_attribute,
       pcf_extension,
       cfk_virtual,
       cfk_concrete,
       class_infos_attributes,
       class_infos,
       class_signature,
       class_structure,
       pcty_loc,
       pcty_attributes,
       pcty_constr,
       pcty_signature,
       pcty_arrow,
       pcty_extension,
       pcty_open,
       pctf_loc,
       pctf_attributes,
       pctf_inherit,
       pctf_val,
       pctf_method,
       pctf_constraint,
       pctf_attribute,
       pctf_extension,
       closed,
       open,
       pconst_integer,
       pconst_char,
       pconst_string,
       pconst_float,
       pcstr_tuple,
       pcstr_record,
       constructor_declaration_attrib,
       constructor_declaration,
       ptyp_loc,
       ptyp_attributes,
       ptyp_any,
       ptyp_var,
       ptyp_arrow,
       ptyp_tuple,
       ptyp_constr,
       ptyp_object,
       ptyp_class,
       ptyp_alias,
       ptyp_variant,
       ptyp_poly,
       ptyp_package,
       ptyp_extension,
       upto,
       downto,
       pdira_loc,
       pdir_string,
       pdir_int,
       pdir_ident,
       pdir_bool,
       pexp_loc,
       pexp_attributes,
       pexp_ident,
       pexp_constant,
       pexp_let,
       pexp_function,
       pexp_fun,
       pexp_apply,
       pexp_match,
       pexp_try,
       pexp_tuple,
       pexp_construct,
       pexp_variant,
       pexp_record,
       pexp_field,
       pexp_setfield,
       pexp_array,
       pexp_ifthenelse,
       pexp_sequence,
       pexp_while,
       pexp_for,
       pexp_constraint,
       pexp_coerce,
       pexp_send,
       pexp_new,
       pexp_setinstvar,
       pexp_override,
       pexp_letmodule,
       pexp_letexception,
       pexp_assert,
       pexp_lazy,
       pexp_poly,
       pexp_object,
       pexp_newtype,
       pexp_pack,
       pexp_open,
       pexp_letop,
       pexp_extension,
       pexp_unreachable,
       extension_constructor_attribut,
       extension_constructor,
       pext_decl,
       pext_rebind,
       unit,
       named,
       include_infos_attributes,
       include_infos,
       injective,
       noinjectivity,
       label_declaration_attributes,
       label_declaration,
       letop,
       location,
       lident,
       ldot,
       lapply,
       module_binding_attributes,
       module_binding,
       module_declaration_attributes,
       module_declaration,
       pmod_loc,
       pmod_attributes,
       pmod_ident,
       pmod_structure,
       pmod_functor,
       pmod_apply,
       pmod_constraint,
       pmod_unpack,
       pmod_extension,
       module_substitution_attributes,
       module_substitution,
       pmty_loc,
       pmty_attributes,
       pmty_ident,
       pmty_signature,
       pmty_functor,
       pmty_with,
       pmty_typeof,
       pmty_extension,
       pmty_alias,
       module_type_declaration_attrib,
       module_type_declaration,
       immutable,
       mutable,
       pof_loc,
       pof_attributes,
       otag,
       oinherit,
       open_infos_attributes,
       open_infos,
       override,
       fresh,
       ppat_loc,
       ppat_attributes,
       ppat_any,
       ppat_var,
       ppat_alias,
       ppat_constant,
       ppat_interval,
       ppat_tuple,
       ppat_construct,
       ppat_variant,
       ppat_record,
       ppat_array,
       ppat_or,
       ppat_constraint,
       ppat_type,
       ppat_lazy,
       ppat_unpack,
       ppat_exception,
       ppat_extension,
       ppat_open,
       pstr,
       psig,
       ptyp,
       ppat,
       position,
       private$0,
       public$0,
       nonrecursive,
       recursive,
       prf_loc,
       prf_attributes,
       rtag,
       rinherit,
       psig_loc,
       psig_value,
       psig_type,
       psig_typesubst,
       psig_typext,
       psig_exception,
       psig_module,
       psig_modsubst,
       psig_recmodule,
       psig_modtype,
       psig_modtypesubst,
       psig_open,
       psig_include,
       psig_class,
       psig_class_type,
       psig_attribute,
       psig_extension,
       pstr_loc,
       pstr_eval,
       pstr_value,
       pstr_primitive,
       pstr_type,
       pstr_typext,
       pstr_exception,
       pstr_module,
       pstr_recmodule,
       pstr_modtype,
       pstr_open,
       pstr_class,
       pstr_class_type,
       pstr_include,
       pstr_attribute,
       pstr_extension,
       toplevel_directive,
       ptop_def,
       ptop_dir,
       type_declaration_attributes,
       type_declaration,
       type_exception_attributes,
       type_exception,
       type_extension_attributes,
       type_extension,
       ptype_abstract,
       ptype_variant,
       ptype_record,
       ptype_open,
       value_binding_attributes,
       value_binding,
       value_description_attributes,
       value_description,
       covariant,
       contravariant,
       novariance,
       virtual,
       concrete,
       pwith_type,
       pwith_module,
       pwith_modtype,
       pwith_modtypesubst,
       pwith_typesubst,
       pwith_modsubst,
       true$0,
       false$0,
       eint,
       echar,
       estring,
       efloat,
       eint32,
       eint64,
       enativeint,
       pint,
       pchar,
       pstring,
       pfloat,
       pint32,
       pint64,
       pnativeint,
       single_expr_payload,
       no_label,
       attribute,
       extension,
       elist,
       esequence,
       of_func,
       to_func];
   runtime.caml_register_global(26, Ppxlib_Ast_pattern, "Ppxlib__Ast_pattern");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Attribute
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_pattern, Ppxlib__Ast_traverse0, Ppxlib__Common, Ppxlib__Import, Ppxlib__Location, Ppxlib__Name, Stdlib, Stdlib__Hashtbl, Stdppx
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Attribute = "Attribute `",
    cst_Duplicated_attribute = "Duplicated attribute",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attribute_not_expected_her =
      "attribute not expected here, Ppxlib.Attribute needs updating!",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_check_node = "check_node",
    cst_class_field$1 = "class field",
    cst_class_type_field$1 = "class type field",
    cst_class_declaration$0 = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field$2 = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type$0 = "class_type",
    cst_class_type_declaration$0 = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field$2 = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration$0 = "constructor_declaration",
    cst_core_type$0 = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression$0 = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor$0 = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration$0 = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding$0 = "module_binding",
    cst_module_declaration$0 = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution$0 = "module_substitution",
    cst_module_type$0 = "module_type",
    cst_module_type_declaration$0 = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open$1 = "open",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern$0 = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item$0 = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_src_attribute_ml = "src/attribute.ml",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item$0 = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_declaration$0 = "type_declaration",
    cst_type_exception$0 = "type_exception",
    cst_type_extension$0 = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding$0 = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = ", ",
    _a_ =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration$0,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field$2,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type$0,
       cst_class_type_declaration$0,
       cst_class_type_desc,
       cst_class_type_field$2,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration$0,
       cst_core_type$0,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression$0,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor$0,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration$0,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding$0,
       cst_module_declaration$0,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution$0,
       cst_module_type$0,
       cst_module_type_declaration$0,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern$0,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item$0,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item$0,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration$0,
       cst_type_exception$0,
       cst_type_extension$0,
       cst_type_kind,
       cst_value_binding$0,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    _b_ =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding$0,
       cst_extension_constructor_kind,
       cst_core_type$0,
       cst_structure,
       cst_list,
       cst_label_declaration$0,
       cst_module_binding$0,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item$0,
       cst_extension_constructor$0,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception$0,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration$0,
       cst_class_type_declaration$0,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension$0,
       cst_class_field_kind,
       cst_module_type_declaration$0,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern$0,
       cst_include_description,
       cst_signature,
       cst_class_type_field$2,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration$0,
       cst_constructor_declaration$0,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution$0,
       cst_class_description,
       cst_expression$0,
       cst_class_type$0,
       cst_structure_item$0,
       cst_include_infos,
       cst_class_declaration$0,
       cst_module_type$0,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field$2],
    _c_ =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding$0,
       cst_type_kind,
       cst_type_extension$0,
       cst_type_exception$0,
       cst_type_declaration$0,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item$0,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item$0,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern$0,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration$0,
       cst_module_type$0,
       cst_module_substitution$0,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration$0,
       cst_module_binding$0,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration$0,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor$0,
       cst_extension,
       cst_expression_desc,
       cst_expression$0,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type$0,
       cst_constructor_declaration$0,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field$2,
       cst_class_type_desc,
       cst_class_type_declaration$0,
       cst_class_type$0,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field$2,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration$0,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    shared =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding$0,
       cst_type_kind,
       cst_type_extension$0,
       cst_type_exception$0,
       cst_type_declaration$0,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item$0,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item$0,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern$0,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration$0,
       cst_module_type$0,
       cst_module_substitution$0,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration$0,
       cst_module_binding$0,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration$0,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor$0,
       cst_extension,
       cst_expression_desc,
       cst_expression$0,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type$0,
       cst_constructor_declaration$0,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field$2,
       cst_class_type_desc,
       cst_class_type_declaration$0,
       cst_class_type$0,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field$2,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration$0,
       cst_check_node,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    cst = cst$2,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Ast_traverse0 = global_data.Ppxlib__Ast_traverse0,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Name = global_data.Ppxlib__Name,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Assert_failure = global_data.Assert_failure,
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    Stdlib = global_data.Stdlib,
    Stdppx = global_data.Stdppx,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl;
   function poly_equal(a, b){
    return caml_call2(Stdppx[73][2], [0, a], [0, b]);
   }
   var
    cst_Attribute_Context_get_pstr = "Attribute.Context.get_pstr_eval",
    cst_Attribute_Context_get_pstr$0 = "Attribute.Context.get_pstr_extension",
    cst_Attribute_Context_get_psig = "Attribute.Context.get_psig_extension";
   function get_pstr_eval(st){
    var match = st[1];
    if(0 !== match[0])
     return caml_call1(Stdlib[2], cst_Attribute_Context_get_pstr);
    var l = match[2], e = match[1];
    return [0, e, l];
   }
   function get_pstr_extension(st){
    var match = st[1];
    if(14 !== match[0])
     return caml_call1(Stdlib[2], cst_Attribute_Context_get_pstr$0);
    var l = match[2], e = match[1];
    return [0, e, l];
   }
   function get_psig_extension(st){
    var match = st[1];
    if(15 !== match[0])
     return caml_call1(Stdlib[2], cst_Attribute_Context_get_psig);
    var l = match[2], e = match[1];
    return [0, e, l];
   }
   function get_attributes(t, x){
    switch(t){
      case 0:
       return x[5];
      case 1:
       return x[6];
      case 2:
       return x[7];
      case 3:
       return x[3];
      case 4:
       return x[6];
      case 5:
       return x[4];
      case 6:
       return x[4];
      case 7:
       return x[4];
      case 8:
       return x[4];
      case 9:
       return x[4];
      case 10:
       return x[3];
      case 11:
       return x[3];
      case 12:
       return x[6];
      case 13:
       return x[3];
      case 14:
       return x[3];
      case 15:
       return x[6];
      case 16:
       return x[3];
      case 17:
       return x[3];
      case 18:
       return x[3];
      case 19:
       return x[3];
      case 20:
       return x[4];
      case 21:
       return x[4];
      case 22:
       return x[3];
      case 23:
       return x[3];
      case 24:
       return x[3];
      case 25:
       return x[3];
      case 26:
       return get_pstr_eval(x)[2];
      case 27:
       return get_pstr_extension(x)[2];
      case 28:
       return get_psig_extension(x)[2];
      case 29:
       return x[3];
      default: return x[3];
    }
   }
   function set_attributes(t, x, attrs){
    switch(t){
      case 0:
       return [0, x[1], x[2], x[3], x[4], attrs];
      case 1:
       return [0, x[1], x[2], x[3], x[4], x[5], attrs];
      case 2:
       return [0, x[1], x[2], x[3], x[4], x[5], x[6], attrs, x[8]];
      case 3:
       return [0, x[1], x[2], attrs];
      case 4:
       return [0, x[1], x[2], x[3], x[4], x[5], attrs];
      case 5:
       return [0, x[1], x[2], x[3], attrs];
      case 6:
       return [0, x[1], x[2], x[3], attrs];
      case 7:
       return [0, x[1], x[2], x[3], attrs];
      case 8:
       return [0, x[1], x[2], x[3], attrs];
      case 9:
       return [0, x[1], x[2], x[3], attrs, x[5]];
      case 10:
       return [0, x[1], x[2], attrs];
      case 11:
       return [0, x[1], x[2], attrs];
      case 12:
       return [0, x[1], x[2], x[3], x[4], x[5], attrs];
      case 13:
       return [0, x[1], x[2], attrs];
      case 14:
       return [0, x[1], x[2], attrs];
      case 15:
       return [0, x[1], x[2], x[3], x[4], x[5], attrs];
      case 16:
       return [0, x[1], x[2], attrs];
      case 17:
       return [0, x[1], x[2], attrs, x[4]];
      case 18:
       return [0, x[1], x[2], attrs, x[4]];
      case 19:
       return [0, x[1], x[2], attrs, x[4]];
      case 20:
       return [0, x[1], x[2], x[3], attrs];
      case 21:
       return [0, x[1], x[2], x[3], attrs];
      case 22:
       return [0, x[1], x[2], attrs];
      case 23:
       return [0, x[1], x[2], attrs];
      case 24:
       return [0, x[1], x[2], attrs, x[4]];
      case 25:
       return [0, x[1], x[2], attrs, x[4]];
      case 26:
       var _cL_ = x[2]; return [0, [0, get_pstr_eval(x)[1], attrs], _cL_];
      case 27:
       var _cM_ = x[2];
       return [0, [14, get_pstr_extension(x)[1], attrs], _cM_];
      case 28:
       var _cN_ = x[2];
       return [0, [15, get_psig_extension(x)[1], attrs], _cN_];
      case 29:
       return [0, x[1], x[2], attrs];
      default: return [0, x[1], x[2], attrs];
    }
   }
   function get_attribute_if_is_floating_n(t, x){
    switch(t){
      case 0:
       var match = x[1];
       if(13 === match[0]){var a = match[1]; return [0, a];}
       break;
      case 1:
       var match$0 = x[1];
       if(14 === match$0[0]){var a$0 = match$0[1]; return [0, a$0];}
       break;
      case 2:
       var match$1 = x[1];
       if(5 === match$1[0]){var a$1 = match$1[1]; return [0, a$1];}
       break;
      default:
       var match$2 = x[1];
       if(4 === match$2[0]){var a$2 = match$2[1]; return [0, a$2];}
    }
    return 0;
   }
   var
    dummy_ext = [0, [0, cst, Ppxlib_Location[3]], [0, 0]],
    cst_label_declaration = "label declaration",
    cst_constructor_declaration = "constructor declaration",
    cst_type_declaration = "type declaration",
    cst_type_exception = "type exception",
    cst_type_extension = "type extension",
    cst_extension_constructor = "extension constructor",
    cst_pattern = cst_pattern$0,
    cst_core_type = "core type",
    cst_expression = cst_expression$0,
    cst_value = "value",
    cst_class_type = "class type",
    cst_class_type_field = cst_class_type_field$1,
    cst_class_declaration = "class declaration",
    cst_class_expression = "class expression",
    cst_class_field = cst_class_field$1,
    cst_class_type_declaration = "class type declaration",
    cst_module_type = "module type",
    cst_module_declaration = "module declaration",
    cst_module_type_declaration = "module type declaration",
    cst_module_substitution = "module substitution",
    cst_open = cst_open$1,
    cst_open$0 = cst_open$1,
    cst_include = "include",
    cst_module_expression = "module expression",
    cst_value_binding = "value binding",
    cst_module_binding = "module binding",
    cst_toplevel_expression = "toplevel expression",
    cst_toplevel_extension = "toplevel extension",
    cst_toplevel_signature_extensi = "toplevel signature extension",
    cst_polymorphic_variant_tag = "polymorphic variant tag",
    cst_object_type_field = "object type field",
    cst_structure_item = "structure item",
    cst_signature_item = "signature item",
    cst_class_field$0 = cst_class_field$1,
    cst_class_type_field$0 = cst_class_type_field$1,
    cst_floating = " (floating)";
   function name(t){return caml_call1(Ppxlib_Name[1][2], t[1]);}
   function context(t){return t[2];}
   var
    registrar =
      caml_call3
       (Ppxlib_Name[4][1],
        cst_attribute,
        cst_src_attribute_ml,
        function(param){
         if(0 === param[0]){
          var t = param[1];
          switch(t){
            case 0:
             var _cJ_ = cst_label_declaration; break;
            case 1:
             var _cJ_ = cst_constructor_declaration; break;
            case 2:
             var _cJ_ = cst_type_declaration; break;
            case 3:
             var _cJ_ = cst_type_exception; break;
            case 4:
             var _cJ_ = cst_type_extension; break;
            case 5:
             var _cJ_ = cst_extension_constructor; break;
            case 6:
             var _cJ_ = cst_pattern; break;
            case 7:
             var _cJ_ = cst_core_type; break;
            case 8:
             var _cJ_ = cst_expression; break;
            case 9:
             var _cJ_ = cst_value; break;
            case 10:
             var _cJ_ = cst_class_type; break;
            case 11:
             var _cJ_ = cst_class_type_field; break;
            case 12:
             var _cJ_ = cst_class_declaration; break;
            case 13:
             var _cJ_ = cst_class_expression; break;
            case 14:
             var _cJ_ = cst_class_field; break;
            case 15:
             var _cJ_ = cst_class_type_declaration; break;
            case 16:
             var _cJ_ = cst_module_type; break;
            case 17:
             var _cJ_ = cst_module_declaration; break;
            case 18:
             var _cJ_ = cst_module_type_declaration; break;
            case 19:
             var _cJ_ = cst_module_substitution; break;
            case 20:
             var _cJ_ = cst_open; break;
            case 21:
             var _cJ_ = cst_open$0; break;
            case 22:
             var _cJ_ = cst_include; break;
            case 23:
             var _cJ_ = cst_module_expression; break;
            case 24:
             var _cJ_ = cst_value_binding; break;
            case 25:
             var _cJ_ = cst_module_binding; break;
            case 26:
             var _cJ_ = cst_toplevel_expression; break;
            case 27:
             var _cJ_ = cst_toplevel_extension; break;
            case 28:
             var _cJ_ = cst_toplevel_signature_extensi; break;
            case 29:
             var _cJ_ = cst_polymorphic_variant_tag; break;
            default: var _cJ_ = cst_object_type_field;
          }
          return [0, _cJ_];
         }
         var t$0 = param[1];
         switch(t$0){
           case 0:
            var _cK_ = cst_structure_item; break;
           case 1:
            var _cK_ = cst_signature_item; break;
           case 2:
            var _cK_ = cst_class_field$0; break;
           default: var _cK_ = cst_class_type_field$0;
         }
         return [0, caml_call2(Stdlib[28], _cK_, cst_floating)];
        });
   function declare_with_all_args(name, context, pattern, k){
    caml_call4(Ppxlib_Name[4][2], 482562044, registrar, [0, context], name);
    return [0, caml_call1(Ppxlib_Name[1][1], name), context, [0, pattern, k]];
   }
   function declare(name, context, pattern, k){
    return declare_with_all_args
            (name, context, pattern, function(_cI_, param){return k;});
   }
   function declare_with_name_loc(name, context, pattern, k){
    return declare_with_all_args
            (name,
             context,
             pattern,
             function(param, name_loc){return caml_call1(k, name_loc);});
   }
   function declare_with_attr_loc(name, context, pattern, k){
    return declare_with_all_args
            (name,
             context,
             pattern,
             function(attr_loc, param){return caml_call1(k, attr_loc);});
   }
   function declare_flag(name, context){
    var
     payload_pattern =
       caml_call1(Ppxlib_Ast_pattern[234], Ppxlib_Ast_pattern[23]);
    function continuation(_cH_, param){return 0;}
    return declare_with_all_args(name, context, payload_pattern, continuation);
   }
   function normalize(t){
    var _cG_ = t[2];
    return [0, t[1], [0, _cG_[1], _cG_[2], 1]];
   }
   function hash(t){
    var _cF_ = normalize(t);
    return caml_call1(Ppxlib_Import[90][26], _cF_);
   }
   function equal(x, y){
    var _cD_ = normalize(y), _cE_ = normalize(x);
    return caml_call2(Ppxlib_Import[73][2], _cE_, _cD_);
   }
   var
    Attribute_table = caml_call1(Stdlib_Hashtbl[26], [0, equal, hash]),
    not_seen = caml_call1(Attribute_table[1], 128);
   function mark_as_seen(param){
    var attr_name = param[1];
    return caml_call2(Attribute_table[6], not_seen, attr_name);
   }
   var
    _d_ = caml_call1(CamlinternalOO[16], _b_),
    _e_ = caml_call2(CamlinternalOO[8], _d_, _c_)[94],
    _f_ =
      caml_call6
        (CamlinternalOO[18], _d_, 0, 0, _a_, Ppxlib_Ast_traverse0[2], 1)
       [1];
   caml_call3
    (CamlinternalOO[10], _d_, _e_, function(self_1){return mark_as_seen;});
   caml_call1(CamlinternalOO[17], _d_);
   var _g_ = caml_call2(CamlinternalOO[24], 0, _d_);
   caml_call1(_f_, _g_);
   var
    explicitly_drop = caml_call3(CamlinternalOO[26], 0, _g_, _d_),
    cst_Attribute_Floating_Context =
      "Attribute.Floating.Context.get_attribute",
    _h_ = [0, [11, cst_Duplicated_attribute, 0], cst_Duplicated_attribute],
    _i_ = [0, 0],
    _j_ = [0, 1],
    _k_ = [0, 0],
    _l_ = [0, 0],
    _m_ =
      [0,
       [11, "Multiple match for floating attributes: ", [2, 0, 0]],
       "Multiple match for floating attributes: %s"],
    _n_ = [0, 0],
    _o_ = [0, cst_src_attribute_ml, 462, 8],
    _p_ = [0, 0],
    _q_ =
      [0,
       [11, cst_Attribute, [2, 0, [11, "' was not used", 0]]],
       "Attribute `%s' was not used"];
   function get_internal(t, attributes$1){
    var attributes = attributes$1, longest_match = 0;
    for(;;){
     if(! attributes) return [0, longest_match];
     var attributes$0 = attributes[2], attr = attributes[1], name = attr[1];
     if(caml_call2(Ppxlib_Name[1][3], t[1], name[1]))
      if(longest_match){
       var
        name$0 = longest_match[1][1],
        len = caml_ml_string_length(name[1]),
        len$0 = caml_ml_string_length(name$0[1]);
       if(caml_call2(Ppxlib_Import[78], len, len$0)){
        var longest_match$0 = [0, attr];
        attributes = attributes$0;
        longest_match = longest_match$0;
       }
       else{
        if(! caml_call2(Ppxlib_Import[77], len, len$0))
         return [1, [0, caml_call2(Ppxlib_Location[13][2], name[2], _h_), 0]];
        attributes = attributes$0;
       }
      }
      else{
       var longest_match$1 = [0, attr];
       attributes = attributes$0;
       longest_match = longest_match$1;
      }
     else
      attributes = attributes$0;
    }
   }
   function convert(opt, pattern, attr){
    var do_mark_as_seen = opt ? opt[1] : 1;
    if(do_mark_as_seen) mark_as_seen(attr);
    var
     k = pattern[2],
     pattern$0 = pattern[1],
     _cA_ = caml_call2(k, attr[3], attr[1][2]),
     _cB_ = attr[2],
     _cC_ = caml_call1(Ppxlib_Common[16], attr);
    return caml_call5(Ppxlib_Ast_pattern[2], pattern$0, _cC_, 0, _cB_, _cA_);
   }
   function get_res(t, do_mark_as_seen, x){
    var attrs = get_attributes(t[2], x), _cy_ = get_internal(t, attrs);
    return caml_call2
            (Ppxlib_Import[96][4],
             _cy_,
             function(res){
              if(! res) return _i_;
              var attr = res[1], _cz_ = convert(do_mark_as_seen, t[3], attr);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       _cz_,
                       function(value){return [0, value];});
             });
   }
   function get(t, do_mark_as_seen, x){
    var _cx_ = get_res(t, do_mark_as_seen, x);
    return caml_call2
            (Ppxlib_Import[96][6],
             _cx_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   function has_flag_res(t, mark_as_seen, x){
    var e = get_res(t, mark_as_seen, x);
    return 0 === e[0] ? e[1] ? _j_ : _k_ : e;
   }
   function has_flag(t, mark_as_seen, x){
    var _cw_ = has_flag_res(t, mark_as_seen, x);
    return caml_call2
            (Ppxlib_Import[96][6],
             _cw_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   function consume_res(t, x){
    var attrs = get_attributes(t[2], x), _cu_ = get_internal(t, attrs);
    return caml_call2
            (Ppxlib_Import[96][4],
             _cu_,
             function(res){
              if(! res) return _l_;
              var
               attr = res[1],
               attrs$0 =
                 caml_call2
                  (Ppxlib_Import[94][31],
                   function(attr$0){return 1 - (attr === attr$0 ? 1 : 0);},
                   attrs),
               x$0 = set_attributes(t[2], x, attrs$0),
               _cv_ = convert(0, t[3], attr);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       _cv_,
                       function(value){return [0, [0, x$0, value]];});
             });
   }
   function consume(t, x){
    var _ct_ = consume_res(t, x);
    return caml_call2
            (Ppxlib_Import[96][6],
             _ct_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   function remove_seen_res(context, packeds, x){
    var attrs = get_attributes(context, x);
    function loop(acc, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return [0, acc];
      var rest = param$0[2], t = param$0[1][1];
      if(poly_equal(t[2], context)){
       var _cs_ = get_internal(t, attrs);
       return caml_call2
               (Ppxlib_Import[96][4],
                _cs_,
                function(res){
                 if(! res) return loop(acc, rest);
                 var attr = res[1], name = attr[1];
                 return caml_call2(Attribute_table[11], not_seen, name)
                         ? loop(acc, rest)
                         : loop([0, attr, acc], rest);
                });
      }
      param$0 = rest;
     }
    }
    var _cr_ = loop(0, packeds);
    return caml_call2
            (Ppxlib_Import[96][5],
             _cr_,
             function(matched){
              var
               attrs$0 =
                 caml_call2
                  (Ppxlib_Import[94][31],
                   function(attr){
                    return 1 - caml_call2(Ppxlib_Import[94][26], attr, matched);
                   },
                   attrs);
              return set_attributes(context, x, attrs$0);
             });
   }
   function remove_seen(context, packeds, x){
    var _cq_ = remove_seen_res(context, packeds, x);
    return caml_call2
            (Ppxlib_Import[96][6],
             _cq_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   function pattern_res(t, p){
    var f = caml_call1(Ppxlib_Ast_pattern[331], p);
    return caml_call1
            (Ppxlib_Ast_pattern[330],
             function(ctx, loc, x, k){
              var _cp_ = consume_res(t, x);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       _cp_,
                       function(res){
                        if(! res)
                         return caml_call4(f, ctx, loc, x, caml_call1(k, 0));
                        var match = res[1], v = match[2], x$0 = match[1];
                        return caml_call4(f, ctx, loc, x$0, caml_call1(k, [0, v]));
                       });
             });
   }
   function pattern(t, p){
    var
     _cn_ = pattern_res(t, p),
     f = caml_call1(Ppxlib_Ast_pattern[331], _cn_);
    return caml_call1
            (Ppxlib_Ast_pattern[330],
             function(a, b, c, d){
              var _co_ = caml_call4(f, a, b, c, d);
              return caml_call2
                      (Ppxlib_Import[96][6],
                       _co_,
                       function(param){
                        var err = param[1];
                        return caml_call1(Ppxlib_Location[13][8], err);
                       });
             });
   }
   function name$0(t){return caml_call1(Ppxlib_Name[1][2], t[1]);}
   function declare$0(name, context, pattern, k){
    caml_call4(Ppxlib_Name[4][2], 482562044, registrar, [1, context], name);
    return [0,
            caml_call1(Ppxlib_Name[1][1], name),
            context,
            [0, pattern, function(_cm_, param){return k;}]];
   }
   function convert_res(ts, x){
    if(! ts) return _p_;
    var context = ts[1][2];
    if
     (!
      caml_call2
       (Ppxlib_Import[94][21],
        function(t){return poly_equal(t[2], context);},
        ts))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
    var match = get_attribute_if_is_floating_n(context, x);
    if(match)
     var a = match[1], attr = a;
    else
     var attr = caml_call1(Stdlib[2], cst_Attribute_Floating_Context);
    var
     name = attr[1],
     l =
       caml_call2
        (Ppxlib_Import[94][31],
         function(t){return caml_call2(Ppxlib_Name[1][3], t[1], name[1]);},
         ts);
    if(! l) return _n_;
    if(l[2]){
     var
      _cj_ =
        caml_call2
         (Ppxlib_Import[94][55],
          l,
          function(t){return caml_call1(Ppxlib_Name[1][2], t[1]);}),
      _ck_ = caml_call2(Ppxlib_Import[99][7], cst$0, _cj_);
     return [1,
             [0, caml_call3(Ppxlib_Location[13][2], name[2], _m_, _ck_), 0]];
    }
    var t = l[1], _cl_ = convert(0, t[3], attr);
    return caml_call2
            (Ppxlib_Import[96][5], _cl_, function(value){return [0, value];});
   }
   function convert$0(ts, x){
    var _ci_ = convert_res(ts, x);
    return caml_call2
            (Ppxlib_Import[96][6],
             _ci_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   function collect_attribute_errors(registrar, context, name){
    if
     (!
      caml_call2(Ppxlib_Name[5][3], 482562044, name[1])
      &&
       !
       caml_call1(Ppxlib_Name[7], name[1])
       && caml_call2(Attribute_table[11], not_seen, name)){
     var allowlist = caml_call1(Ppxlib_Name[5][1], 0);
     return [0,
             caml_call5
              (Ppxlib_Name[4][5][1],
               registrar,
               context,
               [0, allowlist],
               _q_,
               name),
             0];
    }
    return 0;
   }
   var
    _r_ = caml_call1(CamlinternalOO[16], _b_),
    _s_ =
      caml_call2
       (CamlinternalOO[8],
        _r_,
        [0,
         cst_with_constraint,
         cst_virtual_flag,
         cst_variance,
         cst_value_description,
         cst_value_binding$0,
         cst_type_kind,
         cst_type_extension$0,
         cst_type_exception$0,
         cst_type_declaration$0,
         cst_toplevel_phrase,
         cst_toplevel_directive,
         cst_structure_item_desc,
         cst_structure_item$0,
         cst_structure,
         cst_string,
         cst_signature_item_desc,
         cst_signature_item$0,
         cst_signature,
         cst_row_field_desc,
         cst_row_field,
         cst_rec_flag,
         cst_private_flag,
         cst_position,
         cst_payload,
         cst_pattern_desc,
         cst_pattern$0,
         cst_package_type,
         cst_override_flag,
         cst_option,
         cst_open_infos,
         cst_open_description,
         cst_open_declaration,
         cst_object_field_desc,
         cst_object_field,
         cst_mutable_flag,
         cst_module_type_desc,
         cst_module_type_declaration$0,
         cst_module_type$0,
         cst_module_substitution$0,
         cst_module_expr_desc,
         cst_module_expr,
         cst_module_declaration$0,
         cst_module_binding$0,
         cst_longident_loc,
         cst_longident,
         cst_location_stack,
         cst_location,
         cst_loc,
         cst_list,
         cst_letop,
         cst_label_declaration$0,
         cst_label,
         cst_int,
         cst_injectivity,
         cst_include_infos,
         cst_include_description,
         cst_include_declaration,
         cst_functor_parameter,
         cst_extension_constructor_kind,
         cst_extension_constructor$0,
         cst_extension,
         cst_expression_desc,
         cst_expression$0,
         cst_directive_argument_desc,
         cst_directive_argument,
         cst_direction_flag,
         cst_core_type_desc,
         cst_core_type$0,
         cst_constructor_declaration$0,
         cst_constructor_arguments,
         cst_constant,
         cst_closed_flag,
         cst_class_type_field_desc,
         cst_class_type_field$2,
         cst_class_type_desc,
         cst_class_type_declaration$0,
         cst_class_type$0,
         cst_class_structure,
         cst_class_signature,
         cst_class_infos,
         cst_class_field_kind,
         cst_class_field_desc,
         cst_class_field$2,
         cst_class_expr_desc,
         cst_class_expr,
         cst_class_description,
         cst_class_declaration$0,
         cst_check_node,
         "check_floating",
         cst_char,
         cst_cases,
         cst_case,
         cst_bool,
         cst_binding_op,
         cst_attributes,
         cst_attribute,
         cst_array,
         cst_arg_label]),
    _B_ = _s_[24],
    _W_ = _s_[88],
    _X_ = _s_[89],
    _t_ = _s_[4],
    _u_ = _s_[5],
    _v_ = _s_[7],
    _w_ = _s_[8],
    _x_ = _s_[9],
    _y_ = _s_[13],
    _z_ = _s_[17],
    _A_ = _s_[20],
    _C_ = _s_[26],
    _D_ = _s_[31],
    _E_ = _s_[32],
    _F_ = _s_[37],
    _G_ = _s_[38],
    _H_ = _s_[41],
    _I_ = _s_[42],
    _J_ = _s_[43],
    _K_ = _s_[51],
    _L_ = _s_[55],
    _M_ = _s_[60],
    _N_ = _s_[63],
    _O_ = _s_[67],
    _P_ = _s_[68],
    _Q_ = _s_[69],
    _R_ = _s_[74],
    _S_ = _s_[77],
    _T_ = _s_[80],
    _U_ = _s_[83],
    _V_ = _s_[85],
    _Y_ = _s_[96],
    _Z_ =
      caml_call6
       (CamlinternalOO[18], _r_, 0, 0, _a_, Ppxlib_Ast_traverse0[3], 1),
    _$_ = _Z_[13],
    _aa_ = _Z_[15],
    _ab_ = _Z_[18],
    _ac_ = _Z_[21],
    _ad_ = _Z_[24],
    _ae_ = _Z_[29],
    _af_ = _Z_[30],
    _ag_ = _Z_[31],
    _ah_ = _Z_[35],
    _ai_ = _Z_[38],
    _aj_ = _Z_[43],
    _ak_ = _Z_[47],
    _al_ = _Z_[55],
    _am_ = _Z_[56],
    _an_ = _Z_[57],
    _ao_ = _Z_[60],
    _ap_ = _Z_[61],
    _aq_ = _Z_[66],
    _ar_ = _Z_[67],
    _as_ = _Z_[72],
    _at_ = _Z_[78],
    _au_ = _Z_[81],
    _av_ = _Z_[85],
    _aw_ = _Z_[89],
    _ax_ = _Z_[90],
    _ay_ = _Z_[91],
    _az_ = _Z_[93],
    _aA_ = _Z_[94],
    _aB_ =
      [0,
       [11, cst_attribute_not_expected_her, 0],
       cst_attribute_not_expected_her],
    ___ = _Z_[1];
   caml_call2
    (CamlinternalOO[11],
     _r_,
     [0,
      _Y_,
      function(self_2, _ch_, param){
       var name = _ch_[1];
       return [0, caml_call2(Ppxlib_Location[13][2], name[2], _aB_), 0];
      },
      _W_,
      function(self_2, context, node){
       var attrs = get_attributes(context, node);
       if(! attrs) return [0, node, 0];
       var
        _ce_ =
          caml_call2
           (Ppxlib_Import[94][55],
            attrs,
            function(attr){
             var
              payload = attr[2],
              name = attr[1],
              _cf_ = collect_attribute_errors(registrar, [0, context], name),
              _cg_ = caml_call3(self_2[1][1 + _B_], self_2, payload, 0),
              collected_errors = caml_call2(Ppxlib_Import[100], _cg_, _cf_);
             mark_as_seen(attr);
             return collected_errors;
            }),
        errors = caml_call1(Ppxlib_Import[94][59], _ce_);
       return [0, set_attributes(context, node, 0), errors];
      },
      _X_,
      function(self_2, context, node){
       var match = get_attribute_if_is_floating_n(context, node);
       if(! match) return [0, node, 0];
       var
        attr = match[1],
        payload = attr[2],
        name = attr[1],
        _cb_ = collect_attribute_errors(registrar, [1, context], name),
        _cc_ = caml_call3(self_2[1][1 + _B_], self_2, payload, 0),
        collected_errors = caml_call2(Ppxlib_Import[100], _cc_, _cb_);
       mark_as_seen(attr);
       switch(context){
         case 0:
          var _cd_ = [0, [14, dummy_ext, 0], node[2]]; break;
         case 1:
          var _cd_ = [0, [15, dummy_ext, 0], node[2]]; break;
         case 2:
          var _cd_ = [0, [6, dummy_ext], node[2], node[3]]; break;
         default: var _cd_ = [0, [5, dummy_ext], node[2], node[3]];
       }
       return [0, _cd_, collected_errors];
      },
      _K_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 0, x),
        errors = match[2],
        res = match[1],
        _ca_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ak_, self_2), res, _ca_);
      },
      _Q_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 1, x),
        errors = match[2],
        res = match[1],
        _b$_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ae_, self_2), res, _b$_);
      },
      _x_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 2, x),
        errors = match[2],
        res = match[1],
        _b__ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_aw_, self_2), res, _b__);
      },
      _v_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 4, x),
        errors = match[2],
        res = match[1],
        _b9_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ay_, self_2), res, _b9_);
      },
      _w_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 3, x),
        errors = match[2],
        res = match[1],
        _b8_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ax_, self_2), res, _b8_);
      },
      _M_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 5, x),
        errors = match[2],
        res = match[1],
        _b7_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ai_, self_2), res, _b7_);
      },
      _C_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 6, x),
        errors = match[2],
        res = match[1],
        _b6_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_as_, self_2), res, _b6_);
      },
      _P_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 7, x),
        errors = match[2],
        res = match[1],
        _b5_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_af_, self_2), res, _b5_);
      },
      _N_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 8, x),
        errors = match[2],
        res = match[1],
        _b4_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ah_, self_2), res, _b4_);
      },
      _t_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 9, x),
        errors = match[2],
        res = match[1],
        _b3_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_aA_, self_2), res, _b3_);
      },
      _S_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 10, x),
        errors = match[2],
        res = match[1],
        _b2_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ac_, self_2), res, _b2_);
      },
      _T_,
      function(self_2, f, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 12, x),
        errors = match[2],
        res = match[1],
        _b1_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call3(caml_call1(_ab_, self_2), f, res, _b1_);
      },
      _V_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 13, x),
        errors = match[2],
        res = match[1],
        _b0_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_$_, self_2), res, _b0_);
      },
      _G_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 16, x),
        errors = match[2],
        res = match[1],
        _bZ_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ao_, self_2), res, _bZ_);
      },
      _I_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 17, x),
        errors = match[2],
        res = match[1],
        _bY_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_am_, self_2), res, _bY_);
      },
      _F_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 18, x),
        errors = match[2],
        res = match[1],
        _bX_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ap_, self_2), res, _bX_);
      },
      _D_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 20, x),
        errors = match[2],
        res = match[1],
        _bW_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ar_, self_2), res, _bW_);
      },
      _E_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 21, x),
        errors = match[2],
        res = match[1],
        _bV_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_aq_, self_2), res, _bV_);
      },
      _L_,
      function(self_2, f, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 22, x),
        errors = match[2],
        res = match[1],
        _bU_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call3(caml_call1(_aj_, self_2), f, res, _bU_);
      },
      _H_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 23, x),
        errors = match[2],
        res = match[1],
        _bT_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_an_, self_2), res, _bT_);
      },
      _u_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 24, x),
        errors = match[2],
        res = match[1],
        _bS_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_az_, self_2), res, _bS_);
      },
      _J_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 25, x),
        errors = match[2],
        res = match[1],
        _bR_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_al_, self_2), res, _bR_);
      },
      _U_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 14, x),
        errors1 = match[2],
        x$0 = match[1],
        match$0 = caml_call3(self_2[1][1 + _X_], self_2, 2, x$0),
        errors2 = match$0[2],
        x$1 = match$0[1],
        _bP_ = caml_call2(Ppxlib_Import[100], errors1, errors2),
        _bQ_ = caml_call2(Ppxlib_Import[100], acc, _bP_);
       return caml_call2(caml_call1(_aa_, self_2), x$1, _bQ_);
      },
      _R_,
      function(self_2, x, acc){
       var
        match = caml_call3(self_2[1][1 + _W_], self_2, 11, x),
        errors1 = match[2],
        x$0 = match[1],
        match$0 = caml_call3(self_2[1][1 + _X_], self_2, 3, x$0),
        errors2 = match$0[2],
        x$1 = match$0[1],
        _bN_ = caml_call2(Ppxlib_Import[100], errors1, errors2),
        _bO_ = caml_call2(Ppxlib_Import[100], acc, _bN_);
       return caml_call2(caml_call1(_ad_, self_2), x$1, _bO_);
      },
      _A_,
      function(self_2, x, acc){
       if(0 === x[1][0])
        var
         _bL_ = caml_call3(self_2[1][1 + _W_], self_2, 29, x),
         errors = _bL_[2],
         x$0 = _bL_[1];
       else
        var errors = 0, x$0 = x;
       var _bM_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_at_, self_2), x$0, _bM_);
      },
      _O_,
      function(self_2, x, acc){
       a:
       {
        if(typeof x !== "number" && 4 === x[0]){
         var
          closed_flag = x[2],
          fields = x[1],
          _bJ_ = caml_call2(self_2[1][1 + _W_], self_2, 30),
          _bK_ = caml_call2(Ppxlib_Import[94][55], fields, _bJ_),
          match = caml_call1(Ppxlib_Import[94][62], _bK_),
          errors$0 = match[2],
          fields$0 = match[1],
          errors = caml_call1(Ppxlib_Import[94][59], errors$0),
          x$0 = [4, fields$0, closed_flag];
         break a;
        }
        var errors = 0, x$0 = x;
       }
       var _bI_ = caml_call2(Ppxlib_Import[100], acc, errors);
       return caml_call2(caml_call1(_ag_, self_2), x$0, _bI_);
      },
      _y_,
      function(self_2, item, acc){
       var
        match = caml_call3(self_2[1][1 + _X_], self_2, 0, item),
        errors = match[2],
        item$0 = match[1];
       switch(item$0[1][0]){
         case 0:
          var
           _bE_ = caml_call3(self_2[1][1 + _W_], self_2, 26, item$0),
           errors2 = _bE_[2],
           item$1 = _bE_[1];
          break;
         case 14:
          var
           _bH_ = caml_call3(self_2[1][1 + _W_], self_2, 27, item$0),
           errors2$0 = _bH_[2],
           item$2 = _bH_[1],
           errors2 = errors2$0,
           item$1 = item$2;
          break;
         default: var errors2 = 0, item$1 = item$0;
       }
       var
        _bF_ = caml_call2(Ppxlib_Import[100], errors, errors2),
        _bG_ = caml_call2(Ppxlib_Import[100], acc, _bF_);
       return caml_call2(caml_call1(_av_, self_2), item$1, _bG_);
      },
      _z_,
      function(self_2, item, acc){
       var
        match = caml_call3(self_2[1][1 + _X_], self_2, 1, item),
        errors = match[2],
        item$0 = match[1];
       if(15 === item$0[1][0])
        var
         _bD_ = caml_call3(self_2[1][1 + _W_], self_2, 28, item$0),
         errors2$0 = _bD_[2],
         item$2 = _bD_[1],
         errors2 = errors2$0,
         item$1 = item$2;
       else
        var errors2 = 0, item$1 = item$0;
       var
        _bB_ = caml_call2(Ppxlib_Import[100], errors, errors2),
        _bC_ = caml_call2(Ppxlib_Import[100], acc, _bB_);
       return caml_call2(caml_call1(_au_, self_2), item$1, _bC_);
      }]);
   caml_call1(CamlinternalOO[17], _r_);
   var _aC_ = caml_call2(CamlinternalOO[24], 0, _r_);
   caml_call1(___, _aC_);
   var
    collect_unused_attributes_erro =
      caml_call3(CamlinternalOO[26], 0, _aC_, _r_);
   function raise_if_non_empty(param){
    if(! param) return 0;
    var err = param[1];
    return caml_call1(Ppxlib_Location[13][8], err);
   }
   var
    _aD_ = caml_call1(CamlinternalOO[16], _b_),
    _aE_ = caml_call2(CamlinternalOO[8], _aD_, shared),
    _a8_ = _aE_[88],
    _aF_ = _aE_[4],
    _aG_ = _aE_[5],
    _aH_ = _aE_[7],
    _aI_ = _aE_[8],
    _aJ_ = _aE_[9],
    _aK_ = _aE_[13],
    _aL_ = _aE_[17],
    _aM_ = _aE_[20],
    _aN_ = _aE_[24],
    _aO_ = _aE_[26],
    _aP_ = _aE_[31],
    _aQ_ = _aE_[32],
    _aR_ = _aE_[37],
    _aS_ = _aE_[38],
    _aT_ = _aE_[41],
    _aU_ = _aE_[42],
    _aV_ = _aE_[43],
    _aW_ = _aE_[51],
    _aX_ = _aE_[55],
    _aY_ = _aE_[60],
    _aZ_ = _aE_[63],
    _a0_ = _aE_[67],
    _a1_ = _aE_[68],
    _a2_ = _aE_[69],
    _a3_ = _aE_[74],
    _a4_ = _aE_[77],
    _a5_ = _aE_[80],
    _a6_ = _aE_[83],
    _a7_ = _aE_[85],
    _a9_ = _aE_[95],
    _a__ =
      caml_call6
       (CamlinternalOO[18], _aD_, 0, 0, _a_, Ppxlib_Ast_traverse0[2], 1),
    _ba_ = _a__[18],
    _bb_ = _a__[43],
    _bc_ =
      [0,
       [11, cst_attribute_not_expected_her, 0],
       cst_attribute_not_expected_her],
    _a$_ = _a__[1];
   caml_call2
    (CamlinternalOO[11],
     _aD_,
     [0,
      _a8_,
      function(self_3, context, node){
       var attrs = get_attributes(context, node);
       return attrs
               ? (caml_call2
                  (Ppxlib_Import[94][77],
                   attrs,
                   function(attr){
                    var payload = attr[2], name = attr[1];
                    caml_call2(self_3[1][1 + _aN_], self_3, payload);
                    var
                     context$0 = [0, context],
                     match = collect_attribute_errors(registrar, context$0, name);
                    if(match){
                     var err = match[1];
                     caml_call1(Ppxlib_Location[13][8], err);
                    }
                    return mark_as_seen(attr);
                   }),
                 set_attributes(context, node, 0))
               : node;
      },
      _a9_,
      function(self_3, param){
       var name = param[1];
       return caml_call2(Ppxlib_Location[5], [0, name[2]], _bc_);
      },
      _aW_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, -937230609, 27),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _a2_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 720277237, 26),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aJ_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 698610869, 25),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aH_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 179859066, 24),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aI_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, -280892598, 23),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aY_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, -579981062, 22),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aO_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 293013072, 21),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _a1_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, -957384486, 20),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aZ_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 782176664, 19),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aF_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, -216458258, 18),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _a4_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 806013793, 17),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _a5_,
      function(self_3, f, x){
       var _bA_ = caml_call3(self_3[1][1 + _a8_], self_3, 12, x);
       return caml_call2(caml_call1(_ba_, self_3), f, _bA_);
      },
      _a7_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 639620572, 16),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aS_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 915171949, 15),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aU_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, -196978265, 14),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aR_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 194358504, 13),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aP_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 406208967, 12),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aQ_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 523001285, 11),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aX_,
      function(self_3, f, x){
       var _bz_ = caml_call3(self_3[1][1 + _a8_], self_3, 22, x);
       return caml_call2(caml_call1(_bb_, self_3), f, _bz_);
      },
      _aT_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 748778728, 10),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aG_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, -1035682505, 9),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aV_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, -935352974, 8),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _a6_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 1060064819, 7),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _a3_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 382854684, 6),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aM_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 223694229, 5),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _a0_,
      function(self_3, x){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 692169494, 4),
                  collect_unused_attributes_erro,
                  x,
                  0));
      },
      _aK_,
      function(self_3, item){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, 832861151, 3),
                  collect_unused_attributes_erro,
                  item,
                  0));
      },
      _aL_,
      function(self_3, item){
       return raise_if_non_empty
               (caml_call3
                 (caml_get_public_method
                   (collect_unused_attributes_erro, -662996230, 2),
                  collect_unused_attributes_erro,
                  item,
                  0));
      }]);
   caml_call1(CamlinternalOO[17], _aD_);
   var _bd_ = caml_call2(CamlinternalOO[24], 0, _aD_);
   caml_call1(_a$_, _bd_);
   var check_unused = caml_call3(CamlinternalOO[26], 0, _bd_, _aD_);
   function reset_checks(param){
    return caml_call1(Attribute_table[2], not_seen);
   }
   var
    _be_ = caml_call1(CamlinternalOO[16], _b_),
    _bf_ = caml_call2(CamlinternalOO[8], _be_, _c_)[94],
    _bg_ =
      caml_call6
       (CamlinternalOO[18], _be_, 0, 0, _a_, Ppxlib_Ast_traverse0[2], 1),
    _bi_ = _bg_[74],
    _bh_ = _bg_[1];
   caml_call3
    (CamlinternalOO[10],
     _be_,
     _bf_,
     function(self_4, attr){
      var
       payload = attr[2],
       name = attr[1],
       loc = caml_call1(Ppxlib_Common[17], attr);
      caml_call1(caml_call1(_bi_, self_4), payload);
      return caml_call3(Attribute_table[5], not_seen, name, loc);
     });
   caml_call1(CamlinternalOO[17], _be_);
   var _bj_ = caml_call2(CamlinternalOO[24], 0, _be_);
   caml_call1(_bh_, _bj_);
   var
    collect = caml_call3(CamlinternalOO[26], 0, _bj_, _be_),
    _bk_ =
      [0,
       [11, cst_Attribute, [2, 0, [11, "' was silently dropped", 0]]],
       "Attribute `%s' was silently dropped"];
   function collect_unseen_errors(param){
    function fail(name, loc, acc){
     var txt = name[1];
     return caml_call1(Ppxlib_Name[7], txt)
             ? acc
             : [0, caml_call3(Ppxlib_Location[13][2], loc, _bk_, txt), acc];
    }
    return caml_call3(Attribute_table[14], fail, not_seen, 0);
   }
   function check_all_seen(param){
    var match = collect_unseen_errors(0);
    if(! match) return 0;
    var err = match[1];
    return caml_call1(Ppxlib_Location[13][8], err);
   }
   var _bl_ = [0, 0];
   function remove_attributes_present_in(table){
    if(! _bl_[1]){
     var
      _bq_ = caml_call1(CamlinternalOO[16], _b_),
      _br_ = caml_call2(CamlinternalOO[3], _bq_, cst$1),
      _bs_ = caml_call2(CamlinternalOO[8], _bq_, _c_)[94],
      _bt_ =
        caml_call6
         (CamlinternalOO[18], _bq_, 0, 0, _a_, Ppxlib_Ast_traverse0[2], 0),
      _bv_ = _bt_[74],
      _bu_ = _bt_[1];
     caml_call3
      (CamlinternalOO[10],
       _bq_,
       _bs_,
       function(self_5, param){
        var env = self_5[1 + _br_], payload = param[2], name = param[1];
        caml_call1(caml_call1(_bv_, self_5), payload);
        return caml_call2(Attribute_table[6], env[1], name);
       });
     caml_call1(CamlinternalOO[17], _bq_);
     _bl_[1] =
      function(_bw_){
       var _bx_ = _bw_[1], _by_ = caml_call2(CamlinternalOO[24], 0, _bq_);
       caml_call2(_bu_, _bw_[2], _by_);
       _by_[1 + _br_] = _bx_;
       return caml_call3(CamlinternalOO[26], 0, _by_, _bq_);
      };
    }
    return caml_call1(_bl_[1], [0, [0, table], Ppxlib_Ast_traverse0[2][3]]);
   }
   function copy_of_not_seen(param){
    var
     _bo_ = caml_call1(Attribute_table[15], not_seen),
     copy = caml_call1(Attribute_table[1], _bo_),
     _bp_ = caml_call1(Attribute_table[5], copy);
    caml_call2(Attribute_table[12], _bp_, not_seen);
    return copy;
   }
   function dropped_so_far_structure(st){
    var
     table = copy_of_not_seen(0),
     _bn_ = remove_attributes_present_in(table);
    caml_call2(caml_get_public_method(_bn_, -951102413, 28), _bn_, st);
    return caml_call3
            (Attribute_table[14],
             function(name, loc, acc){return [0, [0, name[1], loc], acc];},
             table,
             0);
   }
   function dropped_so_far_signature(sg){
    var
     table = copy_of_not_seen(0),
     _bm_ = remove_attributes_present_in(table);
    caml_call2(caml_get_public_method(_bm_, 359375608, 29), _bm_, sg);
    return caml_call3
            (Attribute_table[14],
             function(name, loc, acc){return [0, [0, name[1], loc], acc];},
             table,
             0);
   }
   var
    Ppxlib_Attribute =
      [0,
       [0,
        0,
        1,
        2,
        4,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30],
       declare,
       declare_with_name_loc,
       declare_with_attr_loc,
       declare_flag,
       name,
       context,
       get_res,
       get,
       has_flag_res,
       has_flag,
       consume_res,
       consume,
       remove_seen_res,
       remove_seen,
       [0, [0, 0, 1, 2, 3], declare$0, name$0, convert_res, convert$0],
       explicitly_drop,
       check_unused,
       collect_unused_attributes_erro,
       collect,
       collect_unseen_errors,
       check_all_seen,
       mark_as_seen,
       dropped_so_far_structure,
       dropped_so_far_signature,
       reset_checks,
       pattern,
       pattern_res];
   runtime.caml_register_global(75, Ppxlib_Attribute, "Ppxlib__Attribute");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Code_path
//# unitInfo: Requires: Ppxlib__Import, Stdlib__Filename
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = ".",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, "src/code_path.ml", 15, 10];
   function top_level(file_path){
    var
     basename = caml_call1(Stdlib_Filename[13], file_path),
     match = caml_call2(Ppxlib_Import[99][70], basename, 46);
    if(! match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var
     name = match[1],
     main_module_name = caml_call1(Ppxlib_Import[99][67], name);
    return [0, file_path, main_module_name, 0, main_module_name, 0, 0, 0];
   }
   function file_path(t){return t[1];}
   function main_module_name(t){return t[2];}
   function enclosing_module(t){return t[4];}
   function enclosing_value(t){return t[5];}
   function submodule_path(t){
    return caml_call2
            (Ppxlib_Import[94][15],
             function(located){return located[1];},
             t[3]);
   }
   function value(t){
    return caml_call2
            (Ppxlib_Import[95][3],
             t[6],
             function(located){return located[1];});
   }
   function fully_qualified_path(t){
    var
     value$0 = value(t),
     submodule_path =
       caml_call2
        (Ppxlib_Import[94][15],
         function(located){return [0, located[1]];},
         t[3]),
     names =
       caml_call2
        (Ppxlib_Import[100], [0, [0, t[2]], submodule_path], [0, value$0, 0]),
     _c_ = caml_call1(Ppxlib_Import[94][68], names);
    return caml_call1(caml_call1(Ppxlib_Import[99][7], cst), _c_);
   }
   function enter_expr(t){return [0, t[1], t[2], t[3], t[4], t[5], t[6], 1];}
   function enter_module(loc, module_name, t){
    return t[7]
            ? [0, t[1], t[2], t[3], module_name, t[5], t[6], t[7]]
            : [0,
              t[1],
              t[2],
              [0, [0, module_name, loc], t[3]],
              module_name,
              t[5],
              t[6],
              t[7]];
   }
   function enter_value(loc, value_name, t){
    return t[7]
            ? [0, t[1], t[2], t[3], t[4], [0, value_name], t[6], t[7]]
            : [0,
              t[1],
              t[2],
              t[3],
              t[4],
              [0, value_name],
              [0, [0, value_name, loc]],
              t[7]];
   }
   function to_string_path(t){
    var _b_ = submodule_path(t);
    return caml_call2(Ppxlib_Import[99][7], cst$0, [0, t[1], _b_]);
   }
   function with_string_path(f, loc, path){
    return caml_call2(f, loc, to_string_path(path));
   }
   var
    Ppxlib_Code_path =
      [0,
       file_path,
       main_module_name,
       submodule_path,
       enclosing_module,
       value,
       enclosing_value,
       fully_qualified_path,
       to_string_path,
       top_level,
       enter_expr,
       enter_module,
       enter_value,
       with_string_path];
   runtime.caml_register_global(7, Ppxlib_Code_path, "Ppxlib__Code_path");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Expansion_context
//# unitInfo: Requires: Ppxlib__Code_path
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppxlib_Code_path = global_data.Ppxlib__Code_path;
   function top_level(tool_name, file_path, input_name){
    var code_path = caml_call1(Ppxlib_Code_path[9], file_path);
    return [0, tool_name, code_path, input_name];
   }
   function code_path(t){return t[2];}
   function input_name(t){return t[3];}
   function tool_name(t){return t[1];}
   function enter_expr(t){
    var _g_ = t[3], _h_ = caml_call1(Ppxlib_Code_path[10], t[2]);
    return [0, t[1], _h_, _g_];
   }
   function enter_module(loc, name, t){
    var _e_ = t[3], _f_ = caml_call3(Ppxlib_Code_path[11], loc, name, t[2]);
    return [0, t[1], _f_, _e_];
   }
   function enter_value(loc, name, t){
    var _c_ = t[3], _d_ = caml_call3(Ppxlib_Code_path[12], loc, name, t[2]);
    return [0, t[1], _d_, _c_];
   }
   function make(extension_point_loc, base, param){return [0, extension_point_loc, base];
   }
   function extension_point_loc(t){return t[1];}
   function code_path$0(t){return t[2][2];}
   function input_name$0(t){return t[2][3];}
   function tool_name$0(t){return t[2][1];}
   function with_loc_and_path(f, ctxt){
    var _b_ = caml_call1(Ppxlib_Code_path[8], ctxt[2][2]);
    return caml_call2(f, ctxt[1], _b_);
   }
   function make$0(derived_item_loc, inline, base, param){return [0, derived_item_loc, inline, base];
   }
   function derived_item_loc(t){return t[1];}
   function code_path$1(t){return t[3][2];}
   function input_name$1(t){return t[3][3];}
   function tool_name$1(t){return t[3][1];}
   function inline(t){return t[2];}
   function with_loc_and_path$0(f, ctxt){
    var _a_ = caml_call1(Ppxlib_Code_path[8], ctxt[3][2]);
    return caml_call2(f, ctxt[1], _a_);
   }
   var
    Ppxlib_Expansion_context =
      [0,
       [0,
        code_path,
        input_name,
        tool_name,
        top_level,
        enter_expr,
        enter_module,
        enter_value],
       [0,
        extension_point_loc,
        code_path$0,
        input_name$0,
        tool_name$0,
        with_loc_and_path,
        make],
       [0,
        derived_item_loc,
        code_path$1,
        input_name$1,
        tool_name$1,
        with_loc_and_path$0,
        inline,
        make$0]];
   runtime.caml_register_global
    (1, Ppxlib_Expansion_context, "Ppxlib__Expansion_context");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ast_traverse
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_pattern, Ppxlib__Ast_traverse0, Ppxlib__Attribute, Ppxlib__Common, Ppxlib__Expansion_context, Ppxlib__Import, Ppxlib_ast__Ast, Ppxlib_traverse_builtins, Stdlib, Stdlib__ArrayLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "_",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes$0 = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constr = "constr",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_float = "float",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_nativeint = "nativeint",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_other = "other",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_ppxlib_do_not_enter_module = "ppxlib.do_not_enter_module",
    cst_ppxlib_do_not_enter_value = "ppxlib.do_not_enter_value",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_record = "record",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_tuple = "tuple",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_unit = "unit",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = "",
    cst$0 = ".",
    cst = cst$2,
    _a_ =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes$0,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    _e_ =
      [0,
       cst_unit,
       cst_tuple,
       cst_string,
       cst_record,
       cst_other,
       cst_nativeint,
       cst_int64,
       cst_int32,
       cst_int,
       cst_float,
       cst_constr,
       cst_char,
       cst_bool,
       cst_array],
    _f_ =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_unit,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_tuple,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_record,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_other,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_nativeint,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int64,
       cst_int32,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_float,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constr,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes$0,
       cst_attribute,
       cst_array,
       cst_arg_label],
    _g_ =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_signature,
       cst_class_type_field,
       cst_attributes$0,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    _h_ =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_constr,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_unit,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_nativeint,
       cst_signature_item,
       cst_extension_constructor,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_record,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_float,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_signature,
       cst_class_type_field,
       cst_attributes$0,
       cst_tuple,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_other,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_int32,
       cst_int64,
       cst_class_field],
    _i_ =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes$0,
       cst_attribute,
       cst_array,
       cst_arg_label],
    _j_ =
      [0,
       cst_arg_label,
       cst_attribute,
       cst_attributes$0,
       cst_binding_op,
       cst_case,
       cst_cases,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    shared =
      [0,
       cst_arg_label,
       cst_attribute,
       cst_attributes$0,
       cst_binding_op,
       cst_case,
       cst_cases,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_ast_Ast = global_data.Ppxlib_ast__Ast,
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Ppxlib_Expansion_context = global_data.Ppxlib__Expansion_context,
    Ppxlib_Attribute = global_data.Ppxlib__Attribute,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Stdlib = global_data.Stdlib,
    Ppxlib_traverse_builtins = global_data.Ppxlib_traverse_builtins,
    Ppxlib_Ast_traverse0 = global_data.Ppxlib__Ast_traverse0,
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    map = Ppxlib_Ast_traverse0[1],
    iter = Ppxlib_Ast_traverse0[2],
    fold = Ppxlib_Ast_traverse0[3],
    fold_map = Ppxlib_Ast_traverse0[4],
    map_with_context = Ppxlib_Ast_traverse0[5],
    lift = Ppxlib_Ast_traverse0[6],
    lift_map_with_context = [],
    _b_ =
      [0,
       cst_tuple,
       cst_string,
       cst_record,
       cst_other,
       cst_option,
       cst_list,
       cst_int,
       cst_constr,
       cst_char,
       cst_bool],
    _c_ = [0, cst_list, cst_option];
   runtime.caml_update_dummy
    (lift_map_with_context,
     [0,
      0,
      function(_bw_){
       caml_call2(CamlinternalOO[8], _bw_, _f_);
       var
        _bx_ =
          caml_call6
            (CamlinternalOO[18],
             _bw_,
             0,
             _e_,
             _c_,
             Ppxlib_traverse_builtins[8],
             1)
           [1],
        _by_ =
          caml_call6
            (CamlinternalOO[18], _bw_, 0, _b_, _j_, Ppxlib_ast_Ast[7], 1)
           [1];
       return function(_bA_, _bz_){
        var _bB_ = caml_call2(CamlinternalOO[24], _bz_, _bw_);
        caml_call1(_bx_, _bB_);
        caml_call1(_by_, _bB_);
        return caml_call3(CamlinternalOO[26], _bz_, _bB_, _bw_);};
      },
      0]);
   function module_name(param){
    if(! param) return cst;
    var name = param[1];
    return name;
   }
   function enter(name, path){
    if(caml_call1(Ppxlib_Import[99][53], path)) return name;
    var _bv_ = caml_call2(Stdlib[28], cst$0, name);
    return caml_call2(Stdlib[28], path, _bv_);
   }
   function enter_opt(name_opt, path){
    return enter(module_name(name_opt), path);
   }
   var
    map_with_path =
      caml_call2
       (CamlinternalOO[19],
        _g_,
        function(_bf_){
         var
          _bg_ = caml_call2(CamlinternalOO[8], _bf_, _i_),
          _bh_ = _bg_[37],
          _bi_ = _bg_[42],
          _bj_ = _bg_[43],
          _bk_ =
            caml_call6
             (CamlinternalOO[18], _bf_, 0, 0, _a_, map_with_context, 1),
          _bm_ = _bk_[55],
          _bn_ = _bk_[56],
          _bo_ = _bk_[61],
          _bl_ = _bk_[1];
         caml_call2
          (CamlinternalOO[11],
           _bf_,
           [0,
            _bj_,
            function(self_2, path, mb){
             var _bu_ = enter_opt(mb[1][1], path);
             return caml_call2(caml_call1(_bm_, self_2), _bu_, mb);
            },
            _bi_,
            function(self_2, path, md){
             var _bt_ = enter_opt(md[1][1], path);
             return caml_call2(caml_call1(_bn_, self_2), _bt_, md);
            },
            _bh_,
            function(self_2, path, mtd){
             var _bs_ = enter(mtd[1][1], path);
             return caml_call2(caml_call1(_bo_, self_2), _bs_, mtd);
            }]);
         return function(_bq_, _bp_){
          var _br_ = caml_call2(CamlinternalOO[24], _bp_, _bf_);
          caml_call1(_bl_, _br_);
          return caml_call3(CamlinternalOO[26], _bp_, _br_, _bf_);};
        }),
    _k_ = caml_call1(CamlinternalOO[16], _g_),
    _l_ = caml_call2(CamlinternalOO[8], _k_, _i_)[26],
    _m_ = caml_call6(CamlinternalOO[18], _k_, 0, 0, _a_, fold, 1),
    _o_ = _m_[72],
    _n_ = _m_[1];
   caml_call3
    (CamlinternalOO[10],
     _k_,
     _l_,
     function(self_3, p, acc){
      var acc$0 = caml_call2(caml_call1(_o_, self_3), p, acc), _be_ = p[1];
      if(typeof _be_ !== "number" && 0 === _be_[0]){
       var txt = _be_[1][1];
       return [0, txt, acc$0];
      }
      return acc$0;
     });
   caml_call1(CamlinternalOO[17], _k_);
   var _p_ = caml_call2(CamlinternalOO[24], 0, _k_);
   caml_call1(_n_, _p_);
   var var_names_of = caml_call3(CamlinternalOO[26], 0, _p_, _k_);
   function ec_enter_module_opt(loc, name_opt, ctxt){
    var _bd_ = module_name(name_opt);
    return caml_call3(Ppxlib_Expansion_context[1][6], loc, _bd_, ctxt);
   }
   var
    _q_ = Ppxlib_Import[89][1],
    _r_ = caml_call1(Ppxlib_Ast_pattern[175], Ppxlib_Ast_pattern[5]),
    _s_ = caml_call1(Ppxlib_Ast_pattern[124], _r_),
    _t_ = caml_call1(Ppxlib_Ast_pattern[324], _s_),
    enter_value =
      caml_call4(Ppxlib_Attribute[2], "ppxlib.enter_value", 8, _t_, _q_),
    _u_ = Ppxlib_Import[89][1],
    _v_ = Ppxlib_Ast_pattern[37],
    _w_ = caml_call1(Ppxlib_Ast_pattern[175], Ppxlib_Ast_pattern[5]),
    _x_ = caml_call2(Ppxlib_Ast_pattern[133], _w_, _v_),
    _y_ = caml_call1(Ppxlib_Ast_pattern[324], _x_),
    enter_module =
      caml_call4(Ppxlib_Attribute[2], "ppxlib.enter_module", 23, _y_, _u_),
    _z_ = caml_call1(Ppxlib_Ast_pattern[234], Ppxlib_Ast_pattern[23]),
    do_not_enter_value_binding =
      caml_call4
       (Ppxlib_Attribute[2], cst_ppxlib_do_not_enter_value, 24, _z_, 0),
    _A_ = caml_call1(Ppxlib_Ast_pattern[234], Ppxlib_Ast_pattern[23]),
    do_not_enter_value_description =
      caml_call4
       (Ppxlib_Attribute[2], cst_ppxlib_do_not_enter_value, 9, _A_, 0),
    _B_ = caml_call1(Ppxlib_Ast_pattern[234], Ppxlib_Ast_pattern[23]),
    do_not_enter_module_binding =
      caml_call4
       (Ppxlib_Attribute[2], cst_ppxlib_do_not_enter_module, 25, _B_, 0),
    _C_ = caml_call1(Ppxlib_Ast_pattern[234], Ppxlib_Ast_pattern[23]),
    do_not_enter_module_declaratio =
      caml_call4
       (Ppxlib_Attribute[2], cst_ppxlib_do_not_enter_module, 17, _C_, 0),
    _D_ = caml_call1(Ppxlib_Ast_pattern[234], Ppxlib_Ast_pattern[23]),
    do_not_enter_module_type_decla =
      caml_call4
       (Ppxlib_Attribute[2], cst_ppxlib_do_not_enter_module, 18, _D_, 0),
    _E_ = caml_call1(Ppxlib_Ast_pattern[234], Ppxlib_Ast_pattern[23]),
    do_not_enter_let_module =
      caml_call4
       (Ppxlib_Attribute[2], cst_ppxlib_do_not_enter_module, 8, _E_, 0),
    cst_pvb_loc = "pvb_loc",
    cst_pvb_attributes = "pvb_attributes",
    cst_pvb_expr = "pvb_expr",
    cst_pvb_pat = "pvb_pat",
    cst_attributes = cst_attributes$0,
    cst_pexp_loc_stack = "pexp_loc_stack",
    cst_pexp_loc = "pexp_loc",
    cst_pexp_desc = "pexp_desc",
    cst_Pexp_letmodule = "Pexp_letmodule";
   function _F_(ctx, x){return [0, x, 0];}
   var
    map_with_expansion_context_and =
      caml_call2
       (CamlinternalOO[19],
        _h_,
        function(_ac_){
         var
          _ad_ = caml_call2(CamlinternalOO[3], _ac_, cst$1),
          _ae_ = caml_call2(CamlinternalOO[8], _ac_, _f_),
          _aj_ = _ae_[17],
          _ak_ = _ae_[23],
          _aq_ = _ae_[46],
          _at_ = _ae_[52],
          _av_ = _ae_[54],
          _aB_ = _ae_[71],
          _aC_ = _ae_[79],
          _aF_ = _ae_[102],
          _af_ = _ae_[4],
          _ag_ = _ae_[5],
          _ah_ = _ae_[6],
          _ai_ = _ae_[11],
          _al_ = _ae_[29],
          _am_ = _ae_[32],
          _an_ = _ae_[33],
          _ao_ = _ae_[39],
          _ap_ = _ae_[42],
          _ar_ = _ae_[47],
          _as_ = _ae_[48],
          _au_ = _ae_[53],
          _aw_ = _ae_[58],
          _ax_ = _ae_[59],
          _ay_ = _ae_[60],
          _az_ = _ae_[66],
          _aA_ = _ae_[70],
          _aD_ = _ae_[97],
          _aE_ = _ae_[100],
          _aG_ = _ae_[104],
          _aH_ =
            caml_call6
             (CamlinternalOO[18],
              _ac_,
              0,
              _e_,
              shared,
              lift_map_with_context,
              1),
          _aJ_ = _aH_[51],
          _aK_ = _aH_[52],
          _aL_ = _aH_[53],
          _aM_ = _aH_[57],
          _aN_ = _aH_[88],
          _aO_ = _aH_[89],
          _aI_ = _aH_[1];
         caml_call2
          (CamlinternalOO[11],
           _ac_,
           [0,
            _ay_,
            function(self_4){return self_4[1 + _ad_];},
            _aj_,
            function(self_4){return self_4[1 + _ad_];},
            _aE_,
            function(self_4){return self_4[1 + _ad_];},
            _aD_,
            function(self_4){return self_4[1 + _ad_];},
            _az_,
            function(self_4){return self_4[1 + _ad_];},
            _ax_,
            function(self_4){return self_4[1 + _ad_];},
            _aw_,
            function(self_4){return self_4[1 + _ad_];},
            _ao_,
            function(self_4){return self_4[1 + _ad_];},
            _ah_,
            function(self_4){return self_4[1 + _ad_];},
            _aG_,
            function(self_4, f, ctx, a){
             var
              _bc_ = caml_call1(Stdlib_ArrayLabels[10], a),
              match = caml_call4(self_4[1][1 + _av_], self_4, f, ctx, _bc_),
              errors = match[2],
              list = match[1];
             return [0, caml_call1(Stdlib_ArrayLabels[11], list), errors];
            },
            _am_,
            function(self_4, _bb_, param){return 0;},
            _ak_,
            function(self_4, ctx, fields){
             return caml_call2
                     (Ppxlib_Import[94][70],
                      fields,
                      function(_ba_){return _ba_[2];});
            },
            _aC_,
            function(self_4, ctx, tag, args){
             return caml_call1(Ppxlib_Import[94][59], args);
            },
            _ai_,
            function(self_4, ctx, l){
             return caml_call1(Ppxlib_Import[94][59], l);
            },
            _aB_,
            function(self_4, ctxt, expr){
             var
              pexp_attributes = expr[4],
              pexp_loc_stack = expr[3],
              pexp_loc = expr[2],
              pexp_desc = expr[1],
              _a4_ = caml_call3(Ppxlib_Attribute[8], enter_value, 0, expr),
              _a5_ = caml_call2(Ppxlib_Common[24][4], _a4_, 0),
              with_value =
                caml_call2
                 (Ppxlib_Common[24][3],
                  _a5_,
                  function(param){
                   if(! param) return ctxt;
                   var match = param[1], loc = match[2], txt = match[1];
                   return caml_call3
                           (Ppxlib_Expansion_context[1][7], loc, txt, ctxt);
                  });
             return caml_call2
                     (Ppxlib_Common[24][2],
                      with_value,
                      function(ctxt){
                       var
                        ctxt$0 = caml_call1(Ppxlib_Expansion_context[1][5], ctxt);
                       a:
                       {
                        if(typeof pexp_desc !== "number" && 25 === pexp_desc[0]){
                         var
                          body = pexp_desc[3],
                          module_expr = pexp_desc[2],
                          name = pexp_desc[1],
                          _a8_ = caml_call1(self_4[1][1 + _aj_], self_4),
                          _a9_ = caml_call2(self_4[1][1 + _an_], self_4, _a8_),
                          match$2 =
                            caml_call4(self_4[1][1 + _au_], self_4, _a9_, ctxt$0, name),
                          name_errors = match$2[2],
                          name$0 = match$2[1],
                          _a__ =
                            caml_call3
                             (Ppxlib_Attribute[8], do_not_enter_let_module, 0, expr),
                          _a$_ = caml_call2(Ppxlib_Common[24][4], _a__, 0),
                          with_let_module =
                            caml_call2
                             (Ppxlib_Common[24][3],
                              _a$_,
                              function(param){
                               return param
                                       ? ctxt$0
                                       : ec_enter_module_opt(module_expr[2], name$0[1], ctxt$0);
                              }),
                          match$3 =
                            caml_call2
                             (Ppxlib_Common[24][2],
                              with_let_module,
                              function(ctxt){
                               return caml_call3
                                       (self_4[1][1 + _aq_], self_4, ctxt, module_expr);
                              }),
                          module_expr_errors = match$3[2],
                          module_expr$0 = match$3[1],
                          match$4 =
                            caml_call3(self_4[1][1 + _aB_], self_4, ctxt$0, body),
                          body_errors = match$4[2],
                          body$0 = match$4[1],
                          errors =
                            caml_call4
                             (self_4[1][1 + _aC_],
                              self_4,
                              ctxt$0,
                              cst_Pexp_letmodule,
                              [0,
                               name_errors,
                               [0, module_expr_errors, [0, body_errors, 0]]]),
                          desc_errors$0 = errors,
                          pexp_desc$1 = [25, name$0, module_expr$0, body$0];
                         break a;
                        }
                        var
                         _a6_ =
                           caml_call3(self_4[1][1 + _aA_], self_4, ctxt$0, pexp_desc),
                         desc_errors = _a6_[2],
                         pexp_desc$0 = _a6_[1],
                         desc_errors$0 = desc_errors,
                         pexp_desc$1 = pexp_desc$0;
                       }
                       var
                        match =
                          caml_call3(self_4[1][1 + _at_], self_4, ctxt$0, pexp_loc),
                        loc_errors = match[2],
                        pexp_loc$0 = match[1],
                        _a7_ = caml_call1(self_4[1][1 + _at_], self_4),
                        match$0 =
                          caml_call4
                           (self_4[1][1 + _av_], self_4, _a7_, ctxt$0, pexp_loc_stack),
                        loc_stack_errors = match$0[2],
                        pexp_loc_stack$0 = match$0[1],
                        match$1 =
                          caml_call3
                           (self_4[1][1 + _aF_], self_4, ctxt$0, pexp_attributes),
                        attributes_errors = match$1[2],
                        pexp_attributes$0 = match$1[1];
                       return [0,
                               [0,
                                pexp_desc$1,
                                pexp_loc$0,
                                pexp_loc_stack$0,
                                pexp_attributes$0],
                               caml_call3
                                (self_4[1][1 + _ak_],
                                 self_4,
                                 ctxt$0,
                                 [0,
                                  [0, cst_pexp_desc, desc_errors$0],
                                  [0,
                                   [0, cst_pexp_loc, loc_errors],
                                   [0,
                                    [0, cst_pexp_loc_stack, loc_stack_errors],
                                    [0, [0, cst_attributes, attributes_errors], 0]]]])];
                      });
            },
            _aq_,
            function(self_4, ctxt, me){
             var
              _a2_ = caml_call3(Ppxlib_Attribute[8], enter_module, 0, me),
              _a3_ = caml_call2(Ppxlib_Common[24][4], _a2_, 0),
              with_module_expr =
                caml_call2
                 (Ppxlib_Common[24][3],
                  _a3_,
                  function(param){
                   if(! param) return ctxt;
                   var match = param[1], loc = match[2], txt = match[1];
                   return caml_call3
                           (Ppxlib_Expansion_context[1][6], loc, txt, ctxt);
                  });
             return caml_call2
                     (Ppxlib_Common[24][2],
                      with_module_expr,
                      function(ctxt){
                       return caml_call2(caml_call1(_aL_, self_4), ctxt, me);
                      });
            },
            _as_,
            function(self_4, ctxt, mb){
             var
              _a0_ =
                caml_call3
                 (Ppxlib_Attribute[8], do_not_enter_module_binding, 0, mb),
              _a1_ = caml_call2(Ppxlib_Common[24][4], _a0_, 0),
              with_module_binding =
                caml_call2
                 (Ppxlib_Common[24][3],
                  _a1_,
                  function(param){
                   return param
                           ? ctxt
                           : ec_enter_module_opt(mb[4], mb[1][1], ctxt);
                  });
             return caml_call2
                     (Ppxlib_Common[24][2],
                      with_module_binding,
                      function(ctxt){
                       return caml_call2(caml_call1(_aJ_, self_4), ctxt, mb);
                      });
            },
            _ar_,
            function(self_4, ctxt, md){
             var
              _aY_ =
                caml_call3
                 (Ppxlib_Attribute[8], do_not_enter_module_declaratio, 0, md),
              _aZ_ = caml_call2(Ppxlib_Common[24][4], _aY_, 0),
              with_module_declaration =
                caml_call2
                 (Ppxlib_Common[24][3],
                  _aZ_,
                  function(param){
                   return param
                           ? ctxt
                           : ec_enter_module_opt(md[4], md[1][1], ctxt);
                  });
             return caml_call2
                     (Ppxlib_Common[24][2],
                      with_module_declaration,
                      function(ctxt){
                       return caml_call2(caml_call1(_aK_, self_4), ctxt, md);
                      });
            },
            _ap_,
            function(self_4, ctxt, mtd){
             var
              _aW_ =
                caml_call3
                 (Ppxlib_Attribute[8], do_not_enter_module_type_decla, 0, mtd),
              _aX_ = caml_call2(Ppxlib_Common[24][4], _aW_, 0),
              with_module_type_declaration =
                caml_call2
                 (Ppxlib_Common[24][3],
                  _aX_,
                  function(param){
                   return param
                           ? ctxt
                           : caml_call3
                             (Ppxlib_Expansion_context[1][6], mtd[4], mtd[1][1], ctxt);
                  });
             return caml_call2
                     (Ppxlib_Common[24][2],
                      with_module_type_declaration,
                      function(ctxt){
                       return caml_call2(caml_call1(_aM_, self_4), ctxt, mtd);
                      });
            },
            _af_,
            function(self_4, ctxt, vd){
             var
              _aU_ =
                caml_call3
                 (Ppxlib_Attribute[8], do_not_enter_value_description, 0, vd),
              _aV_ = caml_call2(Ppxlib_Common[24][4], _aU_, 0),
              with_value_description =
                caml_call2
                 (Ppxlib_Common[24][3],
                  _aV_,
                  function(param){
                   return param
                           ? ctxt
                           : caml_call3
                             (Ppxlib_Expansion_context[1][7], vd[5], vd[1][1], ctxt);
                  });
             return caml_call2
                     (Ppxlib_Common[24][2],
                      with_value_description,
                      function(ctxt){
                       return caml_call2(caml_call1(_aO_, self_4), ctxt, vd);
                      });
            },
            _ag_,
            function(self_4, ctxt, vb){
             var
              pvb_loc = vb[4],
              pvb_attributes = vb[3],
              pvb_expr = vb[2],
              pvb_pat = vb[1],
              _aS_ =
                caml_call3
                 (Ppxlib_Attribute[8], do_not_enter_value_binding, 0, vb),
              _aT_ = caml_call2(Ppxlib_Common[24][4], _aS_, 0);
             return caml_call2
                     (Ppxlib_Common[24][2],
                      _aT_,
                      function(param){
                       if(param)
                        return caml_call2(caml_call1(_aN_, self_4), ctxt, vb);
                       var
                        match =
                          caml_call3
                           (runtime.caml_get_public_method(var_names_of, 293013072, 30),
                            var_names_of,
                            pvb_pat,
                            0);
                       a:
                       {
                        if(match && ! match[2]){
                         var
                          var_name = match[1],
                          in_binding_ctxt =
                            caml_call3
                             (Ppxlib_Expansion_context[1][7], pvb_loc, var_name, ctxt);
                         break a;
                        }
                        var in_binding_ctxt = ctxt;
                       }
                       var
                        match$0 =
                          caml_call3(self_4[1][1 + _al_], self_4, ctxt, pvb_pat),
                        pat_errors = match$0[2],
                        pvb_pat$0 = match$0[1],
                        match$1 =
                          caml_call3
                           (self_4[1][1 + _aB_], self_4, in_binding_ctxt, pvb_expr),
                        expr_errors = match$1[2],
                        pvb_expr$0 = match$1[1],
                        match$2 =
                          caml_call3
                           (self_4[1][1 + _aF_],
                            self_4,
                            in_binding_ctxt,
                            pvb_attributes),
                        attributes_errors = match$2[2],
                        pvb_attributes$0 = match$2[1],
                        match$3 =
                          caml_call3(self_4[1][1 + _at_], self_4, ctxt, pvb_loc),
                        loc_errors = match$3[2],
                        pvb_loc$0 = match$3[1],
                        errors =
                          caml_call3
                           (self_4[1][1 + _ak_],
                            self_4,
                            ctxt,
                            [0,
                             [0, cst_pvb_pat, pat_errors],
                             [0,
                              [0, cst_pvb_expr, expr_errors],
                              [0,
                               [0, cst_pvb_attributes, attributes_errors],
                               [0, [0, cst_pvb_loc, loc_errors], 0]]]]);
                       return [0,
                               [0, pvb_pat$0, pvb_expr$0, pvb_attributes$0, pvb_loc$0],
                               errors];
                      });
            }]);
         return function(_aQ_, _aP_){
          var _aR_ = caml_call2(CamlinternalOO[24], _aP_, _ac_);
          _aR_[1 + _ad_] = _F_;
          caml_call1(_aI_, _aR_);
          return caml_call3(CamlinternalOO[26], _aP_, _aR_, _ac_);};
        }),
    _d_ =
      [0,
       cst_tuple,
       cst_string,
       cst_record,
       cst_option,
       cst_list,
       cst_int,
       cst_constr,
       cst_char,
       cst_bool],
    _G_ = [0, cst$2],
    _H_ =
      caml_call2
       (CamlinternalOO[19],
        _h_,
        function(_I_){
         var
          _J_ = caml_call2(CamlinternalOO[8], _I_, _f_),
          _K_ = _J_[6],
          _L_ = _J_[11],
          _M_ = _J_[17],
          _N_ = _J_[23],
          _O_ = _J_[32],
          _P_ = _J_[33],
          _Q_ = _J_[39],
          _R_ = _J_[54],
          _S_ = _J_[58],
          _T_ = _J_[59],
          _U_ = _J_[60],
          _V_ = _J_[66],
          _W_ = _J_[79],
          _X_ = _J_[97],
          _Y_ = _J_[100],
          _Z_ = _J_[104],
          ___ =
            caml_call6
              (CamlinternalOO[18], _I_, 0, _d_, _j_, Ppxlib_ast_Ast[6], 1)
             [1];
         caml_call2
          (CamlinternalOO[11],
           _I_,
           [0,
            _U_,
            function(self_5){return Ppxlib_Import[10];},
            _M_,
            function(self_5){return Ppxlib_Import[7];},
            _Y_,
            function(self_5){return Ppxlib_Import[6];},
            _X_,
            function(self_5){return Ppxlib_Import[9];},
            _V_,
            function(self_5){return Ppxlib_Import[11];},
            _T_,
            function(self_5){return Ppxlib_Import[12];},
            _S_,
            function(self_5){return Ppxlib_Import[13];},
            _Q_,
            function(self_5){return Ppxlib_Import[14];},
            _K_,
            function(self_5){return Ppxlib_Import[5];},
            _P_,
            function(self_5){return Ppxlib_Import[17];},
            _R_,
            function(self_5){return Ppxlib_Import[20];},
            _Z_,
            function(self_5){return Ppxlib_Import[21];},
            _O_,
            function(self_5, param){return _G_;},
            _N_,
            function(self_5, fields){
             return [1,
                     caml_call2
                      (Ppxlib_Import[94][55],
                       fields,
                       function(param){
                        var sexp = param[2], label = param[1];
                        return [1, [0, [0, label], [0, sexp, 0]]];
                       })];
            },
            _W_,
            function(self_5, tag, args){
             return args ? [1, [0, [0, tag], args]] : [0, tag];
            },
            _L_,
            function(self_5, l){return [1, l];}]);
         return function(_aa_, _$_){
          var _ab_ = caml_call2(CamlinternalOO[24], _$_, _I_);
          caml_call1(___, _ab_);
          return caml_call3(CamlinternalOO[26], _$_, _ab_, _I_);};
        }),
    sexp_of = caml_call1(_H_[1], 0),
    Ppxlib_Ast_traverse =
      [0,
       map,
       iter,
       fold,
       fold_map,
       map_with_context,
       map_with_path,
       enter_value,
       enter_module,
       do_not_enter_value_binding,
       do_not_enter_value_description,
       do_not_enter_module_binding,
       do_not_enter_module_declaratio,
       do_not_enter_module_type_decla,
       do_not_enter_let_module,
       lift,
       lift_map_with_context,
       map_with_expansion_context_and,
       _H_,
       sexp_of];
   runtime.caml_register_global
    (43, Ppxlib_Ast_traverse, "Ppxlib__Ast_traverse");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Skip_hash_bang
//# unitInfo: Requires: Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst = "";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    ocaml_lex_tables =
      [0,
       "\0\0\0\0\0\0\x01\0\x01\0\x02\0\x01\0\x03\0\xff\xff",
       "\x02\0\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\xff\xff\xff\xff\x02\0\x05\0\xff\xff\x05\0\xff\xff\xff\xff\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\x04\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x06\0\x01\0\xxff\xff\xff\xff\xff\xff\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\x03\0\x05\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x04\0\0\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\x03\0\x05\0\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Lexing = global_data.Stdlib__Lexing;
   function update_loc(lexbuf, lines_to_skip){
    var pos = lexbuf[12];
    lexbuf[12] = [0, pos[1], pos[2] + lines_to_skip | 0, pos[4], pos[4]];
    return 0;
   }
   function skip_hash_bang(lexbuf){
    var ocaml_lex_state = 0;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return update_loc(lexbuf, 3);
        case 1:
         return update_loc(lexbuf, 1);
        default: return 0;
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   var Ppxlib_Skip_hash_bang = [0, skip_hash_bang];
   runtime.caml_register_global
    (2, Ppxlib_Skip_hash_bang, "Ppxlib__Skip_hash_bang");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Utils
//# unitInfo: Requires: Astlib, Astlib__Ast_metadata, Astlib__Config, Astlib__Location, Ppxlib__Import, Ppxlib__Location, Ppxlib__Skip_hash_bang, Ppxlib_ast__Import, Ppxlib_ast__Versions, Stdlib, Stdlib__Filename, Stdlib__Lexing, Stdlib__Printf, Stdlib__Sys, Stdppx
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "-",
    cst_ppx_driver$1 = "ppx_driver",
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = "",
    Ppxlib_ast_Versions = global_data.Ppxlib_ast__Versions,
    Astlib = global_data.Astlib,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppxlib_ast_Import = global_data.Ppxlib_ast__Import,
    Astlib_Ast_metadata = global_data.Astlib__Ast_metadata,
    Stdlib = global_data.Stdlib,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Astlib_Config = global_data.Astlib__Config,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Astlib_Location = global_data.Astlib__Location,
    Ppxlib_Skip_hash_bang = global_data.Ppxlib__Skip_hash_bang,
    cst_ml = ".ml",
    _a_ = [0, 1],
    cst_mli = ".mli",
    _b_ = [0, 0],
    cst_implementation = "implementation",
    cst_interface = "interface";
   function with_output(fn, binary, f){
    if(fn){
     var fn$0 = fn[1];
     if(fn$0 !== cst$1)
      return caml_call6(Ppxlib_Import[98][2], [0, binary], 0, 0, 0, fn$0, f);
    }
    caml_call2(Stdlib[78], Stdlib[39], binary);
    return caml_call1(f, Stdlib[39]);
   }
   function of_filename(fn){
    return caml_call2(Stdlib_Filename[7], fn, cst_ml)
            ? _a_
            : caml_call2(Stdlib_Filename[7], fn, cst_mli) ? _b_ : 0;
   }
   function describe(param){
    return param ? cst_implementation : cst_interface;
   }
   var equal = Ppxlib_Import[73][2], Kind = [0, of_filename, describe, equal];
   function map(t, map){
    if(0 === t[0]){
     var x = t[1];
     return [0,
             caml_call2(caml_get_public_method(map, 359375608, 31), map, x)];
    }
    var x$0 = t[1];
    return [1,
            caml_call2(caml_get_public_method(map, -951102413, 32), map, x$0)];
   }
   function map_with_context(t, map, ctx){
    if(0 === t[0]){
     var x = t[1];
     return [0,
             caml_call3
              (caml_get_public_method(map, 359375608, 33), map, ctx, x)];
    }
    var x$0 = t[1];
    return [1,
            caml_call3
             (caml_get_public_method(map, -951102413, 34), map, ctx, x$0)];
   }
   function kind(param){return 0 === param[0] ? 0 : 1;}
   var
    Intf_or_impl = [0, map, map_with_context, kind],
    _c_ = Ppxlib_ast_Versions[11],
    _d_ = _c_[1],
    fall_back_input_version =
      [0, [0, _d_[2], _d_[3]], _c_[2], _c_[3], _c_[4], _c_[5]],
    magic_length = runtime.caml_ml_string_length(Astlib_Config[2]),
    cst_Error_Not_a_binary_ast = "Error: Not a binary ast",
    cst_Error_Unknown_version = "Error: Unknown version ",
    cst_Source_parse_error = "Source parse error:",
    cst_System_error = "System error: ",
    _e_ = [0, 1],
    _f_ = [1, 0],
    cst_ppx_driver = cst_ppx_driver$1,
    cst_ppx_driver$0 = cst_ppx_driver$1;
   function set_input_lexbuf(input_name){
    function set_input_lexbuf(ic){
     var
      source = caml_call1(Ppxlib_Import[91][3], ic),
      lexbuf = caml_call2(Stdlib_Lexing[3], 0, source);
     caml_call1(Astlib_Location[3], [0, lexbuf]);
     return lexbuf;
    }
    try{
     caml_call3(Ppxlib_Import[91][2], _e_, input_name, set_input_lexbuf);
     return;
    }
    catch(_U_){
     var _T_ = caml_wrap_exception(_U_);
     if(_T_[1] === Stdlib[11]) return;
     throw caml_maybe_attach_backtrace(_T_, 0);
    }
   }
   function from_channel(ch, input_kind){
    function handle_non_binary(prefix_read_from_source){
     if(! input_kind) return _f_;
     var
      input_name = input_kind[2],
      kind = input_kind[1],
      _O_ = Ppxlib_ast_Versions[11],
      _P_ = _O_[1],
      input_version = [0, [0, _P_[2], _P_[3]], _O_[2], _O_[3], _O_[4], _O_[5]];
     try{
      var
       _Q_ = caml_call1(Ppxlib_Import[91][3], ch),
       all_source = caml_call2(Stdlib[28], prefix_read_from_source, _Q_),
       lexbuf = caml_call2(Stdlib_Lexing[3], 0, all_source),
       _R_ = lexbuf[12];
      lexbuf[12] = [0, input_name, _R_[2], _R_[3], _R_[4]];
      caml_call1(Astlib_Location[3], [0, lexbuf]);
      caml_call1(Ppxlib_Skip_hash_bang[1], lexbuf);
      var
       ast =
         kind
          ? [1, caml_call1(Ppxlib_ast_Import[3][2], lexbuf)]
          : [0, caml_call1(Ppxlib_ast_Import[3][3], lexbuf)],
       _S_ = [0, [0, input_name, input_version, ast]];
      return _S_;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       match = caml_call1(Ppxlib_Location[13][6], exn);
      if(! match) throw caml_maybe_attach_backtrace(exn, 0);
      var error = match[1];
      return [1, [1, error, input_version]];
     }
    }
    caml_call2(Stdlib[95], ch, 1);
    var
     buf = runtime.caml_create_bytes(magic_length),
     len = caml_call4(Stdlib[84], ch, buf, 0, magic_length),
     s = caml_call3(Ppxlib_Import[85][86], buf, 0, len),
     match =
       caml_call2(Ppxlib_Import[76], len, magic_length) ? [0, s] : [1, s];
    if(0 !== match[0]){var s$1 = match[1]; return handle_non_binary(s$1);}
    var s$0 = match[1], match$0 = caml_call1(Ppxlib_ast_Versions[14][1], s$0);
    if(typeof match$0 !== "number"){
     if(0 === match$0[0]){
      var
       Input_version = match$0[1],
       input_name = caml_call1(Stdlib[89], ch),
       ast = caml_call1(Stdlib[89], ch),
       _I_ = Ppxlib_ast_Versions[8],
       _J_ = _I_[1],
       _K_ = [0, [0, _J_[2], _J_[3]], _I_[2], _I_[3], _I_[4], _I_[5]],
       Input_to_ppxlib =
         caml_call1(caml_call1(Ppxlib_ast_Versions[13], Input_version), _K_);
      set_input_lexbuf(input_name);
      var ast$0 = [1, caml_call1(Input_to_ppxlib[1], ast)];
      return [0, [0, input_name, Input_version, ast$0]];
     }
     var
      Input_version$0 = match$0[1],
      input_name$0 = caml_call1(Stdlib[89], ch),
      ast$1 = caml_call1(Stdlib[89], ch),
      _L_ = Ppxlib_ast_Versions[8],
      _M_ = _L_[1],
      _N_ = [0, [0, _M_[2], _M_[3]], _L_[2], _L_[3], _L_[4], _L_[5]],
      Input_to_ppxlib$0 =
        caml_call1(caml_call1(Ppxlib_ast_Versions[13], Input_version$0), _N_);
     set_input_lexbuf(input_name$0);
     var ast$2 = [0, caml_call1(Input_to_ppxlib$0[2], ast$1)];
     return [0, [0, input_name$0, Input_version$0, ast$2]];
    }
    var
     _E_ = caml_call3(Ppxlib_Import[99][14], Astlib_Config[2], 0, 9),
     _F_ = caml_call3(Ppxlib_Import[99][14], s$0, 0, 9);
    if(! caml_call2(Ppxlib_Import[99][72], _F_, _E_)){
     var
      _G_ = caml_call3(Ppxlib_Import[99][14], Astlib_Config[1], 0, 9),
      _H_ = caml_call3(Ppxlib_Import[99][14], s$0, 0, 9);
     if(! caml_call2(Ppxlib_Import[99][72], _H_, _G_))
      return handle_non_binary(s$0);
    }
    return [1, [0, s$0, fall_back_input_version]];
   }
   function read(input_source, input_kind){
    try{
     if(input_source)
      var
       fn = input_source[1],
       _C_ =
         caml_call3
          (Ppxlib_Import[91][2],
           0,
           fn,
           function(_D_){return from_channel(_D_, input_kind);});
     else{
      caml_call2(Stdlib[95], Stdlib[38], 1);
      var _C_ = from_channel(Stdlib[38], input_kind);
     }
     return _C_;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      match = caml_call1(Ppxlib_Location[13][6], exn);
     if(! match) throw caml_maybe_attach_backtrace(exn, 0);
     var error = match[1];
     return [1, [2, error, fall_back_input_version]];
    }
   }
   function write(oc, param, add_ppx_context){
    var
     ast = param[3],
     Input_version = param[2],
     input_name = param[1],
     _u_ = Ppxlib_ast_Versions[8],
     _v_ = _u_[1],
     Ppxlib_to_input =
       caml_call1
        (caml_call1
          (Ppxlib_ast_Versions[13],
           [0, [0, _v_[2], _v_[3]], _u_[2], _u_[3], _u_[4], _u_[5]]),
         Input_version),
     _w_ = Ppxlib_ast_Versions[11],
     _x_ = _w_[1],
     Ocaml_to_input =
       caml_call1
        (caml_call1
          (Ppxlib_ast_Versions[13],
           [0, [0, _x_[2], _x_[3]], _w_[2], _w_[3], _w_[4], _w_[5]]),
         Input_version);
    if(0 === ast[0]){
     var sg = ast[1];
     if(add_ppx_context)
      var
       _y_ = caml_call1(Ppxlib_ast_Import[2][8][2], sg),
       _z_ =
         caml_call1(caml_call1(Astlib_Ast_metadata[3], cst_ppx_driver), _y_),
       sg$0 = caml_call1(Ocaml_to_input[2], _z_);
     else
      var sg$0 = caml_call1(Ppxlib_to_input[2], sg);
     caml_call2(Stdlib[66], oc, Input_version[1][2][2]);
     caml_call2(Stdlib[72], oc, input_name);
     return caml_call2(Stdlib[72], oc, sg$0);
    }
    var st = ast[1];
    if(add_ppx_context)
     var
      _A_ = caml_call1(Ppxlib_ast_Import[2][8][1], st),
      _B_ =
        caml_call1(caml_call1(Astlib_Ast_metadata[1], cst_ppx_driver$0), _A_),
      st$0 = caml_call1(Ocaml_to_input[1], _B_);
    else
     var st$0 = caml_call1(Ppxlib_to_input[1], st);
    caml_call2(Stdlib[66], oc, Input_version[1][2][1]);
    caml_call2(Stdlib[72], oc, input_name);
    return caml_call2(Stdlib[72], oc, st$0);
   }
   function read_binary(fn){
    var
     match =
       caml_call3
        (Ppxlib_Import[91][2],
         0,
         fn,
         function(_t_){return from_channel(_t_, 0);});
    if(0 !== match[0]){
     var error = match[1];
     if(typeof error === "number")
      var _s_ = cst_Error_Not_a_binary_ast;
     else
      switch(error[0]){
        case 0:
         var
          s = error[1],
          _s_ = caml_call2(Stdlib[28], cst_Error_Unknown_version, s);
         break;
        case 1:
         var
          loc = error[1],
          _q_ = caml_call1(Ppxlib_Location[13][3], loc),
          _s_ = caml_call2(Stdlib[28], cst_Source_parse_error, _q_);
         break;
        default:
         var
          loc$0 = error[1],
          _r_ = caml_call1(Ppxlib_Location[13][3], loc$0),
          _s_ = caml_call2(Stdlib[28], cst_System_error, _r_);
      }
     return [1, _s_];
    }
    var match$0 = match[1], ast = match$0[3], input_name = match$0[1];
    if(0 === ast[0])
     var signature = ast[1], ast$0 = [0, signature];
    else
     var structure = ast[1], ast$0 = [1, structure];
    return [0, [0, ast$0, input_name]];
   }
   function get_ast(t){return t[1];}
   function get_input_name(t){return t[2];}
   var
    Read_bin = [0, read_binary, get_ast, get_input_name],
    _g_ = [0, [2, 0, [12, 32, [2, 0, [11, " > ", [2, 0, 0]]]]], "%s %s > %s"],
    _h_ = [0, 0];
   function run_preprocessor(pp, input, output){
    var
     _n_ = caml_call1(Stdlib_Filename[21], output),
     _o_ =
       caml_call2(Ppxlib_Import[99][72], input, cst)
        ? cst$0
        : caml_call1(Stdlib_Filename[21], input),
     command = caml_call4(Stdlib_Printf[4], _g_, pp, _o_, _n_),
     _p_ = runtime.caml_sys_system_command(command);
    return caml_call2(Ppxlib_Import[76], _p_, 0)
            ? _h_
            : [1, [0, command, fall_back_input_version]];
   }
   var System = [0, run_preprocessor];
   function print_as_compiler_source(ppf, ast){
    var
     _i_ = Ppxlib_ast_Versions[11],
     _j_ = _i_[1],
     _l_ = Ppxlib_ast_Versions[8],
     _m_ = _l_[1],
     _k_ = [0, [0, _j_[2], _j_[3]], _i_[2], _i_[3], _i_[4], _i_[5]],
     Ppxlib_to_compiler =
       caml_call1
        (caml_call1
          (Ppxlib_ast_Versions[13],
           [0, [0, _m_[2], _m_[3]], _l_[2], _l_[3], _l_[4], _l_[5]]),
         _k_);
    if(0 === ast[0]){
     var sg = ast[1], sg$0 = caml_call1(Ppxlib_to_compiler[2], sg);
     return caml_call2(Astlib[1][7], ppf, sg$0);
    }
    var st = ast[1], st$0 = caml_call1(Ppxlib_to_compiler[1], st);
    return caml_call2(Astlib[1][8], ppf, st$0);
   }
   var
    Ppxlib_Utils =
      [0,
       with_output,
       Kind,
       Intf_or_impl,
       [0, read, write, Read_bin],
       System,
       print_as_compiler_source];
   runtime.caml_register_global(32, Ppxlib_Utils, "Ppxlib__Utils");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Code_matcher
//# unitInfo: Requires: Astlib, CamlinternalOO, Ppxlib__Ast_pattern, Ppxlib__Ast_traverse, Ppxlib__Attribute, Ppxlib__Import, Ppxlib__Location, Ppxlib_ast__Import, Sexplib0__Sexp, Stdlib, Stdlib__Filename, Stdlib__Format, Stdlib__Lexing, Stdlib__Printf, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = " &> ",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_deriving_end = "deriving.end",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_sys_system_command = runtime.caml_sys_system_command,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    shared =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Printf = global_data.Stdlib__Printf,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Attribute = global_data.Ppxlib__Attribute,
    Stdlib = global_data.Stdlib,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    Ppxlib_ast_Import = global_data.Ppxlib_ast__Import,
    Astlib = global_data.Astlib,
    _c_ = caml_call1(Ppxlib_Ast_pattern[234], Ppxlib_Ast_pattern[23]),
    end_marker_sig =
      caml_call4(Ppxlib_Attribute[16][2], cst_deriving_end, 1, _c_, 0),
    _d_ = caml_call1(Ppxlib_Ast_pattern[234], Ppxlib_Ast_pattern[23]),
    end_marker_str =
      caml_call4(Ppxlib_Attribute[16][2], cst_deriving_end, 0, _d_, 0),
    _e_ = [0, 0],
    _a_ =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    _b_ =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_signature,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    _f_ =
      [0,
       [11,
        "ppxlib: [",
        [17, 5, [17, 5, [17, 5, [2, 0, [11, "] attribute missing", 0]]]]]],
       "ppxlib: [@@@@@@%s] attribute missing"],
    cst_ppxlib = "ppxlib",
    _g_ =
      [0,
       [11,
        "patdiff -ascii -alt-old generated -alt-new 'generated->printed->parsed' ",
        [2, 0, [12, 32, [2, 0, [11, cst$0, [2, 0, 0]]]]]],
       "patdiff -ascii -alt-old generated -alt-new 'generated->printed->parsed' %s %s &> %s"],
    cst_no_differences_produced_by = "<no differences produced by diff>",
    _h_ =
      [0,
       [11,
        "diff --label generated --label 'generated->printed->parsed' ",
        [2, 0, [12, 32, [2, 0, [11, cst$0, [2, 0, 0]]]]]],
       "diff --label generated --label 'generated->printed->parsed' %s %s &> %s"],
    _i_ = [0, "src/code_matcher.ml", 115, 64],
    _j_ = [0, [15, [17, 4, 0]], "%a@."],
    _k_ =
      [0,
       [11,
        "ppxlib: the corrected code doesn't round-trip.\nThis is probably a bug in the OCaml printer:\n",
        [2, 0, 0]],
       "ppxlib: the corrected code doesn't round-trip.\nThis is probably a bug in the OCaml printer:\n%s"];
   function Make(M){
    function extract_prefix(pos, l){
     var acc = 0, param = l;
     for(;;){
      if(! param){
       var
        loc = [0, pos, pos, 0],
        _P_ = caml_call1(Ppxlib_Attribute[16][3], M[2]);
       return [1, [0, caml_call3(Ppxlib_Location[13][2], loc, _f_, _P_), 0]];
      }
      var l$0 = param[2], x = param[1];
      try{var val = caml_call2(Ppxlib_Attribute[16][4], [0, M[2], 0], x);}
      catch(_Q_){
       var _N_ = caml_wrap_exception(_Q_);
       if(_N_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_N_, 0);
       var acc$0 = [0, x, acc];
       acc = acc$0;
       param = l$0;
       continue;
      }
      if(0 !== val[0]){var e = val[1]; return [1, e];}
      if(val[1]){
       var _O_ = caml_call1(M[1], x)[1];
       return [0, [0, caml_call1(Ppxlib_Import[94][9], acc), _O_]];
      }
      var acc$1 = [0, x, acc];
      acc = acc$1;
      param = l$0;
     }
    }
    if(! _e_[1]){
     var
      _p_ = caml_call1(CamlinternalOO[16], _b_),
      _q_ = caml_call2(CamlinternalOO[8], _p_, shared),
      _r_ = _q_[46],
      _s_ = _q_[47],
      _t_ =
        caml_call6
          (CamlinternalOO[18], _p_, 0, 0, _a_, Ppxlib_Ast_traverse[1], 0)
         [1];
     caml_call2
      (CamlinternalOO[11],
       _p_,
       [0,
        _s_,
        function(self_1, param){return Ppxlib_Location[3];},
        _r_,
        function(self_1, param){return 0;}]);
     caml_call1(CamlinternalOO[17], _p_);
     _e_[1] =
      function(_L_){
       var _M_ = caml_call2(CamlinternalOO[24], 0, _p_);
       caml_call2(_t_, _L_[2], _M_);
       return caml_call3(CamlinternalOO[26], 0, _M_, _p_);
      };
    }
    var
     remove_loc = caml_call1(_e_[1], [0, 0, Ppxlib_Ast_traverse[1][3]]),
     M_map = caml_call1(M[3], [0]);
    function remove_loc$0(x){return caml_call2(M_map[1], remove_loc, x);}
    function last(prev, param){
     var prev$0 = prev, param$0 = param;
     for(;;){
      if(! param$0) return prev$0;
      var l = param$0[2], prev$1 = param$0[1];
      prev$0 = prev$1;
      param$0 = l;
     }
    }
    function diff_asts(generated, round_trip){
     function with_temp_file(f){
      var _K_ = caml_call3(Stdlib_Filename[16], 0, cst_ppxlib, cst);
      return caml_call3(Ppxlib_Import[87][1], _K_, f, runtime.caml_sys_remove);
     }
     return with_temp_file
             (function(fn1){
               return with_temp_file
                       (function(fn2){
                         return with_temp_file
                                 (function(out){
                                   function dump(fn, ast){
                                    return caml_call6
                                            (Ppxlib_Import[98][2],
                                             0,
                                             0,
                                             0,
                                             0,
                                             fn,
                                             function(oc){
                                              var
                                               ppf = caml_call1(Stdlib_Format[114], oc),
                                               _J_ = caml_call1(M[5], ast);
                                              caml_call2(Sexplib0_Sexp[9], ppf, _J_);
                                              return caml_call2(Stdlib_Format[43], ppf, 0);
                                             });
                                   }
                                   dump(fn1, generated);
                                   dump(fn2, round_trip);
                                   var
                                    _A_ = caml_call1(Stdlib_Filename[21], out),
                                    _B_ = caml_call1(Stdlib_Filename[21], fn2),
                                    _C_ = caml_call1(Stdlib_Filename[21], fn1),
                                    cmd = caml_call4(Stdlib_Printf[4], _g_, _C_, _B_, _A_),
                                    _D_ = caml_sys_system_command(cmd),
                                    _E_ = caml_call2(Ppxlib_Import[76], _D_, 1);
                                   if(_E_)
                                    var ok = _E_;
                                   else
                                    var
                                     _F_ = caml_call1(Stdlib_Filename[21], out),
                                     _G_ = caml_call1(Stdlib_Filename[21], fn2),
                                     _H_ = caml_call1(Stdlib_Filename[21], fn1),
                                     cmd$0 = caml_call4(Stdlib_Printf[4], _h_, _H_, _G_, _F_),
                                     _I_ = caml_sys_system_command(cmd$0),
                                     ok = caml_call2(Ppxlib_Import[76], _I_, 1);
                                   return ok
                                           ? caml_call1(Ppxlib_Import[91][4], out)
                                           : cst_no_differences_produced_by;
                                  });
                        });
              });
    }
    function parse_string(s){
     var
      _z_ = caml_call2(Stdlib_Lexing[3], 0, s),
      match = caml_call1(M[4], _z_);
     if(match && ! match[2]){var x = match[1]; return x;}
     throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
    }
    function round_trip(ast){
     var compiler_ast = caml_call1(M[6], ast);
     return remove_loc$0
             (parse_string
               (caml_call3(Stdlib_Format[147], _j_, M[7], compiler_ast)));
    }
    function match_loop(end_pos, mismatch_handler, expected, source){
     var expected$0 = expected, source$0 = source;
     for(;;){
      if(! expected$0){
       if(! source$0) return 0;
       var
        l = source$0[2],
        x$1 = source$0[1],
        init = caml_call1(M[1], x$1),
        _w_ = init[3],
        _x_ = last(x$1, l),
        _y_ = caml_call1(M[1], _x_)[2],
        loc$1 = [0, init[1], _y_, _w_];
       return caml_call2(mismatch_handler, loc$1, 0);
      }
      if(! source$0){
       var loc$0 = [0, end_pos, end_pos, 0];
       return caml_call2(mismatch_handler, loc$0, expected$0);
      }
      var
       source$1 = source$0[2],
       y = source$0[1],
       expected$1 = expected$0[2],
       x = expected$0[1],
       loc = caml_call1(M[1], y),
       x$0 = remove_loc$0(x),
       y$0 = remove_loc$0(y);
      if(caml_call2(Ppxlib_Import[73][6], x$0, y$0)){
       var round_trip$0 = round_trip(x$0);
       if(caml_call2(Ppxlib_Import[73][6], x$0, round_trip$0)){
        var _v_ = diff_asts(x$0, round_trip$0);
        caml_call3(Ppxlib_Location[5], [0, loc], _k_, _v_);
       }
       caml_call2(mismatch_handler, loc, [0, x$0, 0]);
      }
      expected$0 = expected$1;
      source$0 = source$1;
     }
    }
    function do_match(pos, expected, mismatch_handler, source){
     var _u_ = extract_prefix(pos, source);
     return caml_call2
             (Ppxlib_Import[96][5],
              _u_,
              function(param){
               var end_pos = param[2], source = param[1];
               return match_loop(end_pos, mismatch_handler, expected, source);
              });
    }
    return [0, , , , , , , , , do_match];
   }
   function get_loc(x){return x[2];}
   function Transform(T){
    function apply(o){
     return caml_call1(caml_get_public_method(o, 832861151, 35), o);
    }
    return [0, apply];
   }
   var
    parse = Ppxlib_ast_Import[3][2],
    _l_ = Ppxlib_Ast_traverse[19],
    to_sexp = caml_call1(caml_get_public_method(_l_, 832861151, 36), _l_),
    to_compiler = Ppxlib_ast_Import[2][8][19],
    pp_compiler = Astlib[1][23],
    Str =
      Make
       ([0,
         get_loc,
         end_marker_str,
         Transform,
         parse,
         to_sexp,
         to_compiler,
         pp_compiler]);
   function get_loc$0(x){return x[2];}
   function Transform$0(T){
    function apply(o){
     return caml_call1(caml_get_public_method(o, -662996230, 37), o);
    }
    return [0, apply];
   }
   var
    parse$0 = Ppxlib_ast_Import[3][3],
    _m_ = Ppxlib_Ast_traverse[19],
    to_sexp$0 = caml_call1(caml_get_public_method(_m_, -662996230, 38), _m_),
    to_compiler$0 = Ppxlib_ast_Import[2][8][18],
    pp_compiler$0 = Astlib[1][24],
    Sig =
      Make
       ([0,
         get_loc$0,
         end_marker_sig,
         Transform$0,
         parse$0,
         to_sexp$0,
         to_compiler$0,
         pp_compiler$0]),
    match_structure_res = Str[9];
   function match_structure(pos, expected, mismatch_handler, l){
    var _o_ = match_structure_res(pos, expected, mismatch_handler, l);
    return caml_call2
            (Ppxlib_Import[96][6],
             _o_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   var match_signature_res = Sig[9];
   function match_signature(pos, expected, mismatch_handler, l){
    var _n_ = match_signature_res(pos, expected, mismatch_handler, l);
    return caml_call2
            (Ppxlib_Import[96][6],
             _n_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   var
    Ppxlib_Code_matcher =
      [0,
       match_structure_res,
       match_structure,
       match_signature_res,
       match_signature];
   runtime.caml_register_global
    (29, Ppxlib_Code_matcher, "Ppxlib__Code_matcher");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Extension
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_pattern, Ppxlib__Ast_traverse, Ppxlib__Common, Ppxlib__Expansion_context, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Ppxlib__Name, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Extension_declare_inline_w$1 =
      "Extension.declare_inline_with_path_arg",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field$0 = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type$0 = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field$0 = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type$0 = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression$0 = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_not_expected_her =
      "extension not expected here, Ppxlib.Extension needs updating!",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type$0 = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern$0 = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item$0 = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_src_extension_ml = "src/extension.ml",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item$0 = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_declaration$0 = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = ", ",
    _a_ =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field$0,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type$0,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field$0,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type$0,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression$0,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type$0,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern$0,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item$0,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item$0,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration$0,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    _b_ =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type$0,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item$0,
       cst_extension_constructor,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern$0,
       cst_include_description,
       cst_signature,
       cst_class_type_field$0,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration$0,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression$0,
       cst_class_type$0,
       cst_structure_item$0,
       cst_include_infos,
       cst_class_declaration,
       cst_module_type$0,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field$0],
    shared =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration$0,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item$0,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item$0,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern$0,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type$0,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression$0,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type$0,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field$0,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type$0,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field$0,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    Ppxlib_Expansion_context = global_data.Ppxlib__Expansion_context,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Name = global_data.Ppxlib__Name,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppxlib_Longident = global_data.Ppxlib__Longident,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Assert_failure = global_data.Assert_failure,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    cst_class_expression = "class expression",
    cst_class_field = "class field",
    cst_class_type = "class type",
    cst_class_type_field = "class type field",
    cst_core_type = "core type",
    cst_expression = cst_expression$0,
    cst_module_expression = "module expression",
    cst_module_type = "module type",
    cst_pattern = cst_pattern$0,
    cst_signature_item = "signature item",
    cst_structure_item = "structure item",
    cst_type_declaration = "type declaration",
    _c_ = [0, cst_src_extension_ml, 65, 8];
   function desc(param){
    switch(param){
      case 0:
       return cst_class_expression;
      case 1:
       return cst_class_field;
      case 2:
       return cst_class_type;
      case 3:
       return cst_class_type_field;
      case 4:
       return cst_core_type;
      case 5:
       return cst_expression;
      case 6:
       return cst_module_expression;
      case 7:
       return cst_module_type;
      case 8:
       return cst_pattern;
      case 9:
       return cst_signature_item;
      case 10:
       return cst_structure_item;
      default: return cst_type_declaration;
    }
   }
   function eq(a, b){
    switch(a){
      case 0:
       if(! b) return 0; break;
      case 1:
       if(1 === b) return 0; break;
      case 2:
       if(2 === b) return 0; break;
      case 3:
       if(3 === b) return 0; break;
      case 4:
       if(4 === b) return 0; break;
      case 5:
       if(5 === b) return 0; break;
      case 6:
       if(6 === b) return 0; break;
      case 7:
       if(7 === b) return 0; break;
      case 8:
       if(8 === b) return 0; break;
      case 9:
       if(9 === b) return 0; break;
      case 10:
       if(10 === b) return 0; break;
      default: if(11 <= b) return 0;
    }
    if(caml_call2(Ppxlib_Import[73][6], [0, a], [0, b])) return 1;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
   }
   function get_extension(t, type_decl){
    switch(t){
      case 0:
       var match = type_decl[1];
       if(6 === match[0]){
        var a = type_decl[3], e = match[1];
        return [0, [0, e, a]];
       }
       break;
      case 1:
       var match$0 = type_decl[1];
       if(6 === match$0[0]){
        var a$0 = type_decl[3], e$0 = match$0[1];
        return [0, [0, e$0, a$0]];
       }
       break;
      case 2:
       var match$1 = type_decl[1];
       if(3 === match$1[0]){
        var a$1 = type_decl[3], e$1 = match$1[1];
        return [0, [0, e$1, a$1]];
       }
       break;
      case 3:
       var match$2 = type_decl[1];
       if(5 === match$2[0]){
        var a$2 = type_decl[3], e$2 = match$2[1];
        return [0, [0, e$2, a$2]];
       }
       break;
      case 4:
       var match$3 = type_decl[1];
       if(typeof match$3 !== "number" && 10 === match$3[0]){
        var a$3 = type_decl[4], e$3 = match$3[1];
        return [0, [0, e$3, a$3]];
       }
       break;
      case 5:
       var match$4 = type_decl[1];
       if(typeof match$4 !== "number" && 35 === match$4[0]){
        var a$4 = type_decl[4], e$4 = match$4[1];
        return [0, [0, e$4, a$4]];
       }
       break;
      case 6:
       var match$5 = type_decl[1];
       if(6 === match$5[0]){
        var a$5 = type_decl[3], e$5 = match$5[1];
        return [0, [0, e$5, a$5]];
       }
       break;
      case 7:
       var match$6 = type_decl[1];
       if(5 === match$6[0]){
        var a$6 = type_decl[3], e$6 = match$6[1];
        return [0, [0, e$6, a$6]];
       }
       break;
      case 8:
       var match$7 = type_decl[1];
       if(typeof match$7 !== "number" && 15 === match$7[0]){
        var a$7 = type_decl[4], e$7 = match$7[1];
        return [0, [0, e$7, a$7]];
       }
       break;
      case 9:
       var match$8 = type_decl[1];
       if(15 === match$8[0]){
        var a$8 = match$8[2], e$8 = match$8[1];
        return [0, [0, e$8, a$8]];
       }
       break;
      case 10:
       var match$9 = type_decl[1];
       if(14 === match$9[0]){
        var a$9 = match$9[2], e$9 = match$9[1];
        return [0, [0, e$9, a$9]];
       }
       break;
      default:
       var _a1_ = type_decl[6];
       if(_a1_){
        var _a2_ = _a1_[1][1];
        if(typeof _a2_ !== "number" && 10 === _a2_[0]){
         var
          name = _a2_[1][1],
          virtual_payload =
            caml_call3
             (Ppxlib_Ast_builder[1][19], type_decl[8], 1, [0, type_decl, 0]);
         return [0, [0, [0, name, [0, [0, virtual_payload, 0]]], 0]];
        }
       }
       return 0;
    }
    return 0;
   }
   function merge_attributes_res(t, x, attrs){
    switch(t){
      case 0:
       var _aS_ = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], _aS_]];
      case 1:
       var _aT_ = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], _aT_]];
      case 2:
       var _aU_ = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], _aU_]];
      case 3:
       var _aV_ = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], _aV_]];
      case 4:
       var _aW_ = caml_call2(Ppxlib_Import[100], x[4], attrs);
       return [0, [0, x[1], x[2], x[3], _aW_]];
      case 5:
       var _aX_ = caml_call2(Ppxlib_Import[100], x[4], attrs);
       return [0, [0, x[1], x[2], x[3], _aX_]];
      case 6:
       var _aY_ = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], _aY_]];
      case 7:
       var _aZ_ = caml_call2(Ppxlib_Import[100], x[3], attrs);
       return [0, [0, x[1], x[2], _aZ_]];
      case 8:
       var _a0_ = caml_call2(Ppxlib_Import[100], x[4], attrs);
       return [0, [0, x[1], x[2], x[3], _a0_]];
      case 9:
       var match = caml_call1(Ppxlib_Common[10], attrs);
       if(! match) return [0, x];
       var q = match[2], t$0 = match[1];
       return [1, [0, t$0, q]];
      case 10:
       var match$0 = caml_call1(Ppxlib_Common[10], attrs);
       if(! match$0) return [0, x];
       var q$0 = match$0[2], t$1 = match$0[1];
       return [1, [0, t$1, q$0]];
      default:
       var match$1 = caml_call1(Ppxlib_Common[10], attrs);
       if(! match$1) return [0, x];
       var q$1 = match$1[2], t$2 = match$1[1];
       return [1, [0, t$2, q$1]];
    }
   }
   function merge_attributes(t, x, attrs){
    var _aR_ = merge_attributes_res(t, x, attrs);
    return caml_call2
            (Ppxlib_Import[96][6],
             _aR_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   var
    registrar =
      caml_call3
       (Ppxlib_Name[4][1],
        cst_extension,
        cst_src_extension_ml,
        function(param){var ctx = param[1]; return [0, desc(ctx)];}),
    _d_ = [0, 11],
    _e_ = [0, 4],
    _f_ =
      [0,
       [11, "Multiple match for extensions: ", [2, 0, 0]],
       "Multiple match for extensions: %s"],
    _g_ =
      [0,
       [11, "Extension ", [2, 0, [11, " doesn't expect a path argument", 0]]],
       "Extension %s doesn't expect a path argument"],
    _h_ = [0, 0];
   function Make(Callback){
    function declare(with_arg, name, context, pattern, k){
     if(4 === context)
      caml_call3(Ppxlib_Name[4][3], registrar, _d_, name);
     else if(11 <= context)
      caml_call3(Ppxlib_Name[4][3], registrar, _e_, name);
     caml_call4(Ppxlib_Name[4][2], 115569503, registrar, [0, context], name);
     return [0,
             caml_call1(Ppxlib_Name[1][1], name),
             context,
             [0, pattern, k],
             with_arg];
    }
    function find(ts, ext){
     var
      match = ext[1],
      loc = match[2],
      name = match[1],
      match$0 = caml_call1(Ppxlib_Name[2], name),
      arg = match$0[2],
      name$0 = match$0[1],
      l =
        caml_call2
         (Ppxlib_Import[94][31],
          function(t){return caml_call2(Ppxlib_Name[1][3], t[1], name$0);},
          ts);
     if(! l) return _h_;
     var t = l[1];
     if(l[2]){
      var
       _aO_ =
         caml_call2
          (Ppxlib_Import[94][55],
           l,
           function(t){return caml_call1(Ppxlib_Name[1][2], t[1]);}),
       _aP_ = caml_call2(Ppxlib_Import[99][7], cst, _aO_);
      return [1, [0, caml_call3(Ppxlib_Location[13][2], loc, _f_, _aP_), 0]];
     }
     if(! t[4] && caml_call1(Ppxlib_Import[95][1], arg))
      return [1, [0, caml_call3(Ppxlib_Location[13][2], loc, _g_, name$0), 0]];
     var
      arg$0 =
        caml_call2
         (Ppxlib_Import[95][3],
          arg,
          function(s){
           var
            shift = runtime.caml_ml_string_length(name$0) + 1 | 0,
            start = loc[1],
            _aQ_ =
              [0,
               [0, start[1], start[2], start[3], start[4] + shift | 0],
               loc[2],
               loc[3]];
           return [0, caml_call1(Ppxlib_Longident[5], s), _aQ_];
          });
     return [0, [0, [0, t, arg$0]]];
    }
    return [0, declare, find];
   }
   var include = Make([0]), _i_ = include[1], find = include[2], _j_ = [0, 0];
   function declare_with_path_arg(name, ctx, patt, f){return _i_(1, name, ctx, patt, f);
   }
   function declare(name, ctx, patt, f){
    return _i_(0, name, ctx, patt, function(param){return f;});
   }
   function convert_res(ts, loc, ext){
    var _aK_ = find(ts, ext);
    return caml_call2
            (Ppxlib_Import[96][4],
             _aK_,
             function(r){
              if(! r) return _j_;
              var
               _aL_ = r[1],
               arg = _aL_[2],
               match = _aL_[1][3],
               f = match[2],
               pattern = match[1],
               _aM_ = caml_call1(f, arg),
               _aN_ =
                 caml_call5
                  (Ppxlib_Ast_pattern[2], pattern, loc, 0, ext[2], _aM_);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       _aN_,
                       function(payload){return [0, payload];});
             });
   }
   function convert(ts, loc, ext){
    var _aJ_ = convert_res(ts, loc, ext);
    return caml_call2
            (Ppxlib_Import[96][6],
             _aJ_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   var
    M = Make([0]),
    cst_Extension_convert = "Extension.convert",
    _k_ = [0, 0],
    _l_ = [0, 0];
   function convert_res$0(ts, ctxt, ext){
    var
     loc = caml_call1(Ppxlib_Expansion_context[2][1], ctxt),
     _aF_ = M[2].call(null, ts, ext);
    return caml_call2
            (Ppxlib_Import[96][4],
             _aF_,
             function(found){
              if(! found) return _k_;
              var
               _aG_ = found[1],
               arg = _aG_[2],
               match = _aG_[1][3],
               f = match[2],
               pattern = match[1],
               _aH_ = caml_call2(f, ctxt, arg),
               _aI_ =
                 caml_call5
                  (Ppxlib_Ast_pattern[2], pattern, loc, 0, ext[2], _aH_);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       _aI_,
                       function(payload){
                        if(0 !== payload[0])
                         return caml_call1(Stdlib[2], cst_Extension_convert);
                        var x = payload[1];
                        return [0, x];
                       });
             });
   }
   function convert$0(ts, ctxt, ext){
    var _aE_ = convert_res$0(ts, ctxt, ext);
    return caml_call2
            (Ppxlib_Import[96][6],
             _aE_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   function convert_inline_res(ts, ctxt, ext){
    var
     loc = caml_call1(Ppxlib_Expansion_context[2][1], ctxt),
     _aA_ = M[2].call(null, ts, ext);
    return caml_call2
            (Ppxlib_Import[96][4],
             _aA_,
             function(found){
              if(! found) return _l_;
              var
               _aB_ = found[1],
               arg = _aB_[2],
               match = _aB_[1][3],
               f = match[2],
               pattern = match[1],
               _aC_ = caml_call2(f, ctxt, arg),
               _aD_ =
                 caml_call5
                  (Ppxlib_Ast_pattern[2], pattern, loc, 0, ext[2], _aC_);
              return caml_call2
                      (Ppxlib_Import[96][5],
                       _aD_,
                       function(payload){
                        if(0 === payload[0]){
                         var x = payload[1];
                         return [0, [0, x, 0]];
                        }
                        var l = payload[1];
                        return [0, l];
                       });
             });
   }
   function convert_inline(ts, ctxt, ext){
    var _az_ = convert_inline_res(ts, ctxt, ext);
    return caml_call2
            (Ppxlib_Import[96][6],
             _az_,
             function(param){
              var err = param[1];
              return caml_call1(Ppxlib_Location[13][8], err);
             });
   }
   var
    For_context =
      [0, convert_res$0, convert$0, convert_inline_res, convert_inline],
    _m_ =
      [0,
       [2, 0, [11, ": ", [2, 0, [11, " can't be inlined", 0]]]],
       "%s: %s can't be inlined"],
    _n_ =
      [0,
       [11, "Extension `", [2, 0, [11, "' was not translated", 0]]],
       "Extension `%s' was not translated"];
   function check_context_for_inline(func, ctx){
    switch(ctx){
      case 1:
       return 0;
      case 3:
       return 0;
      case 9:
       return 0;
      case 10:
       return 0;
      default:
       var _ay_ = desc(ctx);
       return caml_call4(Stdlib_Printf[10], Stdlib[1], _m_, func, _ay_);
    }
   }
   function filter_by_context(context, expanders){
    var expanders$0 = expanders;
    for(;;){
     if(! expanders$0) return 0;
     var expanders$1 = expanders$0[2], t = expanders$0[1][1];
     if(! eq(context, t[2]))
      return [0, t, filter_by_context(context, expanders$1)];
     expanders$0 = expanders$1;
    }
   }
   function unhandled_extension_error(ctx, param){
    var name = param[1];
    if
     (!
      caml_call2(Ppxlib_Name[5][3], 115569503, name[1])
      && ! caml_call1(Ppxlib_Name[7], name[1]))
     return [0,
             caml_call5
              (Ppxlib_Name[4][5][1], registrar, [0, ctx], 0, _n_, name),
             0];
    return 0;
   }
   var
    _o_ = caml_call1(CamlinternalOO[16], _b_),
    _p_ = caml_call2(CamlinternalOO[8], _o_, shared),
    _q_ = _p_[12],
    _r_ = _p_[16],
    _s_ = _p_[25],
    _t_ = _p_[36],
    _u_ = _p_[40],
    _v_ = _p_[61],
    _w_ = _p_[62],
    _x_ = _p_[67],
    _y_ = _p_[73],
    _z_ = _p_[75],
    _A_ = _p_[82],
    _B_ = _p_[84],
    _C_ =
      caml_call6
       (CamlinternalOO[18], _o_, 0, 0, _a_, Ppxlib_Ast_traverse[3], 1),
    _E_ = _C_[14],
    _F_ = _C_[16],
    _G_ = _C_[23],
    _H_ = _C_[25],
    _I_ = _C_[31],
    _J_ = _C_[36],
    _K_ = _C_[58],
    _L_ = _C_[62],
    _M_ = _C_[73],
    _N_ = _C_[82],
    _O_ = _C_[86],
    _P_ =
      [0,
       [11, cst_extension_not_expected_her, 0],
       cst_extension_not_expected_her],
    _D_ = _C_[1];
   caml_call2
    (CamlinternalOO[11],
     _o_,
     [0,
      _v_,
      function(self_1, param, acc){
       var
        name = param[1],
        _ax_ = [0, caml_call2(Ppxlib_Location[13][2], name[2], _P_), 0];
       return caml_call2(Ppxlib_Import[100], acc, _ax_);
      },
      _x_,
      function(self_1, x, acc){
       if(typeof x !== "number" && 10 === x[0]){
        var ext = x[1], _aw_ = unhandled_extension_error(4, ext);
        return caml_call2(Ppxlib_Import[100], acc, _aw_);
       }
       return caml_call2(caml_call1(_I_, self_1), x, acc);
      },
      _s_,
      function(self_1, x, acc){
       if(typeof x !== "number" && 15 === x[0]){
        var ext = x[1], _av_ = unhandled_extension_error(8, ext);
        return caml_call2(Ppxlib_Import[100], acc, _av_);
       }
       return caml_call2(caml_call1(_M_, self_1), x, acc);
      },
      _w_,
      function(self_1, x, acc){
       if(typeof x !== "number" && 35 === x[0]){
        var ext = x[1], _au_ = unhandled_extension_error(5, ext);
        return caml_call2(Ppxlib_Import[100], acc, _au_);
       }
       return caml_call2(caml_call1(_J_, self_1), x, acc);
      },
      _z_,
      function(self_1, x, acc){
       if(3 !== x[0]) return caml_call2(caml_call1(_G_, self_1), x, acc);
       var ext = x[1], _at_ = unhandled_extension_error(2, ext);
       return caml_call2(Ppxlib_Import[100], acc, _at_);
      },
      _y_,
      function(self_1, x, acc){
       if(5 !== x[0]) return caml_call2(caml_call1(_H_, self_1), x, acc);
       var ext = x[1], _as_ = unhandled_extension_error(3, ext);
       return caml_call2(Ppxlib_Import[100], acc, _as_);
      },
      _B_,
      function(self_1, x, acc){
       if(6 !== x[0]) return caml_call2(caml_call1(_E_, self_1), x, acc);
       var ext = x[1], _ar_ = unhandled_extension_error(0, ext);
       return caml_call2(Ppxlib_Import[100], acc, _ar_);
      },
      _A_,
      function(self_1, x, acc){
       if(6 !== x[0]) return caml_call2(caml_call1(_F_, self_1), x, acc);
       var ext = x[1], _aq_ = unhandled_extension_error(1, ext);
       return caml_call2(Ppxlib_Import[100], acc, _aq_);
      },
      _t_,
      function(self_1, x, acc){
       if(5 !== x[0]) return caml_call2(caml_call1(_L_, self_1), x, acc);
       var ext = x[1], _ap_ = unhandled_extension_error(7, ext);
       return caml_call2(Ppxlib_Import[100], acc, _ap_);
      },
      _r_,
      function(self_1, x, acc){
       if(15 !== x[0]) return caml_call2(caml_call1(_N_, self_1), x, acc);
       var ext = x[1], _ao_ = unhandled_extension_error(9, ext);
       return caml_call2(Ppxlib_Import[100], acc, _ao_);
      },
      _u_,
      function(self_1, x, acc){
       if(6 !== x[0]) return caml_call2(caml_call1(_K_, self_1), x, acc);
       var ext = x[1], _an_ = unhandled_extension_error(6, ext);
       return caml_call2(Ppxlib_Import[100], acc, _an_);
      },
      _q_,
      function(self_1, x, acc){
       if(14 !== x[0]) return caml_call2(caml_call1(_O_, self_1), x, acc);
       var ext = x[1], _am_ = unhandled_extension_error(10, ext);
       return caml_call2(Ppxlib_Import[100], acc, _am_);
      }]);
   caml_call1(CamlinternalOO[17], _o_);
   var _Q_ = caml_call2(CamlinternalOO[24], 0, _o_);
   caml_call1(_D_, _Q_);
   var
    collect_unhandled_extension_er =
      caml_call3(CamlinternalOO[26], 0, _Q_, _o_);
   function error_list_to_exception(param){
    if(! param) return 0;
    var err = param[1];
    return caml_call1(Ppxlib_Location[13][8], err);
   }
   var
    _R_ = caml_call1(CamlinternalOO[16], _b_),
    _S_ = caml_call2(CamlinternalOO[8], _R_, shared),
    _T_ = _S_[12],
    _U_ = _S_[16],
    _V_ = _S_[25],
    _W_ = _S_[36],
    _X_ = _S_[40],
    _Y_ = _S_[61],
    _Z_ = _S_[62],
    ___ = _S_[67],
    _$_ = _S_[73],
    _aa_ = _S_[75],
    _ab_ = _S_[82],
    _ac_ = _S_[84],
    _ae_ =
      [0,
       [11, cst_extension_not_expected_her, 0],
       cst_extension_not_expected_her],
    _ad_ =
      caml_call6
        (CamlinternalOO[18], _R_, 0, 0, _a_, Ppxlib_Ast_traverse[2], 1)
       [1];
   caml_call2
    (CamlinternalOO[11],
     _R_,
     [0,
      _Y_,
      function(self_2, param){
       var name = param[1];
       return caml_call2(Ppxlib_Location[5], [0, name[2]], _ae_);
      },
      ___,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, 692169494, 49),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      _V_,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, -715681312, 48),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      _Z_,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, 1037672856, 47),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      _aa_,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, 470470447, 46),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      _$_,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, -805179756, 45),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      _ac_,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, 961996500, 44),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      _ab_,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, 104911645, 43),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      _W_,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, -326032221, 42),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      _U_,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, -27659018, 41),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      _X_,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, 165493832, 40),
                  collect_unhandled_extension_er,
                  x,
                  0));
      },
      _T_,
      function(self_2, x){
       return error_list_to_exception
               (caml_call3
                 (caml_get_public_method
                   (collect_unhandled_extension_er, 90676721, 39),
                  collect_unhandled_extension_er,
                  x,
                  0));
      }]);
   caml_call1(CamlinternalOO[17], _R_);
   var _af_ = caml_call2(CamlinternalOO[24], 0, _R_);
   caml_call1(_ad_, _af_);
   var
    check_unused = caml_call3(CamlinternalOO[26], 0, _af_, _R_),
    cst_Extension_declare_inline = "Extension.declare_inline",
    cst_Extension_declare_inline_w = cst_Extension_declare_inline_w$1;
   function declare$0(name, context, pattern, k){
    var
     pattern$0 =
       caml_call2
        (Ppxlib_Ast_pattern[13], pattern, function(x){return [0, x];});
    return [0,
            M[1].call
             (null,
              0,
              name,
              context,
              pattern$0,
              function(ctxt, param){return caml_call1(k, ctxt);})];
   }
   function declare_inline(name, context, pattern, k){
    check_context_for_inline(cst_Extension_declare_inline, context);
    var
     pattern$0 =
       caml_call2
        (Ppxlib_Ast_pattern[13], pattern, function(x){return [1, x];});
    return [0,
            M[1].call
             (null,
              0,
              name,
              context,
              pattern$0,
              function(ctxt, param){return caml_call1(k, ctxt);})];
   }
   function declare_with_path_arg$0(name, context, pattern, k){
    var
     pattern$0 =
       caml_call2
        (Ppxlib_Ast_pattern[13], pattern, function(x){return [0, x];});
    return [0, M[1].call(null, 1, name, context, pattern$0, k)];
   }
   function declare_inline_with_path_arg(name, context, pattern, k){
    check_context_for_inline(cst_Extension_declare_inline_w, context);
    var
     pattern$0 =
       caml_call2
        (Ppxlib_Ast_pattern[13], pattern, function(x){return [1, x];});
    return [0, M[1].call(null, 1, name, context, pattern$0, k)];
   }
   var
    V3 =
      [0,
       declare$0,
       declare_inline,
       declare_with_path_arg$0,
       declare_inline_with_path_arg],
    cst_Extension_declare_inline_w$0 = cst_Extension_declare_inline_w$1;
   function declare$1(name, context, pattern, f){
    var _al_ = caml_call1(Ppxlib_Expansion_context[2][5], f);
    return caml_call4(V3[1], name, context, pattern, _al_);
   }
   function declare_inline$0(name, context, pattern, f){
    var _ak_ = caml_call1(Ppxlib_Expansion_context[2][5], f);
    return caml_call4(V3[2], name, context, pattern, _ak_);
   }
   function declare_with_path_arg$1(name, context, pattern, k){
    var
     k$0 = caml_call1(Ppxlib_Expansion_context[2][5], k),
     pattern$0 =
       caml_call2
        (Ppxlib_Ast_pattern[13], pattern, function(x){return [0, x];});
    return [0, M[1].call(null, 1, name, context, pattern$0, k$0)];
   }
   function declare_inline_with_path_arg$0(name, context, pattern, k){
    var k$0 = caml_call1(Ppxlib_Expansion_context[2][5], k);
    check_context_for_inline(cst_Extension_declare_inline_w$0, context);
    var
     pattern$0 =
       caml_call2
        (Ppxlib_Ast_pattern[13], pattern, function(x){return [1, x];});
    return [0, M[1].call(null, 1, name, context, pattern$0, k$0)];
   }
   function declare_ppx_import(name, expand){
    var
     _ag_ = Ppxlib_Ast_pattern[23],
     _ah_ =
       caml_call2
        (Ppxlib_Ast_pattern[24],
         Ppxlib_Ast_pattern[4],
         Ppxlib_Ast_pattern[23]),
     _ai_ = caml_call2(Ppxlib_Ast_pattern[268], Ppxlib_Ast_pattern[242], _ah_),
     _aj_ = caml_call2(Ppxlib_Ast_pattern[24], _ai_, _ag_),
     pattern = caml_call1(Ppxlib_Ast_pattern[234], _aj_);
    return caml_call4(V3[1], name, 11, pattern, expand);
   }
   var
    V2 = [0, declare$1, declare_inline$0],
    Ppxlib_Extension =
      [0,
       [0,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        eq,
        get_extension,
        merge_attributes,
        merge_attributes_res],
       declare$1,
       declare_with_path_arg$1,
       declare_inline$0,
       declare_inline_with_path_arg$0,
       For_context,
       filter_by_context,
       [0, declare, declare_with_path_arg, convert_res, convert],
       check_unused,
       collect_unhandled_extension_er,
       V2,
       V3,
       check_context_for_inline,
       declare_ppx_import];
   runtime.caml_register_global(48, Ppxlib_Extension, "Ppxlib__Extension");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Context_free
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_traverse, Ppxlib__Attribute, Ppxlib__Code_matcher, Ppxlib__Common, Ppxlib__Expansion_context, Ppxlib__Extension, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$40 = "",
    cst_A_context_free_rule_delete =
      "A context-free rule deleted or added attribues of a str/sig item",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constr = "constr",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_float = "float",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_nativeint = "nativeint",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_other = "other",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_record = "record",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_src_context_free_ml = "src/context_free.ml",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_tuple = "tuple",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_unit = "unit",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$40,
    cst$0 = cst$40,
    cst$1 = cst$40,
    cst$2 = cst$40,
    cst$3 = cst$40,
    cst$4 = cst$40,
    cst$5 = cst$40,
    cst$6 = cst$40,
    cst$7 = cst$40,
    cst$8 = cst$40,
    cst$9 = cst$40,
    cst$10 = cst$40,
    cst$11 = cst$40,
    cst$12 = cst$40,
    cst$13 = cst$40,
    cst$14 = cst$40,
    cst$15 = cst$40,
    cst$16 = cst$40,
    cst$17 = cst$40,
    cst$18 = cst$40,
    cst$19 = cst$40,
    cst$20 = cst$40,
    cst$21 = cst$40,
    cst$22 = cst$40,
    cst$23 = cst$40,
    cst$24 = cst$40,
    cst$25 = cst$40,
    cst$26 = cst$40,
    cst$27 = cst$40,
    cst$28 = cst$40,
    cst$29 = cst$40,
    cst$30 = cst$40,
    cst$31 = cst$40,
    cst$32 = cst$40,
    cst$33 = cst$40,
    cst$34 = cst$40,
    cst$35 = cst$40,
    cst$36 = cst$40,
    cst$37 = cst$40,
    cst$38 = cst$40,
    cst$39 = cst$40,
    shared =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_constr,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_unit,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_nativeint,
       cst_signature_item,
       cst_extension_constructor,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_record,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_float,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_signature,
       cst_class_type_field,
       cst_attributes,
       cst_tuple,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_other,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_int32,
       cst_int64,
       cst_class_field],
    Ppxlib_Extension = global_data.Ppxlib__Extension,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Expansion_context = global_data.Ppxlib__Expansion_context,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Attribute = global_data.Ppxlib__Attribute,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Ppxlib_Code_matcher = global_data.Ppxlib__Code_matcher,
    Assert_failure = global_data.Assert_failure,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Longident = global_data.Ppxlib__Longident;
   function attr_name(param){
    var t = param[1];
    return caml_call1(Ppxlib_Attribute[6], t[1]);
   }
   function split_normal_and_expect(l){
    return caml_call2
            (Ppxlib_Import[94][38],
             function(param){var t = param[1]; return 1 - t[2];},
             l);
   }
   function attr_name$0(param){
    var t = param[1];
    return caml_call1(Ppxlib_Attribute[6], t[1]);
   }
   function split_normal_and_expect$0(l){
    return caml_call2
            (Ppxlib_Import[94][38],
             function(param){var t = param[1]; return 1 - t[2];},
             l);
   }
   var Constant_kind = [0];
   function filter(field, l){
    var l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var l$1 = l$0[2], match = l$0[1], x = match[2], field$0 = match[1];
     a:
     {
      switch(field){
        case 0:
         if(! field$0){var match$0 = 0; break a;} break;
        case 1:
         if(1 === field$0){var match$0 = 0; break a;} break;
        case 2:
         if(2 === field$0){var match$0 = 0; break a;} break;
        case 3:
         if(3 === field$0){var match$0 = 0; break a;} break;
        case 4:
         if(4 === field$0){var match$0 = 0; break a;} break;
        case 5:
         if(5 === field$0){var match$0 = 0; break a;} break;
        case 6:
         if(6 === field$0){var match$0 = 0; break a;} break;
        case 7:
         if(7 === field$0){var match$0 = 0; break a;} break;
        case 8:
         if(8 === field$0){var match$0 = 0; break a;} break;
        case 9:
         if(9 === field$0){var match$0 = 0; break a;} break;
        case 10:
         if(10 === field$0){var match$0 = 0; break a;} break;
        case 11:
         if(11 === field$0){var match$0 = 0; break a;} break;
        default: if(12 <= field$0){var match$0 = 0; break a;}
      }
      var match$0 = 1;
     }
     if(! match$0) return [0, x, filter(field, l$1)];
     l$0 = l$1;
    }
   }
   function extension(ext){return [0, 0, ext];}
   function special_function(id, f){
    return [0, 1, [0, id, caml_call1(Ppxlib_Longident[5], id), f]];
   }
   function special_function$0(ident, f){
    return [0, 1, [0, caml_call1(Ppxlib_Longident[6], ident), ident, f]];
   }
   function constant(kind, suffix, expand){
    return [0, 2, [0, suffix, kind, expand]];
   }
   function attr_str_type_decl(attribute, expand){
    return [0, 3, [0, [0, attribute, 0, expand]]];
   }
   function attr_sig_type_decl(attribute, expand){
    return [0, 4, [0, [0, attribute, 0, expand]]];
   }
   function attr_str_module_type_decl(attribute, expand){return [0, 5, [0, [0, attribute, 0, expand]]];
   }
   function attr_sig_module_type_decl(attribute, expand){return [0, 6, [0, [0, attribute, 0, expand]]];
   }
   function attr_str_type_ext(attribute, expand){
    return [0, 7, [0, [0, attribute, 0, expand]]];
   }
   function attr_sig_type_ext(attribute, expand){
    return [0, 8, [0, [0, attribute, 0, expand]]];
   }
   function attr_str_exception(attribute, expand){
    return [0, 9, [0, [0, attribute, 0, expand]]];
   }
   function attr_sig_exception(attribute, expand){
    return [0, 10, [0, [0, attribute, 0, expand]]];
   }
   function attr_str_class_type_decl(attribute, expand){return [0, 11, [0, [0, attribute, 0, expand]]];
   }
   function attr_sig_class_type_decl(attribute, expand){return [0, 12, [0, [0, attribute, 0, expand]]];
   }
   function attr_str_type_decl_expect(attribute, expand){return [0, 3, [0, [0, attribute, 1, expand]]];
   }
   function attr_sig_type_decl_expect(attribute, expand){return [0, 4, [0, [0, attribute, 1, expand]]];
   }
   function attr_str_module_type_decl_expe(attribute, expand){return [0, 5, [0, [0, attribute, 1, expand]]];
   }
   function attr_sig_module_type_decl_expe(attribute, expand){return [0, 6, [0, [0, attribute, 1, expand]]];
   }
   function attr_str_type_ext_expect(attribute, expand){return [0, 7, [0, [0, attribute, 1, expand]]];
   }
   function attr_sig_type_ext_expect(attribute, expand){return [0, 8, [0, [0, attribute, 1, expand]]];
   }
   function attr_str_exception_expect(attribute, expand){return [0, 9, [0, [0, attribute, 1, expand]]];
   }
   function attr_sig_exception_expect(attribute, expand){return [0, 10, [0, [0, attribute, 1, expand]]];
   }
   function attr_str_class_type_decl_expec(attribute, expand){return [0, 11, [0, [0, attribute, 1, expand]]];
   }
   function attr_sig_class_type_decl_expec(attribute, expand){return [0, 12, [0, [0, attribute, 1, expand]]];
   }
   var
    nop = [0, function(_dl_, _dk_, param){return 0;}],
    _d_ =
      [0,
       [11, cst_A_context_free_rule_delete, 0],
       cst_A_context_free_rule_delete],
    dummy = 0;
   function replace(t, context, loc, x){
    return caml_call3(t[1], context, loc, x);
   }
   function insert_after(t, context, loc, x){
    if(1 === x[0] && ! x[1]) return;
    return caml_call3(t[1], context, [0, loc[2], loc[2], loc[3]], x);
   }
   function exn_to_extension(exn){
    var
     error = caml_call1(Ppxlib_Common[23], exn),
     loc = caml_call1(Ppxlib_Location[13][10], error),
     extension = caml_call1(Ppxlib_Location[13][7], error);
    return [0, extension, loc];
   }
   function exn_to_error_extension(context, original_node, exn){
    var match = exn_to_extension(exn), loc = match[2], extension = match[1];
    switch(context){
      case 0:
       return caml_call2(Ppxlib_Ast_builder[1][157], loc, extension);
      case 1:
       return caml_call2(Ppxlib_Ast_builder[1][149], loc, extension);
      case 2:
       return caml_call2(Ppxlib_Ast_builder[1][143], loc, extension);
      case 3:
       return caml_call2(Ppxlib_Ast_builder[1][136], loc, extension);
      case 4:
       return caml_call2(Ppxlib_Ast_builder[1][124], loc, extension);
      case 5:
       return caml_call2(Ppxlib_Ast_builder[1][84], loc, extension);
      case 6:
       return caml_call2(Ppxlib_Ast_builder[1][70], loc, extension);
      case 7:
       return caml_call2(Ppxlib_Ast_builder[1][63], loc, extension);
      case 8:
       return caml_call2(Ppxlib_Ast_builder[1][43], loc, extension);
      case 9:
       return caml_call3(Ppxlib_Ast_builder[1][23], loc, extension, 0);
      case 10:
       return caml_call3(Ppxlib_Ast_builder[1][8], loc, extension, 0);
      default:
       var
        ptype_manifest =
          [0, caml_call2(Ppxlib_Ast_builder[1][124], loc, extension)];
       return [0,
               original_node[1],
               original_node[2],
               original_node[3],
               original_node[4],
               original_node[5],
               ptype_manifest,
               original_node[7],
               original_node[8]];
    }
   }
   function exn_to_stri(exn){
    var match = exn_to_extension(exn), loc = match[2], extension = match[1];
    return caml_call3(Ppxlib_Ast_builder[1][8], loc, extension, 0);
   }
   function exn_to_sigi(exn){
    var match = exn_to_extension(exn), loc = match[2], extension = match[1];
    return caml_call3(Ppxlib_Ast_builder[1][23], loc, extension, 0);
   }
   function map_node_rec
   (context, ts, super_call, loc, base_ctxt, x, embed_errors){
    var
     ctxt = caml_call3(Ppxlib_Expansion_context[2][6], loc, base_ctxt, 0),
     match = caml_call2(Ppxlib_Extension[1][13], context, x);
    if(! match) return caml_call2(super_call, base_ctxt, x);
    var match$0 = match[1], attrs = match$0[2], ext = match$0[1];
    function _dd_(converted){
     if(! converted) return caml_call2(super_call, base_ctxt, x);
     var
      x$0 = converted[1],
      _di_ = caml_call3(Ppxlib_Extension[1][15], context, x$0, attrs),
      _dj_ = caml_call2(Ppxlib_Common[24][4], _di_, x$0);
     return caml_call2
             (Ppxlib_Common[24][2],
              _dj_,
              function(x){
               return map_node_rec
                       (context, ts, super_call, loc, base_ctxt, x, embed_errors);
              });
    }
    try{
     var
      _dg_ = caml_call3(Ppxlib_Extension[6][1], ts, ctxt, ext),
      _dh_ = caml_call2(Ppxlib_Common[24][4], _dg_, 0),
      _df_ = _dh_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! embed_errors) throw caml_maybe_attach_backtrace(exn, 0);
     var
      _de_ = [0, exn_to_error_extension(context, x, exn)],
      _df_ = caml_call1(Ppxlib_Common[24][1], _de_);
    }
    return caml_call2(Ppxlib_Common[24][2], _df_, _dd_);
   }
   function map_nodes
   (context,
    ts,
    super_call,
    get_loc,
    base_ctxt,
    l,
    hook,
    embed_errors,
    in_generated_code){
    if(! l) return caml_call1(Ppxlib_Common[24][1], 0);
    var
     l$0 = l[2],
     x = l[1],
     match = caml_call2(Ppxlib_Extension[1][13], context, x);
    if(! match){
     var _c8_ = caml_call2(super_call, base_ctxt, x);
     return caml_call2
             (Ppxlib_Common[24][2],
              _c8_,
              function(x){
               var
                _dc_ =
                  map_nodes
                   (context,
                    ts,
                    super_call,
                    get_loc,
                    base_ctxt,
                    l$0,
                    hook,
                    embed_errors,
                    in_generated_code);
               return caml_call2
                       (Ppxlib_Common[24][3], _dc_, function(l){return [0, x, l];});
              });
    }
    var
     match$0 = match[1],
     attrs = match$0[2],
     ext = match$0[1],
     extension_point_loc = caml_call1(get_loc, x),
     ctxt =
       caml_call3
        (Ppxlib_Expansion_context[2][6], extension_point_loc, base_ctxt, 0);
    function _c3_(param){
     if(param){
      var
       converted = param[1],
       _c9_ = [0, 0, caml_call1(Ppxlib_Common[10], attrs)];
      return caml_call2
              (Ppxlib_Common[24][2],
               _c9_,
               function(param){
                var
                 _da_ =
                   map_nodes
                    (context,
                     ts,
                     super_call,
                     get_loc,
                     base_ctxt,
                     converted,
                     hook,
                     embed_errors,
                     1);
                return caml_call2
                        (Ppxlib_Common[24][2],
                         _da_,
                         function(generated_code){
                          if(1 - in_generated_code)
                           replace
                            (hook, context, extension_point_loc, [1, generated_code]);
                          var
                           _db_ =
                             map_nodes
                              (context,
                               ts,
                               super_call,
                               get_loc,
                               base_ctxt,
                               l$0,
                               hook,
                               embed_errors,
                               in_generated_code);
                          return caml_call2
                                  (Ppxlib_Common[24][3],
                                   _db_,
                                   function(code){
                                    return caml_call2(Ppxlib_Import[100], generated_code, code);
                                   });
                         });
               });
     }
     var _c__ = caml_call2(super_call, base_ctxt, x);
     return caml_call2
             (Ppxlib_Common[24][2],
              _c__,
              function(x){
               var
                _c$_ =
                  map_nodes
                   (context,
                    ts,
                    super_call,
                    get_loc,
                    base_ctxt,
                    l$0,
                    hook,
                    embed_errors,
                    in_generated_code);
               return caml_call2
                       (Ppxlib_Common[24][3], _c$_, function(l){return [0, x, l];});
              });
    }
    try{
     var
      _c6_ = caml_call3(Ppxlib_Extension[6][3], ts, ctxt, ext),
      _c7_ = caml_call2(Ppxlib_Common[24][4], _c6_, 0),
      _c5_ = _c7_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! embed_errors) throw caml_maybe_attach_backtrace(exn, 0);
     var
      _c4_ = [0, [0, exn_to_error_extension(context, x, exn), 0]],
      _c5_ = caml_call1(Ppxlib_Common[24][1], _c4_);
    }
    return caml_call2(Ppxlib_Common[24][2], _c5_, _c3_);
   }
   function get_group(attr, l){
    if(! l) return caml_call1(Ppxlib_Common[24][1], 0);
    var l$0 = l[2], x = l[1], _c0_ = get_group(attr, l$0);
    return caml_call2
            (Ppxlib_Common[24][2],
             _c0_,
             function(group){
              var
               _c1_ = caml_call3(Ppxlib_Attribute[8], attr, 0, x),
               _c2_ = caml_call2(Ppxlib_Common[24][4], _c1_, 0);
              return caml_call2
                      (Ppxlib_Common[24][3],
                       _c2_,
                       function(attr2){
                        if(attr2){
                         var value = attr2[1];
                         if(! group)
                          return [0,
                                  [0,
                                   [0, value],
                                   caml_call2
                                    (Ppxlib_Import[94][55], l$0, function(param){return 0;})]];
                         var vals = group[1];
                         return [0, [0, [0, value], vals]];
                        }
                        if(! group) return 0;
                        var vals$0 = group[1];
                        return [0, [0, 0, vals$0]];
                       });
             });
   }
   function rev_concat(l){
    if(! l) return 0;
    var _cY_ = l[2], x = l[1];
    if(! _cY_) return x;
    if(_cY_[2]){
     var _cZ_ = caml_call1(Ppxlib_Import[94][9], l);
     return caml_call1(Ppxlib_Import[94][59], _cZ_);
    }
    var y = _cY_[1];
    return caml_call2(Ppxlib_Import[100], y, x);
   }
   function sort_attr_group_inline(l){
    return caml_call2
            (Ppxlib_Import[94][44],
             function(a, b){
              var _cW_ = attr_name(b), _cX_ = attr_name(a);
              return caml_call2(Ppxlib_Import[99][71], _cX_, _cW_);
             },
             l);
   }
   function sort_attr_inline(l){
    return caml_call2
            (Ppxlib_Import[94][44],
             function(a, b){
              var _cU_ = attr_name$0(b), _cV_ = attr_name$0(a);
              return caml_call2(Ppxlib_Import[99][71], _cV_, _cU_);
             },
             l);
   }
   function context_free_attribute_modific(loc){
    return [1, [0, caml_call2(Ppxlib_Location[13][2], loc, _d_), 0]];
   }
   var
    nop$0 = [0, function(_cT_, _cS_, param){return 0;}],
    Expect_mismatch_handler = [0, nop$0],
    _a_ =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constr,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_float,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_int32,
       cst_int64,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_nativeint,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_other,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_record,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_tuple,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_unit,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    _b_ =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_unit,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_tuple,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_record,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       "pexp_apply_without_traversing_function",
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_other,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_nativeint,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int64,
       cst_int32,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_float,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constr,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    _c_ =
      [0,
       [11,
        "Context_free.V1.map_top_down: ",
        [2, 0, [11, " present twice in list of special functions", 0]]],
       "Context_free.V1.map_top_down: %s present twice in list of special functions"],
    _e_ = [0, cst_src_context_free_ml, 888, 20],
    _f_ = [0, cst_src_context_free_ml, 779, 20],
    map_top_down =
      caml_call2
       (CamlinternalOO[19],
        shared,
        function(_g_){
         var
          _h_ = caml_call2(CamlinternalOO[3], _g_, cst),
          _i_ = caml_call2(CamlinternalOO[3], _g_, cst$0),
          _j_ = caml_call2(CamlinternalOO[3], _g_, cst$1),
          _k_ = caml_call2(CamlinternalOO[3], _g_, cst$2),
          _l_ = caml_call2(CamlinternalOO[3], _g_, cst$3),
          _m_ = caml_call2(CamlinternalOO[3], _g_, cst$4),
          _n_ = caml_call2(CamlinternalOO[3], _g_, cst$5),
          _o_ = caml_call2(CamlinternalOO[3], _g_, cst$6),
          _p_ = caml_call2(CamlinternalOO[3], _g_, cst$7),
          _q_ = caml_call2(CamlinternalOO[3], _g_, cst$8),
          _r_ = caml_call2(CamlinternalOO[3], _g_, cst$9),
          _s_ = caml_call2(CamlinternalOO[3], _g_, cst$10),
          _t_ = caml_call2(CamlinternalOO[3], _g_, cst$11),
          _u_ = caml_call2(CamlinternalOO[3], _g_, cst$12),
          _v_ = caml_call2(CamlinternalOO[3], _g_, cst$13),
          _w_ = caml_call2(CamlinternalOO[3], _g_, cst$14),
          _x_ = caml_call2(CamlinternalOO[3], _g_, cst$15),
          _y_ = caml_call2(CamlinternalOO[3], _g_, cst$16),
          _z_ = caml_call2(CamlinternalOO[3], _g_, cst$17),
          _A_ = caml_call2(CamlinternalOO[3], _g_, cst$18),
          _B_ = caml_call2(CamlinternalOO[3], _g_, cst$19),
          _C_ = caml_call2(CamlinternalOO[3], _g_, cst$20),
          _D_ = caml_call2(CamlinternalOO[3], _g_, cst$21),
          _E_ = caml_call2(CamlinternalOO[3], _g_, cst$22),
          _F_ = caml_call2(CamlinternalOO[3], _g_, cst$23),
          _G_ = caml_call2(CamlinternalOO[3], _g_, cst$24),
          _H_ = caml_call2(CamlinternalOO[3], _g_, cst$25),
          _I_ = caml_call2(CamlinternalOO[3], _g_, cst$26),
          _J_ = caml_call2(CamlinternalOO[3], _g_, cst$27),
          _K_ = caml_call2(CamlinternalOO[3], _g_, cst$28),
          _L_ = caml_call2(CamlinternalOO[3], _g_, cst$29),
          _M_ = caml_call2(CamlinternalOO[3], _g_, cst$30),
          _N_ = caml_call2(CamlinternalOO[3], _g_, cst$31),
          _O_ = caml_call2(CamlinternalOO[3], _g_, cst$32),
          _P_ = caml_call2(CamlinternalOO[3], _g_, cst$33),
          _Q_ = caml_call2(CamlinternalOO[3], _g_, cst$34),
          _R_ = caml_call2(CamlinternalOO[3], _g_, cst$35),
          _S_ = caml_call2(CamlinternalOO[3], _g_, cst$36),
          _T_ = caml_call2(CamlinternalOO[3], _g_, cst$37),
          _U_ = caml_call2(CamlinternalOO[3], _g_, cst$38),
          _V_ = caml_call2(CamlinternalOO[3], _g_, cst$39),
          _W_ = caml_call2(CamlinternalOO[8], _g_, _b_),
          _Z_ = _W_[16],
          _$_ = _W_[20],
          _aa_ = _W_[27],
          _ab_ = _W_[30],
          _af_ = _W_[72],
          _ag_ = _W_[77],
          _an_ = _W_[103],
          _X_ = _W_[10],
          _Y_ = _W_[15],
          ___ = _W_[19],
          _ac_ = _W_[44],
          _ad_ = _W_[47],
          _ae_ = _W_[53],
          _ah_ = _W_[84],
          _ai_ = _W_[87],
          _aj_ = _W_[88],
          _ak_ = _W_[89],
          _al_ = _W_[93],
          _am_ = _W_[95],
          _ao_ =
            caml_call6
             (CamlinternalOO[18], _g_, 0, 0, _a_, Ppxlib_Ast_traverse[17], 1),
          _ar_ = _ao_[15],
          _at_ = _ao_[24],
          _av_ = _ao_[36],
          _az_ = _ao_[88],
          _aA_ = _ao_[92],
          _aq_ = _ao_[13],
          _as_ = _ao_[21],
          _au_ = _ao_[31],
          _aw_ = _ao_[61],
          _ax_ = _ao_[64],
          _ay_ = _ao_[78],
          _aB_ = _ao_[97],
          _ap_ = _ao_[1];
         caml_call2
          (CamlinternalOO[11],
           _g_,
           [0,
            _ae_,
            function(self_1, param, x){
             return caml_call1(Ppxlib_Common[24][1], x);
            },
            _ag_,
            function(self_1, base_ctxt, x){
             var _cQ_ = x[2], _cR_ = caml_call1(_au_, self_1);
             return caml_call6
                     (self_1[1 + _S_],
                      Ppxlib_Extension[1][5],
                      self_1[1 + _q_],
                      _cR_,
                      _cQ_,
                      base_ctxt,
                      x);
            },
            _ab_,
            function(self_1, base_ctxt, x){
             var _cO_ = x[2], _cP_ = caml_call1(_ay_, self_1);
             return caml_call6
                     (self_1[1 + _S_],
                      Ppxlib_Extension[1][9],
                      self_1[1 + _u_],
                      _cP_,
                      _cO_,
                      base_ctxt,
                      x);
            },
            _af_,
            function(self_1, base_ctxt, e){
             var
              _cx_ =
                caml_call3(Ppxlib_Attribute[8], Ppxlib_Ast_traverse[7], 0, e),
              _cy_ = caml_call2(Ppxlib_Common[24][4], _cx_, 0),
              with_context =
                caml_call2
                 (Ppxlib_Common[24][2],
                  _cy_,
                  function(option){
                   if(! option)
                    return caml_call1(Ppxlib_Common[24][1], [0, base_ctxt, e]);
                   var
                    match = option[1],
                    loc = match[2],
                    txt = match[1],
                    _cM_ =
                      caml_call3
                       (Ppxlib_Attribute[14],
                        8,
                        [0, [0, Ppxlib_Ast_traverse[7]], 0],
                        e),
                    _cN_ = caml_call2(Ppxlib_Common[24][4], _cM_, e);
                   return caml_call2
                           (Ppxlib_Common[24][3],
                            _cN_,
                            function(e){
                             return [0,
                                     caml_call3
                                      (Ppxlib_Expansion_context[1][7], loc, txt, base_ctxt),
                                     e];
                            });
                  });
             return caml_call2
                     (Ppxlib_Common[24][2],
                      with_context,
                      function(param){
                       var e = param[2], base_ctxt = param[1], _cz_ = e[1];
                       a:
                       {
                        if(typeof _cz_ !== "number" && 35 === _cz_[0]){
                         var
                          expanded =
                            caml_call6
                             (self_1[1 + _S_],
                              Ppxlib_Extension[1][6],
                              self_1[1 + _r_],
                              function(param, e){
                               return caml_call1(Ppxlib_Common[24][1], e);
                              },
                              e[2],
                              base_ctxt,
                              e);
                         break a;
                        }
                        var expanded = caml_call1(Ppxlib_Common[24][1], e);
                       }
                       return caml_call2
                               (Ppxlib_Common[24][2],
                                expanded,
                                function(e){
                                 function expand_constant(kind, char$0, text){
                                  var
                                   match =
                                     caml_call2
                                      (Ppxlib_Import[90][33], self_1[1 + _l_], [0, char$0, kind]);
                                  if(! match)
                                   return caml_call2(caml_call1(_av_, self_1), base_ctxt, e);
                                  var
                                   expand = match[1],
                                   _cL_ = caml_call2(expand, e[2], text);
                                  return caml_call3
                                          (self_1[1][1 + _af_], self_1, base_ctxt, _cL_);
                                 }
                                 var match = e[1];
                                 if(typeof match !== "number")
                                  switch(match[0]){
                                    case 0:
                                     var
                                      id = match[1],
                                      match$0 =
                                        caml_call2(Ppxlib_Import[90][33], self_1[1 + _k_], id[1]);
                                     if(! match$0)
                                      return caml_call2(caml_call1(_av_, self_1), base_ctxt, e);
                                     var pattern = match$0[1];
                                     try{
                                      var
                                       _cB_ = caml_call1(pattern, e),
                                       _cC_ = caml_call1(Ppxlib_Common[24][1], _cB_),
                                       generated_code = _cC_;
                                     }
                                     catch(exn$0){
                                      var exn = caml_wrap_exception(exn$0);
                                      if(! self_1[1 + _i_])
                                       throw caml_maybe_attach_backtrace(exn, 0);
                                      var
                                       _cA_ =
                                         [0, exn_to_error_extension(Ppxlib_Extension[1][6], e, exn)],
                                       generated_code = caml_call1(Ppxlib_Common[24][1], _cA_);
                                     }
                                     return caml_call2
                                             (Ppxlib_Common[24][2],
                                              generated_code,
                                              function(expr){
                                               if(! expr)
                                                return caml_call2(caml_call1(_av_, self_1), base_ctxt, e);
                                               var e$0 = expr[1];
                                               return caml_call3
                                                       (self_1[1][1 + _af_], self_1, base_ctxt, e$0);
                                              });
                                    case 1:
                                     var _cD_ = match[1];
                                     switch(_cD_[0]){
                                       case 0:
                                        var match$1 = _cD_[2];
                                        if(match$1){
                                         var c = match$1[1], s = _cD_[1];
                                         try{var _cF_ = expand_constant(1, c, s); return _cF_;}
                                         catch(exn){
                                          var exn$0 = caml_wrap_exception(exn);
                                          if(! self_1[1 + _i_])
                                           throw caml_maybe_attach_backtrace(exn$0, 0);
                                          var
                                           _cE_ =
                                             exn_to_error_extension(Ppxlib_Extension[1][6], e, exn$0);
                                          return caml_call1(Ppxlib_Common[24][1], _cE_);
                                         }
                                        }
                                        break;
                                       case 3:
                                        var match$2 = _cD_[2];
                                        if(match$2){
                                         var c$0 = match$2[1], s$0 = _cD_[1];
                                         try{var _cH_ = expand_constant(0, c$0, s$0); return _cH_;}
                                         catch(exn){
                                          var exn$1 = caml_wrap_exception(exn);
                                          if(! self_1[1 + _i_])
                                           throw caml_maybe_attach_backtrace(exn$1, 0);
                                          var
                                           _cG_ =
                                             exn_to_error_extension(Ppxlib_Extension[1][6], e, exn$1);
                                          return caml_call1(Ppxlib_Common[24][1], _cG_);
                                         }
                                        }
                                        break;
                                     }
                                     break;
                                    case 5:
                                     var func = match[1], match$3 = func[1];
                                     if(typeof match$3 !== "number" && 0 === match$3[0]){
                                      var
                                       args = match[2],
                                       id$0 = match$3[1],
                                       match$4 =
                                         caml_call2(Ppxlib_Import[90][33], self_1[1 + _k_], id$0[1]);
                                      if(! match$4)
                                       return caml_call5
                                               (self_1[1][1 + _aa_], self_1, base_ctxt, e, func, args);
                                      var pattern$0 = match$4[1];
                                      try{
                                       var
                                        _cJ_ = caml_call1(pattern$0, e),
                                        _cK_ = caml_call1(Ppxlib_Common[24][1], _cJ_),
                                        generated_code$0 = _cK_;
                                      }
                                      catch(exn){
                                       var exn$2 = caml_wrap_exception(exn);
                                       if(! self_1[1 + _i_])
                                        throw caml_maybe_attach_backtrace(exn$2, 0);
                                       var
                                        _cI_ =
                                          [0,
                                           exn_to_error_extension(Ppxlib_Extension[1][6], e, exn$2)],
                                        generated_code$0 = caml_call1(Ppxlib_Common[24][1], _cI_);
                                      }
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               generated_code$0,
                                               function(expr){
                                                if(! expr)
                                                 return caml_call5
                                                         (self_1[1][1 + _aa_], self_1, base_ctxt, e, func, args);
                                                var e$0 = expr[1];
                                                return caml_call3
                                                        (self_1[1][1 + _af_], self_1, base_ctxt, e$0);
                                               });
                                     }
                                     break;
                                  }
                                 return caml_call2(caml_call1(_av_, self_1), base_ctxt, e);
                                });
                      });
            },
            _aa_,
            function(self_1, base_ctxt, e, func, args){
             var
              pexp_attributes = e[4],
              pexp_loc_stack = e[3],
              pexp_loc = e[2],
              pexp_attributes$0 = func[4],
              pexp_loc_stack$0 = func[3],
              pexp_loc$0 = func[2],
              pexp_desc = func[1],
              _ct_ =
                caml_call3
                 (self_1[1][1 + _an_], self_1, base_ctxt, pexp_attributes$0),
              func$0 =
                caml_call2
                 (Ppxlib_Common[24][3],
                  _ct_,
                  function(pexp_attributes){
                   return [0,
                           pexp_desc,
                           pexp_loc$0,
                           pexp_loc_stack$0,
                           pexp_attributes];
                  });
             return caml_call2
                     (Ppxlib_Common[24][2],
                      func$0,
                      function(func){
                       var
                        _cu_ =
                          caml_call2
                           (Ppxlib_Import[94][55],
                            args,
                            function(param){
                             var
                              exp = param[2],
                              lab = param[1],
                              _cw_ =
                                caml_call3(self_1[1][1 + _af_], self_1, base_ctxt, exp);
                             return caml_call2
                                     (Ppxlib_Common[24][3],
                                      _cw_,
                                      function(exp){return [0, lab, exp];});
                            }),
                        args$0 = caml_call1(Ppxlib_Common[24][5], _cu_);
                       return caml_call2
                               (Ppxlib_Common[24][2],
                                args$0,
                                function(args){
                                 var
                                  _cv_ =
                                    caml_call3
                                     (self_1[1][1 + _an_], self_1, base_ctxt, pexp_attributes);
                                 return caml_call2
                                         (Ppxlib_Common[24][3],
                                          _cv_,
                                          function(pexp_attributes){
                                           return [0,
                                                   [5, func, args],
                                                   pexp_loc,
                                                   pexp_loc_stack,
                                                   pexp_attributes];
                                          });
                                });
                      });
            },
            _ai_,
            function(self_1, base_ctxt, x){
             var _cr_ = x[2], _cs_ = caml_call1(_as_, self_1);
             return caml_call6
                     (self_1[1 + _S_],
                      Ppxlib_Extension[1][3],
                      self_1[1 + _o_],
                      _cs_,
                      _cr_,
                      base_ctxt,
                      x);
            },
            _ah_,
            function(self_1, base_ctxt, x){
             var _cp_ = x[2], _cq_ = caml_call1(_at_, self_1);
             return caml_call6
                     (self_1[1 + _S_],
                      Ppxlib_Extension[1][4],
                      self_1[1 + _p_],
                      _cq_,
                      _cp_,
                      base_ctxt,
                      x);
            },
            _am_,
            function(self_1, base_ctxt, x){
             var _cn_ = x[2], _co_ = caml_call1(_aq_, self_1);
             return caml_call6
                     (self_1[1 + _S_],
                      Ppxlib_Extension[1][1],
                      self_1[1 + _m_],
                      _co_,
                      _cn_,
                      base_ctxt,
                      x);
            },
            _al_,
            function(self_1, base_ctxt, x){
             var _cl_ = x[2], _cm_ = caml_call1(_ar_, self_1);
             return caml_call6
                     (self_1[1 + _S_],
                      Ppxlib_Extension[1][2],
                      self_1[1 + _n_],
                      _cm_,
                      _cl_,
                      base_ctxt,
                      x);
            },
            _ac_,
            function(self_1, base_ctxt, x){
             var _cj_ = x[2], _ck_ = caml_call1(_ax_, self_1);
             return caml_call6
                     (self_1[1 + _S_],
                      Ppxlib_Extension[1][8],
                      self_1[1 + _t_],
                      _ck_,
                      _cj_,
                      base_ctxt,
                      x);
            },
            _ad_,
            function(self_1, base_ctxt, x){
             var
              _cc_ =
                caml_call3(Ppxlib_Attribute[8], Ppxlib_Ast_traverse[8], 0, x),
              _cd_ = caml_call2(Ppxlib_Common[24][4], _cc_, 0),
              _ce_ =
                caml_call2
                 (Ppxlib_Common[24][2],
                  _cd_,
                  function(param){
                   if(! param)
                    return caml_call1(Ppxlib_Common[24][1], [0, base_ctxt, x]);
                   var
                    match = param[1],
                    loc = match[2],
                    txt = match[1],
                    _ch_ =
                      caml_call3
                       (Ppxlib_Attribute[14],
                        23,
                        [0, [0, Ppxlib_Ast_traverse[8]], 0],
                        x),
                    _ci_ = caml_call2(Ppxlib_Common[24][4], _ch_, x);
                   return caml_call2
                           (Ppxlib_Common[24][3],
                            _ci_,
                            function(x){
                             return [0,
                                     caml_call3
                                      (Ppxlib_Expansion_context[1][6], loc, txt, base_ctxt),
                                     x];
                            });
                  });
             return caml_call2
                     (Ppxlib_Common[24][2],
                      _ce_,
                      function(param){
                       var
                        x = param[2],
                        base_ctxt = param[1],
                        _cf_ = x[2],
                        _cg_ = caml_call1(_aw_, self_1);
                       return caml_call6
                               (self_1[1 + _S_],
                                Ppxlib_Extension[1][7],
                                self_1[1 + _s_],
                                _cg_,
                                _cf_,
                                base_ctxt,
                                x);
                      });
            },
            _Y_,
            function(self_1, base_ctxt, x){
             var _ca_ = x[2], _cb_ = caml_call1(_aA_, self_1);
             return caml_call6
                     (self_1[1 + _S_],
                      Ppxlib_Extension[1][11],
                      self_1[1 + _w_],
                      _cb_,
                      _ca_,
                      base_ctxt,
                      x);
            },
            ___,
            function(self_1, base_ctxt, x){
             var _b__ = x[2], _b$_ = caml_call1(_az_, self_1);
             return caml_call6
                     (self_1[1 + _S_],
                      Ppxlib_Extension[1][10],
                      self_1[1 + _v_],
                      _b$_,
                      _b__,
                      base_ctxt,
                      x);
            },
            _aj_,
            function(self_1, base_ctxt, param){
             var
              pcstr_fields = param[2],
              pcstr_self = param[1],
              _b7_ =
                caml_call3(self_1[1][1 + _ab_], self_1, base_ctxt, pcstr_self);
             return caml_call2
                     (Ppxlib_Common[24][2],
                      _b7_,
                      function(pcstr_self){
                       var
                        _b8_ = caml_call1(_ar_, self_1),
                        _b9_ =
                          caml_call6
                           (self_1[1 + _T_],
                            Ppxlib_Extension[1][2],
                            self_1[1 + _n_],
                            _b8_,
                            function(x){return x[2];},
                            base_ctxt,
                            pcstr_fields);
                       return caml_call2
                               (Ppxlib_Common[24][3],
                                _b9_,
                                function(pcstr_fields){
                                 return [0, pcstr_self, pcstr_fields];
                                });
                      });
            },
            _X_,
            function(self_1, base_ctxt, x){
             var _b5_ = x[8], _b6_ = caml_call1(_aB_, self_1);
             return caml_call6
                     (self_1[1 + _S_],
                      11,
                      self_1[1 + _x_],
                      _b6_,
                      _b5_,
                      base_ctxt,
                      x);
            },
            _ak_,
            function(self_1, base_ctxt, param){
             var
              pcsig_fields = param[2],
              pcsig_self = param[1],
              _b2_ =
                caml_call3(self_1[1][1 + _ag_], self_1, base_ctxt, pcsig_self);
             return caml_call2
                     (Ppxlib_Common[24][2],
                      _b2_,
                      function(pcsig_self){
                       var
                        _b3_ = caml_call1(_at_, self_1),
                        _b4_ =
                          caml_call6
                           (self_1[1 + _T_],
                            Ppxlib_Extension[1][4],
                            self_1[1 + _p_],
                            _b3_,
                            function(x){return x[2];},
                            base_ctxt,
                            pcsig_fields);
                       return caml_call2
                               (Ppxlib_Common[24][3],
                                _b4_,
                                function(pcsig_fields){
                                 return [0, pcsig_self, pcsig_fields];
                                });
                      });
            },
            _Z_,
            function(self_1, base_ctxt, st){
             function with_extra_items
             (item, extra_items, expect_items, rest, in_generated_code){
              var _bX_ = loop(rev_concat(extra_items), 1);
              return caml_call2
                      (Ppxlib_Common[24][2],
                       _bX_,
                       function(extra_items){
                        if(1 - in_generated_code)
                         insert_after(self_1[1 + _j_], 10, item[2], [1, extra_items]);
                        var _bY_ = loop(rest, in_generated_code);
                        return caml_call2
                                (Ppxlib_Common[24][2],
                                 _bY_,
                                 function(rest$0){
                                  function _bZ_(param){
                                   return [0,
                                           item,
                                           caml_call2(Ppxlib_Import[100], extra_items, rest$0)];
                                  }
                                  if(expect_items)
                                   var
                                    expected = rev_concat(expect_items),
                                    pos = item[2][2],
                                    _b0_ =
                                      caml_call4
                                       (Ppxlib_Code_matcher[1],
                                        pos,
                                        expected,
                                        function(loc, repl){
                                         return caml_call3(self_1[1 + _h_][1], 0, loc, repl);
                                        },
                                        rest),
                                    _b1_ = caml_call2(Ppxlib_Common[24][4], _b0_, 0);
                                  else
                                   var _b1_ = caml_call1(Ppxlib_Common[24][1], 0);
                                  return caml_call2(Ppxlib_Common[24][3], _b1_, _bZ_);
                                 });
                       });
             }
             function loop(st, in_generated_code){
              if(! st) return caml_call1(Ppxlib_Common[24][1], 0);
              var rest = st[2], item = st[1], loc = item[2], match = item[1];
              if(14 === match[0]){
               var
                attrs = match[2],
                ext = match[1],
                extension_point_loc = item[2],
                ctxt =
                  caml_call3
                   (Ppxlib_Expansion_context[2][6],
                    extension_point_loc,
                    base_ctxt,
                    0),
                _bE_ =
                  caml_call3
                   (Ppxlib_Extension[6][3], self_1[1 + _w_], ctxt, ext),
                _bF_ = caml_call2(Ppxlib_Common[24][4], _bE_, 0);
               return caml_call2
                       (Ppxlib_Common[24][2],
                        _bF_,
                        function(param){
                         if(param){
                          var
                           items = param[1],
                           _bS_ = [0, 0, caml_call1(Ppxlib_Common[10], attrs)];
                          return caml_call2
                                  (Ppxlib_Common[24][2],
                                   _bS_,
                                   function(param){
                                    var _bV_ = loop(items, 1);
                                    return caml_call2
                                            (Ppxlib_Common[24][2],
                                             _bV_,
                                             function(items){
                                              if(1 - in_generated_code)
                                               replace(self_1[1 + _j_], 10, item[2], [1, items]);
                                              var _bW_ = loop(rest, in_generated_code);
                                              return caml_call2
                                                      (Ppxlib_Common[24][3],
                                                       _bW_,
                                                       function(rest){
                                                        return caml_call2(Ppxlib_Import[100], items, rest);
                                                       });
                                             });
                                   });
                         }
                         var
                          _bT_ = caml_call2(caml_call1(_aA_, self_1), base_ctxt, item);
                         return caml_call2
                                 (Ppxlib_Common[24][2],
                                  _bT_,
                                  function(item){
                                   var
                                    _bU_ =
                                      caml_call3(self_1[1][1 + _Z_], self_1, base_ctxt, rest);
                                   return caml_call2
                                           (Ppxlib_Common[24][3],
                                            _bU_,
                                            function(rest){return [0, item, rest];});
                                  });
                        });
              }
              var
               _bD_ = caml_call2(caml_call1(_aA_, self_1), base_ctxt, item);
              return caml_call2
                      (Ppxlib_Common[24][2],
                       _bD_,
                       function(expanded_item){
                        var _bG_ = item[1], match = expanded_item[1];
                        switch(_bG_[0]){
                          case 3:
                           if(3 === match[0]){
                            var
                             exp_tds = match[2],
                             exp_rf = match[1],
                             tds = _bG_[2],
                             rf = _bG_[1];
                            if(! caml_call2(Ppxlib_Import[73][3], rf, exp_rf))
                             throw caml_maybe_attach_backtrace
                                    ([0, Assert_failure, _f_], 1);
                            var
                             _bI_ =
                               caml_call7
                                (self_1[1 + _U_],
                                 self_1[1 + _y_],
                                 rf,
                                 tds,
                                 exp_tds,
                                 loc,
                                 base_ctxt,
                                 exn_to_stri);
                            return caml_call2
                                    (Ppxlib_Common[24][2],
                                     _bI_,
                                     function(extra_items){
                                      var
                                       _bR_ =
                                         caml_call7
                                          (self_1[1 + _U_],
                                           self_1[1 + _z_],
                                           rf,
                                           tds,
                                           exp_tds,
                                           loc,
                                           base_ctxt,
                                           exn_to_stri);
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               _bR_,
                                               function(expect_items){
                                                return with_extra_items
                                                        (expanded_item,
                                                         extra_items,
                                                         expect_items,
                                                         rest,
                                                         in_generated_code);
                                               });
                                     });
                           }
                           break;
                          case 4:
                           if(4 === match[0]){
                            var
                             exp_te = match[1],
                             te = _bG_[1],
                             _bJ_ =
                               caml_call6
                                (self_1[1 + _V_],
                                 self_1[1 + _G_],
                                 exn_to_stri,
                                 te,
                                 exp_te,
                                 loc,
                                 base_ctxt);
                            return caml_call2
                                    (Ppxlib_Common[24][2],
                                     _bJ_,
                                     function(extra_items){
                                      var
                                       _bQ_ =
                                         caml_call6
                                          (self_1[1 + _V_],
                                           self_1[1 + _H_],
                                           exn_to_stri,
                                           te,
                                           exp_te,
                                           loc,
                                           base_ctxt);
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               _bQ_,
                                               function(expect_items){
                                                return with_extra_items
                                                        (expanded_item,
                                                         extra_items,
                                                         expect_items,
                                                         rest,
                                                         in_generated_code);
                                               });
                                     });
                           }
                           break;
                          case 5:
                           if(5 === match[0]){
                            var
                             exp_ec = match[1],
                             ec = _bG_[1],
                             _bK_ =
                               caml_call6
                                (self_1[1 + _V_],
                                 self_1[1 + _K_],
                                 exn_to_stri,
                                 ec,
                                 exp_ec,
                                 loc,
                                 base_ctxt);
                            return caml_call2
                                    (Ppxlib_Common[24][2],
                                     _bK_,
                                     function(extra_items){
                                      var
                                       _bP_ =
                                         caml_call6
                                          (self_1[1 + _V_],
                                           self_1[1 + _L_],
                                           exn_to_stri,
                                           ec,
                                           exp_ec,
                                           loc,
                                           base_ctxt);
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               _bP_,
                                               function(expect_items){
                                                return with_extra_items
                                                        (expanded_item,
                                                         extra_items,
                                                         expect_items,
                                                         rest,
                                                         in_generated_code);
                                               });
                                     });
                           }
                           break;
                          case 8:
                           if(8 === match[0]){
                            var
                             exp_mtd = match[1],
                             mtd = _bG_[1],
                             _bL_ =
                               caml_call6
                                (self_1[1 + _V_],
                                 self_1[1 + _C_],
                                 exn_to_stri,
                                 mtd,
                                 exp_mtd,
                                 loc,
                                 base_ctxt);
                            return caml_call2
                                    (Ppxlib_Common[24][2],
                                     _bL_,
                                     function(extra_items){
                                      var
                                       _bO_ =
                                         caml_call6
                                          (self_1[1 + _V_],
                                           self_1[1 + _D_],
                                           exn_to_stri,
                                           mtd,
                                           exp_mtd,
                                           loc,
                                           base_ctxt);
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               _bO_,
                                               function(expect_items){
                                                return with_extra_items
                                                        (expanded_item,
                                                         extra_items,
                                                         expect_items,
                                                         rest,
                                                         in_generated_code);
                                               });
                                     });
                           }
                           break;
                          case 11:
                           if(11 === match[0]){
                            var
                             exp_cds = match[1],
                             cds = _bG_[1],
                             _bM_ =
                               caml_call7
                                (self_1[1 + _U_],
                                 self_1[1 + _O_],
                                 0,
                                 cds,
                                 exp_cds,
                                 loc,
                                 base_ctxt,
                                 exn_to_stri);
                            return caml_call2
                                    (Ppxlib_Common[24][2],
                                     _bM_,
                                     function(extra_items){
                                      var
                                       _bN_ =
                                         caml_call7
                                          (self_1[1 + _U_],
                                           self_1[1 + _P_],
                                           0,
                                           cds,
                                           exp_cds,
                                           loc,
                                           base_ctxt,
                                           exn_to_stri);
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               _bN_,
                                               function(expect_items){
                                                return with_extra_items
                                                        (expanded_item,
                                                         extra_items,
                                                         expect_items,
                                                         rest,
                                                         in_generated_code);
                                               });
                                     });
                           }
                           break;
                        }
                        var
                         _bH_ =
                           caml_call3(self_1[1][1 + _Z_], self_1, base_ctxt, rest);
                        return caml_call2
                                (Ppxlib_Common[24][3],
                                 _bH_,
                                 function(rest){return [0, expanded_item, rest];});
                       });
             }
             return loop(st, 0);
            },
            _$_,
            function(self_1, base_ctxt, sg){
             function with_extra_items
             (item, extra_items, expect_items, rest, in_generated_code){
              var _by_ = loop(rev_concat(extra_items), 1);
              return caml_call2
                      (Ppxlib_Common[24][2],
                       _by_,
                       function(extra_items){
                        if(1 - in_generated_code)
                         insert_after(self_1[1 + _j_], 9, item[2], [1, extra_items]);
                        var _bz_ = loop(rest, in_generated_code);
                        return caml_call2
                                (Ppxlib_Common[24][2],
                                 _bz_,
                                 function(rest$0){
                                  function _bA_(param){
                                   return [0,
                                           item,
                                           caml_call2(Ppxlib_Import[100], extra_items, rest$0)];
                                  }
                                  if(expect_items)
                                   var
                                    expected = rev_concat(expect_items),
                                    pos = item[2][2],
                                    _bB_ =
                                      caml_call4
                                       (Ppxlib_Code_matcher[3],
                                        pos,
                                        expected,
                                        function(loc, repl){
                                         return caml_call3(self_1[1 + _h_][1], 1, loc, repl);
                                        },
                                        rest),
                                    _bC_ = caml_call2(Ppxlib_Common[24][4], _bB_, 0);
                                  else
                                   var _bC_ = caml_call1(Ppxlib_Common[24][1], 0);
                                  return caml_call2(Ppxlib_Common[24][3], _bC_, _bA_);
                                 });
                       });
             }
             function loop(sg, in_generated_code){
              if(! sg) return caml_call1(Ppxlib_Common[24][1], 0);
              var rest = sg[2], item = sg[1], loc = item[2], match = item[1];
              if(15 === match[0]){
               var
                attrs = match[2],
                ext = match[1],
                extension_point_loc = item[2],
                ctxt =
                  caml_call3
                   (Ppxlib_Expansion_context[2][6],
                    extension_point_loc,
                    base_ctxt,
                    0),
                _bf_ =
                  caml_call3
                   (Ppxlib_Extension[6][3], self_1[1 + _v_], ctxt, ext),
                _bg_ = caml_call2(Ppxlib_Common[24][4], _bf_, 0);
               return caml_call2
                       (Ppxlib_Common[24][2],
                        _bg_,
                        function(param){
                         if(param){
                          var
                           items = param[1],
                           _bt_ = [0, 0, caml_call1(Ppxlib_Common[10], attrs)];
                          return caml_call2
                                  (Ppxlib_Common[24][2],
                                   _bt_,
                                   function(param){
                                    var _bw_ = loop(items, 1);
                                    return caml_call2
                                            (Ppxlib_Common[24][2],
                                             _bw_,
                                             function(items){
                                              if(1 - in_generated_code)
                                               replace(self_1[1 + _j_], 9, item[2], [1, items]);
                                              var _bx_ = loop(rest, in_generated_code);
                                              return caml_call2
                                                      (Ppxlib_Common[24][3],
                                                       _bx_,
                                                       function(rest){
                                                        return caml_call2(Ppxlib_Import[100], items, rest);
                                                       });
                                             });
                                   });
                         }
                         var
                          _bu_ = caml_call2(caml_call1(_az_, self_1), base_ctxt, item);
                         return caml_call2
                                 (Ppxlib_Common[24][2],
                                  _bu_,
                                  function(item){
                                   var
                                    _bv_ =
                                      caml_call3(self_1[1][1 + _$_], self_1, base_ctxt, rest);
                                   return caml_call2
                                           (Ppxlib_Common[24][3],
                                            _bv_,
                                            function(rest){return [0, item, rest];});
                                  });
                        });
              }
              var
               _be_ = caml_call2(caml_call1(_az_, self_1), base_ctxt, item);
              return caml_call2
                      (Ppxlib_Common[24][2],
                       _be_,
                       function(expanded_item){
                        var _bh_ = item[1], match = expanded_item[1];
                        switch(_bh_[0]){
                          case 1:
                           if(1 === match[0]){
                            var
                             exp_tds = match[2],
                             exp_rf = match[1],
                             tds = _bh_[2],
                             rf = _bh_[1];
                            if(! caml_call2(Ppxlib_Import[73][3], rf, exp_rf))
                             throw caml_maybe_attach_backtrace
                                    ([0, Assert_failure, _e_], 1);
                            var
                             _bj_ =
                               caml_call7
                                (self_1[1 + _U_],
                                 self_1[1 + _A_],
                                 rf,
                                 tds,
                                 exp_tds,
                                 loc,
                                 base_ctxt,
                                 exn_to_sigi);
                            return caml_call2
                                    (Ppxlib_Common[24][2],
                                     _bj_,
                                     function(extra_items){
                                      var
                                       _bs_ =
                                         caml_call7
                                          (self_1[1 + _U_],
                                           self_1[1 + _B_],
                                           rf,
                                           tds,
                                           exp_tds,
                                           loc,
                                           base_ctxt,
                                           exn_to_sigi);
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               _bs_,
                                               function(expect_items){
                                                return with_extra_items
                                                        (expanded_item,
                                                         extra_items,
                                                         expect_items,
                                                         rest,
                                                         in_generated_code);
                                               });
                                     });
                           }
                           break;
                          case 3:
                           if(3 === match[0]){
                            var
                             exp_te = match[1],
                             te = _bh_[1],
                             _bk_ =
                               caml_call6
                                (self_1[1 + _V_],
                                 self_1[1 + _I_],
                                 exn_to_sigi,
                                 te,
                                 exp_te,
                                 loc,
                                 base_ctxt);
                            return caml_call2
                                    (Ppxlib_Common[24][2],
                                     _bk_,
                                     function(extra_items){
                                      var
                                       _br_ =
                                         caml_call6
                                          (self_1[1 + _V_],
                                           self_1[1 + _J_],
                                           exn_to_sigi,
                                           te,
                                           exp_te,
                                           loc,
                                           base_ctxt);
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               _br_,
                                               function(expect_items){
                                                return with_extra_items
                                                        (expanded_item,
                                                         extra_items,
                                                         expect_items,
                                                         rest,
                                                         in_generated_code);
                                               });
                                     });
                           }
                           break;
                          case 4:
                           if(4 === match[0]){
                            var
                             exp_ec = match[1],
                             ec = _bh_[1],
                             _bl_ =
                               caml_call6
                                (self_1[1 + _V_],
                                 self_1[1 + _M_],
                                 exn_to_sigi,
                                 ec,
                                 exp_ec,
                                 loc,
                                 base_ctxt);
                            return caml_call2
                                    (Ppxlib_Common[24][2],
                                     _bl_,
                                     function(extra_items){
                                      var
                                       _bq_ =
                                         caml_call6
                                          (self_1[1 + _V_],
                                           self_1[1 + _N_],
                                           exn_to_sigi,
                                           ec,
                                           exp_ec,
                                           loc,
                                           base_ctxt);
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               _bq_,
                                               function(expect_items){
                                                return with_extra_items
                                                        (expanded_item,
                                                         extra_items,
                                                         expect_items,
                                                         rest,
                                                         in_generated_code);
                                               });
                                     });
                           }
                           break;
                          case 8:
                           if(8 === match[0]){
                            var
                             exp_mtd = match[1],
                             mtd = _bh_[1],
                             _bm_ =
                               caml_call6
                                (self_1[1 + _V_],
                                 self_1[1 + _E_],
                                 exn_to_sigi,
                                 mtd,
                                 exp_mtd,
                                 loc,
                                 base_ctxt);
                            return caml_call2
                                    (Ppxlib_Common[24][2],
                                     _bm_,
                                     function(extra_items){
                                      var
                                       _bp_ =
                                         caml_call6
                                          (self_1[1 + _V_],
                                           self_1[1 + _F_],
                                           exn_to_sigi,
                                           mtd,
                                           exp_mtd,
                                           loc,
                                           base_ctxt);
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               _bp_,
                                               function(expect_items){
                                                return with_extra_items
                                                        (expanded_item,
                                                         extra_items,
                                                         expect_items,
                                                         rest,
                                                         in_generated_code);
                                               });
                                     });
                           }
                           break;
                          case 13:
                           if(13 === match[0]){
                            var
                             exp_cds = match[1],
                             cds = _bh_[1],
                             _bn_ =
                               caml_call7
                                (self_1[1 + _U_],
                                 self_1[1 + _Q_],
                                 0,
                                 cds,
                                 exp_cds,
                                 loc,
                                 base_ctxt,
                                 exn_to_sigi);
                            return caml_call2
                                    (Ppxlib_Common[24][2],
                                     _bn_,
                                     function(extra_items){
                                      var
                                       _bo_ =
                                         caml_call7
                                          (self_1[1 + _U_],
                                           self_1[1 + _R_],
                                           0,
                                           cds,
                                           exp_cds,
                                           loc,
                                           base_ctxt,
                                           exn_to_sigi);
                                      return caml_call2
                                              (Ppxlib_Common[24][2],
                                               _bo_,
                                               function(expect_items){
                                                return with_extra_items
                                                        (expanded_item,
                                                         extra_items,
                                                         expect_items,
                                                         rest,
                                                         in_generated_code);
                                               });
                                     });
                           }
                           break;
                        }
                        var
                         _bi_ =
                           caml_call3(self_1[1][1 + _$_], self_1, base_ctxt, rest);
                        return caml_call2
                                (Ppxlib_Common[24][3],
                                 _bi_,
                                 function(rest){return [0, expanded_item, rest];});
                       });
             }
             return loop(sg, 0);
            }]);
         return function(_aC_, self, opt){
          if(opt)
           var sth = opt[1], sth$0 = sth;
          else
           var sth$0 = Expect_mismatch_handler[1];
          return function(opt){
           if(opt) var sth = opt[1], hook = sth; else var hook = nop;
           return function(opt){
            if(opt)
             var sth = opt[1], embed_errors = sth;
            else
             var embed_errors = 0;
            return function(rules){
             var
              special_functions = filter(1, rules),
              _aD_ =
                caml_call2
                 (Ppxlib_Import[94][55],
                  special_functions,
                  function(param){
                   var expand = param[3], ident = param[2];
                   return [0, ident, expand];
                  }),
              _aE_ =
                caml_call1(Ppxlib_Import[94][1], special_functions) * 2 | 0,
              _aF_ = [0, caml_call2(Ppxlib_Import[83], 1024, _aE_)],
              match =
                caml_call1(caml_call1(Ppxlib_Import[90][36], _aF_), _aD_);
             if(0 === match[0])
              var table = match[1], special_functions$0 = table;
             else
              var
               ident = match[1],
               _aG_ =
                 caml_call2
                  (Ppxlib_Import[94][72],
                   special_functions,
                   function(r){
                    return caml_call2(Ppxlib_Import[73][2], r[2], ident)
                            ? [0, r[1]]
                            : 0;
                   }),
               special_functions$0 =
                 caml_call3(Stdlib_Printf[10], Stdlib[1], _c_, _aG_);
             var
              _aH_ = filter(2, rules),
              _aI_ =
                caml_call2
                 (Ppxlib_Import[94][55],
                  _aH_,
                  function(c){return [0, [0, c[1], c[2]], c[3]];}),
              constants = caml_call2(Ppxlib_Import[90][37], 0, _aI_),
              extensions = filter(0, rules),
              class_expr =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][1], extensions),
              class_field =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][2], extensions),
              class_type =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][3], extensions),
              class_type_field =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][4], extensions),
              core_type =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][5], extensions),
              expression =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][6], extensions),
              module_expr =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][7], extensions),
              module_type =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][8], extensions),
              pattern =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][9], extensions),
              signature_item =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][10], extensions),
              structure_item =
                caml_call2
                 (Ppxlib_Extension[7], Ppxlib_Extension[1][11], extensions),
              ppx_import = caml_call2(Ppxlib_Extension[7], 11, extensions),
              match$0 =
                split_normal_and_expect
                 (sort_attr_group_inline(filter(3, rules))),
              attr_str_type_decls_expect = match$0[2],
              attr_str_type_decls = match$0[1],
              match$1 =
                split_normal_and_expect
                 (sort_attr_group_inline(filter(4, rules))),
              attr_sig_type_decls_expect = match$1[2],
              attr_sig_type_decls = match$1[1],
              match$2 =
                split_normal_and_expect$0(sort_attr_inline(filter(5, rules))),
              attr_str_module_type_decls_exp = match$2[2],
              attr_str_module_type_decls = match$2[1],
              match$3 =
                split_normal_and_expect$0(sort_attr_inline(filter(6, rules))),
              attr_sig_module_type_decls_exp = match$3[2],
              attr_sig_module_type_decls = match$3[1],
              match$4 =
                split_normal_and_expect$0(sort_attr_inline(filter(7, rules))),
              attr_str_type_exts_expect = match$4[2],
              attr_str_type_exts = match$4[1],
              match$5 =
                split_normal_and_expect$0(sort_attr_inline(filter(8, rules))),
              attr_sig_type_exts_expect = match$5[2],
              attr_sig_type_exts = match$5[1],
              match$6 =
                split_normal_and_expect$0(sort_attr_inline(filter(9, rules))),
              attr_str_exceptions_expect = match$6[2],
              attr_str_exceptions = match$6[1],
              match$7 =
                split_normal_and_expect$0(sort_attr_inline(filter(10, rules))),
              attr_sig_exceptions_expect = match$7[2],
              attr_sig_exceptions = match$7[1],
              match$8 =
                split_normal_and_expect
                 (sort_attr_group_inline(filter(11, rules))),
              attr_str_class_decls_expect = match$8[2],
              attr_str_class_decls = match$8[1],
              match$9 =
                split_normal_and_expect
                 (sort_attr_group_inline(filter(12, rules))),
              attr_sig_class_decls_expect = match$9[2],
              attr_sig_class_decls = match$9[1];
             function map_node(context){
              return function(ts){
               return function(super_call){
                return function(loc){
                 return function(base_ctxt){
                  return function(x){
                   var
                    ctxt =
                      caml_call3
                       (Ppxlib_Expansion_context[2][6], loc, base_ctxt, 0),
                    match = caml_call2(Ppxlib_Extension[1][13], context, x);
                   if(! match) return caml_call2(super_call, base_ctxt, x);
                   var
                    match$0 = match[1],
                    attrs = match$0[2],
                    ext = match$0[1];
                   function _a__(converted){
                    if(! converted) return caml_call2(super_call, base_ctxt, x);
                    var
                     x$0 = converted[1],
                     _bd_ =
                       map_node_rec
                        (context,
                         ts,
                         super_call,
                         loc,
                         base_ctxt,
                         caml_call3(Ppxlib_Extension[1][14], context, x$0, attrs),
                         embed_errors);
                    return caml_call2
                            (Ppxlib_Common[24][3],
                             _bd_,
                             function(generated_code){
                              replace(hook, context, loc, [0, generated_code]);
                              return generated_code;
                             });
                   }
                   try{
                    var
                     _bb_ = caml_call3(Ppxlib_Extension[6][1], ts, ctxt, ext),
                     _bc_ = caml_call2(Ppxlib_Common[24][4], _bb_, 0),
                     _ba_ = _bc_;
                   }
                   catch(exn$0){
                    var exn = caml_wrap_exception(exn$0);
                    if(! embed_errors)
                     throw caml_maybe_attach_backtrace(exn, 0);
                    var
                     _a$_ = [0, exn_to_error_extension(context, x, exn)],
                     _ba_ = caml_call1(Ppxlib_Common[24][1], _a$_);
                   }
                   return caml_call2(Ppxlib_Common[24][2], _ba_, _a__);};};};};};
             }
             function map_nodes$0(_aW_){
              return function(_aX_){
               return function(_aZ_){
                function _aY_(_a5_){
                 return function(_a6_){
                  return function(_a7_){
                   return function(_a8_){
                    return function(_a9_){
                     return map_nodes
                             (_aW_, _aX_, _aZ_, _a5_, _a6_, _a7_, _a8_, _a9_, 0);};};};};
                }
                return function(_a0_){
                 var _a1_ = _aY_(_a0_);
                 return function(_a2_){
                  var _a3_ = _a1_(_a2_);
                  return function(_a4_){
                   return caml_call2(_a3_(_a4_), hook, embed_errors);};};};};};
             }
             function handle_attr_group_inline(attrs){
              return function(rf){
               return function(items){
                return function(expanded_items){
                 return function(loc){
                  return function(base_ctxt){
                   return function(convert_exn){
                    var _aR_ = caml_call1(Ppxlib_Common[24][1], 0);
                    return caml_call3
                            (Ppxlib_Import[94][17],
                             function(acc, param){
                              var group = param[1];
                              return caml_call2
                                      (Ppxlib_Common[24][2],
                                       acc,
                                       function(acc){
                                        var _aS_ = get_group(group[1], items);
                                        return caml_call2
                                                (Ppxlib_Common[24][2],
                                                 _aS_,
                                                 function(g1){
                                                  var _aT_ = get_group(group[1], expanded_items);
                                                  return caml_call2
                                                          (Ppxlib_Common[24][2],
                                                           _aT_,
                                                           function(g2){
                                                            if(g1){
                                                             if(g2){
                                                              var
                                                               values = g1[1],
                                                               ctxt =
                                                                 caml_call4
                                                                  (Ppxlib_Expansion_context[3][7],
                                                                   loc,
                                                                   group[2],
                                                                   base_ctxt,
                                                                   0);
                                                              try{
                                                               var
                                                                expect_items =
                                                                  caml_call4(group[3], ctxt, rf, expanded_items, values),
                                                                _aU_ =
                                                                  caml_call1(Ppxlib_Common[24][1], [0, expect_items, acc]);
                                                               return _aU_;
                                                              }
                                                              catch(exn$0){
                                                               var exn = caml_wrap_exception(exn$0);
                                                               if(! embed_errors)
                                                                throw caml_maybe_attach_backtrace(exn, 0);
                                                               var error_item = [0, caml_call1(convert_exn, exn), 0];
                                                               return caml_call1
                                                                       (Ppxlib_Common[24][1], [0, error_item, acc]);
                                                              }
                                                             }
                                                            }
                                                            else if(! g2) return caml_call1(Ppxlib_Common[24][1], acc);
                                                            var _aV_ = context_free_attribute_modific(loc);
                                                            return caml_call2(Ppxlib_Common[24][4], _aV_, acc);
                                                           });
                                                 });
                                       });
                             },
                             _aR_,
                             attrs);};};};};};};
             }
             var _aJ_ = caml_call2(CamlinternalOO[24], self, _g_);
             _aJ_[1 + _V_] =
              function(attrs){
               return function(convert_exn){
                return function(item){
                 return function(expanded_item){
                  return function(loc){
                   return function(base_ctxt){
                    var _aK_ = caml_call1(Ppxlib_Common[24][1], 0);
                    return caml_call3
                            (Ppxlib_Import[94][17],
                             function(acc, param){
                              var a = param[1];
                              return caml_call2
                                      (Ppxlib_Common[24][2],
                                       acc,
                                       function(acc){
                                        var
                                         _aL_ = caml_call3(Ppxlib_Attribute[8], a[1], 0, item),
                                         _aM_ = caml_call2(Ppxlib_Common[24][4], _aL_, 0);
                                        return caml_call2
                                                (Ppxlib_Common[24][2],
                                                 _aM_,
                                                 function(g1){
                                                  var
                                                   _aN_ =
                                                     caml_call3(Ppxlib_Attribute[8], a[1], 0, expanded_item),
                                                   _aO_ = caml_call2(Ppxlib_Common[24][4], _aN_, 0);
                                                  return caml_call2
                                                          (Ppxlib_Common[24][2],
                                                           _aO_,
                                                           function(g2){
                                                            if(g1){
                                                             if(g2){
                                                              var
                                                               value = g1[1],
                                                               ctxt =
                                                                 caml_call4
                                                                  (Ppxlib_Expansion_context[3][7], loc, a[2], base_ctxt, 0);
                                                              try{
                                                               var
                                                                expect_items = caml_call3(a[3], ctxt, expanded_item, value),
                                                                _aP_ =
                                                                  caml_call1(Ppxlib_Common[24][1], [0, expect_items, acc]);
                                                               return _aP_;
                                                              }
                                                              catch(exn$0){
                                                               var exn = caml_wrap_exception(exn$0);
                                                               if(! embed_errors)
                                                                throw caml_maybe_attach_backtrace(exn, 0);
                                                               var error_item = [0, caml_call1(convert_exn, exn), 0];
                                                               return caml_call1
                                                                       (Ppxlib_Common[24][1], [0, error_item, acc]);
                                                              }
                                                             }
                                                            }
                                                            else if(! g2) return caml_call1(Ppxlib_Common[24][1], acc);
                                                            var _aQ_ = context_free_attribute_modific(loc);
                                                            return caml_call2(Ppxlib_Common[24][4], _aQ_, acc);
                                                           });
                                                 });
                                       });
                             },
                             _aK_,
                             attrs);};};};};};
              };
             _aJ_[1 + _U_] = handle_attr_group_inline;
             _aJ_[1 + _T_] = map_nodes$0;
             _aJ_[1 + _S_] = map_node;
             _aJ_[1 + _Q_] = attr_sig_class_decls;
             _aJ_[1 + _R_] = attr_sig_class_decls_expect;
             _aJ_[1 + _O_] = attr_str_class_decls;
             _aJ_[1 + _P_] = attr_str_class_decls_expect;
             _aJ_[1 + _M_] = attr_sig_exceptions;
             _aJ_[1 + _N_] = attr_sig_exceptions_expect;
             _aJ_[1 + _K_] = attr_str_exceptions;
             _aJ_[1 + _L_] = attr_str_exceptions_expect;
             _aJ_[1 + _I_] = attr_sig_type_exts;
             _aJ_[1 + _J_] = attr_sig_type_exts_expect;
             _aJ_[1 + _G_] = attr_str_type_exts;
             _aJ_[1 + _H_] = attr_str_type_exts_expect;
             _aJ_[1 + _E_] = attr_sig_module_type_decls;
             _aJ_[1 + _F_] = attr_sig_module_type_decls_exp;
             _aJ_[1 + _C_] = attr_str_module_type_decls;
             _aJ_[1 + _D_] = attr_str_module_type_decls_exp;
             _aJ_[1 + _A_] = attr_sig_type_decls;
             _aJ_[1 + _B_] = attr_sig_type_decls_expect;
             _aJ_[1 + _y_] = attr_str_type_decls;
             _aJ_[1 + _z_] = attr_str_type_decls_expect;
             _aJ_[1 + _m_] = class_expr;
             _aJ_[1 + _n_] = class_field;
             _aJ_[1 + _o_] = class_type;
             _aJ_[1 + _p_] = class_type_field;
             _aJ_[1 + _q_] = core_type;
             _aJ_[1 + _r_] = expression;
             _aJ_[1 + _s_] = module_expr;
             _aJ_[1 + _t_] = module_type;
             _aJ_[1 + _u_] = pattern;
             _aJ_[1 + _v_] = signature_item;
             _aJ_[1 + _w_] = structure_item;
             _aJ_[1 + _x_] = ppx_import;
             _aJ_[1 + _l_] = constants;
             _aJ_[1 + _k_] = special_functions$0;
             _aJ_[1 + _j_] = hook;
             _aJ_[1 + _i_] = embed_errors;
             _aJ_[1 + _h_] = sth$0;
             caml_call1(_ap_, _aJ_);
             return caml_call3(CamlinternalOO[26], self, _aJ_, _g_);};};};};
        }),
    Ppxlib_Context_free =
      [0,
       [0,
        extension,
        special_function,
        special_function$0,
        Constant_kind,
        constant,
        attr_str_type_decl,
        attr_sig_type_decl,
        attr_str_type_decl_expect,
        attr_sig_type_decl_expect,
        attr_str_module_type_decl,
        attr_sig_module_type_decl,
        attr_str_module_type_decl_expe,
        attr_sig_module_type_decl_expe,
        attr_str_type_ext,
        attr_sig_type_ext,
        attr_str_type_ext_expect,
        attr_sig_type_ext_expect,
        attr_str_exception,
        attr_sig_exception,
        attr_str_exception_expect,
        attr_sig_exception_expect,
        attr_str_class_type_decl,
        attr_sig_class_type_decl,
        attr_str_class_type_decl_expec,
        attr_sig_class_type_decl_expec],
       [0, nop],
       Expect_mismatch_handler,
       map_top_down];
   runtime.caml_register_global
    (62, Ppxlib_Context_free, "Ppxlib__Context_free");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Reconcile
//# unitInfo: Requires: Astlib, Astlib__Pprintast, Ppxlib__Import, Ppxlib__Location, Ppxlib__Utils, Ppxlib_ast__Versions, Stdlib, Stdlib__Filename, Stdlib__Format, Stdlib__Printf, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    cst$4 = "# ",
    cst_a = "%a",
    cst_s = "%s\n",
    cst_Ppxlib_Reconcile_Cannot_pr =
      "Ppxlib.Reconcile: Cannot print this AST fragment using the compiler printers with OCaml < 4.14",
    cst_ppxlib_driver_locations_of =
      "ppxlib_driver: locations of generated code are overlapping, cannot reconcile",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$5,
    cst$1 = " > ",
    cst$2 = cst$5,
    cst = "\n",
    cst$0 = cst$5,
    generated_code_begin =
      "(* -----{ GENERATED CODE BEGIN }------------------------------------- *)",
    generated_code_end =
      "(* -----{ GENERATED CODE END   }------------------------------------- *)",
    Astlib = global_data.Astlib,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Ppxlib_Utils = global_data.Ppxlib__Utils,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Format = global_data.Stdlib__Format,
    Ppxlib_ast_Versions = global_data.Ppxlib_ast__Versions,
    Astlib_Pprintast = global_data.Astlib__Pprintast,
    _a_ = [0, [12, 40, [15, [12, 41, 0]]], "(%a)"],
    _b_ = [0, [15, 0], cst_a],
    _c_ = [0, [15, 0], cst_a],
    _d_ =
      [0,
       [11,
        "ppxlib_driver: the rewriting contains parts from another file.\nIt is too complicated to reconcile it with the source: ",
        [2, 0, [11, " or ", [2, 0, [11, " and ", [2, 0, 0]]]]]],
       "ppxlib_driver: the rewriting contains parts from another file.\nIt is too complicated to reconcile it with the source: %s or %s and %s"],
    _e_ = [0, "src/reconcile.ml", 164, 8],
    _f_ =
      [0,
       [11, cst_ppxlib_driver_locations_of, 0],
       cst_ppxlib_driver_locations_of],
    cst_ml = ".ml",
    cst_ppxlib_driver = "ppxlib_driver",
    _g_ = [0, [2, 0, [12, 32, [2, 0, [2, 0, 0]]]], "%s %s%s"],
    _h_ =
      [0,
       [11,
        "command exited with code ",
        [4, 0, 0, 0, [11, ": ", [2, 0, [12, 10, 0]]]]],
       "command exited with code %d: %s\n"],
    cst_mli = ".mli",
    _i_ =
      [0,
       [11, cst$4, [4, 0, 0, 0, [12, 32, [3, 0, [12, 10, [2, [1, 1], 0]]]]]],
       "# %d %S\n%*s"],
    _j_ =
      [0,
       [11, cst_Ppxlib_Reconcile_Cannot_pr, 0],
       cst_Ppxlib_Reconcile_Cannot_pr],
    _k_ = [0, [2, 0, [12, 10, 0]], cst_s],
    _l_ =
      [0,
       [11, cst$4, [4, 0, 0, 0, [12, 32, [3, 0, [12, 10, 0]]]]],
       "# %d %S\n"],
    _m_ = [0, [2, 0, [12, 10, 0]], cst_s],
    _n_ = [0, [2, 0, [12, 10, 0]], cst_s],
    cst_stdout = "<stdout>";
   function paren(pp, ppf, x){
    return caml_call4(Stdlib_Format[143], ppf, _a_, pp, x);
   }
   function make(context, start, stop, repl, param){return [0, start, stop, [0, context, repl]];
   }
   function make_text(start, stop, repl, param){return [0, start, stop, [1, repl]];
   }
   function text(use_compiler_pprint, block){
    var match = block[3];
    if(0 !== match[0]){var s$0 = match[1]; return s$0;}
    var generated = match[2], context = match[1];
    if(use_compiler_pprint)
     var
      printer =
        function(ppf, a){
         var
          _R_ = Ppxlib_ast_Versions[11],
          _S_ = _R_[1],
          _U_ = Ppxlib_ast_Versions[8],
          _V_ = _U_[1],
          _T_ = [0, [0, _S_[2], _S_[3]], _R_[2], _R_[3], _R_[4], _R_[5]],
          Ppxlib_to_compiler =
            caml_call1
             (caml_call1
               (Ppxlib_ast_Versions[13],
                [0, [0, _V_[2], _V_[3]], _U_[2], _U_[3], _U_[4], _U_[5]]),
              _T_);
         if(0 === context[0])
          switch(context[1]){
            case 0:
             var _W_ = caml_call1(Ppxlib_to_compiler[11], a);
             return caml_call2(Astlib[1][15], ppf, _W_);
            case 1:
             var _X_ = caml_call1(Ppxlib_to_compiler[12], a);
             return caml_call2(Astlib[1][13], ppf, _X_);
            case 2:
             var _Y_ = caml_call1(Ppxlib_to_compiler[13], a);
             return caml_call2(Astlib[1][16], ppf, _Y_);
            case 3:
             var _Z_ = caml_call1(Ppxlib_to_compiler[15], a);
             return caml_call2(Astlib[1][14], ppf, _Z_);
            case 4:
             var ___ = caml_call1(Ppxlib_to_compiler[4], a);
             return paren(Astlib[1][6], ppf, ___);
            case 5:
             var _$_ = caml_call1(Ppxlib_to_compiler[5], a);
             return paren(Astlib[1][3], ppf, _$_);
            case 6:
             var _aa_ = caml_call1(Ppxlib_to_compiler[16], a);
             return caml_call2(Astlib[1][10], ppf, _aa_);
            case 7:
             var _ab_ = caml_call1(Ppxlib_to_compiler[17], a);
             return caml_call2(Astlib[1][17], ppf, _ab_);
            case 8:
             var _ac_ = caml_call1(Ppxlib_to_compiler[6], a);
             return paren(Astlib[1][5], ppf, _ac_);
            case 9:
             var _ad_ = caml_call1(Ppxlib_to_compiler[18], a);
             return caml_call2(Astlib[1][24], ppf, _ad_);
            case 10:
             var _ae_ = caml_call1(Ppxlib_to_compiler[19], a);
             return caml_call2(Astlib[1][23], ppf, _ae_);
            default:
             var
              stri_a = [0, [3, 1, [0, a, 0]], Ppxlib_Location[3]],
              _af_ = caml_call1(Ppxlib_to_compiler[19], stri_a);
             return caml_call2(Astlib[1][23], ppf, _af_);
          }
         switch(context[1]){
           case 0:
            var _ag_ = caml_call1(Ppxlib_to_compiler[19], a);
            return caml_call2(Astlib[1][23], ppf, _ag_);
           case 1:
            var _ah_ = caml_call1(Ppxlib_to_compiler[18], a);
            return caml_call2(Astlib[1][24], ppf, _ah_);
           case 2:
            var _ai_ = caml_call1(Ppxlib_to_compiler[12], a);
            return caml_call2(Astlib[1][13], ppf, _ai_);
           default:
            var _aj_ = caml_call1(Ppxlib_to_compiler[15], a);
            return caml_call2(Astlib[1][14], ppf, _aj_);
         }
        };
    else{
     if(0 === context[0])
      switch(context[1]){
        case 0:
         var _N_ = Astlib_Pprintast[13]; break;
        case 1:
         var _N_ = Astlib_Pprintast[14]; break;
        case 2:
         var _N_ = Astlib_Pprintast[15]; break;
        case 3:
         var _N_ = Astlib_Pprintast[17]; break;
        case 4:
         var
          _J_ = Astlib_Pprintast[5],
          _N_ = function(_ao_, _ap_){return paren(_J_, _ao_, _ap_);};
         break;
        case 5:
         var
          _K_ = Astlib_Pprintast[2],
          _N_ = function(_am_, _an_){return paren(_K_, _am_, _an_);};
         break;
        case 6:
         var _N_ = Astlib_Pprintast[18]; break;
        case 7:
         var _N_ = Astlib_Pprintast[19]; break;
        case 8:
         var
          _L_ = Astlib_Pprintast[6],
          _N_ = function(_ak_, _al_){return paren(_L_, _ak_, _al_);};
         break;
        case 9:
         var _N_ = Astlib_Pprintast[20]; break;
        case 10:
         var _N_ = Astlib_Pprintast[21]; break;
        default: var _N_ = Astlib_Pprintast[22];
      }
     else
      switch(context[1]){
        case 0:
         var _N_ = Astlib_Pprintast[21]; break;
        case 1:
         var _N_ = Astlib_Pprintast[20]; break;
        case 2:
         var _N_ = Astlib_Pprintast[14]; break;
        default: var _N_ = Astlib_Pprintast[17];
      }
     var printer = _N_;
    }
    if(0 === generated[0])
     var
      x = generated[1],
      s = caml_call3(Stdlib_Format[147], _b_, printer, x);
    else
     var
      l = generated[1],
      s =
        caml_call3
         (Stdlib_Format[147],
          _c_,
          function(ppf, l){
           return caml_call2
                   (Ppxlib_Import[94][77],
                    l,
                    function(x){
                     caml_call2(printer, ppf, x);
                     return caml_call2(Stdlib_Format[45], ppf, 0);
                    });
          },
          l);
    function loop(s, pos){
     if(caml_call2(Ppxlib_Import[81], pos, caml_ml_string_length(s)))
      return 0;
     var match = caml_call3(Ppxlib_Import[99][64], s, pos, 10);
     if(match)
      var i = match[1], idx = i;
     else
      var idx = caml_ml_string_length(s);
     var
      len$0 = idx - pos | 0,
      len = [0, len$0],
      _Q_ = [0, cst, loop(s, idx + 1 | 0)];
     for(;;){
      if(caml_call2(Ppxlib_Import[78], len[1], 0)){
       var _O_ = caml_string_get(s, (pos + len[1] | 0) - 1 | 0) - 9 | 0;
       a:
       {
        b:
        {
         if(4 < _O_ >>> 0){
          if(23 === _O_) break b;
         }
         else if(2 < _O_ - 1 >>> 0) break b;
         var _P_ = 0;
         break a;
        }
        var _P_ = 1;
       }
       if(_P_){len[1] = len[1] - 1 | 0; continue;}
      }
      return [0, caml_call3(Ppxlib_Import[99][14], s, pos, len[1]), _Q_];
     }
    }
    var _M_ = loop(s, 0);
    return caml_call2(Ppxlib_Import[99][7], cst$0, _M_);
   }
   function count_newlines(s){
    var n = [0, 0];
    caml_call2
     (Ppxlib_Import[99][22],
      function(param){return 10 === param ? (n[1] = n[1] + 1 | 0, 0) : 0;},
      s);
    return n[1];
   }
   function skip_blank_eol(contents, pos){
    var cnum$1 = pos[4], cnum = cnum$1;
    for(;;){
     if(caml_call2(Ppxlib_Import[76], cnum, caml_ml_string_length(contents)))
      return [0, pos[1], pos[2], pos[3], cnum];
     var match = caml_string_get(contents, cnum);
     a:
     {
      if(14 <= match){
       if(32 === match) break a;
      }
      else if(9 <= match)
       switch(match - 9 | 0){
         case 1:
          return [0, pos[1], pos[2] + 1 | 0, cnum + 1 | 0, cnum + 1 | 0];
         case 0:
         case 4:
          break a;
       }
      return pos;
     }
     var cnum$0 = cnum + 1 | 0;
     cnum = cnum$0;
    }
   }
   function reconcile
   (styler,
    repls$3,
    kind,
    contents,
    input_filename,
    output,
    input_name,
    target,
    use_compiler_pprint){
    caml_call2
     (Ppxlib_Import[94][77],
      repls$3,
      function(repl){
       var
        _E_ = caml_call2(Ppxlib_Import[99][76], repl[1][1], input_name),
        _F_ = _E_ || caml_call2(Ppxlib_Import[99][76], repl[2][1], input_name);
       if(_F_){
        var
         _G_ = repl[2][1],
         _H_ = repl[1][1],
         _I_ = [0, caml_call1(Ppxlib_Location[1], input_filename)];
        caml_call5(Ppxlib_Location[5], _I_, _d_, _H_, _G_, input_name);
       }
       if(caml_call2(Ppxlib_Import[80], repl[1][4], repl[2][4])) return 0;
       throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
      });
    var
     repls =
       caml_call2
        (Ppxlib_Import[94][44],
         function(a, b){
          var d = caml_call2(Ppxlib_Import[74], a[1][4], b[2][4]);
          return caml_call2(Ppxlib_Import[76], d, 0)
                  ? caml_call2(Ppxlib_Import[74], b[2][4], a[2][4])
                  : d;
         },
         repls$3);
    a:
    if(repls){
     var repls$2 = repls[2], repl$0 = repls[1];
     b:
     {
      var prev = repl$0, repls$0 = repls$2, acc = 0;
      for(;;){
       if(! repls$0) break;
       var repls$1 = repls$0[2], repl = repls$0[1];
       if(caml_call2(Ppxlib_Import[78], prev[2][4], repl[1][4])){
        if(! caml_call2(Ppxlib_Import[81], prev[2][4], repl[2][4])) break b;
        repls$0 = repls$1;
       }
       else{
        var acc$0 = [0, prev, acc];
        prev = repl;
        repls$0 = repls$1;
        acc = acc$0;
       }
      }
      var repls$4 = caml_call1(Ppxlib_Import[94][9], [0, prev, acc]);
      break a;
     }
     var
      repls$4 =
        caml_call2(Ppxlib_Location[5], [0, [0, repl[1], prev[2], 0]], _f_);
    }
    else
     var repls$4 = 0;
    if(output)
     var fn$0 = output[1], output_name = fn$0;
    else
     var output_name = cst_stdout;
    function f(oc){
     function copy_input(pos, up_to, line, last_is_text, is_text){
      var pos$0 = last_is_text ? pos : skip_blank_eol(contents, pos);
      if(! caml_call2(Ppxlib_Import[77], pos$0[4], up_to)) return line;
      a:
      if(target && ! target[1]){
       caml_call6
        (Stdlib_Printf[1],
         oc,
         _i_,
         pos$0[2],
         input_name,
         pos$0[4] - pos$0[3] | 0,
         cst$3);
       break a;
      }
      caml_call4
       (Ppxlib_Import[102], oc, contents, pos$0[4], up_to - pos$0[4] | 0);
      var line$0 = [0, line + 1 | 0], _z_ = pos$0[4], _A_ = up_to - 1 | 0;
      if(_A_ >= _z_){
       var i = _z_;
       for(;;){
        var _C_ = caml_string_get(contents, i);
        if(caml_call2(Ppxlib_Import[86][8], _C_, 10))
         line$0[1] = line$0[1] + 1 | 0;
        var _D_ = i + 1 | 0;
        if(_A_ === i) break;
        i = _D_;
       }
      }
      var line$1 = line$0[1];
      if(! is_text){
       var _B_ = caml_string_get(contents, up_to - 1 | 0);
       if(caml_call2(Ppxlib_Import[86][12], _B_, 10)){
        caml_call2(Stdlib[65], oc, 10);
        return line$1 + 1 | 0;
       }
      }
      return line$1;
     }
     function loop$0(counter, line, pos, repls, last_is_text){
      if(! repls){
       copy_input(pos, caml_ml_string_length(contents), line, last_is_text, 0);
       return 0;
      }
      var
       repls$0 = repls[2],
       repl = repls[1],
       is_text = 0 === repl[3][0] ? 0 : 1,
       line$0 = copy_input(pos, repl[1][4], line, last_is_text, is_text);
      try{var _x_ = text(use_compiler_pprint, repl), s = _x_;}
      catch(_y_){
       var _t_ = caml_wrap_exception(_y_);
       if(_t_ !== Astlib[1][25]) throw caml_maybe_attach_backtrace(_t_, 0);
       var
        _u_ = caml_call1(Ppxlib_Location[1], input_filename)[3],
        loc = [0, repl[1], repl[2], _u_],
        s = caml_call2(Ppxlib_Location[5], [0, loc], _j_);
      }
      if(target)
       var
        _v_ =
          target[1]
           ? (caml_call3
              (Stdlib_Printf[1], oc, _k_, generated_code_begin),
             line$0 + 1 | 0)
           : (caml_call4
              (Stdlib_Printf[1], oc, _l_, line$0 + 1 | 0, output_name),
             line$0 + 1 | 0),
        line$1 = _v_;
      else
       var line$1 = line$0;
      caml_call2(Stdlib[66], oc, s);
      var line$2 = line$1 + count_newlines(s) | 0, _w_ = repl[2];
      if(counter >= 50)
       return caml_trampoline_return
               (loop_consecutive_repls$0, [0, line$2, _w_, repls$0, is_text]);
      var counter$0 = counter + 1 | 0;
      return loop_consecutive_repls$0
              (counter$0, line$2, _w_, repls$0, is_text);
     }
     function loop(line, pos, repls, last_is_text){
      return caml_trampoline(loop$0(0, line, pos, repls, last_is_text));
     }
     function loop_consecutive_repls$0
     (counter, line, pos, repls, last_is_text){
      var
       line$0 = line,
       pos$0 = pos,
       repls$0 = repls,
       last_is_text$0 = last_is_text;
      for(;;){
       if(! repls$0){
        if(counter >= 50)
         return caml_trampoline_return
                 (end_consecutive_repls,
                  [0, line$0, pos$0, repls$0, last_is_text$0]);
        var counter$1 = counter + 1 | 0;
        return end_consecutive_repls
                (counter$1, line$0, pos$0, repls$0, last_is_text$0);
       }
       var
        repls$1 = repls$0[2],
        repl = repls$0[1],
        pos$1 = last_is_text$0 ? pos$0 : skip_blank_eol(contents, pos$0);
       if(caml_call2(Ppxlib_Import[77], pos$1[4], repl[1][4])){
        if(counter >= 50)
         return caml_trampoline_return
                 (end_consecutive_repls,
                  [0, line$0, pos$1, repls$0, last_is_text$0]);
        var counter$0 = counter + 1 | 0;
        return end_consecutive_repls
                (counter$0, line$0, pos$1, repls$0, last_is_text$0);
       }
       var s = text(use_compiler_pprint, repl);
       caml_call2(Stdlib[66], oc, s);
       var
        line$1 = line$0 + count_newlines(s) | 0,
        last_is_text$1 = 0 === repl[3][0] ? 0 : 1,
        pos$2 = repl[2];
       line$0 = line$1;
       pos$0 = pos$2;
       repls$0 = repls$1;
       last_is_text$0 = last_is_text$1;
      }
     }
     function loop_consecutive_repls(line, pos, repls, last_is_text){
      return caml_trampoline
              (loop_consecutive_repls$0(0, line, pos, repls, last_is_text));
     }
     function end_consecutive_repls(counter, line, pos, repls, last_is_text){
      a:
      if(target && target[1]){
       caml_call3(Stdlib_Printf[1], oc, _m_, generated_code_end);
       break a;
      }
      if(counter >= 50)
       return caml_trampoline_return
               (loop$0, [0, line, pos, repls, last_is_text]);
      var counter$0 = counter + 1 | 0;
      return loop$0(counter$0, line, pos, repls, last_is_text);
     }
     var pos = [0, input_name, 1, 0, 0];
     if(repls$4 && 0 === repls$4[1][1][4]){
      a:
      if(target && target[1]){
       caml_call3(Stdlib_Printf[1], oc, _n_, generated_code_begin);
       break a;
      }
      return loop_consecutive_repls(1, pos, repls$4, 0);
     }
     return loop(1, pos, repls$4, 0);
    }
    if(! styler) return caml_call3(Ppxlib_Utils[1], output, 0, f);
    var
     cmd = styler[1],
     _o_ = kind ? cst_ml : cst_mli,
     match = caml_call5(Stdlib_Filename[17], 0, 0, 0, cst_ppxlib_driver, _o_),
     oc = match[2],
     tmp_fn = match[1];
    if(output)
     var
      fn = output[1],
      _p_ = caml_call1(Stdlib_Filename[21], fn),
      _q_ = caml_call2(Stdlib[28], cst$1, _p_);
    else
     var _q_ = cst$2;
    var
     _r_ = caml_call1(Stdlib_Filename[21], tmp_fn),
     cmd$0 = caml_call4(Stdlib_Printf[4], _g_, cmd, _r_, _q_),
     n =
       caml_call3
        (Ppxlib_Import[87][1],
         tmp_fn,
         function(param){
          caml_call3(Ppxlib_Import[87][1], oc, f, Stdlib[76]);
          return runtime.caml_sys_system_command(cmd$0);
         },
         runtime.caml_sys_remove),
     _s_ = caml_call2(Ppxlib_Import[79], n, 0);
    return _s_
            ? (caml_call3
               (Stdlib_Printf[3], _h_, n, cmd$0),
              caml_call1(Stdlib[99], 1))
            : _s_;
   }
   var Ppxlib_Reconcile = [0, [0], [0, make, make_text], reconcile];
   runtime.caml_register_global(36, Ppxlib_Reconcile, "Ppxlib__Reconcile");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Quoter
//# unitInfo: Requires: Ppxlib__Ast_builder, Ppxlib__Import, Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "__",
    cst$0 = "()",
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib = global_data.Stdlib;
   function create(param){return [0, 0, 0];}
   function sanitize(t, e){
    var bindings = t[2];
    if(! bindings) return e;
    var Ast = caml_call1(Ppxlib_Ast_builder[3], e[2]);
    return caml_call3(Ast[118], 0, bindings, e);
   }
   function quote(t, e){
    var
     loc = e[2],
     Ast = caml_call1(Ppxlib_Ast_builder[3], loc),
     _a_ = caml_call1(Ppxlib_Import[92][2], t[1]),
     name = caml_call2(Stdlib[28], cst, _a_),
     _b_ = e[1];
    a:
    {
     if(typeof _b_ !== "number" && 0 === _b_[0]){
      var quoted_expr$0 = caml_call1(Ast[189], name), binding_expr$0 = e;
      break a;
     }
     var
      unit = caml_call2(Ppxlib_Ast_builder[1][1][5], loc, cst$0),
      _c_ = caml_call2(Ast[210], unit, 0),
      binding_expr = caml_call4(Ast[116], 0, 0, _c_, e),
      _d_ = [0, Ast[187], 0],
      _e_ = caml_call1(Ast[189], name),
      quoted_expr = caml_call2(Ast[191], _e_, _d_),
      quoted_expr$0 = quoted_expr,
      binding_expr$0 = binding_expr;
    }
    var
     pat = caml_call1(Ast[190], name),
     binding = caml_call2(Ast[4], pat, binding_expr$0);
    t[2] = [0, binding, t[2]];
    t[1] = t[1] + 1 | 0;
    return quoted_expr$0;
   }
   var Ppxlib_Quoter = [0, create, quote, sanitize];
   runtime.caml_register_global(5, Ppxlib_Quoter, "Ppxlib__Quoter");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Merlin_helpers
//# unitInfo: Requires: Ppxlib__Location, Ppxlib_ast__Ast_helper_lite
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_ast_Ast_helper_lite = global_data.Ppxlib_ast__Ast_helper_lite;
   function mk_attr_noloc(txt){
    return caml_call2
            (Ppxlib_ast_Ast_helper_lite[4][1],
             0,
             [0, txt, Ppxlib_Location[3]]);
   }
   var
    hide_attribute = caml_call1(mk_attr_noloc("merlin.hide"), [0, 0]),
    focus_attribute = caml_call1(mk_attr_noloc("merlin.focus"), [0, 0]);
   function hide_pattern(p){
    var ppat_attributes = p[4];
    return [0, p[1], p[2], p[3], [0, hide_attribute, ppat_attributes]];
   }
   function focus_pattern(p){
    var ppat_attributes = p[4];
    return [0, p[1], p[2], p[3], [0, focus_attribute, ppat_attributes]];
   }
   function hide_expression(e){
    var pexp_attributes = e[4];
    return [0, e[1], e[2], e[3], [0, hide_attribute, pexp_attributes]];
   }
   function focus_expression(e){
    var pexp_attributes = e[4];
    return [0, e[1], e[2], e[3], [0, focus_attribute, pexp_attributes]];
   }
   var
    Ppxlib_Merlin_helpers =
      [0,
       hide_attribute,
       focus_attribute,
       hide_pattern,
       focus_pattern,
       hide_expression,
       focus_expression];
   runtime.caml_register_global
    (6, Ppxlib_Merlin_helpers, "Ppxlib__Merlin_helpers");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Location_check
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_traverse, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Ppxlib__Merlin_helpers, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "@ ",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field$0 = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type$0 = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field$0 = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration$0 = "constructor_declaration",
    cst_core_type$0 = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_exception$1 = "exception",
    cst_expression$0 = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor$0 = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration$0 = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding$0 = "module_binding",
    cst_module_declaration$0 = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution$0 = "module_substitution",
    cst_module_type$0 = "module_type",
    cst_module_type_declaration$0 = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field$0 = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern$0 = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field$0 = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item$0 = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item$0 = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_declaration$0 = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension$0 = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding$0 = "value_binding",
    cst_value_description$0 = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = ".",
    cst$1 = "()",
    cst$2 = "()<-",
    cst$3 = "[]",
    cst$4 = "[]<-",
    cst$5 = "{}",
    cst$6 = "{}<-",
    cst = " ",
    partial = [11, " found at:", [17, [0, cst$7, 1, 0], [15, 0]]],
    shared =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description$0,
       cst_value_binding$0,
       cst_type_kind,
       cst_type_extension$0,
       cst_type_exception,
       cst_type_declaration$0,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item$0,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item$0,
       cst_signature,
       cst_row_field_desc,
       cst_row_field$0,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern$0,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field$0,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration$0,
       cst_module_type$0,
       cst_module_substitution$0,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration$0,
       cst_module_binding$0,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration$0,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor$0,
       cst_extension,
       cst_expression_desc,
       cst_expression$0,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type$0,
       cst_constructor_declaration$0,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field$0,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type$0,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field$0,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    empty = [0, 0, 0, 0],
    Ppxlib_Import = global_data.Ppxlib__Import,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Longident = global_data.Ppxlib__Longident,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Stdlib = global_data.Stdlib,
    Ppxlib_Merlin_helpers = global_data.Ppxlib__Merlin_helpers,
    Assert_failure = global_data.Assert_failure,
    _d_ =
      [0,
       [11,
        "invalid output from ppx, ",
        [2,
         0,
         [11,
          " overlaps with ",
          [2, 0, [11, " at location:", [17, 4, [15, 0]]]]]]],
       "invalid output from ppx, %s overlaps with %s at location:@.%a"];
   function _c_(ranges, node){
    var node_loc = node[2], node_name = node[1];
    if(! ranges) return [0, node, 0];
    var
     xs = ranges[2],
     x = ranges[1],
     x_loc = x[2],
     x_name = x[1],
     _bE_ = caml_call2(Ppxlib_Location[9], node_loc[1], x_loc[2]);
    if(caml_call2(Ppxlib_Import[81], _bE_, 0)) return [0, node, [0, x, xs]];
    var _bF_ = caml_call2(Ppxlib_Location[9], x_loc[1], node_loc[2]);
    return caml_call2(Ppxlib_Import[81], _bF_, 0)
            ? [0, x, _c_(xs, node)]
            : caml_call6
              (Ppxlib_Location[5],
               [0, node_loc],
               _d_,
               node_name,
               x_name,
               Ppxlib_Location[8],
               x_loc);
   }
   function min_pos(p1, p2){
    if(p1){
     if(p2){
      var p2$0 = p2[1], p1$0 = p1[1];
      return [0, caml_call2(Ppxlib_Location[10], p1$0, p2$0)];
     }
     var p = p1;
    }
    else{if(! p2) return 0; var p = p2;}
    return p;
   }
   function max_pos(p1, p2){
    if(p1){
     if(p2){
      var p2$0 = p2[1], p1$0 = p1[1];
      return [0, caml_call2(Ppxlib_Location[11], p1$0, p2$0)];
     }
     var p = p1;
    }
    else{if(! p2) return 0; var p = p2;}
    return p;
   }
   function insert(node_name, loc, t){
    var
     _bC_ = _c_(t[3], [0, node_name, loc]),
     _bD_ = max_pos([0, loc[2]], t[2]);
    return [0, min_pos([0, loc[1]], t[1]), _bD_, _bC_];
   }
   function all_payloads_inside_parent(loc){
    return caml_call1
            (Ppxlib_Import[94][21],
             function(attr){
              var _bB_ = caml_call2(Ppxlib_Location[9], loc[2], attr[3][2]);
              return caml_call2(Ppxlib_Import[81], _bB_, 0);
             });
   }
   var
    file = [0, 0],
    same_file_so_far = [0, 1],
    _e_ = [0, "src/location_check.ml", 82, 8],
    cst_none = "_none_",
    _f_ =
      [0,
       [11,
        "invalid output from ppx:",
        [17,
         [0, cst$7, 1, 0],
         [11,
          "this ",
          [2,
           0,
           [11,
            " is built from a",
            [2,
             0,
             [11,
              " whose location is outside of this node's.",
              [17, 4, [11, "Child ", [2, 0, partial]]]]]]]]]],
       "invalid output from ppx:@ this %s is built from a%s whose location is outside of this node's.@.Child %s found at:@ %a"],
    cst_n = "n ";
   function should_ignore(loc, attrs){
    var fname = loc[1][1];
    if(caml_call2(Ppxlib_Import[99][72], fname, cst_none))
     var _bz_ = 1;
    else{
     var match = file[1];
     if(match)
      var
       orig_fname = match[1],
       _bx_ = caml_call2(Ppxlib_Import[99][72], orig_fname, fname),
       _by_ = _bx_ || (same_file_so_far[1] = 0, 0),
       _bz_ = _by_;
     else{file[1] = [0, fname]; var _bz_ = 1;}
    }
    var _bA_ = 1 - _bz_;
    return _bA_
            ? _bA_
            : caml_call2
              (Ppxlib_Import[94][22],
               function(attr){
                return caml_call2
                        (Ppxlib_Import[99][72],
                         attr[1][1],
                         Ppxlib_Merlin_helpers[1][1][1]);
               },
               attrs);
   }
   function extract_constraint(e){
    var match = e[1];
    a:
    if(typeof match !== "number"){
     switch(match[0]){
       case 19:
        var ct = match[2], e$0 = match[1]; break;
       case 20:
        var ct = match[3], e$0 = match[1]; break;
       case 31:
        var exp = match[2], name = match[1], _bv_ = extract_constraint(exp);
        return caml_call2
                (Ppxlib_Import[95][3],
                 _bv_,
                 function(param){
                  var ct = param[2], exp = param[1], _bw_ = e[2];
                  return [0,
                          [0, [31, name, exp], [0, _bw_[1], _bw_[2], 1], e[3], e[4]],
                          ct];
                 });
       default: break a;
     }
     return [0, [0, e$0, ct]];
    }
    return 0;
   }
   function do_check(node_name, node_loc, childrens_locs, siblings_locs){
    if(! same_file_so_far[1]) return empty;
    if(! node_loc[3]){
     var _bj_ = childrens_locs[1], match$0 = childrens_locs[2];
     a:
     {
      if(_bj_){
       if(match$0){
        var
         max_pos$0 = match$0[1],
         min_pos$0 = _bj_[1],
         _bk_ = caml_call2(Ppxlib_Location[9], min_pos$0, node_loc[1]),
         _bl_ = caml_call2(Ppxlib_Import[81], _bk_, 0);
        if(_bl_){
         var
          _bm_ = caml_call2(Ppxlib_Location[9], max_pos$0, node_loc[2]),
          _bn_ = caml_call2(Ppxlib_Import[80], _bm_, 0);
         break a;
        }
        var _bn_ = _bl_;
        break a;
       }
      }
      else if(! match$0){var _bn_ = 1; break a;}
      throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
     }
     if(_bn_) return insert(node_name, node_loc, siblings_locs);
     var
      match$1 =
        caml_call2
         (Ppxlib_Import[94][27],
          function(param){
           var
            l = param[2],
            _bs_ = caml_call2(Ppxlib_Location[9], node_loc[1], l[1]),
            _bt_ = caml_call2(Ppxlib_Import[78], _bs_, 0);
           if(_bt_) return _bt_;
           var _bu_ = caml_call2(Ppxlib_Location[9], node_loc[2], l[2]);
           return caml_call2(Ppxlib_Import[77], _bu_, 0);
          },
          childrens_locs[3]),
      child_loc = match$1[2],
      child_name = match$1[1],
      _bp_ = runtime.caml_string_unsafe_get(child_name, 0) - 97 | 0;
     a:
     {
      var _bo_ = Ppxlib_Location[8];
      if(20 >= _bp_ >>> 0)
       switch(_bp_){
         case 0:
         case 4:
         case 8:
         case 14:
         case 20:
          var _bq_ = cst_n; break a;
       }
      var _bq_ = cst;
     }
     var _br_ = caml_call2(Stdlib[28], _bq_, child_name);
     return caml_call7
             (Ppxlib_Location[5],
              [0, node_loc],
              _f_,
              node_name,
              _br_,
              child_name,
              _bo_,
              child_loc);
    }
    var
     l2 = siblings_locs[3],
     l1 = childrens_locs[3],
     xs = l1,
     ys = l2,
     n = 42;
    for(;;){
     a:
     {
      if(xs && 0 !== n){
       if(ys){
        var ys$0 = ys[2], xs$0 = xs[2], n$0 = n - 1 | 0;
        xs = xs$0;
        ys = ys$0;
        n = n$0;
        continue;
       }
       var match = [0, l1, l2];
       break a;
      }
      var match = [0, l2, l1];
     }
     var
      l = match[2],
      init = match[1],
      ranges = caml_call3(Ppxlib_Import[94][17], _c_, init, l),
      _bi_ = max_pos(childrens_locs[2], siblings_locs[2]);
     return [0, min_pos(childrens_locs[1], siblings_locs[1]), _bi_, ranges];
    }
   }
   var
    _g_ = [0, 0],
    _a_ =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field$0,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type$0,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field$0,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration$0,
       cst_core_type$0,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression$0,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor$0,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration$0,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding$0,
       cst_module_declaration$0,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution$0,
       cst_module_type$0,
       cst_module_type_declaration$0,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field$0,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern$0,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field$0,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item$0,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item$0,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration$0,
       cst_type_exception,
       cst_type_extension$0,
       cst_type_kind,
       cst_value_binding$0,
       cst_value_description$0,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    _b_ =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding$0,
       cst_extension_constructor_kind,
       cst_core_type$0,
       cst_structure,
       cst_list,
       cst_label_declaration$0,
       cst_module_binding$0,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item$0,
       cst_extension_constructor$0,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description$0,
       cst_module_declaration$0,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension$0,
       cst_class_field_kind,
       cst_module_type_declaration$0,
       cst_arg_label,
       cst_row_field$0,
       cst_longident,
       cst_string,
       cst_pattern$0,
       cst_include_description,
       cst_signature,
       cst_class_type_field$0,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field$0,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration$0,
       cst_constructor_declaration$0,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution$0,
       cst_class_description,
       cst_expression$0,
       cst_class_type$0,
       cst_structure_item$0,
       cst_include_infos,
       cst_class_declaration,
       cst_module_type$0,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field$0],
    cst_exception = cst_exception$1,
    cst_exception$0 = cst_exception$1,
    cst_pattern = cst_pattern$0,
    cst_expression = cst_expression$0,
    cst_core_type = "core type",
    cst_module_expression = "module expression",
    cst_module_type = "module type",
    cst_value_binding = "value binding",
    cst_module_binding = "module binding",
    cst_structure_item = "structure item",
    cst_include = "include",
    cst_open = "open",
    cst_module_type_declaration = "module type declaration",
    cst_module_substitution = "module substitution",
    cst_module_declaration = "module declaration",
    cst_signature_item = "signature item",
    cst_class_field = "class field",
    cst_class_expression = "class expression",
    cst_class = "class",
    cst_class_type_field = "class type field",
    cst_class_type = "class type",
    cst_extension_constructor = "extension constructor",
    cst_type_extension = "type extension",
    cst_constructor_declaration = "constructor declaration",
    cst_label_declaration = "label declaration",
    cst_type_declaration = "type declaration",
    cst_value_description = "value description",
    cst_binding_operator = "binding operator",
    cst_object_field = "object field",
    cst_row_field = "row field",
    cst_ident = "ident";
   function enforce_invariants(fname){
    file[1] = fname;
    if(! _g_[1]){
     var
      _h_ = caml_call1(CamlinternalOO[16], _b_),
      _i_ = caml_call2(CamlinternalOO[8], _h_, shared),
      _o_ = _i_[9],
      _t_ = _i_[25],
      _u_ = _i_[26],
      _v_ = _i_[28],
      _w_ = _i_[29],
      _D_ = _i_[40],
      _H_ = _i_[44],
      _I_ = _i_[47],
      _K_ = _i_[49],
      _N_ = _i_[60],
      _O_ = _i_[62],
      _P_ = _i_[63],
      _R_ = _i_[68],
      _V_ = _i_[77],
      _Z_ = _i_[85],
      _$_ = _i_[93],
      _j_ = _i_[1],
      _k_ = _i_[4],
      _l_ = _i_[5],
      _m_ = _i_[7],
      _n_ = _i_[8],
      _p_ = _i_[13],
      _q_ = _i_[15],
      _r_ = _i_[17],
      _s_ = _i_[20],
      _x_ = _i_[30],
      _y_ = _i_[34],
      _z_ = _i_[36],
      _A_ = _i_[37],
      _B_ = _i_[38],
      _C_ = _i_[39],
      _E_ = _i_[41],
      _F_ = _i_[42],
      _G_ = _i_[43],
      _J_ = _i_[48],
      _L_ = _i_[51],
      _M_ = _i_[55],
      _Q_ = _i_[67],
      _S_ = _i_[69],
      _T_ = _i_[74],
      _U_ = _i_[75],
      _W_ = _i_[80],
      _X_ = _i_[83],
      _Y_ = _i_[84],
      ___ = _i_[92],
      _aa_ = _i_[94],
      _ab_ =
        caml_call6
         (CamlinternalOO[18], _h_, 0, 0, _a_, Ppxlib_Ast_traverse[3], 0),
      _ap_ = _ab_[36],
      _av_ = _ab_[57],
      _ad_ = _ab_[4],
      _ae_ = _ab_[6],
      _af_ = _ab_[13],
      _ag_ = _ab_[14],
      _ah_ = _ab_[15],
      _ai_ = _ab_[18],
      _aj_ = _ab_[21],
      _ak_ = _ab_[23],
      _al_ = _ab_[24],
      _am_ = _ab_[29],
      _an_ = _ab_[30],
      _ao_ = _ab_[35],
      _aq_ = _ab_[38],
      _ar_ = _ab_[43],
      _as_ = _ab_[47],
      _at_ = _ab_[55],
      _au_ = _ab_[56],
      _aw_ = _ab_[58],
      _ax_ = _ab_[59],
      _ay_ = _ab_[60],
      _az_ = _ab_[61],
      _aA_ = _ab_[64],
      _aB_ = _ab_[68],
      _aC_ = _ab_[72],
      _aD_ = _ab_[73],
      _aE_ = _ab_[78],
      _aF_ = _ab_[81],
      _aG_ = _ab_[85],
      _aH_ = _ab_[89],
      _aI_ = _ab_[91],
      _aJ_ = _ab_[93],
      _aK_ = _ab_[94],
      _aL_ = _ab_[97],
      _ac_ = _ab_[1];
     caml_call2
      (CamlinternalOO[11],
       _h_,
       [0,
        _H_,
        function(self_1, x, siblings){
         return x[2][3] ? siblings : insert(cst_ident, x[2], siblings);
        },
        _s_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_aE_, self_1), x, empty);
         return do_check(cst_row_field, x[2], childrens_locs, siblings_locs);
        },
        _y_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_aA_, self_1), x, empty);
         return do_check
                 (cst_object_field, x[2], childrens_locs, siblings_locs);
        },
        ___,
        function(self_1, x, siblings_locs){
         var childrens_locs = caml_call2(caml_call1(_ae_, self_1), x, empty);
         return do_check
                 (cst_binding_operator, x[4], childrens_locs, siblings_locs);
        },
        _k_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[5], x[4])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_aK_, self_1), x, empty);
         return do_check
                 (cst_value_description, x[5], childrens_locs, siblings_locs);
        },
        _o_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[8], x[7])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_aH_, self_1), x, empty);
         return do_check
                 (cst_type_declaration, x[8], childrens_locs, siblings_locs);
        },
        _L_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[5])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_as_, self_1), x, empty);
         return do_check
                 (cst_label_declaration, x[4], childrens_locs, siblings_locs);
        },
        _S_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[5], x[6])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_am_, self_1), x, empty);
         return do_check
                 (cst_constructor_declaration,
                  x[5],
                  childrens_locs,
                  siblings_locs);
        },
        _m_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[5], x[6])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_aI_, self_1), x, empty);
         return do_check
                 (cst_type_extension, x[5], childrens_locs, siblings_locs);
        },
        _N_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[3], x[4])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_aq_, self_1), x, empty);
         return do_check
                 (cst_extension_constructor,
                  x[3],
                  childrens_locs,
                  siblings_locs);
        },
        _V_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_aj_, self_1), x, empty);
         return do_check(cst_class_type, x[2], childrens_locs, siblings_locs);
        },
        _T_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_al_, self_1), x, empty);
         return do_check
                 (cst_class_type_field, x[2], childrens_locs, siblings_locs);
        },
        _W_,
        function(self_1, f, x, siblings_locs){
         if(should_ignore(x[5], x[6])) return siblings_locs;
         var
          childrens_locs = caml_call3(caml_call1(_ai_, self_1), f, x, empty);
         return do_check(cst_class, x[5], childrens_locs, siblings_locs);
        },
        _Z_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_af_, self_1), x, empty);
         return do_check
                 (cst_class_expression, x[2], childrens_locs, siblings_locs);
        },
        _X_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_ah_, self_1), x, empty);
         return do_check(cst_class_field, x[2], childrens_locs, siblings_locs);
        },
        _r_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], 0)) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_aF_, self_1), x, empty);
         return do_check
                 (cst_signature_item, x[2], childrens_locs, siblings_locs);
        },
        _F_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_au_, self_1), x, empty);
         return do_check
                 (cst_module_declaration, x[4], childrens_locs, siblings_locs);
        },
        _C_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_ax_, self_1), x, empty);
         return do_check
                 (cst_module_substitution,
                  x[4],
                  childrens_locs,
                  siblings_locs);
        },
        _A_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_az_, self_1), x, empty);
         return do_check
                 (cst_module_type_declaration,
                  x[4],
                  childrens_locs,
                  siblings_locs);
        },
        _x_,
        function(self_1, f, x, siblings_locs){
         if(should_ignore(x[3], x[4])) return siblings_locs;
         var
          childrens_locs = caml_call3(caml_call1(_aB_, self_1), f, x, empty);
         return do_check(cst_open, x[3], childrens_locs, siblings_locs);
        },
        _M_,
        function(self_1, f, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var
          childrens_locs = caml_call3(caml_call1(_ar_, self_1), f, x, empty);
         return do_check(cst_include, x[2], childrens_locs, siblings_locs);
        },
        _p_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], 0)) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_aG_, self_1), x, empty);
         return do_check
                 (cst_structure_item, x[2], childrens_locs, siblings_locs);
        },
        _G_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[3])) return siblings_locs;
         var childrens_locs = caml_call2(caml_call1(_at_, self_1), x, empty);
         return do_check
                 (cst_module_binding, x[4], childrens_locs, siblings_locs);
        },
        _l_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[4], x[3])) return siblings_locs;
         var match = x[1][1], match$0 = extract_constraint(x[2]);
         a:
         {
          b:
          if(typeof match !== "number" && 10 === match[0]){
           var _bg_ = match[2][1];
           if(typeof _bg_ !== "number" && 8 === _bg_[0]){
            if(! match$0) break b;
            var
             match$1 = match$0[1],
             cte = match$1[2],
             pvb_expr = match$1[1],
             ctp = _bg_[2],
             pvb_pat = match[1],
             _bh_ = caml_call2(Ppxlib_Location[12], ctp[2], cte[2]);
            if(! caml_call2(Ppxlib_Import[76], _bh_, 0)) break b;
            var acc = caml_call3(self_1[1][1 + _u_], self_1, pvb_pat, empty);
            caml_call3(self_1[1][1 + _R_], self_1, ctp, acc);
            var
             acc$0 = caml_call3(self_1[1][1 + _P_], self_1, pvb_expr, acc),
             acc$1 = caml_call3(self_1[1][1 + _$_], self_1, x[3], acc$0),
             childrens_locs = acc$1;
            break a;
           }
          }
          var childrens_locs = caml_call2(caml_call1(_aJ_, self_1), x, empty);
         }
         return do_check
                 (cst_value_binding, x[4], childrens_locs, siblings_locs);
        },
        _B_,
        function(self_1, x$0, siblings_locs){
         if(should_ignore(x$0[2], x$0[3])) return siblings_locs;
         var outmost_loc = x$0[2];
         function aux(x){
          var _bd_ = x[1];
          if(2 !== _bd_[0]) return x;
          var match = _bd_[1];
          if(! match){
           var initial_res$0 = _bd_[2], res$1 = aux(initial_res$0);
           return res$1 === initial_res$0 ? x : [0, [2, 0, res$1], x[2], x[3]];
          }
          var
           initial_res = _bd_[2],
           mty = match[2],
           id = match[1],
           res = aux(initial_res),
           _be_ = caml_call2(Ppxlib_Location[12], outmost_loc, res[2]);
          if(! caml_call2(Ppxlib_Import[76], _be_, 0))
           return res === initial_res
                   ? x
                   : [0, [2, [0, id, mty], res], x[2], x[3]];
          var
           loc_start = mty[2][2],
           _bf_ = res[2],
           res$0 = [0, res[1], [0, loc_start, _bf_[2], _bf_[3]], res[3]];
          return [0, [2, [0, id, mty], res$0], x[2], x[3]];
         }
         var x = aux(x$0), _bc_ = x[3];
         if(caml_call1(all_payloads_inside_parent(x[2]), _bc_))
          var childrens_locs = caml_call2(caml_call1(_ay_, self_1), x, empty);
         else{
          var acc = caml_call3(self_1[1][1 + _z_], self_1, x[1], empty);
          caml_call3(self_1[1][1 + _$_], self_1, x[3], acc);
          var childrens_locs = acc;
         }
         return do_check(cst_module_type, x[2], childrens_locs, siblings_locs);
        },
        _E_,
        function(self_1, x$0, siblings_locs){
         if(should_ignore(x$0[2], x$0[3])) return siblings_locs;
         var outmost_loc = x$0[2];
         function aux(x){
          var _a$_ = x[1];
          if(2 !== _a$_[0]) return x;
          var match = _a$_[1];
          if(! match){
           var initial_res$0 = _a$_[2], res$1 = aux(initial_res$0);
           return res$1 === initial_res$0 ? x : [0, [2, 0, res$1], x[2], x[3]];
          }
          var
           initial_res = _a$_[2],
           mty = match[2],
           id = match[1],
           res = aux(initial_res),
           _ba_ = caml_call2(Ppxlib_Location[12], outmost_loc, res[2]);
          if(! caml_call2(Ppxlib_Import[76], _ba_, 0))
           return res === initial_res
                   ? x
                   : [0, [2, [0, id, mty], res], x[2], x[3]];
          var
           loc_start = mty[2][2],
           _bb_ = res[2],
           res$0 = [0, res[1], [0, loc_start, _bb_[2], _bb_[3]], res[3]];
          return [0, [2, [0, id, mty], res$0], x[2], x[3]];
         }
         var x = aux(x$0), _a__ = x[3];
         if(caml_call1(all_payloads_inside_parent(x[2]), _a__))
          var childrens_locs = caml_call2(caml_call1(_av_, self_1), x, empty);
         else{
          var acc = caml_call3(self_1[1][1 + _D_], self_1, x[1], empty);
          caml_call3(self_1[1][1 + _$_], self_1, x[3], acc);
          var childrens_locs = acc;
         }
         return do_check
                 (cst_module_expression, x[2], childrens_locs, siblings_locs);
        },
        _R_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[4])) return siblings_locs;
         var _a9_ = x[4];
         if(caml_call1(all_payloads_inside_parent(x[2]), _a9_))
          var childrens_locs = caml_call2(caml_call1(_an_, self_1), x, empty);
         else{
          var acc = caml_call3(self_1[1][1 + _Q_], self_1, x[1], empty);
          caml_call3(self_1[1][1 + _$_], self_1, x[4], acc);
          var childrens_locs = acc;
         }
         return do_check(cst_core_type, x[2], childrens_locs, siblings_locs);
        },
        _P_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[4])) return siblings_locs;
         var _a8_ = x[4];
         if(caml_call1(all_payloads_inside_parent(x[2]), _a8_))
          var childrens_locs = caml_call2(caml_call1(_ao_, self_1), x, empty);
         else{
          var acc = caml_call3(self_1[1][1 + _O_], self_1, x[1], empty);
          caml_call3(self_1[1][1 + _$_], self_1, x[4], acc);
          var childrens_locs = acc;
         }
         return do_check(cst_expression, x[2], childrens_locs, siblings_locs);
        },
        _u_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[4])) return siblings_locs;
         var _a7_ = x[4];
         if(caml_call1(all_payloads_inside_parent(x[2]), _a7_))
          var childrens_locs = caml_call2(caml_call1(_aC_, self_1), x, empty);
         else{
          var acc = caml_call3(self_1[1][1 + _t_], self_1, x[1], empty);
          caml_call3(self_1[1][1 + _$_], self_1, x[4], acc);
          var childrens_locs = acc;
         }
         return do_check(cst_pattern, x[2], childrens_locs, siblings_locs);
        },
        _n_,
        function(self_1, x, siblings_locs){
         if(should_ignore(x[2], x[3])) return siblings_locs;
         var
          childs_locs = caml_call3(self_1[1][1 + _N_], self_1, x[1], empty),
          attrs_locs = caml_call3(self_1[1][1 + _$_], self_1, x[3], empty);
         do_check(cst_exception, x[2], attrs_locs, siblings_locs);
         return do_check(cst_exception$0, x[2], childs_locs, siblings_locs);
        },
        _j_,
        function(self_1, x, siblings_loc){
         switch(x[0]){
           case 0:
           case 4:
            var tdecl = x[2];
            return caml_call3(self_1[1][1 + _o_], self_1, tdecl, siblings_loc);
           default:
            return caml_call2(caml_call1(_aL_, self_1), x, siblings_loc);
         }
        },
        _O_,
        function(self_1, x, acc){
         if(typeof x !== "number")
          switch(x[0]){
            case 5:
             var _aW_ = x[1][1];
             if(typeof _aW_ !== "number" && 0 === _aW_[0]){
              var args = x[2], lid = _aW_[1][1];
              try{var id = caml_call1(Ppxlib_Longident[4], lid);}
              catch(_a6_){return caml_call2(caml_call1(_ap_, self_1), x, acc);
              }
              a:
              if(caml_call2(Ppxlib_Import[99][58], id, cst$0)){
               if
                (!
                 caml_call2(Ppxlib_Import[99][59], id, cst$1)
                 &&
                  !
                  caml_call2(Ppxlib_Import[99][59], id, cst$2)
                  &&
                   !
                   caml_call2(Ppxlib_Import[99][59], id, cst$3)
                   &&
                    !
                    caml_call2(Ppxlib_Import[99][59], id, cst$4)
                    &&
                     !
                     caml_call2(Ppxlib_Import[99][59], id, cst$5)
                     && ! caml_call2(Ppxlib_Import[99][59], id, cst$6))
                break a;
               return caml_call4
                       (self_1[1][1 + _K_],
                        self_1,
                        function(param){
                         var e = param[2];
                         return caml_call2(self_1[1][1 + _P_], self_1, e);
                        },
                        args,
                        acc);
              }
              return caml_call2(caml_call1(_ap_, self_1), x, acc);
             }
             break;
            case 11:
             var
              expr_o = x[2],
              labels = x[1],
              acc$0 =
                caml_call4
                 (self_1[1][1 + _K_],
                  self_1,
                  function(param, acc){
                   var
                    e = param[2],
                    lid = param[1],
                    _a4_ = caml_call2(Ppxlib_Location[9], lid[2][1], e[2][1]);
                   if(! caml_call2(Ppxlib_Import[76], _a4_, 0)){
                    var
                     acc$0 = caml_call3(self_1[1][1 + _H_], self_1, lid, acc),
                     acc$1 = caml_call3(self_1[1][1 + _P_], self_1, e, acc$0);
                    return acc$1;
                   }
                   var _a5_ = caml_call2(Ppxlib_Location[12], lid[2], e[2]);
                   if(caml_call2(Ppxlib_Import[76], _a5_, 0))
                    return caml_call3(self_1[1][1 + _H_], self_1, lid, acc);
                   var match = e[1];
                   if(typeof match !== "number" && 19 === match[0]){
                    var c = match[2], e$0 = match[1];
                    caml_call3(self_1[1][1 + _R_], self_1, c, acc);
                    return caml_call3(self_1[1][1 + _P_], self_1, e$0, acc);
                   }
                   return caml_call3(self_1[1][1 + _P_], self_1, e, acc);
                  },
                  labels,
                  acc),
              _aX_ = caml_call1(self_1[1][1 + _P_], self_1);
             return caml_call4
                     (self_1[1][1 + _w_], self_1, _aX_, expr_o, acc$0);
            case 29:
             var _aY_ = x[2];
             if(_aY_){
              var match = _aY_[1][1];
              if(typeof match !== "number" && 8 === match[0]){
               var ct = match[2], e = x[1], match$0 = extract_constraint(e);
               if(match$0){
                var
                 match$1 = match$0[1],
                 cte = match$1[2],
                 e$0 = match$1[1],
                 _aZ_ = caml_call2(Ppxlib_Location[12], cte[2], ct[2]);
                if(caml_call2(Ppxlib_Import[76], _aZ_, 0)){
                 var
                  acc$1 = caml_call3(self_1[1][1 + _P_], self_1, e$0, acc),
                  acc$2 = caml_call3(self_1[1][1 + _R_], self_1, ct, acc$1);
                 return acc$2;
                }
               }
               return caml_call2(caml_call1(_ap_, self_1), x, acc);
              }
             }
             break;
            case 33:
             var opn = x[1], match$2 = opn[1][1];
             if(0 === match$2[0]){
              var
               e$1 = x[2],
               lid$0 = match$2[1],
               _a0_ = caml_call2(Ppxlib_Location[9], lid$0[2][1], e$1[2][1]);
              if(caml_call2(Ppxlib_Import[76], _a0_, 0)){
               var
                _a1_ = caml_call2(Ppxlib_Location[9], lid$0[2][2], e$1[2][2]);
               if(caml_call2(Ppxlib_Import[79], _a1_, 0)){
                var
                 _a2_ = e$1[2],
                 e_loc = [0, lid$0[2][2], _a2_[2], _a2_[3]],
                 _a3_ = [33, opn, [0, e$1[1], e_loc, e$1[3], e$1[4]]];
                return caml_call2(caml_call1(_ap_, self_1), _a3_, acc);
               }
              }
             }
             break;
          }
         return caml_call2(caml_call1(_ap_, self_1), x, acc);
        },
        _t_,
        function(self_1, x, acc){
         if(typeof x !== "number")
          switch(x[0]){
            case 7:
             var labels = x[1];
             return caml_call4
                     (self_1[1][1 + _K_],
                      self_1,
                      function(param, acc){
                       var
                        pat = param[2],
                        lid = param[1],
                        _aU_ = caml_call2(Ppxlib_Location[9], lid[2][1], pat[2][1]);
                       if(! caml_call2(Ppxlib_Import[76], _aU_, 0)){
                        var
                         acc$0 = caml_call3(self_1[1][1 + _H_], self_1, lid, acc),
                         acc$1 = caml_call3(self_1[1][1 + _u_], self_1, pat, acc$0);
                        return acc$1;
                       }
                       var _aV_ = caml_call2(Ppxlib_Location[12], lid[2], pat[2]);
                       if(caml_call2(Ppxlib_Import[76], _aV_, 0))
                        return caml_call3(self_1[1][1 + _H_], self_1, lid, acc);
                       var match = pat[1];
                       if(typeof match !== "number" && 10 === match[0]){
                        var c = match[2], p = match[1];
                        caml_call3(self_1[1][1 + _R_], self_1, c, acc);
                        return caml_call3(self_1[1][1 + _u_], self_1, p, acc);
                       }
                       return caml_call3(self_1[1][1 + _u_], self_1, pat, acc);
                      },
                      labels,
                      acc);
            case 10:
             var match = x[1][1];
             if(typeof match !== "number" && 13 === match[0]){
              var
               b = x[2],
               a = match[1],
               _aS_ = caml_call1(self_1[1][1 + _q_], self_1),
               _aT_ = caml_call2(self_1[1][1 + _w_], self_1, _aS_),
               acc$0 = caml_call4(self_1[1][1 + _J_], self_1, _aT_, a, acc);
              return caml_call3(self_1[1][1 + _R_], self_1, b, acc$0);
             }
             break;
          }
         return caml_call2(caml_call1(_aD_, self_1), x, acc);
        },
        _D_,
        function(self_1, x, acc){
         if(3 === x[0]){
          var _aP_ = x[2], _aQ_ = _aP_[1];
          if(1 === _aQ_[0] && ! _aQ_[1]){
           var
            pmod_loc = _aP_[2],
            m = x[1],
            _aR_ = caml_call2(Ppxlib_Location[9], m[2][1], pmod_loc[1]);
           if(caml_call2(Ppxlib_Import[76], _aR_, 0))
            return caml_call2(caml_call1(_av_, self_1), m, acc);
          }
         }
         return caml_call2(caml_call1(_aw_, self_1), x, acc);
        },
        _Y_,
        function(self_1, x, acc){
         if(7 !== x[0]) return caml_call2(caml_call1(_ag_, self_1), x, acc);
         var
          ce = x[2],
          od = x[1],
          acc$0 = caml_call3(self_1[1][1 + _H_], self_1, od[1], acc),
          acc$1 = caml_call3(self_1[1][1 + _v_], self_1, od[2], acc$0),
          acc$2 = caml_call3(self_1[1][1 + _I_], self_1, od[3], acc$1),
          acc$3 = caml_call3(self_1[1][1 + _$_], self_1, od[4], acc$2),
          acc$4 = caml_call3(self_1[1][1 + _Z_], self_1, ce, acc$3);
         return acc$4;
        },
        _U_,
        function(self_1, x, acc){
         if(4 !== x[0]) return caml_call2(caml_call1(_ak_, self_1), x, acc);
         var
          ct = x[2],
          od = x[1],
          acc$0 = caml_call3(self_1[1][1 + _H_], self_1, od[1], acc),
          acc$1 = caml_call3(self_1[1][1 + _v_], self_1, od[2], acc$0),
          acc$2 = caml_call3(self_1[1][1 + _I_], self_1, od[3], acc$1),
          acc$3 = caml_call3(self_1[1][1 + _$_], self_1, od[4], acc$2),
          acc$4 = caml_call3(self_1[1][1 + _V_], self_1, ct, acc$3);
         return acc$4;
        },
        _aa_,
        function(self_1, x, acc){
         var _aO_ = x[1][1];
         if(_aO_ !== "ocaml.doc" && _aO_ !== "ocaml.text")
          return caml_call2(caml_call1(_ad_, self_1), x, acc);
         return acc;
        }]);
     caml_call1(CamlinternalOO[17], _h_);
     _g_[1] =
      function(_aM_){
       var _aN_ = caml_call2(CamlinternalOO[24], 0, _h_);
       caml_call2(_ac_, _aM_[2], _aN_);
       return caml_call3(CamlinternalOO[26], 0, _aN_, _h_);
      };
    }
    return caml_call1(_g_[1], [0, 0, Ppxlib_Ast_traverse[3][3]]);
   }
   var Ppxlib_Location_check = [0, [0, empty], enforce_invariants];
   runtime.caml_register_global
    (58, Ppxlib_Location_check, "Ppxlib__Location_check");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Options
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_false = "false",
    cst_force = "force",
    cst_true = "true",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, "src/options.ml", 13, 19],
    _b_ = [0, cst_true, [0, cst_false, [0, cst_force, 0]]];
   function arg(value){
    return [11,
            _b_,
            function(flag){
             if(flag !== cst_false)
              if(flag !== cst_force){
               if(flag !== cst_true)
                throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
               var _c_ = 0;
              }
              else
               var _c_ = 2;
             else
              var _c_ = 1;
             value[1] = _c_;
             return 0;
            }];
   }
   var
    Forcable_bool = [0, arg],
    Ppxlib_Options = [0, Forcable_bool, 1, 1, 0, 0, 0, 0, 0];
   runtime.caml_register_global(6, Ppxlib_Options, "Ppxlib__Options");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Pp_ast
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_traverse, Ppxlib__Import, Stdlib, Stdlib__ArrayLabels, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_s = "%s",
    cst$11 = "()",
    cst$12 = ";",
    cst_hv_2 = "<hv 2>",
    cst_hv = "<hv>",
    cst$13 = "@ ",
    cst$14 = "@,",
    cst_hv_2_s_a = "@[<hv 2>%s@ %a@]",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constr = "constr",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_float = "float",
    cst_functor_parameter = "functor_parameter",
    cst_get_config = "get_config",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_lift_record_with_desc = "lift_record_with_desc",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_nativeint = "nativeint",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_other = "other",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_record = "record",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_set_config = "set_config",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_tuple = "tuple",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_unit = "unit",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_get_public_method = runtime.caml_get_public_method;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$12,
    cst$0 = "|]",
    cst$1 = "[|",
    cst$2 = cst$12,
    cst$3 = "}",
    cst$4 = "{",
    cst$5 = ",",
    cst$6 = ")",
    cst$7 = "(",
    cst$8 = cst$12,
    cst$9 = "]",
    cst$10 = "[",
    shared =
      [0,
       cst_arg_label,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_case,
       cst_cases,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    Stdlib_Format = global_data.Stdlib__Format,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Stdlib = global_data.Stdlib,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    show_attrs = 0,
    show_locs = 0,
    loc_mode = 257225820,
    default$0 = [0, show_attrs, show_locs, loc_mode],
    _a_ =
      [0,
       cst_unit,
       cst_tuple,
       cst_string,
       cst_record,
       cst_other,
       cst_nativeint,
       cst_int64,
       cst_int32,
       cst_int,
       cst_float,
       cst_constr,
       cst_char,
       cst_bool,
       cst_array],
    _b_ =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_unit,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_tuple,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_set_config,
       cst_row_field_desc,
       cst_row_field,
       cst_record,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_other,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_nativeint,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_lift_record_with_desc,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int64,
       cst_int32,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_get_config,
       cst_functor_parameter,
       cst_float,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constr,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    _c_ = [0, "config"],
    _d_ =
      [0,
       [18,
        [1, [0, [11, cst_hv, 0], cst_hv]],
        [2, 0, [12, 32, [15, [17, [0, cst$14, 0, 0], 0]]]]],
       "@[<hv>%s %a@,"],
    _e_ = [0, [2, 0, [12, 32, [15, [17, [0, cst$14, 0, 0], 0]]]], "%s %a@,"],
    _f_ = [0, [2, 0, [17, 0, 0]], "%s@]"],
    _g_ = [0, [2, 0, [2, 0, 0]], "%s%s"],
    _h_ = [0, [11, cst$11, 0], cst$11],
    _i_ = [0, [4, 3, 0, 0, 0], "%i"],
    _j_ = [0, [3, 0, 0], "%S"],
    _k_ = [0, [9, 0, 0], "%B"],
    _l_ = [0, [0, 0], "%c"],
    _m_ = [0, [8, [0, 0, 0], 0, 0, 0], "%f"],
    _n_ = [0, [5, 3, 0, 0, 0], "%li"],
    _o_ = [0, [7, 3, 0, 0, 0], "%Li"],
    _p_ = [0, [6, 3, 0, 0, 0], "%ni"],
    _q_ =
      [0,
       [18,
        [1, [0, [11, cst_hv_2, 0], cst_hv_2]],
        [2, 0, [17, [0, cst$13, 1, 0], [15, [17, 0, 0]]]]],
       cst_hv_2_s_a],
    _r_ =
      [0,
       [18,
        [1, [0, [11, cst_hv_2, 0], cst_hv_2]],
        [2, 0, [17, [0, cst$13, 1, 0], [15, [17, 0, 0]]]]],
       cst_hv_2_s_a],
    _s_ =
      [0,
       [18,
        [1, [0, [11, cst_hv_2, 0], cst_hv_2]],
        [2, 0, [17, [0, cst$13, 1, 0], [12, 40, [15, [12, 41, [17, 0, 0]]]]]]],
       "@[<hv 2>%s@ (%a)@]"],
    _t_ = [0, [2, 0, 0], cst_s],
    _u_ = [0, [2, 0, 0], cst_s],
    _v_ =
      [0,
       [18,
        [1, [0, [11, cst_hv_2, 0], cst_hv_2]],
        [2, 0, [11, " =", [17, [0, cst$13, 1, 0], [15, [17, 0, 0]]]]]],
       "@[<hv 2>%s =@ %a@]"],
    _w_ = [10, "NoInjectivity", 0],
    _x_ = [10, "Injective", 0],
    _y_ = [10, "Covariant", 0],
    _z_ = [10, "Contravariant", 0],
    _A_ = [10, "NoVariance", 0],
    _B_ = [10, "Open", 0],
    _C_ = [10, "Closed", 0],
    _D_ = [10, "Fresh", 0],
    _E_ = [10, "Override", 0],
    _F_ = [10, "Concrete", 0],
    _G_ = [10, "Virtual", 0],
    _H_ = [10, "Mutable", 0],
    _I_ = [10, "Immutable", 0],
    _J_ = [10, "Public", 0],
    _K_ = [10, "Private", 0],
    _L_ = [10, "Downto", 0],
    _M_ = [10, "Upto", 0],
    _N_ = [10, "Recursive", 0],
    _O_ = [10, "Nonrecursive", 0],
    _P_ = [13, "__attrs"],
    _Q_ =
      [0,
       [12,
        108,
        [4, 3, 0, 0, [12, 99, [4, 3, 0, 0, [11, "..", [4, 3, 0, 0, 0]]]]]],
       "l%ic%i..%i"],
    cst_g = "(g)",
    _R_ =
      [0,
       [12,
        108,
        [4,
         3,
         0,
         0,
         [12,
          99,
          [4, 3, 0, 0, [11, "..l", [4, 3, 0, 0, [12, 99, [4, 3, 0, 0, 0]]]]]]]],
       "l%ic%i..l%ic%i"],
    _S_ = [13, "__loc"],
    _T_ = [13, "__pos"],
    _U_ = [13, "__lstack"],
    _V_ = [13, "__"];
   function make(_cN_, _cM_, opt, param){
    var
     show_attrs$0 = _cN_ ? _cN_[1] : show_attrs,
     show_locs$0 = _cM_ ? _cM_[1] : show_locs,
     loc_mode$0 = opt ? opt[1] : loc_mode;
    return [0, show_attrs$0, show_locs$0, loc_mode$0];
   }
   function cnum(pos){return pos[4] - pos[3] | 0;}
   function pp_collection(pp_elm, open, close, sep, fmt, l){
    if(! l) return caml_call4(Stdlib_Format[143], fmt, _g_, open, close);
    var tl = l[2], hd = l[1];
    caml_call5(Stdlib_Format[143], fmt, _d_, open, pp_elm, hd);
    caml_call2
     (Ppxlib_Import[94][77],
      tl,
      function(sv){
       return caml_call5(Stdlib_Format[143], fmt, _e_, sep, pp_elm, sv);
      });
    return caml_call3(Stdlib_Format[143], fmt, _f_, close);
   }
   function pp_simple_val(fmt, simple_val){
    if(typeof simple_val === "number")
     return caml_call2(Stdlib_Format[143], fmt, _h_);
    switch(simple_val[0]){
      case 0:
       var i = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, _i_, i);
      case 1:
       var s = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, _j_, s);
      case 2:
       var b = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, _k_, b);
      case 3:
       var c = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, _l_, c);
      case 4:
       var l = simple_val[1];
       return pp_collection(pp_simple_val, cst$1, cst$0, cst, fmt, l);
      case 5:
       var f = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, _m_, f);
      case 6:
       var i32 = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, _n_, i32);
      case 7:
       var i64 = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, _o_, i64);
      case 8:
       var ni = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, _p_, ni);
      case 9:
       var fields = simple_val[1];
       return pp_collection(pp_field, cst$4, cst$3, cst$2, fmt, fields);
      case 10:
       var cname = simple_val[1], _cL_ = simple_val[2];
       if(! _cL_) return caml_call3(Stdlib_Format[143], fmt, _t_, cname);
       var x = _cL_[1];
       a:
       {
        if(typeof x !== "number" && 10 === x[0] && x[2]){
         if(_cL_[2]) break a;
         return caml_call5
                 (Stdlib_Format[143], fmt, _s_, cname, pp_simple_val, x);
        }
        if(! _cL_[2])
         return caml_call5
                 (Stdlib_Format[143], fmt, _r_, cname, pp_simple_val, x);
       }
       var l$0 = simple_val[2];
       return caml_call5
               (Stdlib_Format[143], fmt, _q_, cname, pp_simple_val, [11, l$0]);
      case 11:
       var l$1 = simple_val[1];
       return pp_collection(pp_simple_val, cst$7, cst$6, cst$5, fmt, l$1);
      case 12:
       var l$2 = simple_val[1];
       return pp_collection(pp_simple_val, cst$10, cst$9, cst$8, fmt, l$2);
      default:
       var s$0 = simple_val[1];
       return caml_call3(Stdlib_Format[143], fmt, _u_, s$0);
    }
   }
   function pp_field(fmt, param){
    var simple_val = param[2], fname = param[1];
    return caml_call5
            (Stdlib_Format[143], fmt, _v_, fname, pp_simple_val, simple_val);
   }
   var
    lift_simple_val =
      caml_call2
       (CamlinternalOO[19],
        [0,
         cst_bool,
         cst_cases,
         cst_case,
         cst_char,
         cst_value_binding,
         cst_extension_constructor_kind,
         cst_lift_record_with_desc,
         cst_core_type,
         cst_structure,
         cst_list,
         cst_constr,
         cst_label_declaration,
         cst_module_binding,
         cst_position,
         cst_toplevel_directive,
         cst_directive_argument,
         cst_object_field_desc,
         cst_unit,
         cst_class_type_field_desc,
         cst_open_infos,
         cst_pattern_desc,
         cst_nativeint,
         cst_signature_item,
         cst_extension_constructor,
         cst_toplevel_phrase,
         cst_extension,
         cst_location,
         cst_variance,
         cst_package_type,
         cst_virtual_flag,
         cst_module_type_desc,
         cst_rec_flag,
         cst_payload,
         cst_type_exception,
         cst_label,
         cst_letop,
         cst_location_stack,
         cst_value_description,
         cst_module_declaration,
         cst_class_type_declaration,
         cst_longident_loc,
         cst_closed_flag,
         cst_directive_argument_desc,
         cst_attribute,
         cst_class_infos,
         cst_record,
         cst_signature_item_desc,
         cst_int,
         cst_loc,
         cst_row_field_desc,
         cst_override_flag,
         cst_float,
         cst_structure_item_desc,
         cst_class_field_desc,
         cst_binding_op,
         cst_module_expr_desc,
         cst_class_signature,
         cst_type_extension,
         cst_class_field_kind,
         cst_module_type_declaration,
         cst_arg_label,
         cst_row_field,
         cst_longident,
         cst_string,
         cst_pattern,
         cst_include_description,
         cst_signature,
         cst_class_type_field,
         cst_attributes,
         cst_tuple,
         cst_open_description,
         cst_with_constraint,
         cst_include_declaration,
         cst_class_type_desc,
         cst_private_flag,
         cst_injectivity,
         cst_open_declaration,
         cst_object_field,
         cst_array,
         cst_constant,
         cst_class_expr,
         cst_functor_parameter,
         cst_direction_flag,
         cst_core_type_desc,
         cst_type_declaration,
         cst_constructor_declaration,
         cst_option,
         cst_type_kind,
         cst_module_expr,
         cst_module_substitution,
         cst_class_description,
         cst_expression,
         cst_class_type,
         cst_structure_item,
         cst_include_infos,
         cst_class_declaration,
         cst_other,
         cst_module_type,
         cst_get_config,
         cst_class_expr_desc,
         cst_set_config,
         cst_class_structure,
         cst_mutable_flag,
         cst_expression_desc,
         cst_constructor_arguments,
         cst_int32,
         cst_int64,
         cst_class_field],
        function(_aw_){
         var
          _ax_ = caml_call3(CamlinternalOO[4], _aw_, _b_, _c_),
          _a6_ = _ax_[56],
          _by_ = _ax_[109],
          _ay_ = _ax_[2],
          _az_ = _ax_[3],
          _aA_ = _ax_[6],
          _aB_ = _ax_[11],
          _aC_ = _ax_[14],
          _aD_ = _ax_[15],
          _aE_ = _ax_[16],
          _aF_ = _ax_[17],
          _aG_ = _ax_[18],
          _aH_ = _ax_[19],
          _aI_ = _ax_[20],
          _aJ_ = _ax_[21],
          _aK_ = _ax_[22],
          _aL_ = _ax_[23],
          _aM_ = _ax_[24],
          _aN_ = _ax_[25],
          _aO_ = _ax_[26],
          _aP_ = _ax_[27],
          _aQ_ = _ax_[29],
          _aR_ = _ax_[30],
          _aS_ = _ax_[32],
          _aT_ = _ax_[33],
          _aU_ = _ax_[38],
          _aV_ = _ax_[39],
          _aW_ = _ax_[40],
          _aX_ = _ax_[41],
          _aY_ = _ax_[42],
          _aZ_ = _ax_[44],
          _a0_ = _ax_[46],
          _a1_ = _ax_[47],
          _a2_ = _ax_[52],
          _a3_ = _ax_[53],
          _a4_ = _ax_[54],
          _a5_ = _ax_[55],
          _a7_ = _ax_[60],
          _a8_ = _ax_[61],
          _a9_ = _ax_[62],
          _a__ = _ax_[63],
          _a$_ = _ax_[67],
          _ba_ = _ax_[69],
          _bb_ = _ax_[73],
          _bc_ = _ax_[74],
          _bd_ = _ax_[75],
          _be_ = _ax_[76],
          _bf_ = _ax_[77],
          _bg_ = _ax_[78],
          _bh_ = _ax_[79],
          _bi_ = _ax_[82],
          _bj_ = _ax_[84],
          _bk_ = _ax_[85],
          _bl_ = _ax_[86],
          _bm_ = _ax_[87],
          _bn_ = _ax_[89],
          _bo_ = _ax_[90],
          _bp_ = _ax_[91],
          _bq_ = _ax_[94],
          _br_ = _ax_[95],
          _bs_ = _ax_[96],
          _bt_ = _ax_[97],
          _bu_ = _ax_[100],
          _bv_ = _ax_[103],
          _bw_ = _ax_[105],
          _bx_ = _ax_[107],
          _bz_ =
            caml_call6
             (CamlinternalOO[18],
              _aw_,
              0,
              _a_,
              shared,
              Ppxlib_Ast_traverse[15],
              1),
          _bE_ = _bz_[16],
          _bF_ = _bz_[17],
          _bS_ = _bz_[76],
          _bT_ = _bz_[79],
          _bB_ = _bz_[4],
          _bC_ = _bz_[10],
          _bD_ = _bz_[12],
          _bG_ = _bz_[18],
          _bH_ = _bz_[21],
          _bI_ = _bz_[27],
          _bJ_ = _bz_[32],
          _bK_ = _bz_[46],
          _bL_ = _bz_[47],
          _bM_ = _bz_[53],
          _bN_ = _bz_[56],
          _bO_ = _bz_[60],
          _bP_ = _bz_[68],
          _bQ_ = _bz_[71],
          _bR_ = _bz_[74],
          _bA_ = _bz_[1];
         caml_call2
          (CamlinternalOO[11],
           _aw_,
           [0,
            _aJ_,
            function(self_1, new_config){
             self_1[1 + _by_] = new_config;
             return 0;
            },
            _a$_,
            function(self_1, param){return self_1[1 + _by_];},
            _aA_,
            function(self_1, param){return 0;},
            _a9_,
            function(self_1, i){return [0, i];},
            _aF_,
            function(self_1, s){return [1, s];},
            _bv_,
            function(self_1, b){return [2, b];},
            _bu_,
            function(self_1, c){return [3, c];},
            _ba_,
            function(self_1, f){return [5, f];},
            _a8_,
            function(self_1, i32){return [6, i32];},
            _a7_,
            function(self_1, i64){return [7, i64];},
            _aW_,
            function(self_1, ni){return [8, ni];},
            _a5_,
            function(self_1, lift_a, list){
             return [12, caml_call2(Ppxlib_Import[94][55], list, lift_a)];
            },
            _aB_,
            function(self_1, res_list){return [11, res_list];},
            _aM_,
            function(self_1, fields){return [9, fields];},
            _bi_,
            function(self_1, ctr, res_list){return [10, ctr, res_list];},
            _bx_,
            function(self_1, lift_a, array){
             var _cK_ = caml_call2(Stdlib_ArrayLabels[14], lift_a, array);
             return [4, caml_call1(Stdlib_ArrayLabels[10], _cK_)];
            },
            _aT_,
            function(self_1, a){return _V_;},
            _a2_,
            function(self_1, ls){return _U_;},
            _aP_,
            function(self_1, pos){
             var _cJ_ = self_1[1 + _by_][3];
             if
              (self_1[1 + _by_][2]
               && typeof _cJ_ === "number" && 782112175 === _cJ_)
              return caml_call1(caml_call1(_bQ_, self_1), pos);
             return _T_;
            },
            _a4_,
            function(self_1, lift_a, a_loc){
             return self_1[1 + _by_][2]
                     ? caml_call2(caml_call1(_bK_, self_1), lift_a, a_loc)
                     : caml_call1(lift_a, a_loc[1]);
            },
            _a3_,
            function(self_1, loc){
             var _cI_ = self_1[1 + _by_][3];
             if(! self_1[1 + _by_][2]) return _S_;
             if(782112175 <= _cI_)
              return caml_call1(caml_call1(_bL_, self_1), loc);
             var
              begin_line = loc[1][2],
              begin_char = cnum(loc[1]),
              end_line = loc[2][2],
              end_char = cnum(loc[2]),
              repr =
                caml_call2(Ppxlib_Import[92][4], begin_line, end_line)
                 ? caml_call4
                   (Stdlib_Format[146], _Q_, begin_line, begin_char, end_char)
                 : caml_call5
                   (Stdlib_Format[146],
                    _R_,
                    begin_line,
                    begin_char,
                    end_line,
                    end_char),
              with_ghost = loc[3] ? caml_call2(Stdlib[28], repr, cst_g) : repr;
             return [13, with_ghost];
            },
            _bw_,
            function(self_1, attrs){
             return self_1[1 + _by_][1]
                     ? caml_call1(caml_call1(_bB_, self_1), attrs)
                     : _P_;
            },
            _a6_,
            function(self_1, lift_desc, lift_record, desc, attrs, x){
             a:
             {
              var _cH_ = self_1[1 + _by_][1];
              if(! self_1[1 + _by_][2]){
               if(_cH_ && attrs) break a;
               return caml_call1(lift_desc, desc);
              }
             }
             return caml_call1(lift_record, x);
            },
            _bh_,
            function(self_1, ct){
             var
              _cD_ = ct[4],
              _cE_ = ct[1],
              _cF_ = caml_call1(_bI_, self_1),
              _cG_ = caml_call1(self_1[1][1 + _bg_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _cG_, _cF_, _cE_, _cD_, ct);
            },
            _aL_,
            function(self_1, rf){
             var
              _cz_ = rf[3],
              _cA_ = rf[1],
              _cB_ = caml_call1(_bR_, self_1),
              _cC_ = caml_call1(self_1[1][1 + _aK_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _cC_, _cB_, _cA_, _cz_, rf);
            },
            _aV_,
            function(self_1, obf){
             var
              _cv_ = obf[3],
              _cw_ = obf[1],
              _cx_ = caml_call1(_bO_, self_1),
              _cy_ = caml_call1(self_1[1][1 + _aU_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _cy_, _cx_, _cw_, _cv_, obf);
            },
            _aR_,
            function(self_1, pat){
             var
              _cr_ = pat[4],
              _cs_ = pat[1],
              _ct_ = caml_call1(_bP_, self_1),
              _cu_ = caml_call1(self_1[1][1 + _aQ_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _cu_, _ct_, _cs_, _cr_, pat);
            },
            _bc_,
            function(self_1, exp){
             var
              _cn_ = exp[4],
              _co_ = exp[1],
              _cp_ = caml_call1(_bJ_, self_1),
              _cq_ = caml_call1(self_1[1][1 + _bb_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _cq_, _cp_, _co_, _cn_, exp);
            },
            _bn_,
            function(self_1, cty){
             var
              _cj_ = cty[3],
              _ck_ = cty[1],
              _cl_ = caml_call1(_bG_, self_1),
              _cm_ = caml_call1(self_1[1][1 + _bm_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _cm_, _cl_, _ck_, _cj_, cty);
            },
            _bl_,
            function(self_1, ctf){
             var
              _cf_ = ctf[3],
              _cg_ = ctf[1],
              _ch_ = caml_call1(_bH_, self_1),
              _ci_ = caml_call1(self_1[1][1 + _bk_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _ci_, _ch_, _cg_, _cf_, ctf);
            },
            _bt_,
            function(self_1, cl){
             var
              _cb_ = cl[3],
              _cc_ = cl[1],
              _cd_ = caml_call1(_bC_, self_1),
              _ce_ = caml_call1(self_1[1][1 + _bs_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _ce_, _cd_, _cc_, _cb_, cl);
            },
            _br_,
            function(self_1, cf){
             var
              _b9_ = cf[3],
              _b__ = cf[1],
              _b$_ = caml_call1(_bD_, self_1),
              _ca_ = caml_call1(self_1[1][1 + _bq_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _ca_, _b$_, _b__, _b9_, cf);
            },
            _aZ_,
            function(self_1, mty){
             var
              _b5_ = mty[3],
              _b6_ = mty[1],
              _b7_ = caml_call1(_bN_, self_1),
              _b8_ = caml_call1(self_1[1][1 + _aY_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _b8_, _b7_, _b6_, _b5_, mty);
            },
            _a1_,
            function(self_1, mod){
             var
              _b1_ = mod[3],
              _b2_ = mod[1],
              _b3_ = caml_call1(_bM_, self_1),
              _b4_ = caml_call1(self_1[1][1 + _a0_], self_1);
             return caml_call6
                     (self_1[1][1 + _a6_], self_1, _b4_, _b3_, _b2_, _b1_, mod);
            },
            _aD_,
            function(self_1, stri){
             return caml_call2(self_1[1][1 + _aC_], self_1, stri[1]);
            },
            _aH_,
            function(self_1, sigi){
             return caml_call2(self_1[1][1 + _aG_], self_1, sigi[1]);
            },
            _aE_,
            function(self_1, str){
             if(self_1[1 + _by_][1])
              return caml_call1(caml_call1(_bT_, self_1), str);
             var
              _b0_ =
                caml_call2
                 (Ppxlib_Import[94][31],
                  function(param){return 13 === param[1][0] ? 0 : 1;},
                  str);
             return caml_call1(caml_call1(_bT_, self_1), _b0_);
            },
            _aI_,
            function(self_1, sig){
             if(self_1[1 + _by_][1])
              return caml_call1(caml_call1(_bS_, self_1), sig);
             var
              _bZ_ =
                caml_call2
                 (Ppxlib_Import[94][31],
                  function(param){return 14 === param[1][0] ? 0 : 1;},
                  sig);
             return caml_call1(caml_call1(_bS_, self_1), _bZ_);
            },
            _bo_,
            function(self_1, cstr){
             if(self_1[1 + _by_][1])
              return caml_call1(caml_call1(_bF_, self_1), cstr);
             var
              pcstr_fields =
                caml_call2
                 (Ppxlib_Import[94][31],
                  function(param){return 5 === param[1][0] ? 0 : 1;},
                  cstr[2]),
              _bY_ = [0, cstr[1], pcstr_fields];
             return caml_call1(caml_call1(_bF_, self_1), _bY_);
            },
            _bp_,
            function(self_1, csig){
             if(self_1[1 + _by_][1])
              return caml_call1(caml_call1(_bE_, self_1), csig);
             var
              pcsig_fields =
                caml_call2
                 (Ppxlib_Import[94][31],
                  function(param){return 4 === param[1][0] ? 0 : 1;},
                  csig[2]),
              _bX_ = [0, csig[1], pcsig_fields];
             return caml_call1(caml_call1(_bE_, self_1), _bX_);
            },
            _be_,
            function(self_1, dira){
             return caml_call2(self_1[1][1 + _bd_], self_1, dira[1]);
            },
            _aN_,
            function(self_1, rec_flag){return rec_flag ? _N_ : _O_;},
            _bf_,
            function(self_1, direction_flag){
             return direction_flag ? _L_ : _M_;
            },
            _aO_,
            function(self_1, private_flag){return private_flag ? _J_ : _K_;},
            _aX_,
            function(self_1, mutable_flag){return mutable_flag ? _H_ : _I_;},
            _ay_,
            function(self_1, virtual_flag){return virtual_flag ? _F_ : _G_;},
            _aS_,
            function(self_1, override_flag){return override_flag ? _D_ : _E_;},
            _bj_,
            function(self_1, closed_flag){return closed_flag ? _B_ : _C_;},
            _az_,
            function(self_1, variance){
             switch(variance){
               case 0:
                return _y_;
               case 1:
                return _z_;
               default: return _A_;
             }
            },
            _a__,
            function(self_1, injectivity){return injectivity ? _w_ : _x_;}]);
         return function(_bV_, _bU_){
          var _bW_ = caml_call2(CamlinternalOO[24], _bU_, _aw_);
          caml_call1(_bA_, _bW_);
          _bW_[1 + _by_] = default$0;
          return caml_call3(CamlinternalOO[26], _bU_, _bW_, _aw_);};
        });
   function Make(Conf){
    var lsv = caml_call1(lift_simple_val[1], 0);
    caml_call2(caml_get_public_method(lsv, 1003971839, 50), lsv, Conf[1]);
    function structure(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2
               (caml_get_public_method(lsv, -951102413, 51), lsv, str));
    }
    function structure_item(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2(caml_get_public_method(lsv, 832861151, 52), lsv, str));
    }
    function signature(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2(caml_get_public_method(lsv, 359375608, 53), lsv, str));
    }
    function signature_item(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2
               (caml_get_public_method(lsv, -662996230, 54), lsv, str));
    }
    function expression(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2(caml_get_public_method(lsv, 782176664, 55), lsv, str));
    }
    function pattern(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2(caml_get_public_method(lsv, 293013072, 56), lsv, str));
    }
    function core_type(fmt, str){
     return pp_simple_val
             (fmt,
              caml_call2
               (caml_get_public_method(lsv, -957384486, 57), lsv, str));
    }
    return [0,
            structure,
            structure_item,
            signature,
            signature_item,
            expression,
            pattern,
            core_type];
   }
   function make$0(config){return Make([0, config]);}
   var
    Default = Make([0, default$0]),
    lift_simple_val$0 = caml_call1(lift_simple_val[1], 0);
   function pp_with_config(lifter, opt, fmt, x){
    var
     config = opt ? opt[1] : default$0,
     old_config =
       caml_call2
        (caml_get_public_method(lift_simple_val$0, 945407627, 58),
         lift_simple_val$0,
         0);
    caml_call2
     (caml_get_public_method(lift_simple_val$0, 1003971839, 59),
      lift_simple_val$0,
      config);
    var res = pp_simple_val(fmt, caml_call1(lifter, x));
    caml_call2
     (caml_get_public_method(lift_simple_val$0, 1003971839, 60),
      lift_simple_val$0,
      old_config);
    return res;
   }
   var
    _W_ =
      caml_call1
       (caml_get_public_method(lift_simple_val$0, -951102413, 61),
        lift_simple_val$0);
   function structure(_at_, _au_, _av_){
    return pp_with_config(_W_, _at_, _au_, _av_);
   }
   var
    _X_ =
      caml_call1
       (caml_get_public_method(lift_simple_val$0, 832861151, 62),
        lift_simple_val$0);
   function structure_item(_aq_, _ar_, _as_){
    return pp_with_config(_X_, _aq_, _ar_, _as_);
   }
   var
    _Y_ =
      caml_call1
       (caml_get_public_method(lift_simple_val$0, 359375608, 63),
        lift_simple_val$0);
   function signature(_an_, _ao_, _ap_){
    return pp_with_config(_Y_, _an_, _ao_, _ap_);
   }
   var
    _Z_ =
      caml_call1
       (caml_get_public_method(lift_simple_val$0, -662996230, 64),
        lift_simple_val$0);
   function signature_item(_ak_, _al_, _am_){
    return pp_with_config(_Z_, _ak_, _al_, _am_);
   }
   var
    ___ =
      caml_call1
       (caml_get_public_method(lift_simple_val$0, 782176664, 65),
        lift_simple_val$0);
   function expression(_ah_, _ai_, _aj_){
    return pp_with_config(___, _ah_, _ai_, _aj_);
   }
   var
    _$_ =
      caml_call1
       (caml_get_public_method(lift_simple_val$0, 293013072, 66),
        lift_simple_val$0);
   function pattern(_ae_, _af_, _ag_){
    return pp_with_config(_$_, _ae_, _af_, _ag_);
   }
   var
    _aa_ =
      caml_call1
       (caml_get_public_method(lift_simple_val$0, -957384486, 67),
        lift_simple_val$0);
   function core_type(_ab_, _ac_, _ad_){
    return pp_with_config(_aa_, _ab_, _ac_, _ad_);
   }
   var
    Ppxlib_Pp_ast =
      [0,
       [0, make],
       Make,
       make$0,
       Default,
       structure,
       structure_item,
       signature,
       signature_item,
       expression,
       pattern,
       core_type];
   runtime.caml_register_global(69, Ppxlib_Pp_ast, "Ppxlib__Pp_ast");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Driver
//# unitInfo: Requires: Astlib, Astlib__Ast_metadata, Astlib__Keyword, Astlib__Location, Astlib__Pprintast, CamlinternalLazy, CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_pattern, Ppxlib__Ast_traverse, Ppxlib__Attribute, Ppxlib__Caller_id, Ppxlib__Common, Ppxlib__Context_free, Ppxlib__Expansion_context, Ppxlib__Extension, Ppxlib__Import, Ppxlib__Location, Ppxlib__Location_check, Ppxlib__Name, Ppxlib__Options, Ppxlib__Pp_ast, Ppxlib__Reconcile, Ppxlib__Utils, Ppxlib_ast__Import, Ppxlib_ast__Warn, Ppxlib_print_diff, Sexplib0__Sexp, Stdlib, Stdlib__Arg, Stdlib__ArrayLabels, Stdlib__Filename, Stdlib__Format, Stdlib__Lexing, Stdlib__Printf, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$10 = "",
    cst_s = "%s",
    cst_s$0 = "%s\n",
    cst$9 = "-",
    cst_as_ppx = "--as-ppx",
    cst_apply_called_too_many_time$1 = "-apply called too many times",
    cst_as_ppx$0 = "-as-ppx",
    cst_dparsetree$0 = "-dparsetree",
    cst_dump_ast$0 = "-dump-ast",
    cst_null$0 = "-null",
    cst_reconcile$0 = "-reconcile",
    cst_reconcile_with_comments$0 = "-reconcile-with-comments",
    cst_builtin_check_unused_attri = "<builtin:check-unused-attributes>\n",
    cst_builtin_check_unused_exten = "<builtin:check-unused-extensions>\n",
    cst_builtin_freshen_and_collec =
      "<builtin:freshen-and-collect-attributes>\n",
    cst_Expected_a_binary_AST_as_i = "Expected a binary AST as input",
    cst_none$1 = "_none_",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_ocaml_ppx_context = "ocaml.ppx.context",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_ppxlib_driver$1 = "ppxlib_driver",
    cst_ppxlib_driver_cannot_use_r =
      "ppxlib_driver: cannot use -reconcile with binary AST files",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_src_driver_ml = "src/driver.ml",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_check_bound = runtime.caml_check_bound,
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_sys_remove = runtime.caml_sys_remove,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) === 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$7 = cst$9,
    cst$6 = cst$10,
    cst$4 = "\n",
    cst$5 = cst$10,
    tool_name$0 = "ppx_driver",
    cst$3 = cst$9,
    cst$2 = cst$10,
    tool_name = cst_ppxlib_driver$1,
    cst$1 = ", ",
    pos = [0, cst$10, 1, 0, 0],
    cst$0 = cst$10,
    cst = cst$10,
    prefix = "./",
    _a_ =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    _b_ =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_signature,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    shared =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    cst$8 = cst$9,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib = global_data.Stdlib,
    Astlib = global_data.Astlib,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Ppxlib_Utils = global_data.Ppxlib__Utils,
    Astlib_Ast_metadata = global_data.Astlib__Ast_metadata,
    Ppxlib_Context_free = global_data.Ppxlib__Context_free,
    Astlib_Keyword = global_data.Astlib__Keyword,
    Ppxlib_ast_Warn = global_data.Ppxlib_ast__Warn,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Ppxlib_ast_Import = global_data.Ppxlib_ast__Import,
    Ppxlib_Pp_ast = global_data.Ppxlib__Pp_ast,
    Astlib_Pprintast = global_data.Astlib__Pprintast,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Ppxlib_Reconcile = global_data.Ppxlib__Reconcile,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Ppxlib_print_diff = global_data.Ppxlib_print_diff,
    CamlinternalOO = global_data.CamlinternalOO,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Ppxlib_Attribute = global_data.Ppxlib__Attribute,
    Ppxlib_Extension = global_data.Ppxlib__Extension,
    Ppxlib_Location_check = global_data.Ppxlib__Location_check,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Expansion_context = global_data.Ppxlib__Expansion_context,
    Ppxlib_Caller_id = global_data.Ppxlib__Caller_id,
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Ppxlib_Options = global_data.Ppxlib__Options,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Astlib_Location = global_data.Astlib__Location,
    Ppxlib_Name = global_data.Ppxlib__Name,
    exe_name = caml_call1(Stdlib_Filename[13], Stdlib_Sys[1]),
    args = [0, 0];
   function add_arg(key, spec, doc){
    args[1] = [0, [0, key, spec, doc], args[1]];
    return 0;
   }
   var
    loc_fname = [0, 0],
    perform_checks = [0, Ppxlib_Options[4]],
    perform_checks_on_extensions = [0, Ppxlib_Options[5]],
    perform_locations_check = [0, Ppxlib_Options[6]],
    debug_attribute_drop = [0, 0],
    apply_list = [0, 0],
    preprocessor = [0, 0],
    no_merge = [0, 0],
    request_print_passes = [0, 0],
    request_print_transformations = [0, 0],
    use_color = [0, 1],
    diff_command = [0, Ppxlib_Options[8]],
    pretty = [0, 0],
    styler = [0, 0],
    output_metadata_filename = [0, 0],
    corrected_suffix = [0, ".ppx-corrected"],
    keywords = [0, 0],
    _c_ = caml_call1(CamlinternalOO[16], _b_),
    _d_ = caml_call2(CamlinternalOO[8], _c_, shared)[47],
    _e_ =
      caml_call6
        (CamlinternalOO[18], _c_, 0, 0, _a_, Ppxlib_Ast_traverse[1], 1)
       [1];
   caml_call3
    (CamlinternalOO[10],
     _c_,
     _d_,
     function(self_1, loc){return [0, loc[1], loc[2], 1];});
   caml_call1(CamlinternalOO[17], _c_);
   var _f_ = caml_call2(CamlinternalOO[24], 0, _c_);
   caml_call1(_e_, _f_);
   var ghost = caml_call3(CamlinternalOO[26], 0, _f_, _c_);
   function get_default_path(loc){
    var
     fname = loc[1][1],
     match =
       caml_call2(Ppxlib_Import[99][58], fname, prefix)
        ? [0, caml_call2(Ppxlib_Import[99][56], fname, 2)]
        : 0;
    if(! match) return fname;
    var fname$0 = match[1];
    return fname$0;
   }
   function get_default_path_str(param){
    if(! param) return cst;
    var loc = param[1][2];
    return get_default_path(loc);
   }
   function get_default_path_sig(param){
    if(! param) return cst$0;
    var loc = param[1][2];
    return get_default_path(loc);
   }
   function of_string(loc, s){return [0, loc, s];}
   var Lint_error = [0, of_string], given_through_cli = [0, 0], _g_ = [0, 0];
   function get(param, name, pattern){
    var _ct_ = caml_call1(Astlib_Ast_metadata[7], name);
    return caml_call2
            (Ppxlib_Import[95][3],
             _ct_,
             function(e){
              var e$0 = caml_call2(Ppxlib_ast_Import[2][9], 4, e);
              return caml_call5
                      (Ppxlib_Ast_pattern[1],
                       pattern,
                       e$0[2],
                       0,
                       e$0,
                       Ppxlib_Import[89][1]);
             });
   }
   function get_res(param, name, pattern){
    var
     _cs_ = caml_call1(Astlib_Ast_metadata[7], name),
     match =
       caml_call2
        (Ppxlib_Import[95][3],
         _cs_,
         function(e){
          var e$0 = caml_call2(Ppxlib_ast_Import[2][9], 4, e);
          return caml_call5
                  (Ppxlib_Ast_pattern[2],
                   pattern,
                   e$0[2],
                   0,
                   e$0,
                   Ppxlib_Import[89][1]);
         });
    if(! match) return _g_;
    var match$0 = match[1];
    if(0 === match$0[0]){var e = match$0[1]; return [0, [0, e]];}
    var e$0 = match$0[1];
    return [1, e$0];
   }
   function set(param, name, expr){
    var _cr_ = caml_call2(Ppxlib_ast_Import[2][10], 4, expr);
    return caml_call2(Astlib_Ast_metadata[6], name, _cr_);
   }
   var handlers = [0, 0];
   function add_handler(f){
    handlers[1] = caml_call2(Ppxlib_Import[100], handlers[1], [0, f, 0]);
    return 0;
   }
   function add_simple_handler(name, pattern, f){
    return add_handler
            (function(param){return caml_call1(f, get(0, name, pattern));});
   }
   function acknowledge_cookies(param){
    return caml_call2
            (Ppxlib_Import[94][77],
             handlers[1],
             function(f){return caml_call1(f, 0);});
   }
   var post_handlers = [0, 0];
   function add_post_handler(f){
    post_handlers[1] =
     caml_call2(Ppxlib_Import[100], post_handlers[1], [0, f, 0]);
    return 0;
   }
   function call_post_handlers(param){
    return caml_call2
            (Ppxlib_Import[94][77],
             post_handlers[1],
             function(f){return caml_call1(f, 0);});
   }
   function make(transformation, position){
    function transformation$0(ctx, st){
     var _cq_ = caml_call2(transformation, ctx, st);
     return caml_call1(Ppxlib_Common[24][1], _cq_);
    }
    return [0, transformation$0, position];
   }
   var V2 = [0, make];
   function make$0(transformation, position){
    function transformation$0(param, st){
     return caml_call1(transformation, st);
    }
    return caml_call2(V2[1], transformation$0, position);
   }
   function has_name(t, name){
    var _cn_ = caml_call2(Ppxlib_Import[99][72], name, t[1]);
    if(_cn_) return _cn_;
    var _co_ = t[2], _cp_ = caml_call1(Ppxlib_Import[99][72], name);
    return caml_call2(Ppxlib_Import[94][22], _cp_, _co_);
   }
   var
    all = [0, 0],
    _h_ = [0, [2, 0, [12, 58, [4, 0, 0, 0, 0]]], "%s:%d"],
    cst_unknown_location = "<unknown location>",
    _i_ = [0, cst_src_driver_ml, 0],
    _j_ =
      [0,
       [11,
        "Warning: code transformation ",
        [2, 0, [11, " registered twice.\n", 0]]],
       "Warning: code transformation %s registered twice.\n"],
    _k_ =
      [0,
       [11, "  - first time was at ", [15, [12, 10, 0]]],
       "  - first time was at %a\n"],
    _l_ =
      [0,
       [11, "  - second time is at ", [15, [12, 10, 0]]],
       "  - second time is at %a\n"],
    cst_none = cst_none$1;
   function print_caller_id(oc, caller_id){
    if(! caller_id) return caml_call2(Stdlib[66], oc, cst_unknown_location);
    var loc = caller_id[1];
    return caml_call4(Stdlib_Printf[1], oc, _h_, loc[1], loc[2]);
   }
   function register_transformation
   (_ch_,
    _cg_,
    enclose_impl,
    enclose_intf,
    impl,
    intf,
    lint_impl,
    lint_intf,
    preprocess_impl,
    preprocess_intf,
    instrument,
    opt,
    name){
    var
     extensions = _ch_ ? _ch_[1] : 0,
     rules = _cg_ ? _cg_[1] : 0,
     aliases = opt ? opt[1] : 0,
     _ci_ =
       caml_call2
        (Ppxlib_Import[94][55], extensions, Ppxlib_Context_free[1][1]),
     rules$0 = caml_call2(Ppxlib_Import[100], _ci_, rules),
     caller_id = caml_call1(Ppxlib_Caller_id[1], _i_),
     match =
       caml_call2
        (Ppxlib_Import[94][31],
         function(ct){return has_name(ct, name);},
         all[1]);
    if(match){
     var ct = match[1];
     caml_call2(Stdlib_Printf[3], _j_, name);
     caml_call3(Stdlib_Printf[3], _k_, print_caller_id, ct[13]);
     caml_call3(Stdlib_Printf[3], _l_, print_caller_id, caller_id);
    }
    var
     impl$0 =
       caml_call2
        (Ppxlib_Import[95][3],
         impl,
         function(f, ctx, ast){
          var _cm_ = caml_call2(f, ctx, ast);
          return caml_call1(Ppxlib_Common[24][1], _cm_);
         }),
     intf$0 =
       caml_call2
        (Ppxlib_Import[95][3],
         intf,
         function(f, ctx, ast){
          var _cl_ = caml_call2(f, ctx, ast);
          return caml_call1(Ppxlib_Common[24][1], _cl_);
         }),
     preprocess_impl$0 =
       caml_call2
        (Ppxlib_Import[95][3],
         preprocess_impl,
         function(f, ctx, ast){
          var _ck_ = caml_call2(f, ctx, ast);
          return caml_call1(Ppxlib_Common[24][1], _ck_);
         }),
     preprocess_intf$0 =
       caml_call2
        (Ppxlib_Import[95][3],
         preprocess_intf,
         function(f, ctx, ast){
          var _cj_ = caml_call2(f, ctx, ast);
          return caml_call1(Ppxlib_Common[24][1], _cj_);
         }),
     ct$0 =
       [0,
        name,
        aliases,
        impl$0,
        intf$0,
        lint_impl,
        lint_intf,
        preprocess_impl$0,
        preprocess_intf$0,
        enclose_impl,
        enclose_intf,
        instrument,
        rules$0,
        caller_id];
    all[1] = [0, ct$0, all[1]];
    return 0;
   }
   function loc_of_list(get_loc, l$1){
    if(! l$1) return 0;
    var
     l$2 = l$1[2],
     prev$1 = l$1[1],
     first = caml_call1(get_loc, prev$1),
     prev = prev$1,
     l = l$2;
    for(;;){
     if(! l){
      var last = caml_call1(get_loc, prev);
      return [0, [0, first[1], last[2], first[3]]];
     }
     var l$0 = l[2], prev$0 = l[1];
     prev = prev$0;
     l = l$0;
    }
   }
   function merge_into_generic_mappers
   (t, embed_errors, hook, expect_mismatch_handler, tool_name, input_name){
    var
     rules = t[12],
     enclose_intf = t[10],
     enclose_impl = t[9],
     intf = t[4],
     impl = t[3],
     map =
       caml_call5
        (Ppxlib_Context_free[4][1],
         0,
         [0, expect_mismatch_handler],
         [0, hook],
         [0, embed_errors],
         rules);
    function gen_header_and_footer(context, whole_loc, f){
     var
      match = caml_call1(f, whole_loc),
      footer = match[2],
      header = match[1];
     if(whole_loc){
      var
       loc = whole_loc[1],
       loc_header = [0, loc[1], loc[1], loc[3]],
       loc_footer = [0, loc[2], loc[2], loc[3]];
      if(header) caml_call3(hook[1], context, loc_header, [1, header]);
      if(footer) caml_call3(hook[1], context, loc_footer, [1, footer]);
     }
     else{
      var l = caml_call2(Ppxlib_Import[100], header, footer);
      if(l){
       var loc$0 = [0, pos, pos, 0];
       caml_call3(hook[1], context, loc$0, [1, l]);
      }
     }
     return [0, header, footer];
    }
    if(input_name)
     var input_name$0 = input_name[1], input_name$1 = input_name$0;
    else
     var input_name$1 = cst_none;
    function map_impl(ctxt, st_with_attrs){
     var
      match =
        caml_call2
         (Ppxlib_Import[94][74],
          st_with_attrs,
          function(param){return 13 === param[1][0] ? 1 : 0;}),
      st = match[2],
      attrs = match[1],
      file_path = get_default_path_str(st),
      base_ctxt =
        caml_call3
         (Ppxlib_Expansion_context[1][4], tool_name, file_path, input_name$1);
     if(enclose_impl)
      var
       f = enclose_impl[1],
       whole_loc = loc_of_list(function(st){return st[2];}, st),
       _ce_ = gen_header_and_footer(10, whole_loc, caml_call1(f, base_ctxt)),
       footer = _ce_[2],
       header = _ce_[1];
     else
      var footer = 0, header = 0;
     var
      _cf_ =
        caml_call3
         (caml_get_public_method(map, -951102413, 68),
          map,
          base_ctxt,
          caml_call1
           (Ppxlib_Import[94][59],
            [0, attrs, [0, header, [0, st, [0, footer, 0]]]]));
     return caml_call2
             (Ppxlib_Common[24][2],
              _cf_,
              function(st){
               if(! impl) return caml_call1(Ppxlib_Common[24][1], st);
               var f = impl[1];
               return caml_call2(f, ctxt, st);
              });
    }
    function map_intf(ctxt, sg_with_attrs){
     var
      match =
        caml_call2
         (Ppxlib_Import[94][74],
          sg_with_attrs,
          function(param){return 14 === param[1][0] ? 1 : 0;}),
      sg = match[2],
      attrs = match[1],
      file_path = get_default_path_sig(sg),
      base_ctxt =
        caml_call3
         (Ppxlib_Expansion_context[1][4], tool_name, file_path, input_name$1);
     if(enclose_intf)
      var
       f = enclose_intf[1],
       whole_loc = loc_of_list(function(sg){return sg[2];}, sg),
       _cc_ = gen_header_and_footer(9, whole_loc, caml_call1(f, base_ctxt)),
       footer = _cc_[2],
       header = _cc_[1];
     else
      var footer = 0, header = 0;
     var
      _cd_ =
        caml_call3
         (caml_get_public_method(map, 359375608, 69),
          map,
          base_ctxt,
          caml_call1
           (Ppxlib_Import[94][59],
            [0, attrs, [0, header, [0, sg, [0, footer, 0]]]]));
     return caml_call2
             (Ppxlib_Common[24][2],
              _cd_,
              function(sg){
               if(! intf) return caml_call1(Ppxlib_Common[24][1], sg);
               var f = intf[1];
               return caml_call2(f, ctxt, sg);
              });
    }
    return [0,
            t[1],
            t[2],
            [0, map_impl],
            [0, map_intf],
            t[5],
            t[6],
            t[7],
            t[8],
            t[9],
            t[10],
            t[11],
            t[12],
            t[13]];
   }
   function register_transformation_using_(impl, intf, aliases, name){
    var
     _ca_ = caml_call1(Ppxlib_ast_Import[2][11], 0),
     impl$0 = caml_call2(Ppxlib_Import[95][3], impl, _ca_),
     _cb_ = caml_call1(Ppxlib_ast_Import[2][11], 1),
     intf$0 = caml_call2(Ppxlib_Import[95][3], intf, _cb_);
    return register_transformation
            (0, 0, 0, 0, impl$0, intf$0, 0, 0, 0, 0, 0, aliases, name);
   }
   var
    V2$0 = [0, register_transformation, register_transformation_using_],
    cst_builtin_context_free = "<builtin:context-free>",
    _m_ = [0, 0, 0, 0],
    _n_ = [0, [11, "<preprocess:", [2, 0, [12, 62, 0]]], "<preprocess:%s>"],
    _o_ = [0, [11, "<lint:", [2, 0, [12, 62, 0]]], "<lint:%s>"],
    _p_ =
      [0,
       [11,
        "The following attributes ",
        [2, 0, [11, " after applying ", [2, 0, [11, ":\n", 0]]]]],
       "The following attributes %s after applying %s:\n"],
    _q_ = [0, [11, "- ", [15, [11, ": ", [2, 0, [12, 10, 0]]]]], "- %a: %s\n"],
    _r_ = [0, [17, 4, 0], "@."],
    cst_disappeared = "disappeared",
    cst_reappeared = "reappeared",
    _s_ =
      [0,
       [11, "At most one preprocessor is allowed, while got: ", [2, 0, 0]],
       "At most one preprocessor is allowed, while got: %s"],
    cst_none$0 = cst_none$1;
   function add_ctxt_arg(f){
    return function(param, x){return caml_call1(f, x);};
   }
   function register_transformation$0
   (extensions,
    rules,
    enclose_impl,
    enclose_intf,
    impl,
    intf,
    lint_impl,
    lint_intf,
    preprocess_impl,
    preprocess_intf){
    var
     impl$0 = caml_call2(Ppxlib_Import[95][3], impl, add_ctxt_arg),
     intf$0 = caml_call2(Ppxlib_Import[95][3], intf, add_ctxt_arg),
     preprocess_impl$0 =
       caml_call2(Ppxlib_Import[95][3], preprocess_impl, add_ctxt_arg),
     preprocess_intf$0 =
       caml_call2(Ppxlib_Import[95][3], preprocess_intf, add_ctxt_arg),
     lint_impl$0 = caml_call2(Ppxlib_Import[95][3], lint_impl, add_ctxt_arg),
     lint_intf$0 = caml_call2(Ppxlib_Import[95][3], lint_intf, add_ctxt_arg),
     enclose_impl$0 =
       caml_call2(Ppxlib_Import[95][3], enclose_impl, add_ctxt_arg),
     enclose_intf$0 =
       caml_call2(Ppxlib_Import[95][3], enclose_intf, add_ctxt_arg);
    return caml_call10
            (V2$0[1],
             extensions,
             rules,
             enclose_impl$0,
             enclose_intf$0,
             impl$0,
             intf$0,
             lint_impl$0,
             lint_intf$0,
             preprocess_impl$0,
             preprocess_intf$0);
   }
   function register_code_transformation(name, opt, impl, intf){
    var aliases = opt ? opt[1] : 0;
    return caml_call3
            (register_transformation$0
              (0, 0, 0, 0, [0, impl], [0, intf], 0, 0, 0, 0),
             0,
             [0, aliases],
             name);
   }
   function register_transformation_using_$0(impl, intf){
    var
     impl$0 = caml_call2(Ppxlib_Import[95][3], impl, add_ctxt_arg),
     intf$0 = caml_call2(Ppxlib_Import[95][3], intf, add_ctxt_arg);
    return caml_call2(V2$0[2], impl$0, intf$0);
   }
   function get_whole_ast_passes
   (embed_errors, hook, expect_mismatch_handler, tool_name, input_name){
    var match$0 = apply_list[1];
    if(match$0)
     var
      names = match$0[1],
      cts =
        caml_call2
         (Ppxlib_Import[94][55],
          names,
          function(name){
           return caml_call2
                   (Ppxlib_Import[94][27],
                    function(ct){return has_name(ct, name);},
                    all[1]);
          });
    else
     var cts = caml_call1(Ppxlib_Import[94][9], all[1]);
    var
     match =
       caml_call3
        (Ppxlib_Import[94][17],
         function(param, t){
          var
           rest = param[3],
           aft_i = param[2],
           bef_i = param[1],
           reduced_t =
             [0,
              t[1],
              t[2],
              t[3],
              t[4],
              0,
              0,
              0,
              0,
              t[9],
              t[10],
              t[11],
              t[12],
              t[13]];
          function f(instr){return [0, instr[2], instr[1]];}
          var match = caml_call2(Ppxlib_Import[95][3], t[11], f);
          if(! match) return [0, bef_i, aft_i, [0, reduced_t, rest]];
          var _b$_ = match[1];
          if(_b$_[1]){
           var transf = _b$_[2];
           return [0,
                   bef_i,
                   [0,
                    [0,
                     reduced_t[1],
                     reduced_t[2],
                     [0, transf],
                     reduced_t[4],
                     reduced_t[5],
                     reduced_t[6],
                     reduced_t[7],
                     reduced_t[8],
                     reduced_t[9],
                     reduced_t[10],
                     reduced_t[11],
                     0,
                     reduced_t[13]],
                    aft_i],
                   [0, reduced_t, rest]];
          }
          var transf$0 = _b$_[2];
          return [0,
                  [0,
                   [0,
                    reduced_t[1],
                    reduced_t[2],
                    [0, transf$0],
                    reduced_t[4],
                    reduced_t[5],
                    reduced_t[6],
                    reduced_t[7],
                    reduced_t[8],
                    reduced_t[9],
                    reduced_t[10],
                    reduced_t[11],
                    0,
                    reduced_t[13]],
                   bef_i],
                  aft_i,
                  [0, reduced_t, rest]];
         },
         _m_,
         cts),
     transforms = match[3],
     after_instrs = match[2],
     before_instrs = match[1],
     preprocess =
       caml_call2
        (Ppxlib_Import[94][69],
         cts,
         function(t){
          if
           (!
            caml_call1(Ppxlib_Import[95][1], t[7])
            && ! caml_call1(Ppxlib_Import[95][1], t[8]))
           return 0;
          var _b8_ = t[13], _b9_ = t[8], _b__ = t[7];
          return [0,
                  [0,
                   caml_call2(Stdlib_Printf[4], _n_, t[1]),
                   0,
                   _b__,
                   _b9_,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   _b8_]];
         }),
     linters =
       caml_call2
        (Ppxlib_Import[94][69],
         cts,
         function(t){
          if
           (!
            caml_call1(Ppxlib_Import[95][1], t[5])
            && ! caml_call1(Ppxlib_Import[95][1], t[6]))
           return 0;
          var _b5_ = t[13], _b6_ = t[6], _b7_ = t[5];
          return [0,
                  [0,
                   caml_call2(Stdlib_Printf[4], _o_, t[1]),
                   0,
                   0,
                   0,
                   _b7_,
                   _b6_,
                   0,
                   0,
                   0,
                   0,
                   0,
                   0,
                   _b5_]];
         }),
     _bO_ = caml_call1(Ppxlib_Import[94][1], preprocess);
    if(caml_call2(Ppxlib_Import[78], _bO_, 1)){
     var
      _bP_ =
        caml_call2
         (Ppxlib_Import[94][55], preprocess, function(t){return t[1];}),
      pp = caml_call2(Ppxlib_Import[99][7], cst$1, _bP_),
      err = caml_call2(Stdlib_Printf[4], _s_, pp);
     caml_call1(Stdlib[2], err);
    }
    if(no_merge[1])
     var
      _bS_ =
        caml_call2
         (Ppxlib_Import[94][55],
          transforms,
          function(_bW_){
           return merge_into_generic_mappers
                   (_bW_,
                    embed_errors,
                    hook,
                    expect_mismatch_handler,
                    tool_name,
                    input_name);
          });
    else{
     var
      get_enclosers =
        function(f){
         var
          _b1_ =
            caml_call2
             (Ppxlib_Import[94][69],
              transforms,
              function(ct){
               var match = caml_call1(f, ct);
               if(! match) return 0;
               var x = match[1];
               return [0, [0, ct[1], x]];
              }),
          _b2_ =
            caml_call1
             (caml_call1
               (Ppxlib_Import[94][44],
                function(_b4_, param){
                 var b = param[1], a = _b4_[1];
                 return caml_call2(Ppxlib_Import[99][71], a, b);
                }),
              _b1_);
         return caml_call2
                 (Ppxlib_Import[94][55],
                  _b2_,
                  function(_b3_){return _b3_[2];});
        },
      _bQ_ =
        caml_call2
         (Ppxlib_Import[94][55], transforms, function(ct){return ct[12];}),
      rules = caml_call1(Ppxlib_Import[94][59], _bQ_),
      impl_enclosers = get_enclosers(function(ct){return ct[9];}),
      intf_enclosers = get_enclosers(function(ct){return ct[10];});
     a:
     {
      if(! rules && ! impl_enclosers && ! intf_enclosers){var _bR_ = transforms; break a;}
      var
       merge_encloser =
         function(enclosers){
          return enclosers
                  ? [0,
                    function(ctxt, loc){
                     var
                      _bZ_ =
                        caml_call2
                         (Ppxlib_Import[94][55],
                          enclosers,
                          function(f){return caml_call2(f, ctxt, loc);}),
                      match = caml_call1(Ppxlib_Import[94][62], _bZ_),
                      footers = match[2],
                      headers = match[1],
                      headers$0 = caml_call1(Ppxlib_Import[94][59], headers),
                      _b0_ = caml_call1(Ppxlib_Import[94][9], footers),
                      footers$0 = caml_call1(Ppxlib_Import[94][59], _b0_);
                     return [0, headers$0, footers$0];
                    }]
                  : 0;
         },
       enclose_intf = merge_encloser(intf_enclosers),
       enclose_impl = merge_encloser(impl_enclosers),
       _bN_ =
         [0,
          cst_builtin_context_free,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          enclose_impl,
          enclose_intf,
          0,
          rules,
          caml_call1(Ppxlib_Caller_id[1], 0)],
       _bR_ =
         [0,
          function(_bY_){
            return merge_into_generic_mappers
                    (_bN_,
                     embed_errors,
                     hook,
                     expect_mismatch_handler,
                     _bY_,
                     input_name);
           }
           (tool_name),
          transforms];
     }
     var
      _bS_ =
        caml_call1
         (caml_call1
           (Ppxlib_Import[94][31],
            function(ct){
             var _bX_ = ct[4];
             if(! ct[3] && ! _bX_) return 0;
             return 1;
            }),
          _bR_);
    }
    var
     _bT_ = caml_call2(Ppxlib_Import[100], _bS_, after_instrs),
     _bU_ = caml_call2(Ppxlib_Import[100], before_instrs, _bT_),
     _bV_ = caml_call2(Ppxlib_Import[100], preprocess, _bU_);
    return caml_call2(Ppxlib_Import[100], linters, _bV_);
   }
   function apply_transforms
   (tool_name,
    file_path,
    field,
    lint_field,
    dropped_so_far,
    hook,
    expect_mismatch_handler,
    input_name,
    embed_errors,
    ast){
    var
     cts =
       get_whole_ast_passes
        (embed_errors, hook, expect_mismatch_handler, tool_name, input_name),
     acc =
       caml_call3
        (Ppxlib_Import[94][17],
         function(param, ct){
          var
           errors = param[4],
           lint_errors = param[3],
           old_dropped = param[2],
           ast = param[1];
          if(input_name)
           var input_name$0 = input_name[1], input_name$1 = input_name$0;
          else
           var input_name$1 = cst_none$0;
          var
           ctxt =
             caml_call3
              (Ppxlib_Expansion_context[1][4],
               tool_name,
               file_path,
               input_name$1),
           match = caml_call1(lint_field, ct);
          if(match){
           var f = match[1];
           try{
            var
             _bK_ = caml_call2(f, ctxt, ast),
             _bL_ = caml_call2(Ppxlib_Import[100], lint_errors, _bK_),
             errors$0 = errors,
             lint_errors$0 = _bL_;
           }
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0);
            if(! embed_errors) throw caml_maybe_attach_backtrace(exn, 0);
            var
             errors$0 = [0, caml_call1(Ppxlib_Common[23], exn), errors],
             lint_errors$0 = lint_errors;
           }
          }
          else
           var errors$0 = errors, lint_errors$0 = lint_errors;
          var match$0 = caml_call1(field, ct);
          if(! match$0) return [0, ast, old_dropped, lint_errors$0, errors$0];
          var f$0 = match$0[1];
          try{
           var
            _bH_ = caml_call2(f$0, ctxt, ast),
            _bI_ = _bH_[2],
            _bJ_ = _bH_[1],
            errors$1 = errors$0,
            more_errors = _bI_,
            ast$0 = _bJ_;
          }
          catch(exn){
           var exn$0 = caml_wrap_exception(exn);
           if(! embed_errors) throw caml_maybe_attach_backtrace(exn$0, 0);
           var
            errors$1 = [0, caml_call1(Ppxlib_Common[23], exn$0), errors$0],
            more_errors = 0,
            ast$0 = ast;
          }
          if(debug_attribute_drop[1]){
           var
            new_dropped = caml_call1(dropped_so_far, ast$0),
            name = ct[1],
            print_diff =
              function(what, a, b){
               var
                diff =
                  caml_call2
                   (Ppxlib_Import[94][31],
                    function(name){
                     return 1
                            -
                             caml_call2
                              (Ppxlib_Import[94][22],
                               function(name$0){return name[1] === name$0[1] ? 1 : 0;},
                               b);
                    },
                    a),
                _bM_ = 1 - caml_call1(Ppxlib_Import[94][66], diff);
               return _bM_
                       ? (caml_call3
                          (Stdlib_Printf[3], _p_, what, name),
                         caml_call2
                          (Ppxlib_Import[94][77],
                           diff,
                           function(param){
                            var loc = param[2], txt = param[1];
                            return caml_call4
                                    (Stdlib_Format[145], _q_, Ppxlib_Location[8], loc, txt);
                           }),
                         caml_call1(Stdlib_Format[145], _r_))
                       : _bM_;
              };
           print_diff(cst_disappeared, new_dropped, old_dropped);
           print_diff(cst_reappeared, old_dropped, new_dropped);
           var dropped = new_dropped;
          }
          else
           var dropped = 0;
          return [0,
                  ast$0,
                  dropped,
                  lint_errors$0,
                  caml_call2(Ppxlib_Import[100], errors$1, more_errors)];
         },
         [0, ast, 0, 0, 0],
         cts),
     errors = acc[4],
     lint_errors = acc[3],
     ast$0 = acc[1];
    return [0,
            ast$0,
            caml_call2
             (Ppxlib_Import[94][55],
              lint_errors,
              function(param){
               var s = param[2], loc = param[1];
               return caml_call2(Ppxlib_Common[20], loc, s);
              }),
            errors];
   }
   function error_to_extension(error, kind){
    if(kind){
     var
      loc = Ppxlib_Location[3],
      ext = caml_call1(Ppxlib_Location[13][7], error);
     return [1, [0, caml_call3(Ppxlib_Ast_builder[1][8], loc, ext, 0), 0]];
    }
    var
     loc$0 = Ppxlib_Location[3],
     ext$0 = caml_call1(Ppxlib_Location[13][7], error);
    return [0, [0, caml_call3(Ppxlib_Ast_builder[1][23], loc$0, ext$0, 0), 0]];
   }
   function exn_to_extension(exn, kind){
    return error_to_extension(caml_call1(Ppxlib_Common[23], exn), kind);
   }
   function sort_errors_by_loc(errors){
    return caml_call2
            (Ppxlib_Import[94][44],
             function(error$0, error){
              var
               loc = caml_call1(Ppxlib_Location[13][10], error$0),
               loc$0 = caml_call1(Ppxlib_Location[13][10], error);
              return caml_call2(Ppxlib_Location[12], loc, loc$0);
             },
             errors);
   }
   function map_structure_gen
   (st, tool_name, hook, expect_mismatch_handler, input_name, embed_errors){
    acknowledge_cookies(0);
    if(perform_checks[1]){
     caml_call1(Ppxlib_Attribute[26], 0);
     var _bw_ = Ppxlib_Attribute[20];
     caml_call2(caml_get_public_method(_bw_, -951102413, 70), _bw_, st);
    }
    function with_errors(errors, st){
     var
      sorted = sort_errors_by_loc(errors),
      _bE_ =
        caml_call2
         (Ppxlib_Import[94][55],
          sorted,
          function(error){
           var
            _bF_ = caml_call1(Ppxlib_Location[13][7], error),
            _bG_ = caml_call1(Ppxlib_Location[13][10], error);
           return caml_call2
                   (caml_get_public_method(ghost, 832861151, 71),
                    ghost,
                    caml_call3(Ppxlib_Ast_builder[1][8], _bG_, _bF_, 0));
          });
     return caml_call2(Ppxlib_Import[100], _bE_, st);
    }
    var
     file_path = get_default_path_str(st),
     match =
       apply_transforms
        (tool_name,
         file_path,
         function(ct){return ct[3];},
         function(ct){return ct[5];},
         Ppxlib_Attribute[24],
         hook,
         expect_mismatch_handler,
         input_name,
         embed_errors,
         st),
     errors$0 = match[3],
     lint_errors = match[2],
     st$1 = match[1];
    if(lint_errors)
     var
      _bx_ =
        caml_call2
         (Ppxlib_Import[94][55],
          lint_errors,
          function(attr){
           var loc = attr[1][2];
           return caml_call2(Ppxlib_Ast_builder[1][9], loc, attr);
          }),
      st$0 = caml_call2(Ppxlib_Import[100], _bx_, st$1);
    else
     var st$0 = st$1;
    call_post_handlers(0);
    if(perform_checks[1]){
     var
      _by_ = Ppxlib_Attribute[19],
      unused_attributes_errors =
        caml_call3
         (caml_get_public_method(_by_, -951102413, 72), _by_, st$0, 0);
     if(perform_checks_on_extensions[1])
      var
       _bz_ = Ppxlib_Extension[10],
       unused_extension_errors =
         caml_call3
          (caml_get_public_method(_bz_, -951102413, 73), _bz_, st$0, 0);
     else
      var unused_extension_errors = 0;
     var
      not_seen_errors = caml_call1(Ppxlib_Attribute[21], 0),
      _bA_ =
        caml_call2
         (Ppxlib_Import[100], unused_extension_errors, not_seen_errors),
      errors = caml_call2(Ppxlib_Import[100], unused_attributes_errors, _bA_);
    }
    else
     var errors = 0;
    if(perform_locations_check[1]){
     var
      _bB_ = Ppxlib_Location_check[1][1],
      _bC_ = caml_call1(Ppxlib_Location_check[2], loc_fname[1]);
     caml_call3
      (caml_get_public_method(_bC_, -951102413, 74), _bC_, st$0, _bB_);
    }
    var _bD_ = with_errors(errors, st$0);
    return with_errors(caml_call1(Ppxlib_Import[94][9], errors$0), _bD_);
   }
   function map_signature_gen
   (sg, tool_name, hook, expect_mismatch_handler, input_name, embed_errors){
    acknowledge_cookies(0);
    if(perform_checks[1]){
     caml_call1(Ppxlib_Attribute[26], 0);
     var _bl_ = Ppxlib_Attribute[20];
     caml_call2(caml_get_public_method(_bl_, 359375608, 75), _bl_, sg);
    }
    function with_errors(errors, sg){
     var
      sorted = sort_errors_by_loc(errors),
      _bt_ =
        caml_call2
         (Ppxlib_Import[94][55],
          sorted,
          function(error){
           var
            _bu_ = caml_call1(Ppxlib_Location[13][7], error),
            _bv_ = caml_call1(Ppxlib_Location[13][10], error);
           return caml_call2
                   (caml_get_public_method(ghost, -662996230, 76),
                    ghost,
                    caml_call3(Ppxlib_Ast_builder[1][23], _bv_, _bu_, 0));
          });
     return caml_call2(Ppxlib_Import[100], _bt_, sg);
    }
    var
     file_path = get_default_path_sig(sg),
     match =
       apply_transforms
        (tool_name,
         file_path,
         function(ct){return ct[4];},
         function(ct){return ct[6];},
         Ppxlib_Attribute[25],
         hook,
         expect_mismatch_handler,
         input_name,
         embed_errors,
         sg),
     errors$0 = match[3],
     lint_errors = match[2],
     sg$1 = match[1];
    if(lint_errors)
     var
      _bm_ =
        caml_call2
         (Ppxlib_Import[94][55],
          lint_errors,
          function(attr){
           var loc = attr[1][2];
           return caml_call2(Ppxlib_Ast_builder[1][24], loc, attr);
          }),
      sg$0 = caml_call2(Ppxlib_Import[100], _bm_, sg$1);
    else
     var sg$0 = sg$1;
    call_post_handlers(0);
    if(perform_checks[1]){
     var
      _bn_ = Ppxlib_Attribute[19],
      unused_attributes_errors =
        caml_call3(caml_get_public_method(_bn_, 359375608, 77), _bn_, sg$0, 0);
     if(perform_checks_on_extensions[1])
      var
       _bo_ = Ppxlib_Extension[10],
       unused_extension_errors =
         caml_call3
          (caml_get_public_method(_bo_, 359375608, 78), _bo_, sg$0, 0);
     else
      var unused_extension_errors = 0;
     var
      not_seen_errors = caml_call1(Ppxlib_Attribute[21], 0),
      _bp_ =
        caml_call2
         (Ppxlib_Import[100], unused_extension_errors, not_seen_errors),
      errors = caml_call2(Ppxlib_Import[100], unused_attributes_errors, _bp_);
    }
    else
     var errors = 0;
    if(perform_locations_check[1]){
     var
      _bq_ = Ppxlib_Location_check[1][1],
      _br_ = caml_call1(Ppxlib_Location_check[2], loc_fname[1]);
     caml_call3(caml_get_public_method(_br_, 359375608, 79), _br_, sg$0, _bq_);
    }
    var _bs_ = with_errors(errors, sg$0);
    return with_errors(caml_call1(Ppxlib_Import[94][9], errors$0), _bs_);
   }
   function map_signature(sg){
    var
     _bj_ = Ppxlib_Context_free[3][1],
     _bk_ = Ppxlib_Context_free[2][1],
     ast =
       map_signature_gen
        (sg, caml_call1(Astlib_Ast_metadata[5], 0), _bk_, _bj_, 0, 0);
    return ast;
   }
   function versioned_errorf(input_version, input_file_name){
    return caml_call1
            (Stdlib_Printf[10],
             function(msg){
              var
               _bi_ = caml_call1(Ppxlib_Location[1], input_file_name),
               err = caml_call3(Ppxlib_Location[13][1], _bi_, msg, 0);
              return [1, [0, err, input_version]];
             });
   }
   function remove_no_error(fn){
    try{caml_sys_remove(fn); return;}
    catch(_bh_){
     var _bg_ = caml_wrap_exception(_bh_);
     if(_bg_[1] === Stdlib[11]) return;
     throw caml_maybe_attach_backtrace(_bg_, 0);
    }
   }
   var
    _y_ = caml_call1(CamlinternalOO[16], _b_),
    _z_ = caml_call2(CamlinternalOO[8], _y_, shared)[23],
    _A_ =
      caml_call6
        (CamlinternalOO[18], _y_, 0, 0, _a_, Ppxlib_Ast_traverse[5], 1)
       [1];
   caml_call3
    (CamlinternalOO[10],
     _y_,
     _z_,
     function(self_2, param, pos){
      var new_fn = param[2], old_fn = param[1];
      return caml_call2(Ppxlib_Import[99][72], pos[1], old_fn)
              ? [0, new_fn, pos[2], pos[3], pos[4]]
              : pos;
     });
   caml_call1(CamlinternalOO[17], _y_);
   var _B_ = caml_call2(CamlinternalOO[24], 0, _y_);
   caml_call1(_A_, _B_);
   var
    relocate_mapper = caml_call3(CamlinternalOO[26], 0, _B_, _y_),
    set_input_name = Astlib_Location[2],
    _C_ =
      [0,
       [11,
        "File contains a binary ",
        [2, 0, [11, " AST but an ", [2, 0, [11, " was expected", 0]]]]],
       "File contains a binary %s AST but an %s was expected"],
    _D_ = [0, cst_src_driver_ml, 871, 30],
    _E_ =
      [0,
       [11,
        "File is a binary ast for an unknown version of OCaml with magic number '",
        [2, 0, [12, 39, 0]]],
       "File is a binary ast for an unknown version of OCaml with magic number '%s'"],
    _I_ = [0, cst_src_driver_ml, 933, 8],
    _J_ = [0, cst_src_driver_ml, 963, 8];
   function load_input(kind, input_name, relocate, fn){
    caml_call1(set_input_name, input_name);
    var
     input_source = caml_call2(Ppxlib_Import[99][72], fn, cst$3) ? 0 : [0, fn],
     input_kind = [0, kind, input_name],
     _bd_ = caml_call2(Ppxlib_Utils[4][1], input_source, input_kind);
    if(0 === _bd_[0]){
     var
      match = _bd_[1],
      ast = match[3],
      input_version = match[2],
      ast_input_name = match[1],
      ast_kind = caml_call1(Ppxlib_Utils[3][3], ast);
     if(! caml_call2(Ppxlib_Utils[2][3], kind, ast_kind)){
      var
       _be_ = caml_call1(Ppxlib_Utils[2][2], kind),
       _bf_ = caml_call1(Ppxlib_Utils[2][2], ast_kind);
      return caml_call3(versioned_errorf(input_version, fn), _C_, _bf_, _be_);
     }
     if
      (!
       caml_call2(Ppxlib_Import[99][72], ast_input_name, input_name)
       && relocate)
      return [0,
              [0,
               input_name,
               input_version,
               caml_call3
                (Ppxlib_Utils[3][2],
                 ast,
                 relocate_mapper,
                 [0, ast_input_name, input_name])]];
     caml_call1(set_input_name, ast_input_name);
     return [0, [0, ast_input_name, input_version, ast]];
    }
    var match$0 = _bd_[1];
    if(typeof match$0 === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, _D_], 1);
    if(0 === match$0[0]){
     var fall_back_version = match$0[2], unknown_magic = match$0[1];
     return caml_call2
             (versioned_errorf(fall_back_version, fn), _E_, unknown_magic);
    }
    var fall_back_version$0 = match$0[2], error = match$0[1];
    return [1, [0, error, fall_back_version$0]];
   }
   function extract_cookies(ast){
    if(0 === ast[0]){
     var sg$1 = ast[1];
     a:
     {
      if(sg$1){
       var prefix$1 = sg$1[1], _bb_ = prefix$1[1];
       if(14 === _bb_[0] && _bb_[1][1][1] === cst_ocaml_ppx_context){
        var
         sg$0 = sg$1[2],
         prefix$2 = caml_call2(Ppxlib_ast_Import[2][10], 1, [0, prefix$1, 0]),
         _bc_ = caml_call2(Astlib_Ast_metadata[4], 1, prefix$2);
        if(! caml_call1(Ppxlib_Import[94][66], _bc_))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _J_], 1);
        var sg = sg$0;
        break a;
       }
      }
      var sg = sg$1;
     }
     caml_call2
      (Ppxlib_Import[94][77],
       given_through_cli[1],
       function(param){
        var expr = param[2], name = param[1];
        return set(0, name, expr);
       });
     return [0, sg];
    }
    var st$1 = ast[1];
    a:
    {
     if(st$1){
      var prefix = st$1[1], _a$_ = prefix[1];
      if(13 === _a$_[0] && _a$_[1][1][1] === cst_ocaml_ppx_context){
       var
        st$0 = st$1[2],
        prefix$0 = caml_call2(Ppxlib_ast_Import[2][10], 0, [0, prefix, 0]),
        _ba_ = caml_call2(Astlib_Ast_metadata[2], 1, prefix$0);
       if(! caml_call1(Ppxlib_Import[94][66], _ba_))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _I_], 1);
       var st = st$0;
       break a;
      }
     }
     var st = st$1;
    }
    caml_call2
     (Ppxlib_Import[94][77],
      given_through_cli[1],
      function(param){
       var expr = param[2], name = param[1];
       return set(0, name, expr);
      });
    return [1, st];
   }
   var corrections = [0, 0];
   function add_to_list(r, x){r[1] = [0, x, r[1]]; return 0;}
   function register_correction(loc, repl){
    return add_to_list
            (corrections,
             caml_call4(Ppxlib_Reconcile[2][2], loc[1], loc[2], repl, 0));
   }
   var process_file_hooks = [0, 0];
   function register_process_file_hook(f){
    return add_to_list(process_file_hooks, f);
   }
   var all$0 = [0, 0];
   function process_ast
   (ast, input_name, tool_name, hook, expect_mismatch_handler, embed_errors){
    if(0 === ast[0]){
     var
      x = ast[1],
      ast$0 =
        map_signature_gen
         (x,
          tool_name,
          hook,
          expect_mismatch_handler,
          [0, input_name],
          embed_errors);
     return [0, ast$0];
    }
    var
     x$0 = ast[1],
     ast$1 =
       map_structure_gen
        (x$0,
         tool_name,
         hook,
         expect_mismatch_handler,
         [0, input_name],
         embed_errors);
    return [1, ast$1];
   }
   var
    output_mode = [0, 0],
    output = [0, 0],
    kind = [0, 0],
    input = [0, 0],
    embed_errors = [0, 0],
    use_compiler_pprint = [0, 0],
    cst_too_many_input_files = "too many input files",
    cst_must_specify_at_most_one_o =
      "must specify at most one of -impl or -intf",
    _K_ = [0, cst_src_driver_ml, 1202, 26],
    cst_dump_ast = cst_dump_ast$0,
    cst_dparsetree = cst_dparsetree$0,
    cst_null = cst_null$0,
    cst_reconcile_with_comments = cst_reconcile_with_comments$0,
    cst_reconcile = cst_reconcile$0,
    _L_ =
      [0,
       [2, 0, [11, " and ", [2, 0, [11, " are incompatible", 0]]]],
       "%s and %s are incompatible"],
    _M_ = [0, cst_src_driver_ml, 1197, 23],
    _O_ =
      [0,
       [11, "code transformation '", [2, 0, [11, "' does not exist", 0]]],
       "code transformation '%s' does not exist"];
   function set_input(fn){
    if(input[1])
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_too_many_input_files], 1);
    input[1] = [0, fn];
    return 0;
   }
   function set_kind(k){
    var match = kind[1];
    if(match){
     var k$0 = match[1];
     if(! caml_call2(Ppxlib_Utils[2][3], k, k$0))
      throw caml_maybe_attach_backtrace
             ([0, Stdlib_Arg[8], cst_must_specify_at_most_one_o], 1);
    }
    kind[1] = [0, k];
    return 0;
   }
   function set_output_mode(mode){
    var match = output_mode[1];
    a:
    {
     b:
     {
      if(typeof match === "number"){
       switch(match){
         case 0:
          output_mode[1] = mode; return 0;
         case 1:
          if(typeof mode !== "number") break a;
          if(1 !== mode){if(mode) break a; break b;}
          break;
         case 2:
          if(typeof mode !== "number") break a;
          if(3 <= mode) break a;
          switch(mode){case 0: break b;case 1: break a;
          }
          break;
         default: break b;
       }
       return 0;
      }
      var a = match[1];
      if(typeof mode !== "number"){
       var b = mode[1];
       if(caml_call2(Ppxlib_Import[73][2], a, b)) return 0;
       break a;
      }
      if(mode) break a;
     }
     if(typeof mode === "number" && ! mode)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _M_], 1);
    }
    function arg_of_output_mode(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         throw caml_maybe_attach_backtrace([0, Assert_failure, _K_], 1);
        case 1:
         return cst_dump_ast;
        case 2:
         return cst_dparsetree;
        default: return cst_null;
      }
     return param[1] ? cst_reconcile_with_comments : cst_reconcile;
    }
    var
     _a8_ = arg_of_output_mode(mode),
     _a9_ = arg_of_output_mode(match),
     _a__ = caml_call3(Stdlib_Printf[4], _L_, _a9_, _a8_);
    throw caml_maybe_attach_backtrace([0, Stdlib_Arg[8], _a__], 1);
   }
   function parse_apply_list(s){
    var
     names =
       caml_call2(Ppxlib_Import[99][72], s, cst$6)
        ? 0
        : caml_call2(Ppxlib_Import[99][70], s, 44);
    caml_call2
     (Ppxlib_Import[94][77],
      names,
      function(name){
       var
        _a6_ =
          1
          -
           caml_call2
            (Ppxlib_Import[94][22],
             function(ct){return has_name(ct, name);},
             all[1]);
       if(! _a6_) return _a6_;
       var _a7_ = caml_call2(Stdlib_Printf[4], _O_, name);
       throw caml_maybe_attach_backtrace([0, Stdlib_Arg[8], _a7_], 1);
      });
    return names;
   }
   var
    mask = [0, 0, 0],
    cst_apply_called_too_many_time = cst_apply_called_too_many_time$1,
    cst_apply_must_be_called_befor =
      "-apply must be called before -dont-apply",
    cst_apply_called_too_many_time$0 = cst_apply_called_too_many_time$1,
    _P_ = [0, "<command-line>", 1, 0, 0],
    cst_invalid_cookie_must_be_of_ =
      'invalid cookie, must be of the form "<name>=<expr>"';
   function handle_apply(s){
    if(caml_call1(Ppxlib_Import[95][1], mask[1]))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_apply_called_too_many_time], 1);
    if(caml_call1(Ppxlib_Import[95][1], mask[2]))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_apply_must_be_called_befor], 1);
    mask[1] = [0, parse_apply_list(s)];
    return 0;
   }
   function handle_dont_apply(s){
    if(caml_call1(Ppxlib_Import[95][1], mask[2]))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_apply_called_too_many_time$0], 1);
    mask[2] = [0, parse_apply_list(s)];
    return 0;
   }
   function interpret_mask(param){
    var
     _a1_ = caml_call1(Ppxlib_Import[95][1], mask[1]),
     _a2_ = _a1_ || caml_call1(Ppxlib_Import[95][1], mask[2]);
    if(_a2_){
     var
      selected_transform_name =
        function(ct){
         var match = mask[1];
         if(match)
          var
           names = match[1],
           is_candidate =
             caml_call2
              (Ppxlib_Import[94][22],
               function(_a5_){return has_name(ct, _a5_);},
               names);
         else
          var is_candidate = 1;
         var match$0 = mask[2];
         if(match$0)
          var
           names$0 = match$0[1],
           _a3_ =
             is_candidate
              ? 1
               -
                caml_call2
                 (Ppxlib_Import[94][22],
                  function(_a4_){return has_name(ct, _a4_);},
                  names$0)
              : is_candidate,
           is_selected = _a3_;
         else
          var is_selected = is_candidate;
         return is_selected ? [0, ct[1]] : 0;
        };
     apply_list[1] =
      [0, caml_call2(Ppxlib_Import[94][69], all[1], selected_transform_name)];
    }
   }
   function set_cookie(s){
    var match = caml_call2(Ppxlib_Import[99][66], s, 61);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_invalid_cookie_must_be_of_], 1);
    var
     match$0 = match[1],
     value = match$0[2],
     name = match$0[1],
     lexbuf = caml_call2(Stdlib_Lexing[3], 0, value);
    lexbuf[12] = _P_;
    var expr = caml_call1(Ppxlib_ast_Import[3][7], lexbuf);
    given_through_cli[1] = [0, [0, name, expr], given_through_cli[1]];
    return 0;
   }
   var
    shared_args =
      [0,
       [0,
        "-loc-filename",
        [4, function(s){loc_fname[1] = [0, s]; return 0;}],
        "<string> File name to use in locations"],
       [0,
        [0,
         "-reserve-namespace",
         [4, Ppxlib_Name[6][1]],
         "<string> Mark the given namespace as reserved"],
        [0,
         [0, "-no-check", [3, perform_checks], " Disable checks (unsafe)"],
         [0,
          [0, "-check", [2, perform_checks], " Enable checks"],
          [0,
           [0,
            "-no-check-on-extensions",
            [3, perform_checks_on_extensions],
            " Disable checks on extension point only"],
           [0,
            [0,
             "-check-on-extensions",
             [2, perform_checks_on_extensions],
             " Enable checks on extension point only"],
            [0,
             [0,
              "-no-locations-check",
              [3, perform_locations_check],
              " Disable locations check only"],
             [0,
              [0,
               "-locations-check",
               [2, perform_locations_check],
               " Enable locations check only"],
              [0,
               [0,
                "-apply",
                [4, handle_apply],
                "<names> Apply these transformations in order (comma-separated list)"],
               [0,
                [0,
                 "-dont-apply",
                 [4, handle_dont_apply],
                 "<names> Exclude these transformations"],
                [0,
                 [0,
                  "-no-merge",
                  [2, no_merge],
                  " Do not merge context free transformations (better for debugging rewriters). As a result, the context-free transformations are not all applied before all impl and intf."],
                 [0,
                  [0,
                   "-cookie",
                   [4, set_cookie],
                   "NAME=EXPR Set the cookie NAME to EXPR"],
                  [0, [0, "--cookie", [4, set_cookie], " Same as -cookie"], 0]]]]]]]]]]]]];
   caml_call2
    (Ppxlib_Import[94][77],
     shared_args,
     function(param){
      var doc = param[3], spec = param[2], key = param[1];
      return add_arg(key, spec, doc);
     });
   function as_pp(param){set_output_mode(1); embed_errors[1] = 1; return 0;}
   var
    _Q_ = [0, 1],
    _R_ = [0, 0],
    _S_ =
      [0,
       [11,
        "Warning: the -ite-check flag is deprecated and has no effect.\n",
        [10, 0]],
       "Warning: the -ite-check flag is deprecated and has no effect.\n%!"],
    cst_as_ppx_must_be_the_first_a = "--as-ppx must be the first argument",
    cst_as_ppx_must_be_the_first_a$0 = "-as-ppx must be the first argument",
    standalone_args =
      [0,
       [0,
        cst_as_ppx$0,
        [0,
         function(param){
          throw caml_maybe_attach_backtrace
                 ([0, Stdlib_Arg[8], cst_as_ppx_must_be_the_first_a$0], 1);
         }],
        " Run as a -ppx rewriter (must be the first argument)"],
       [0,
        [0,
         cst_as_ppx,
         [0,
          function(param){
           throw caml_maybe_attach_backtrace
                  ([0, Stdlib_Arg[8], cst_as_ppx_must_be_the_first_a], 1);
          }],
         " Same as -as-ppx"],
        [0,
         [0, "-as-pp", [0, as_pp], " Shorthand for: -dump-ast -embed-errors"],
         [0,
          [0, "--as-pp", [0, as_pp], " Same as -as-pp"],
          [0,
           [0,
            "-o",
            [4, function(s){output[1] = [0, s]; return 0;}],
            "<filename> Output file (use '-' for stdout)"],
           [0,
            [0,
             cst$8,
             [0, function(param){return set_input(cst$7);}],
             " Read input from stdin"],
            [0,
             [0,
              cst_dump_ast$0,
              [0, function(param){return set_output_mode(1);}],
              " Dump the marshaled ast to the output file instead of pretty-printing it"],
             [0,
              [0,
               "--dump-ast",
               [0, function(param){return set_output_mode(1);}],
               " Same as -dump-ast"],
              [0,
               [0,
                cst_dparsetree$0,
                [0, function(param){return set_output_mode(2);}],
                " Print the parsetree (same as ocamlc -dparsetree)"],
               [0,
                [0,
                 "-embed-errors",
                 [2, embed_errors],
                 " Embed errors in the output AST (default: true when -as-pp, false otherwise)"],
                [0,
                 [0,
                  cst_null$0,
                  [0, function(param){return set_output_mode(3);}],
                  " Produce no output, except for errors"],
                 [0,
                  [0,
                   "-impl",
                   [0, function(param){return set_kind(1);}],
                   "<file> Treat the input as a .ml file"],
                  [0,
                   [0,
                    "--impl",
                    [0, function(param){return set_kind(1);}],
                    "<file> Same as -impl"],
                   [0,
                    [0,
                     "-intf",
                     [0, function(param){return set_kind(0);}],
                     "<file> Treat the input as a .mli file"],
                    [0,
                     [0,
                      "--intf",
                      [0, function(param){return set_kind(0);}],
                      "<file> Same as -intf"],
                     [0,
                      [0,
                       "-debug-attribute-drop",
                       [2, debug_attribute_drop],
                       " Debug attribute dropping"],
                      [0,
                       [0,
                        "-print-transformations",
                        [2, request_print_transformations],
                        " Print linked-in code transformations, in the order they are applied"],
                       [0,
                        [0,
                         "-print-passes",
                         [2, request_print_passes],
                         " Print the actual passes over the whole AST in the order they are applied"],
                        [0,
                         [0,
                          "-ite-check",
                          [0,
                           function(param){
                            caml_call1(Stdlib_Printf[3], _S_);
                            Ppxlib_ast_Warn[1][1] = 1;
                            return 0;
                           }],
                          " (no effect -- kept for compatibility)"],
                         [0,
                          [0,
                           "-pp",
                           [4, function(s){preprocessor[1] = [0, s]; return 0;}],
                           "<command>  Pipe sources through preprocessor <command> (incompatible with -as-ppx)"],
                          [0,
                           [0,
                            cst_reconcile$0,
                            [0, function(param){return set_output_mode(_R_);}],
                            " (WIP) Pretty print the output using a mix of the input source and the generated code"],
                           [0,
                            [0,
                             cst_reconcile_with_comments$0,
                             [0, function(param){return set_output_mode(_Q_);}],
                             " (WIP) same as -reconcile but uses comments to enclose the generated code"],
                            [0,
                             [0,
                              "-no-color",
                              [3, use_color],
                              " Don't use colors when printing errors"],
                             [0,
                              [0,
                               "-diff-cmd",
                               [4, function(s){diff_command[1] = [0, s]; return 0;}],
                               " Diff command when using code expectations (use - to disable diffing)"],
                              [0,
                               [0,
                                "-pretty",
                                [2, pretty],
                                " Instruct code generators to improve the prettiness of the generated code"],
                               [0,
                                [0,
                                 "-styler",
                                 [4, function(s){styler[1] = [0, s]; return 0;}],
                                 " Code styler"],
                                [0,
                                 [0,
                                  "-output-metadata",
                                  [4,
                                   function(s){output_metadata_filename[1] = [0, s]; return 0;}],
                                  "FILE Where to store the output metadata"],
                                 [0,
                                  [0,
                                   "-corrected-suffix",
                                   [5, corrected_suffix],
                                   "SUFFIX Suffix to append to corrected files"],
                                  [0,
                                   [0,
                                    "-keywords",
                                    [4, function(s){keywords[1] = [0, s]; return 0;}],
                                    "<version+list> Set keywords according to the version+list specification. Allows using a set of keywords different from the one of the current compiler for backward compatibility."],
                                   [0,
                                    [0,
                                     "--keywords",
                                     [4, function(s){keywords[1] = [0, s]; return 0;}],
                                     "<version+list> Same as -keywords"],
                                    [0,
                                     [0,
                                      "--use-compiler-pp",
                                      [2, use_compiler_pprint],
                                      "Force migrating the AST back to the compiler's version before printing it as source code using the compiler's Pprintast utilities."],
                                     0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],
    _t_ =
      [0,
       [11, cst_builtin_freshen_and_collec, 0],
       cst_builtin_freshen_and_collec],
    _u_ = [0, [2, 0, [12, 10, 0]], cst_s$0],
    _v_ =
      [0,
       [11, cst_builtin_check_unused_attri, 0],
       cst_builtin_check_unused_attri],
    _w_ =
      [0,
       [11, cst_builtin_check_unused_exten, 0],
       cst_builtin_check_unused_exten],
    _x_ =
      [0,
       [11,
        "Error while running external preprocessor\nCommand line: ",
        [2, 0, [12, 10, 0]]],
       "Error while running external preprocessor\nCommand line: %s\n"],
    cst_ocamlpp = "ocamlpp",
    _F_ =
      [0,
       [11, cst_Expected_a_binary_AST_as_i, 0],
       cst_Expected_a_binary_AST_as_i],
    _G_ =
      [0,
       [11,
        "The input is a binary ast for an unknown version of OCaml with magic number '",
        [2, 0, [12, 39, 0]]],
       "The input is a binary ast for an unknown version of OCaml with magic number '%s'"],
    _H_ =
      [0,
       [11, cst_ppxlib_driver_cannot_use_r, 0],
       cst_ppxlib_driver_cannot_use_r],
    cst_ppxlib_driver = cst_ppxlib_driver$1,
    cst_ppxlib_driver$0 = cst_ppxlib_driver$1,
    _N_ = [0, [2, 0, [12, 10, 0]], cst_s$0],
    _T_ =
      [0,
       [2, 0, [11, " [extra_args] [<files>]", 0]],
       "%s [extra_args] [<files>]"],
    _U_ =
      [0,
       [2,
        0,
        [11,
         ": don't know what to do with '",
         [2, 0, [11, "', use -impl or -intf.\n", 0]]]],
       "%s: don't know what to do with '%s', use -impl or -intf.\n"],
    _V_ =
      [0,
       [2, 0, [11, ": no input file given\n", [10, 0]]],
       "%s: no input file given\n%!"],
    _W_ = [0, [2, 0, 0], cst_s],
    _X_ = [0, [2, 0, 0], cst_s],
    cst_anonymous_arguments_not_ac = "anonymous arguments not accepted",
    _Y_ = [0, [11, "Usage: ", [2, 0, [12, 10, [10, 0]]]], "Usage: %s\n%!"],
    cst_help = "-help",
    _Z_ = [0, cst_src_driver_ml, 1509, 6],
    cst_help$0 = "--help",
    ___ =
      [0,
       [2, 0, [11, " -as-ppx [extra_args] <infile> <outfile>", 0]],
       "%s -as-ppx [extra_args] <infile> <outfile>"],
    cst_Unused_with_as_ppx = " Unused with -as-ppx",
    _$_ =
      [0,
       [2, 0, [11, " [extra_args] <infile> <outfile>", 0]],
       "%s [extra_args] <infile> <outfile>"];
   function get_args(opt, param){
    var
     standalone_args$0 = opt ? opt[1] : standalone_args,
     _a0_ = caml_call1(Ppxlib_Import[94][9], args[1]);
    return caml_call2(Ppxlib_Import[100], standalone_args$0, _a0_);
   }
   function standalone_main(param){
    var
     usage = caml_call2(Stdlib_Printf[4], _T_, exe_name),
     args = get_args(0, 0),
     _aM_ = caml_call2(Stdlib_Arg[11], 0, args);
    caml_call3(Stdlib_Arg[1], _aM_, set_input, usage);
    caml_call2(Astlib_Keyword[2], keywords[1], 0);
    interpret_mask(0);
    if(request_print_transformations[1]){
     caml_call2
      (Ppxlib_Import[94][77],
       all[1],
       function(ct){return caml_call2(Stdlib_Printf[2], _N_, ct[1]);});
     caml_call1(Stdlib[99], 0);
    }
    if(request_print_passes[1]){
     var
      hook = Ppxlib_Context_free[2][1],
      expect_mismatch_handler = Ppxlib_Context_free[3][1],
      cts =
        get_whole_ast_passes(0, hook, expect_mismatch_handler, tool_name, 0);
     if(perform_checks[1]) caml_call1(Stdlib_Printf[2], _t_);
     caml_call2
      (Ppxlib_Import[94][77],
       cts,
       function(ct){return caml_call2(Stdlib_Printf[2], _u_, ct[1]);});
     a:
     if(perform_checks[1]){
      caml_call1(Stdlib_Printf[2], _v_);
      if(perform_checks_on_extensions[1]){
       caml_call1(Stdlib_Printf[2], _w_);
       break a;
      }
     }
     caml_call1(Stdlib[99], 0);
    }
    var match$4 = input[1];
    if(! match$4){
     caml_call2(Stdlib_Printf[3], _V_, exe_name);
     return caml_call1(Stdlib[99], 2);
    }
    var fn = match$4[1], match$5 = kind[1];
    if(match$5)
     var k = match$5[1], kind$0 = k;
    else{
     var match$7 = caml_call1(Ppxlib_Utils[2][1], fn);
     if(match$7)
      var k$0 = match$7[1], k$1 = k$0;
     else{
      caml_call3(Stdlib_Printf[3], _U_, exe_name, fn);
      var k$1 = caml_call1(Stdlib[99], 2);
     }
     var kind$0 = k$1;
    }
    var match$6 = loc_fname[1];
    if(match$6)
     var fn$0 = match$6[1], relocate = 1, input_name$1 = fn$0;
    else
     var relocate = 0, input_name$1 = fn;
    var
     output$0 = output[1],
     embed_errors$0 = embed_errors[1],
     output_mode$0 = output_mode[1],
     use_compiler_pprint$0 = use_compiler_pprint[1];
    caml_call2
     (Ppxlib_Import[94][77],
      all$0[1],
      function(param){var t = param[1]; t[2] = 0; return 0;});
    var _ax_ = caml_call1(Ppxlib_Import[94][9], process_file_hooks[1]);
    caml_call2
     (Ppxlib_Import[94][77], _ax_, function(f){return caml_call1(f, 0);});
    corrections[1] = 0;
    var
     replacements = [0, 0],
     hook$0 =
       typeof output_mode$0 === "number"
        ? Ppxlib_Context_free[2][1]
        : [0,
          function(context, loc, generated){
           return add_to_list
                   (replacements,
                    caml_call5
                     (Ppxlib_Reconcile[2][1],
                      [0, context],
                      loc[1],
                      loc[2],
                      generated,
                      0));
          }],
     expect_mismatch_handler$0 =
       [0,
        function(context, loc, generated){
         return add_to_list
                 (corrections,
                  caml_call5
                   (Ppxlib_Reconcile[2][1],
                    [1, context],
                    loc[1],
                    loc[2],
                    [1, generated],
                    0));
        }],
     match = preprocessor[1];
    if(match){
     var
      pp = match[1],
      tmpfile = caml_call3(Stdlib_Filename[16], 0, cst_ocamlpp, cst$2);
     try{
      var match$0 = caml_call3(Ppxlib_Utils[5][1], pp, fn, tmpfile);
      if(0 === match$0[0])
       var v = load_input(kind$0, input_name$1, relocate, tmpfile);
      else
       var
        match$1 = match$0[1],
        fall_back_version = match$1[2],
        failed_command = match$1[1],
        v =
          caml_call2
           (versioned_errorf(fall_back_version, fn), _x_, failed_command);
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      remove_no_error(tmpfile);
      throw caml_maybe_attach_backtrace(e, 0);
     }
     remove_no_error(tmpfile);
     var preprocessed_and_loaded = v;
    }
    else
     var
      preprocessed_and_loaded = load_input(kind$0, input_name$1, relocate, fn);
    if(0 === preprocessed_and_loaded[0]){
     var
      match$2 = preprocessed_and_loaded[1],
      ast = match$2[3],
      input_version = match$2[2],
      input_fname = match$2[1];
     try{
      var
       ast$1 =
         process_ast
          (extract_cookies(ast),
           input_name$1,
           tool_name$0,
           hook$0,
           expect_mismatch_handler$0,
           embed_errors$0),
       ast$0 = ast$1,
       input_version$0 = input_version,
       input_name = input_fname;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(! embed_errors$0) throw caml_maybe_attach_backtrace(exn, 0);
      var
       ast$0 = exn_to_extension(exn, kind$0),
       input_version$0 = input_version,
       input_name = input_fname;
     }
    }
    else{
     var
      match$3 = preprocessed_and_loaded[1],
      error = match$3[1],
      input_version$1 = match$3[2];
     if(embed_errors$0)
      var
       ast$0 = error_to_extension(error, kind$0),
       input_version$0 = input_version$1,
       input_name = input_name$1;
     else
      var
       _aI_ = caml_call1(Ppxlib_Location[13][10], error),
       _aJ_ = caml_call2(Ppxlib_Location[2], _aI_, fn),
       _aK_ = caml_call1(caml_call1(Ppxlib_Location[13][9], error), _aJ_),
       _aL_ = caml_call1(Ppxlib_Location[13][8], _aK_),
       ast$2 = _aL_[3],
       input_version$2 = _aL_[2],
       input_name$0 = _aL_[1],
       ast$0 = ast$2,
       input_version$0 = input_version$2,
       input_name = input_name$0;
    }
    caml_call2
     (Ppxlib_Import[95][2],
      output_metadata_filename[1],
      function(fn){
       var
        _aV_ = caml_call1(Ppxlib_Import[94][9], all$0[1]),
        metadata =
          caml_call2
           (Ppxlib_Import[94][69],
            _aV_,
            function(param){
             var t = param[1], match = t[2];
             if(! match) return 0;
             var v = match[1];
             t[2] = 0;
             var _aZ_ = caml_call1(t[3], v);
             return [0, [0, t[1], _aZ_]];
            }),
        _aW_ =
          caml_call2
           (Ppxlib_Import[94][55],
            metadata,
            function(param){
             var
              sexp = param[2],
              s = param[1],
              _aY_ =
                caml_call2
                 (Sexplib0_Sexp[13], 0, [1, [0, [0, s], [0, sexp, 0]]]);
             return caml_call2(Stdlib[28], _aY_, cst$4);
            }),
        _aX_ = caml_call1(caml_call1(Ppxlib_Import[99][7], cst$5), _aW_);
       return caml_call2(Ppxlib_Import[98][3], fn, _aX_);
      });
    var
     input_contents =
       [246,
        function(_aT_){
         var s = caml_call1(Ppxlib_Import[91][4], fn);
         function test(magic_number){
          var _aU_ = caml_call3(Ppxlib_Import[99][14], magic_number, 0, 9);
          return caml_call2(Ppxlib_Import[99][58], s, _aU_);
         }
         var
          _aQ_ = test(Ppxlib_ast_Import[2][1][3][2]),
          _aR_ = _aQ_ || test(Ppxlib_ast_Import[2][1][3][1]);
         if(_aR_){
          var _aS_ = [0, caml_call1(Ppxlib_Location[1], fn)];
          caml_call2(Ppxlib_Location[5], _aS_, _H_);
         }
         return s;
        }],
     corrected = caml_call2(Stdlib[28], fn, corrected_suffix[1]),
     corrections$0 = corrections[1];
    if(corrections$0){
     var _aA_ = caml_obj_tag(input_contents);
     a:
     {
      var _ay_ = 0, _az_ = [0, corrected];
      if(250 === _aA_)
       var _aB_ = input_contents[1];
      else{
       if(246 !== _aA_ && 244 !== _aA_){var _aB_ = input_contents; break a;}
       var _aB_ = caml_call1(CamlinternalLazy[2], input_contents);
      }
     }
     caml_call9
      (Ppxlib_Reconcile[3],
       styler[1],
       corrections$0,
       kind$0,
       _aB_,
       fn,
       _az_,
       input_name,
       _ay_,
       use_compiler_pprint$0);
     var mismatches_found = 1;
    }
    else{
     if(runtime.caml_sys_file_exists(corrected)) caml_sys_remove(corrected);
     var mismatches_found = 0;
    }
    if(typeof output_mode$0 === "number")
     switch(output_mode$0){
       case 0:
        caml_call3
         (Ppxlib_Utils[1],
          output$0,
          0,
          function(oc){
           var ppf = caml_call1(Stdlib_Format[114], oc);
           if(use_compiler_pprint$0)
            caml_call2(Ppxlib_Utils[6], ppf, ast$0);
           else if(0 === ast$0[0]){
            var ast = ast$0[1];
            caml_call2(Astlib_Pprintast[7], ppf, ast);
           }
           else{
            var ast$1 = ast$0[1];
            caml_call2(Astlib_Pprintast[8], ppf, ast$1);
           }
           var null_ast = ast$0[1] ? 0 : 1, _aP_ = 1 - null_ast;
           return _aP_ ? caml_call2(Stdlib_Format[45], ppf, 0) : _aP_;
          });
        break;
       case 1:
        caml_call3
         (Ppxlib_Utils[1],
          output$0,
          1,
          function(oc){
           return caml_call3
                   (Ppxlib_Utils[4][2],
                    oc,
                    [0, input_name, input_version$0, ast$0],
                    1);
          });
        break;
       case 2:
        caml_call3
         (Ppxlib_Utils[1],
          output$0,
          0,
          function(oc){
           var ppf = caml_call1(Stdlib_Format[114], oc);
           if(0 === ast$0[0])
            var
             sg = ast$0[1],
             _aO_ = caml_call2(Astlib_Ast_metadata[3], cst_ppxlib_driver$0, 0),
             prefix$0 =
               caml_call1(caml_call1(Ppxlib_ast_Import[2][9], 1), _aO_),
             ast = [0, caml_call2(Ppxlib_Import[100], prefix$0, sg)];
           else
            var
             st = ast$0[1],
             _aN_ = caml_call2(Astlib_Ast_metadata[1], cst_ppxlib_driver, 0),
             prefix = caml_call1(caml_call1(Ppxlib_ast_Import[2][9], 0), _aN_),
             ast = [1, caml_call2(Ppxlib_Import[100], prefix, st)];
           if(0 === ast[0]){
            var ast$1 = ast[1];
            caml_call3(Ppxlib_Pp_ast[7], 0, ppf, ast$1);
           }
           else{
            var ast$2 = ast[1];
            caml_call3(Ppxlib_Pp_ast[5], 0, ppf, ast$2);
           }
           return caml_call2(Stdlib_Format[45], ppf, 0);
          });
        break;
     }
    else{
     var mode = output_mode$0[1], _aG_ = caml_obj_tag(input_contents);
     a:
     {
      var _aF_ = [0, mode];
      if(250 === _aG_)
       var _aH_ = input_contents[1];
      else{
       if(246 !== _aG_ && 244 !== _aG_){var _aH_ = input_contents; break a;}
       var _aH_ = caml_call1(CamlinternalLazy[2], input_contents);
      }
     }
     caml_call9
      (Ppxlib_Reconcile[3],
       styler[1],
       replacements[1],
       kind$0,
       _aH_,
       fn,
       output$0,
       input_name,
       _aF_,
       use_compiler_pprint$0);
    }
    if(mismatches_found){
     var _aC_ = diff_command[1];
     a:
     {if(_aC_ && _aC_[1] === cst$9){var _aD_ = 0; break a;} var _aD_ = 1;}
     var _aE_ = _aD_;
    }
    else
     var _aE_ = mismatches_found;
    return _aE_
            ? (caml_call6
               (Ppxlib_print_diff[1],
                diff_command[1],
                0,
                [0, use_color[1]],
                fn,
                corrected,
                0),
              caml_call1(Stdlib[99], 1))
            : _aE_;
   }
   function parse_input(passed_in_args, valid_args, incorrect_input_msg){
    try{
     var _aw_ = caml_call2(Stdlib_Arg[11], 0, valid_args);
     caml_call5
      (Stdlib_Arg[3],
       0,
       passed_in_args,
       _aw_,
       function(param){
        throw caml_maybe_attach_backtrace
               ([0, Stdlib_Arg[8], cst_anonymous_arguments_not_ac], 1);
       },
       incorrect_input_msg);
     return;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Stdlib_Arg[8]){
      var msg = exn[2];
      caml_call2(Stdlib_Printf[3], _W_, msg);
      return caml_call1(Stdlib[99], 2);
     }
     if(exn[1] !== Stdlib_Arg[7]) throw caml_maybe_attach_backtrace(exn, 0);
     var msg$0 = exn[2];
     caml_call2(Stdlib_Printf[3], _X_, msg$0);
     return caml_call1(Stdlib[99], 0);
    }
   }
   function run_as_ppx_rewriter_main(standalone_args, usage, input){
    var
     valid_args = get_args([0, standalone_args], 0),
     _at_ = caml_call1(Stdlib_ArrayLabels[10], input),
     match$3 = caml_call1(Ppxlib_Import[94][9], _at_);
    a:
    if(match$3){
     var match$4 = match$3[2];
     if(match$4){
      var
       flags_and_prog_name = match$4[2],
       input_fn = match$4[1],
       output_fn = match$3[1],
       _au_ = caml_call1(Ppxlib_Import[94][1], flags_and_prog_name);
      if(caml_call2(Ppxlib_Import[78], _au_, 0)){
       var
        _av_ = caml_call1(Ppxlib_Import[94][9], flags_and_prog_name),
        prog_name_and_flags = caml_call1(Stdlib_ArrayLabels[11], _av_);
       parse_input(prog_name_and_flags, valid_args, usage);
       interpret_mask(0);
       var _am_ = caml_call2(Ppxlib_Utils[4][1], [0, input_fn], 0);
       if(0 === _am_[0]){
        var
         match = _am_[1],
         ast = match[3],
         input_version = match[2],
         ast_input_name = match[1],
         match$0 = loc_fname[1];
        if(match$0){
         var input_name = match$0[1];
         caml_call1(set_input_name, input_name);
         var
          ast$0 =
            caml_call2(Ppxlib_Import[99][72], ast_input_name, input_name)
             ? ast
             : caml_call3
               (Ppxlib_Utils[3][2],
                ast,
                relocate_mapper,
                [0, ast_input_name, input_name]),
          ast$1 = ast$0;
        }
        else{caml_call1(set_input_name, ast_input_name); var ast$1 = ast;}
        var match$2 = [0, ast_input_name, input_version, ast$1];
       }
       else{
        var match$1 = _am_[1];
        if(typeof match$1 === "number")
         var
          _an_ = [0, caml_call1(Ppxlib_Location[1], input_fn)],
          match$2 = caml_call2(Ppxlib_Location[5], _an_, _F_);
        else if(0 === match$1[0])
         var
          unknown_magic = match$1[1],
          _ao_ = [0, caml_call1(Ppxlib_Location[1], input_fn)],
          match$2 = caml_call3(Ppxlib_Location[5], _ao_, _G_, unknown_magic);
        else
         var
          error = match$1[1],
          _ap_ = caml_call1(Ppxlib_Location[13][10], error),
          _aq_ = caml_call2(Ppxlib_Location[2], _ap_, input_fn),
          _ar_ = caml_call1(caml_call1(Ppxlib_Location[13][9], error), _aq_),
          match$2 = caml_call1(Ppxlib_Location[13][8], _ar_);
       }
       var
        ast$2 = match$2[3],
        input_version$0 = match$2[2],
        input_name$0 = match$2[1];
       try{
        var
         ast$4 = extract_cookies(ast$2),
         tool_name = caml_call1(Astlib_Ast_metadata[5], 0),
         hook = Ppxlib_Context_free[2][1],
         expect_mismatch_handler = Ppxlib_Context_free[3][1],
         _as_ =
           process_ast
            (ast$4, input_name$0, tool_name, hook, expect_mismatch_handler, 1),
         ast$3 = _as_;
       }
       catch(exn$0){
        var
         exn = caml_wrap_exception(exn$0),
         ast$3 = exn_to_extension(exn, caml_call1(Ppxlib_Utils[3][3], ast$2));
       }
       caml_call3
        (Ppxlib_Utils[1],
         [0, output_fn],
         1,
         function(oc){
          return caml_call3
                  (Ppxlib_Utils[4][2],
                   oc,
                   [0, input_name$0, input_version$0, ast$3],
                   1);
         });
       return caml_call1(Stdlib[99], 0);
      }
      if(! flags_and_prog_name){
       if
        (!
         caml_call2(Ppxlib_Import[99][72], output_fn, cst_help)
         && ! caml_call2(Ppxlib_Import[99][72], output_fn, cst_help$0))
        break a;
       parse_input(input, valid_args, usage);
       throw caml_maybe_attach_backtrace([0, Assert_failure, _Z_], 1);
      }
     }
    }
    caml_call2(Stdlib_Printf[3], _Y_, usage);
    return caml_call1(Stdlib[99], 2);
   }
   function standalone(param){
    caml_call1(Astlib[2], 0);
    try{
     var _aj_ = caml_sys_argv(0).length - 1;
     a:
     {
      if(caml_call2(Ppxlib_Import[81], _aj_, 2)){
       var match = caml_check_bound(caml_sys_argv(0), 1)[2];
       b:
       {
        if(match !== cst_as_ppx && match !== cst_as_ppx$0){var _ak_ = 0; break b;}
        var _ak_ = 1;
       }
       if(_ak_){
        var
         n = caml_sys_argv(0).length - 1,
         usage = caml_call2(Stdlib_Printf[4], ___, exe_name),
         argv = runtime.caml_array_make(n - 1 | 0, cst$10),
         _ad_ = caml_check_bound(caml_sys_argv(0), 0)[1];
        caml_check_bound(argv, 0)[1] = _ad_;
        var _af_ = n - 2 | 0, _ae_ = 1;
        if(_af_ >= 1){
         var i = _ae_;
         for(;;){
          var
           _ag_ = i + 1 | 0,
           _ah_ = caml_check_bound(caml_sys_argv(0), _ag_)[1 + _ag_];
          caml_check_bound(argv, i)[1 + i] = _ah_;
          var _ai_ = i + 1 | 0;
          if(_af_ === i) break;
          i = _ai_;
         }
        }
        var
         standalone_args$0 =
           caml_call2
            (Ppxlib_Import[94][55],
             standalone_args,
             function(param){
              var spec = param[2], arg = param[1];
              return [0, arg, spec, cst_Unused_with_as_ppx];
             });
        run_as_ppx_rewriter_main(standalone_args$0, usage, argv);
        break a;
       }
      }
      standalone_main(0);
     }
     var _al_ = caml_call1(Stdlib[99], 0);
     return _al_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     caml_call2(Ppxlib_Location[7], Stdlib_Format[118], exn);
     return caml_call1(Stdlib[99], 1);
    }
   }
   function run_as_ppx_rewriter(param){
    var
     usage = caml_call2(Stdlib_Printf[4], _$_, exe_name),
     input = caml_sys_argv(0);
    try{var _ac_ = run_as_ppx_rewriter_main(0, usage, input); return _ac_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     caml_call2(Ppxlib_Location[7], Stdlib_Format[118], exn);
     return caml_call1(Stdlib[99], 1);
    }
   }
   function pretty$0(param){return pretty[1];}
   function enable_checks(param){
    perform_checks[1] = 1;
    perform_checks_on_extensions[1] = 1;
    return 0;
   }
   function enable_location_check(param){
    perform_locations_check[1] = 1;
    return 0;
   }
   function disable_location_check(param){
    perform_locations_check[1] = 0;
    return 0;
   }
   function map_structure(st){
    var
     _aa_ = Ppxlib_Context_free[3][1],
     _ab_ = Ppxlib_Context_free[2][1],
     ast =
       map_structure_gen
        (st, caml_call1(Astlib_Ast_metadata[5], 0), _ab_, _aa_, 0, 0);
    return ast;
   }
   var
    Ppxlib_Driver =
      [0,
       add_arg,
       Lint_error,
       [0,
        get,
        get_res,
        set,
        add_handler,
        add_simple_handler,
        add_post_handler],
       [0, make$0, V2],
       register_transformation$0,
       register_transformation_using_$0,
       register_code_transformation,
       register_correction,
       register_process_file_hook,
       V2$0,
       function(Name, T){
        var t = [0, Name[1], 0, T[2]];
        add_to_list(all$0, [0, t]);
        function set(x){t[2] = [0, x]; return 0;}
        return [0, set];
       },
       standalone,
       run_as_ppx_rewriter,
       pretty$0,
       map_structure,
       map_signature,
       enable_checks,
       enable_location_check,
       disable_location_check,
       load_input];
   runtime.caml_register_global(218, Ppxlib_Driver, "Ppxlib__Driver");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Ignore_unused_warning
//# unitInfo: Requires: CamlinternalOO, Ppxlib__Ast_builder, Ppxlib__Ast_traverse, Ppxlib__Import
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    _a_ =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    _b_ =
      [0,
       cst_bool,
       cst_cases,
       cst_case,
       cst_char,
       cst_value_binding,
       cst_extension_constructor_kind,
       cst_core_type,
       cst_structure,
       cst_list,
       cst_label_declaration,
       cst_module_binding,
       cst_position,
       cst_toplevel_directive,
       cst_directive_argument,
       cst_object_field_desc,
       cst_class_type_field_desc,
       cst_open_infos,
       cst_pattern_desc,
       cst_signature_item,
       cst_extension_constructor,
       cst_toplevel_phrase,
       cst_extension,
       cst_location,
       cst_variance,
       cst_package_type,
       cst_virtual_flag,
       cst_module_type_desc,
       cst_rec_flag,
       cst_payload,
       cst_type_exception,
       cst_label,
       cst_letop,
       cst_location_stack,
       cst_value_description,
       cst_module_declaration,
       cst_class_type_declaration,
       cst_longident_loc,
       cst_closed_flag,
       cst_directive_argument_desc,
       cst_attribute,
       cst_class_infos,
       cst_signature_item_desc,
       cst_int,
       cst_loc,
       cst_row_field_desc,
       cst_override_flag,
       cst_structure_item_desc,
       cst_class_field_desc,
       cst_binding_op,
       cst_module_expr_desc,
       cst_class_signature,
       cst_type_extension,
       cst_class_field_kind,
       cst_module_type_declaration,
       cst_arg_label,
       cst_row_field,
       cst_longident,
       cst_string,
       cst_pattern,
       cst_include_description,
       cst_signature,
       cst_class_type_field,
       cst_attributes,
       cst_open_description,
       cst_with_constraint,
       cst_include_declaration,
       cst_class_type_desc,
       cst_private_flag,
       cst_injectivity,
       cst_open_declaration,
       cst_object_field,
       cst_array,
       cst_constant,
       cst_class_expr,
       cst_functor_parameter,
       cst_direction_flag,
       cst_core_type_desc,
       cst_type_declaration,
       cst_constructor_declaration,
       cst_option,
       cst_type_kind,
       cst_module_expr,
       cst_module_substitution,
       cst_class_description,
       cst_expression,
       cst_class_type,
       cst_structure_item,
       cst_include_infos,
       cst_class_declaration,
       cst_module_type,
       cst_class_expr_desc,
       cst_class_structure,
       cst_mutable_flag,
       cst_expression_desc,
       cst_constructor_arguments,
       cst_class_field],
    shared =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    _c_ = caml_call1(CamlinternalOO[16], _b_),
    _d_ = caml_call2(CamlinternalOO[8], _c_, shared)[26],
    _e_ =
      caml_call6
       (CamlinternalOO[18], _c_, 0, 0, _a_, Ppxlib_Ast_traverse[3], 1),
    _g_ = _e_[72],
    _f_ = _e_[1];
   caml_call3
    (CamlinternalOO[10],
     _c_,
     _d_,
     function(self_1, patt, acc){
      var match = patt[1];
      if(typeof match !== "number" && 0 === match[0]){
       var v = match[1];
       return [0,
               caml_call2
                (Ppxlib_Ast_builder[1][1][3],
                 function(var$0){return [0, var$0];},
                 v),
               acc];
      }
      return caml_call2(caml_call1(_g_, self_1), patt, acc);
     });
   caml_call1(CamlinternalOO[17], _c_);
   var _h_ = caml_call2(CamlinternalOO[24], 0, _c_);
   caml_call1(_f_, _h_);
   var
    vars_of = caml_call3(CamlinternalOO[26], 0, _h_, _c_),
    _i_ = caml_call1(CamlinternalOO[16], _b_),
    _j_ = caml_call2(CamlinternalOO[8], _i_, shared)[14],
    _k_ =
      caml_call6
       (CamlinternalOO[18], _i_, 0, 0, _a_, Ppxlib_Ast_traverse[1], 1),
    _m_ = _k_[84],
    _l_ = _k_[1];
   caml_call3
    (CamlinternalOO[10],
     _i_,
     _j_,
     function(self_2, st){
      var
       st$1 = caml_call1(caml_call1(_m_, self_2), st),
       st$0 = st$1,
       acc = 0;
      for(;;){
       if(! st$0) return caml_call1(Ppxlib_Import[94][9], acc);
       var item = st$0[1], match = item[1];
       if(1 === match[0]){
        var
         rest$0 = st$0[2],
         loc = item[2],
         vbs = match[2],
         vars =
           caml_call3
            (Ppxlib_Import[94][17],
             function(acc, vb){
              return caml_call3
                      (runtime.caml_get_public_method(vars_of, 293013072, 80),
                       vars_of,
                       vb[1],
                       acc);
             },
             0,
             vbs),
         _E_ =
           caml_call2
            (Ppxlib_Import[94][15],
             function(v){
              var
               exp = caml_call2(Ppxlib_Ast_builder[1][119], v[2], v),
               loc = exp[2],
               _F_ = caml_call1(Ppxlib_Ast_builder[1][58], loc);
              return caml_call3(Ppxlib_Ast_builder[1][3], loc, _F_, exp);
             },
             vars),
         ign = caml_call3(Ppxlib_Ast_builder[1][204], loc, 0, _E_),
         acc$1 = caml_call2(Ppxlib_Import[100], ign, [0, item, acc]);
        st$0 = rest$0;
        acc = acc$1;
       }
       else{
        var rest = st$0[2], acc$0 = [0, item, acc];
        st$0 = rest;
        acc = acc$0;
       }
      }
     });
   caml_call1(CamlinternalOO[17], _i_);
   var _n_ = caml_call2(CamlinternalOO[24], 0, _i_);
   caml_call1(_l_, _n_);
   var
    add_dummy_user_for_values = caml_call3(CamlinternalOO[26], 0, _n_, _i_),
    _o_ = caml_call1(CamlinternalOO[16], _b_),
    _p_ = caml_call2(CamlinternalOO[8], _o_, shared),
    _q_ = _p_[26],
    _r_ = _p_[39],
    _s_ = _p_[42],
    _t_ = _p_[43],
    _u_ = _p_[58],
    _v_ = _p_[63],
    _w_ =
      caml_call6
       (CamlinternalOO[18], _o_, 0, 0, _a_, Ppxlib_Ast_traverse[3], 1),
    _y_ = _w_[35],
    _z_ = _w_[40],
    _A_ = _w_[55],
    _B_ = _w_[56],
    _C_ = _w_[72],
    _x_ = _w_[1];
   caml_call2
    (CamlinternalOO[11],
     _o_,
     [0,
      _t_,
      function(self_3, mb, acc){
       return mb[1][1] ? 1 : caml_call2(caml_call1(_A_, self_3), mb, acc);
      },
      _s_,
      function(self_3, md, acc){
       return md[1][1] ? 1 : caml_call2(caml_call1(_B_, self_3), md, acc);
      },
      _r_,
      function(self_3, ms, param){return 1;},
      _u_,
      function(self_3, fp, acc){
       if(! fp) return acc;
       var name = fp[1];
       return name[1] ? 1 : caml_call2(caml_call1(_z_, self_3), fp, acc);
      },
      _q_,
      function(self_3, pat, acc){
       var match = pat[1];
       if(typeof match !== "number" && 13 === match[0]){var name = match[1]; return name[1] ? 1 : acc;}
       return caml_call2(caml_call1(_C_, self_3), pat, acc);
      },
      _v_,
      function(self_3, expr, acc){
       var match = expr[1];
       if(typeof match !== "number" && 25 === match[0]){
        var name = match[1];
        return name[1] ? 1 : caml_call2(caml_call1(_y_, self_3), expr, acc);
       }
       return caml_call2(caml_call1(_y_, self_3), expr, acc);
      }]);
   caml_call1(CamlinternalOO[17], _o_);
   var _D_ = caml_call2(CamlinternalOO[24], 0, _o_);
   caml_call1(_x_, _D_);
   var
    binds_module_names = caml_call3(CamlinternalOO[26], 0, _D_, _o_),
    Ppxlib_Ignore_unused_warning =
      [0, add_dummy_user_for_values, binds_module_names];
   runtime.caml_register_global
    (7, Ppxlib_Ignore_unused_warning, "Ppxlib__Ignore_unused_warning");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Deriving
//# unitInfo: Requires: Ppx_derivers, Ppxlib__Ast_builder, Ppxlib__Ast_pattern, Ppxlib__Attribute, Ppxlib__Common, Ppxlib__Context_free, Ppxlib__Driver, Ppxlib__Expansion_context, Ppxlib__Extension, Ppxlib__Ignore_unused_warning, Ppxlib__Import, Ppxlib__Location, Ppxlib__Longident, Ppxlib__Merlin_helpers, Ppxlib__Options, Ppxlib__Spellcheck, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$9 = "",
    cst$10 = ".\n",
    cst_Deriver = "Deriver ",
    cst_Ppxlib_Deriving_generator_ =
      "Ppxlib.Deriving: generator arguments must be labelled",
    cst_attribute = "attribute",
    cst_both = "both",
    cst_code = "code",
    cst_deriving$0 = "deriving",
    cst_impl = "impl",
    cst_intf = "intf",
    cst_src_deriving_ml = "src/deriving.ml",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) === 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    prefix = "ppxlib.",
    cst$8 = cst$9,
    warnings = [0, 32, 0],
    cst$6 = "-",
    cst$7 = cst$9,
    cst$5 = ".",
    cst$2 = cst$10,
    cst$3 = cst$9,
    cst$4 = cst$9,
    cst$0 = cst$10,
    cst$1 = cst$9,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Ppxlib_Import = global_data.Ppxlib__Import,
    Ppxlib_Expansion_context = global_data.Ppxlib__Expansion_context,
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_Ignore_unused_warning = global_data.Ppxlib__Ignore_unused_warning,
    Ppxlib_Merlin_helpers = global_data.Ppxlib__Merlin_helpers,
    Stdlib = global_data.Stdlib,
    Ppxlib_Ast_pattern = global_data.Ppxlib__Ast_pattern,
    Ppxlib_Attribute = global_data.Ppxlib__Attribute,
    Ppxlib_Longident = global_data.Ppxlib__Longident,
    Ppx_derivers = global_data.Ppx_derivers,
    Ppxlib_Extension = global_data.Ppxlib__Extension,
    Ppxlib_Context_free = global_data.Ppxlib__Context_free,
    Ppxlib_Driver = global_data.Ppxlib__Driver,
    Ppxlib_Options = global_data.Ppxlib__Options,
    Ppxlib_Spellcheck = global_data.Ppxlib__Spellcheck,
    Assert_failure = global_data.Assert_failure,
    do_insert_unused_warning_attri = [0, 0],
    keep_w32_impl = [0, 0],
    keep_w32_intf = [0, 0],
    _a_ = [0, cst_src_deriving_ml, 21, 15],
    keep_w32_spec =
      [11,
       [0, cst_impl, [0, cst_intf, [0, cst_both, 0]]],
       function(param){
        if(param === cst_both){
         keep_w32_impl[1] = 1;
         keep_w32_intf[1] = 1;
         return 0;
        }
        if(param === cst_impl){keep_w32_impl[1] = 1; return 0;}
        if(param !== cst_intf)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
        keep_w32_intf[1] = 1;
        return 0;
       }],
    _b_ = [0, cst_src_deriving_ml, 29, 15],
    conv_w32_spec =
      [11,
       [0, cst_code, [0, cst_attribute, 0]],
       function(param){
        if(param === cst_attribute){
         do_insert_unused_warning_attri[1] = 1;
         return 0;
        }
        if(param !== cst_code)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
        do_insert_unused_warning_attri[1] = 0;
        return 0;
       }];
   caml_call3
    (Ppxlib_Driver[1],
     "-deriving-keep-w32",
     keep_w32_spec,
     " Do not try to disable warning 32 for the generated code");
   caml_call3
    (Ppxlib_Driver[1],
     "-deriving-disable-w32-method",
     conv_w32_spec,
     " How to disable warning 32 for the generated code");
   caml_call3
    (Ppxlib_Driver[1],
     "-type-conv-keep-w32",
     keep_w32_spec,
     " Deprecated, use -deriving-keep-w32");
   caml_call3
    (Ppxlib_Driver[1],
     "-type-conv-w32",
     conv_w32_spec,
     " Deprecated, use -deriving-disable-w32-method");
   function keep_w32_impl$0(param){
    var _bm_ = keep_w32_impl[1];
    return _bm_ ? _bm_ : caml_call1(Ppxlib_Driver[14], 0);
   }
   var
    keep_w60_impl = [0, 0],
    keep_w60_intf = [0, 0],
    _c_ = [0, cst_src_deriving_ml, 55, 15],
    keep_w60_spec =
      [11,
       [0, cst_impl, [0, cst_intf, [0, cst_both, 0]]],
       function(param){
        if(param === cst_both){
         keep_w60_impl[1] = 1;
         keep_w60_intf[1] = 1;
         return 0;
        }
        if(param === cst_impl){keep_w60_impl[1] = 1; return 0;}
        if(param !== cst_intf)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
        keep_w60_intf[1] = 1;
        return 0;
       }];
   caml_call3
    (Ppxlib_Driver[1],
     "-deriving-keep-w60",
     keep_w60_spec,
     " Do not try to disable warning 60 for the generated code");
   var
    allow_unused_code_warnings = [0, Ppxlib_Options[2]],
    _d_ = caml_call1(Ppxlib_Options[1][1], allow_unused_code_warnings);
   caml_call3
    (Ppxlib_Driver[1],
     "-unused-code-warnings",
     _d_,
     " Allow ppx derivers to enable unused code warnings (default: false)");
   function allow_unused_code_warnings$0(ppx_allows_unused_code_warning){
    switch(allow_unused_code_warnings[1]){
      case 0:
       return ppx_allows_unused_code_warning;
      case 1:
       return 0;
      default: return 1;
    }
   }
   var
    allow_unused_type_warnings = [0, Ppxlib_Options[3]],
    _e_ = caml_call1(Ppxlib_Options[1][1], allow_unused_type_warnings);
   caml_call3
    (Ppxlib_Driver[1],
     "-unused-type-warnings",
     _e_,
     " Allow unused type warnings for types with [@@deriving ...] (default: false)");
   var
    to_func = Ppxlib_Ast_pattern[331],
    of_func = Ppxlib_Ast_pattern[330],
    esequence = Ppxlib_Ast_pattern[329],
    elist = Ppxlib_Ast_pattern[328],
    extension = Ppxlib_Ast_pattern[327],
    attribute = Ppxlib_Ast_pattern[326],
    no_label = Ppxlib_Ast_pattern[325],
    single_expr_payload = Ppxlib_Ast_pattern[324],
    pnativeint = Ppxlib_Ast_pattern[323],
    pint64 = Ppxlib_Ast_pattern[322],
    pint32 = Ppxlib_Ast_pattern[321],
    pfloat = Ppxlib_Ast_pattern[320],
    pstring = Ppxlib_Ast_pattern[319],
    pchar = Ppxlib_Ast_pattern[318],
    pint = Ppxlib_Ast_pattern[317],
    enativeint = Ppxlib_Ast_pattern[316],
    eint64 = Ppxlib_Ast_pattern[315],
    eint32 = Ppxlib_Ast_pattern[314],
    efloat = Ppxlib_Ast_pattern[313],
    estring = Ppxlib_Ast_pattern[312],
    echar = Ppxlib_Ast_pattern[311],
    eint = Ppxlib_Ast_pattern[310],
    false$0 = Ppxlib_Ast_pattern[309],
    true$0 = Ppxlib_Ast_pattern[308],
    pwith_modsubst = Ppxlib_Ast_pattern[307],
    pwith_typesubst = Ppxlib_Ast_pattern[306],
    pwith_modtypesubst = Ppxlib_Ast_pattern[305],
    pwith_modtype = Ppxlib_Ast_pattern[304],
    pwith_module = Ppxlib_Ast_pattern[303],
    pwith_type = Ppxlib_Ast_pattern[302],
    concrete = Ppxlib_Ast_pattern[301],
    virtual = Ppxlib_Ast_pattern[300],
    novariance = Ppxlib_Ast_pattern[299],
    contravariant = Ppxlib_Ast_pattern[298],
    covariant = Ppxlib_Ast_pattern[297],
    value_description = Ppxlib_Ast_pattern[296],
    value_description_attributes = Ppxlib_Ast_pattern[295],
    value_binding = Ppxlib_Ast_pattern[294],
    value_binding_attributes = Ppxlib_Ast_pattern[293],
    ptype_open = Ppxlib_Ast_pattern[292],
    ptype_record = Ppxlib_Ast_pattern[291],
    ptype_variant = Ppxlib_Ast_pattern[290],
    ptype_abstract = Ppxlib_Ast_pattern[289],
    type_extension = Ppxlib_Ast_pattern[288],
    type_extension_attributes = Ppxlib_Ast_pattern[287],
    type_exception = Ppxlib_Ast_pattern[286],
    type_exception_attributes = Ppxlib_Ast_pattern[285],
    type_declaration = Ppxlib_Ast_pattern[284],
    type_declaration_attributes = Ppxlib_Ast_pattern[283],
    ptop_dir = Ppxlib_Ast_pattern[282],
    ptop_def = Ppxlib_Ast_pattern[281],
    toplevel_directive = Ppxlib_Ast_pattern[280],
    pstr_extension = Ppxlib_Ast_pattern[279],
    pstr_attribute = Ppxlib_Ast_pattern[278],
    pstr_include = Ppxlib_Ast_pattern[277],
    pstr_class_type = Ppxlib_Ast_pattern[276],
    pstr_class = Ppxlib_Ast_pattern[275],
    pstr_open = Ppxlib_Ast_pattern[274],
    pstr_modtype = Ppxlib_Ast_pattern[273],
    pstr_recmodule = Ppxlib_Ast_pattern[272],
    pstr_module = Ppxlib_Ast_pattern[271],
    pstr_exception = Ppxlib_Ast_pattern[270],
    pstr_typext = Ppxlib_Ast_pattern[269],
    pstr_type = Ppxlib_Ast_pattern[268],
    pstr_primitive = Ppxlib_Ast_pattern[267],
    pstr_value = Ppxlib_Ast_pattern[266],
    pstr_eval = Ppxlib_Ast_pattern[265],
    pstr_loc = Ppxlib_Ast_pattern[264],
    psig_extension = Ppxlib_Ast_pattern[263],
    psig_attribute = Ppxlib_Ast_pattern[262],
    psig_class_type = Ppxlib_Ast_pattern[261],
    psig_class = Ppxlib_Ast_pattern[260],
    psig_include = Ppxlib_Ast_pattern[259],
    psig_open = Ppxlib_Ast_pattern[258],
    psig_modtypesubst = Ppxlib_Ast_pattern[257],
    psig_modtype = Ppxlib_Ast_pattern[256],
    psig_recmodule = Ppxlib_Ast_pattern[255],
    psig_modsubst = Ppxlib_Ast_pattern[254],
    psig_module = Ppxlib_Ast_pattern[253],
    psig_exception = Ppxlib_Ast_pattern[252],
    psig_typext = Ppxlib_Ast_pattern[251],
    psig_typesubst = Ppxlib_Ast_pattern[250],
    psig_type = Ppxlib_Ast_pattern[249],
    psig_value = Ppxlib_Ast_pattern[248],
    psig_loc = Ppxlib_Ast_pattern[247],
    rinherit = Ppxlib_Ast_pattern[246],
    rtag = Ppxlib_Ast_pattern[245],
    prf_attributes = Ppxlib_Ast_pattern[244],
    prf_loc = Ppxlib_Ast_pattern[243],
    recursive = Ppxlib_Ast_pattern[242],
    nonrecursive = Ppxlib_Ast_pattern[241],
    public$0 = Ppxlib_Ast_pattern[240],
    private$0 = Ppxlib_Ast_pattern[239],
    position = Ppxlib_Ast_pattern[238],
    ppat = Ppxlib_Ast_pattern[237],
    ptyp = Ppxlib_Ast_pattern[236],
    psig = Ppxlib_Ast_pattern[235],
    pstr = Ppxlib_Ast_pattern[234],
    ppat_open = Ppxlib_Ast_pattern[233],
    ppat_extension = Ppxlib_Ast_pattern[232],
    ppat_exception = Ppxlib_Ast_pattern[231],
    ppat_unpack = Ppxlib_Ast_pattern[230],
    ppat_lazy = Ppxlib_Ast_pattern[229],
    ppat_type = Ppxlib_Ast_pattern[228],
    ppat_constraint = Ppxlib_Ast_pattern[227],
    ppat_or = Ppxlib_Ast_pattern[226],
    ppat_array = Ppxlib_Ast_pattern[225],
    ppat_record = Ppxlib_Ast_pattern[224],
    ppat_variant = Ppxlib_Ast_pattern[223],
    ppat_construct = Ppxlib_Ast_pattern[222],
    ppat_tuple = Ppxlib_Ast_pattern[221],
    ppat_interval = Ppxlib_Ast_pattern[220],
    ppat_constant = Ppxlib_Ast_pattern[219],
    ppat_alias = Ppxlib_Ast_pattern[218],
    ppat_var = Ppxlib_Ast_pattern[217],
    ppat_any = Ppxlib_Ast_pattern[216],
    ppat_attributes = Ppxlib_Ast_pattern[215],
    ppat_loc = Ppxlib_Ast_pattern[214],
    fresh = Ppxlib_Ast_pattern[213],
    override = Ppxlib_Ast_pattern[212],
    open_infos = Ppxlib_Ast_pattern[211],
    open_infos_attributes = Ppxlib_Ast_pattern[210],
    oinherit = Ppxlib_Ast_pattern[209],
    otag = Ppxlib_Ast_pattern[208],
    pof_attributes = Ppxlib_Ast_pattern[207],
    pof_loc = Ppxlib_Ast_pattern[206],
    mutable = Ppxlib_Ast_pattern[205],
    immutable = Ppxlib_Ast_pattern[204],
    module_type_declaration = Ppxlib_Ast_pattern[203],
    module_type_declaration_attrib = Ppxlib_Ast_pattern[202],
    pmty_alias = Ppxlib_Ast_pattern[201],
    pmty_extension = Ppxlib_Ast_pattern[200],
    pmty_typeof = Ppxlib_Ast_pattern[199],
    pmty_with = Ppxlib_Ast_pattern[198],
    pmty_functor = Ppxlib_Ast_pattern[197],
    pmty_signature = Ppxlib_Ast_pattern[196],
    pmty_ident = Ppxlib_Ast_pattern[195],
    pmty_attributes = Ppxlib_Ast_pattern[194],
    pmty_loc = Ppxlib_Ast_pattern[193],
    module_substitution = Ppxlib_Ast_pattern[192],
    module_substitution_attributes = Ppxlib_Ast_pattern[191],
    pmod_extension = Ppxlib_Ast_pattern[190],
    pmod_unpack = Ppxlib_Ast_pattern[189],
    pmod_constraint = Ppxlib_Ast_pattern[188],
    pmod_apply = Ppxlib_Ast_pattern[187],
    pmod_functor = Ppxlib_Ast_pattern[186],
    pmod_structure = Ppxlib_Ast_pattern[185],
    pmod_ident = Ppxlib_Ast_pattern[184],
    pmod_attributes = Ppxlib_Ast_pattern[183],
    pmod_loc = Ppxlib_Ast_pattern[182],
    module_declaration = Ppxlib_Ast_pattern[181],
    module_declaration_attributes = Ppxlib_Ast_pattern[180],
    module_binding = Ppxlib_Ast_pattern[179],
    module_binding_attributes = Ppxlib_Ast_pattern[178],
    lapply = Ppxlib_Ast_pattern[177],
    ldot = Ppxlib_Ast_pattern[176],
    lident = Ppxlib_Ast_pattern[175],
    location = Ppxlib_Ast_pattern[174],
    letop = Ppxlib_Ast_pattern[173],
    label_declaration = Ppxlib_Ast_pattern[172],
    label_declaration_attributes = Ppxlib_Ast_pattern[171],
    noinjectivity = Ppxlib_Ast_pattern[170],
    injective = Ppxlib_Ast_pattern[169],
    include_infos = Ppxlib_Ast_pattern[168],
    include_infos_attributes = Ppxlib_Ast_pattern[167],
    named = Ppxlib_Ast_pattern[166],
    unit = Ppxlib_Ast_pattern[165],
    pext_rebind = Ppxlib_Ast_pattern[164],
    pext_decl = Ppxlib_Ast_pattern[163],
    extension_constructor = Ppxlib_Ast_pattern[162],
    extension_constructor_attribut = Ppxlib_Ast_pattern[161],
    pexp_unreachable = Ppxlib_Ast_pattern[160],
    pexp_extension = Ppxlib_Ast_pattern[159],
    pexp_letop = Ppxlib_Ast_pattern[158],
    pexp_open = Ppxlib_Ast_pattern[157],
    pexp_pack = Ppxlib_Ast_pattern[156],
    pexp_newtype = Ppxlib_Ast_pattern[155],
    pexp_object = Ppxlib_Ast_pattern[154],
    pexp_poly = Ppxlib_Ast_pattern[153],
    pexp_lazy = Ppxlib_Ast_pattern[152],
    pexp_assert = Ppxlib_Ast_pattern[151],
    pexp_letexception = Ppxlib_Ast_pattern[150],
    pexp_letmodule = Ppxlib_Ast_pattern[149],
    pexp_override = Ppxlib_Ast_pattern[148],
    pexp_setinstvar = Ppxlib_Ast_pattern[147],
    pexp_new = Ppxlib_Ast_pattern[146],
    pexp_send = Ppxlib_Ast_pattern[145],
    pexp_coerce = Ppxlib_Ast_pattern[144],
    pexp_constraint = Ppxlib_Ast_pattern[143],
    pexp_for = Ppxlib_Ast_pattern[142],
    pexp_while = Ppxlib_Ast_pattern[141],
    pexp_sequence = Ppxlib_Ast_pattern[140],
    pexp_ifthenelse = Ppxlib_Ast_pattern[139],
    pexp_array = Ppxlib_Ast_pattern[138],
    pexp_setfield = Ppxlib_Ast_pattern[137],
    pexp_field = Ppxlib_Ast_pattern[136],
    pexp_record = Ppxlib_Ast_pattern[135],
    pexp_variant = Ppxlib_Ast_pattern[134],
    pexp_construct = Ppxlib_Ast_pattern[133],
    pexp_tuple = Ppxlib_Ast_pattern[132],
    pexp_try = Ppxlib_Ast_pattern[131],
    pexp_match = Ppxlib_Ast_pattern[130],
    pexp_apply = Ppxlib_Ast_pattern[129],
    pexp_fun = Ppxlib_Ast_pattern[128],
    pexp_function = Ppxlib_Ast_pattern[127],
    pexp_let = Ppxlib_Ast_pattern[126],
    pexp_constant = Ppxlib_Ast_pattern[125],
    pexp_ident = Ppxlib_Ast_pattern[124],
    pexp_attributes = Ppxlib_Ast_pattern[123],
    pexp_loc = Ppxlib_Ast_pattern[122],
    pdir_bool = Ppxlib_Ast_pattern[121],
    pdir_ident = Ppxlib_Ast_pattern[120],
    pdir_int = Ppxlib_Ast_pattern[119],
    pdir_string = Ppxlib_Ast_pattern[118],
    pdira_loc = Ppxlib_Ast_pattern[117],
    downto = Ppxlib_Ast_pattern[116],
    upto = Ppxlib_Ast_pattern[115],
    ptyp_extension = Ppxlib_Ast_pattern[114],
    ptyp_package = Ppxlib_Ast_pattern[113],
    ptyp_poly = Ppxlib_Ast_pattern[112],
    ptyp_variant = Ppxlib_Ast_pattern[111],
    ptyp_alias = Ppxlib_Ast_pattern[110],
    ptyp_class = Ppxlib_Ast_pattern[109],
    ptyp_object = Ppxlib_Ast_pattern[108],
    ptyp_constr = Ppxlib_Ast_pattern[107],
    ptyp_tuple = Ppxlib_Ast_pattern[106],
    ptyp_arrow = Ppxlib_Ast_pattern[105],
    ptyp_var = Ppxlib_Ast_pattern[104],
    ptyp_any = Ppxlib_Ast_pattern[103],
    ptyp_attributes = Ppxlib_Ast_pattern[102],
    ptyp_loc = Ppxlib_Ast_pattern[101],
    constructor_declaration = Ppxlib_Ast_pattern[100],
    constructor_declaration_attrib = Ppxlib_Ast_pattern[99],
    pcstr_record = Ppxlib_Ast_pattern[98],
    pcstr_tuple = Ppxlib_Ast_pattern[97],
    pconst_float = Ppxlib_Ast_pattern[96],
    pconst_string = Ppxlib_Ast_pattern[95],
    pconst_char = Ppxlib_Ast_pattern[94],
    pconst_integer = Ppxlib_Ast_pattern[93],
    open = Ppxlib_Ast_pattern[92],
    closed = Ppxlib_Ast_pattern[91],
    pctf_extension = Ppxlib_Ast_pattern[90],
    pctf_attribute = Ppxlib_Ast_pattern[89],
    pctf_constraint = Ppxlib_Ast_pattern[88],
    pctf_method = Ppxlib_Ast_pattern[87],
    pctf_val = Ppxlib_Ast_pattern[86],
    pctf_inherit = Ppxlib_Ast_pattern[85],
    pctf_attributes = Ppxlib_Ast_pattern[84],
    pctf_loc = Ppxlib_Ast_pattern[83],
    pcty_open = Ppxlib_Ast_pattern[82],
    pcty_extension = Ppxlib_Ast_pattern[81],
    pcty_arrow = Ppxlib_Ast_pattern[80],
    pcty_signature = Ppxlib_Ast_pattern[79],
    pcty_constr = Ppxlib_Ast_pattern[78],
    pcty_attributes = Ppxlib_Ast_pattern[77],
    pcty_loc = Ppxlib_Ast_pattern[76],
    class_structure = Ppxlib_Ast_pattern[75],
    class_signature = Ppxlib_Ast_pattern[74],
    class_infos = Ppxlib_Ast_pattern[73],
    class_infos_attributes = Ppxlib_Ast_pattern[72],
    cfk_concrete = Ppxlib_Ast_pattern[71],
    cfk_virtual = Ppxlib_Ast_pattern[70],
    pcf_extension = Ppxlib_Ast_pattern[69],
    pcf_attribute = Ppxlib_Ast_pattern[68],
    pcf_initializer = Ppxlib_Ast_pattern[67],
    pcf_constraint = Ppxlib_Ast_pattern[66],
    pcf_method = Ppxlib_Ast_pattern[65],
    pcf_val = Ppxlib_Ast_pattern[64],
    pcf_inherit = Ppxlib_Ast_pattern[63],
    pcf_attributes = Ppxlib_Ast_pattern[62],
    pcf_loc = Ppxlib_Ast_pattern[61],
    pcl_open = Ppxlib_Ast_pattern[60],
    pcl_extension = Ppxlib_Ast_pattern[59],
    pcl_constraint = Ppxlib_Ast_pattern[58],
    pcl_let = Ppxlib_Ast_pattern[57],
    pcl_apply = Ppxlib_Ast_pattern[56],
    pcl_fun = Ppxlib_Ast_pattern[55],
    pcl_structure = Ppxlib_Ast_pattern[54],
    pcl_constr = Ppxlib_Ast_pattern[53],
    pcl_attributes = Ppxlib_Ast_pattern[52],
    pcl_loc = Ppxlib_Ast_pattern[51],
    case$0 = Ppxlib_Ast_pattern[50],
    binding_op = Ppxlib_Ast_pattern[49],
    optional = Ppxlib_Ast_pattern[48],
    labelled = Ppxlib_Ast_pattern[47],
    nolabel = Ppxlib_Ast_pattern[46],
    pack3 = Ppxlib_Ast_pattern[45],
    pack2 = Ppxlib_Ast_pattern[44],
    pack0 = Ppxlib_Ast_pattern[43],
    loc = Ppxlib_Ast_pattern[42],
    triple = Ppxlib_Ast_pattern[41],
    symbol = Ppxlib_Ast_pattern[40],
    pair = Ppxlib_Ast_pattern[39],
    some = Ppxlib_Ast_pattern[38],
    none = Ppxlib_Ast_pattern[37],
    cst = Ppxlib_Ast_pattern[36],
    pbool = Ppxlib_Ast_pattern[35],
    ebool = Ppxlib_Ast_pattern[34],
    bool = Ppxlib_Ast_pattern[33],
    nativeint = Ppxlib_Ast_pattern[32],
    int64 = Ppxlib_Ast_pattern[31],
    int32 = Ppxlib_Ast_pattern[30],
    float$0 = Ppxlib_Ast_pattern[29],
    string = Ppxlib_Ast_pattern[28],
    char$0 = Ppxlib_Ast_pattern[27],
    int$0 = Ppxlib_Ast_pattern[26],
    many = Ppxlib_Ast_pattern[25],
    symbol$0 = Ppxlib_Ast_pattern[24],
    nil = Ppxlib_Ast_pattern[23],
    map_value = Ppxlib_Ast_pattern[22],
    map_value$0 = Ppxlib_Ast_pattern[21],
    map2 = Ppxlib_Ast_pattern[20],
    map1 = Ppxlib_Ast_pattern[19],
    map0 = Ppxlib_Ast_pattern[18],
    map2$0 = Ppxlib_Ast_pattern[17],
    map1$0 = Ppxlib_Ast_pattern[16],
    map0$0 = Ppxlib_Ast_pattern[15],
    symbol_map = Ppxlib_Ast_pattern[14],
    map_result = Ppxlib_Ast_pattern[13],
    map = Ppxlib_Ast_pattern[12],
    map$0 = Ppxlib_Ast_pattern[11],
    symbol$1 = Ppxlib_Ast_pattern[10],
    alt_option = Ppxlib_Ast_pattern[9],
    alt = Ppxlib_Ast_pattern[8],
    as = Ppxlib_Ast_pattern[7],
    drop = Ppxlib_Ast_pattern[6],
    symbol$2 = Ppxlib_Ast_pattern[5],
    symbol$3 = Ppxlib_Ast_pattern[4],
    parse_res = Ppxlib_Ast_pattern[2],
    parse = Ppxlib_Ast_pattern[1];
   function arg(name, pattern){
    return [0,
            name,
            caml_call2
             (Ppxlib_Ast_pattern[3][1], pattern, function(x){return [0, x];}),
            0];
   }
   function flag(name){
    var
     pattern =
       caml_call1(pexp_ident, caml_call1(lident, caml_call1(string, name)));
    return [0, name, caml_call2(Ppxlib_Ast_pattern[3][1], pattern, 1), 0];
   }
   var empty = 0;
   function symbol$4(a, b){return [0, a, b];}
   function names(param){
    if(! param) return 0;
    var p = param[2], t = param[1], _bl_ = names(t);
    return [0, p[1], _bl_];
   }
   function create(spec, args){
    if(! spec) return 0;
    var
     p = spec[2],
     t = spec[1],
     match = caml_call2(Ppxlib_Import[94][76], p[1], args);
    if(match)
     var
      expr = match[1],
      value = caml_call3(Ppxlib_Ast_pattern[3][2], p[2], expr[2], expr);
    else
     var value = p[3];
    return [0, create(t, args), value];
   }
   function apply(t, f){
    if(! t) return f;
    var x = t[2], t$0 = t[1];
    return caml_call1(apply(t$0, f), x);
   }
   function ignore(param){return 0;}
   function make(_bj_, _bi_, opt, spec, gen){
    var
     deps = _bi_ ? _bi_[1] : 0,
     unused_code_warnings = opt ? opt[1] : 0,
     _bk_ = names(spec),
     arg_names = caml_call1(Ppxlib_Import[99][82][38], _bk_);
    return [0, spec, gen, arg_names, deps, unused_code_warnings];
   }
   function make_noarg(attributes, deps, unused_code_warnings, gen){
    return make(attributes, deps, unused_code_warnings, empty, gen);
   }
   var
    V2 = [0, make, make_noarg],
    _f_ =
      [0,
       [11, cst_Ppxlib_Deriving_generator_, 0],
       cst_Ppxlib_Deriving_generator_],
    _g_ =
      [0,
       [11,
        "Ppxlib.Deriving: argument labelled '",
        [2, 0, [11, "' appears more than once", 0]]],
       "Ppxlib.Deriving: argument labelled '%s' appears more than once"],
    _h_ =
      [0,
       [11,
        "Ppxlib.Deriving: generator '",
        [2,
         0,
         [11, "' doesn't accept argument '", [2, 0, [12, 39, [2, 0, 0]]]]]],
       "Ppxlib.Deriving: generator '%s' doesn't accept argument '%s'%s"],
    _i_ = [0, 0];
   function make$0(attributes, deps, unused_code_warnings, spec, gen){
    var _bh_ = caml_call1(Ppxlib_Expansion_context[3][5], gen);
    return caml_call5
            (V2[1], attributes, deps, unused_code_warnings, spec, _bh_);
   }
   function make_noarg$0(attributes, deps, unused_code_warnings, gen){
    return make$0(attributes, deps, unused_code_warnings, empty, gen);
   }
   function apply$0(t, param, ctxt, x, args){
    var f = caml_call2(t[2], ctxt, x), t$0 = t[1];
    return apply(create(t$0, args), f);
   }
   function apply_all(ctxt, entry, generators, ext_to_item){
    var
     l =
       caml_call2
        (Ppxlib_Import[94][55],
         generators,
         function(param$0){
          var
           args = param$0[3],
           generators = param$0[2],
           name = param$0[1],
           name$0 = name[1],
           empty_label_error =
             caml_call2
              (Ppxlib_Import[94][69],
               args,
               function(param){
                var e = param[2], label = param[1];
                return caml_call1(Ppxlib_Import[99][53], label)
                        ? [0, caml_call2(Ppxlib_Location[14], e[2], _f_)]
                        : 0;
               }),
           _a__ =
             caml_call2
              (Ppxlib_Import[94][75],
               args,
               function(_bg_, param){
                var b = param[1], a = _bg_[1];
                return caml_call2(Ppxlib_Import[99][71], a, b);
               }),
           _a$_ =
             caml_call2
              (Ppxlib_Import[95][3],
               _a__,
               function(param){
                var e = param[2], label = param[1];
                return caml_call3(Ppxlib_Location[14], e[2], _g_, label);
               }),
           duplicate_argument_error = caml_call1(Ppxlib_Import[95][5], _a$_),
           acc$0 = Ppxlib_Import[99][82][1],
           accepted_args = acc$0,
           param = generators;
          function _bc_(param){
           return caml_call2
                   (Ppxlib_Import[94][55],
                    generators,
                    function(param){
                     var _bf_ = param[5];
                     return [0, apply$0(param, name[1], ctxt, entry, args), _bf_];
                    });
          }
          for(;;){
           if(! param) break;
           var
            rest = param[2],
            acc =
              caml_call2(Ppxlib_Import[99][82][5], accepted_args, param[1][3]);
           accepted_args = acc;
           param = rest;
          }
          var
           unaccepted_argument =
             caml_call2
              (Ppxlib_Import[94][69],
               args,
               function(param){
                var e = param[2], label = param[1];
                if
                 (caml_call2(Ppxlib_Import[99][82][31], label, accepted_args))
                 return 0;
                var
                 _be_ = caml_call1(Ppxlib_Import[99][82][10], accepted_args),
                 match = caml_call2(Ppxlib_Spellcheck[3], _be_, label);
                if(match)
                 var
                  s = match[1],
                  spellcheck_msg = caml_call2(Stdlib[28], cst$0, s);
                else
                 var spellcheck_msg = cst$1;
                return [0,
                        caml_call5
                         (Ppxlib_Location[14],
                          e[2],
                          _h_,
                          name$0,
                          label,
                          spellcheck_msg)];
               }),
           _ba_ =
             caml_call2
              (Ppxlib_Import[100],
               duplicate_argument_error,
               unaccepted_argument),
           errors = caml_call2(Ppxlib_Import[100], empty_label_error, _ba_),
           _bb_ = caml_call1(Ppxlib_Import[94][1], errors),
           _bd_ = caml_call2(Ppxlib_Import[76], _bb_, 0) ? _i_ : [1, errors];
          return caml_call2(Ppxlib_Import[96][5], _bd_, _bc_);
         }),
     match =
       caml_call2
        (Ppxlib_Import[94][64],
         function(param){
          if(0 === param[0]){var e = param[1]; return [0, e];}
          var e$0 = param[1];
          return [1, e$0];
         },
         l),
     lerr = match[2],
     l1 = match[1],
     _a8_ = caml_call1(Ppxlib_Import[94][59], lerr),
     lerr$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         _a8_,
         function(err){
          return caml_call3(ext_to_item, Ppxlib_Location[3], err, 0);
         }),
     _a9_ = caml_call1(Ppxlib_Import[94][59], l1);
    return caml_call2(Ppxlib_Import[100], _a9_, [0, [0, lerr$0, 0], 0]);
   }
   var
    str_type_decl =
      [0, "type", function(t){return t[2];}, function(t){return t[1];}],
    str_class_type_decl =
      [0,
       "class type declaration",
       function(t){return t[3];},
       function(t){return t[2];}],
    str_type_ext =
      [0,
       "type extension",
       function(t){return t[4];},
       function(t){return t[3];}],
    str_exception =
      [0, "exception", function(t){return t[5];}, function(t){return t[4];}],
    str_module_type_decl =
      [0, "module type", function(t){return t[6];}, function(t){return t[5];}],
    sig_type_decl =
      [0,
       "signature type",
       function(t){return t[7];},
       function(t){return t[6];}],
    sig_class_type_decl =
      [0,
       "signature class type",
       function(t){return t[8];},
       function(t){return t[7];}],
    sig_type_ext =
      [0,
       "signature type extension",
       function(t){return t[9];},
       function(t){return t[8];}],
    sig_exception =
      [0,
       "signature exception",
       function(t){return t[10];},
       function(t){return t[9];}],
    sig_module_type_decl =
      [0,
       "signature module type",
       function(t){return t[11];},
       function(t){return t[10];}],
    T = [248, "Ppxlib__Deriving.Deriver.T", caml_fresh_oo_id(0)],
    Not_supported =
      [248, "Ppxlib__Deriving.Deriver.Not_supported", caml_fresh_oo_id(0)],
    _j_ =
      [0,
       [11,
        "Ppxlib.Deriving: '",
        [2,
         0,
         [11,
          "' is not a supported ",
          [2, 0, [11, " deriving generator", [2, 0, 0]]]]]],
       "Ppxlib.Deriving: '%s' is not a supported %s deriving generator%s"],
    _k_ = [0, [11, "Ppxlib.Deriving: ", [2, 0, 0]], "Ppxlib.Deriving: %s"],
    _l_ = [0, 0],
    _m_ = [0, 0, 0],
    _n_ =
      [0,
       [11, cst_Deriver, [2, 0, [11, " appears twice", 0]]],
       "Deriver %s appears twice"],
    _o_ =
      [0,
       [11,
        cst_Deriver,
        [2,
         0,
         [11,
          " is needed for ",
          [2, 0, [11, ", you need to add it before in the list", 0]]]]],
       "Deriver %s is needed for %s, you need to add it before in the list"],
    cst_Ppxlib_Deriving = "Ppxlib.Deriving.";
   function resolve_actual_derivers(field, name){
    function loop(name, collected){
     if
      (caml_call2
        (Ppxlib_Import[94][22],
         function(d){return caml_call2(Ppxlib_Import[99][72], d[1], name);},
         collected))
      return collected;
     var match = caml_call1(Ppx_derivers[2], name);
     if(match){
      var _a7_ = match[1];
      if(_a7_[1] === T){
       var match$0 = _a7_[2];
       if(0 === match$0[0]){var drv = match$0[1]; return [0, drv, collected];}
       var alias = match$0[1], set = caml_call1(field[3], alias);
       return caml_call3(Ppxlib_Import[94][57], set, collected, loop);
      }
     }
     throw caml_maybe_attach_backtrace([0, Not_supported, name], 1);
    }
    var _a6_ = loop(name, 0);
    return caml_call1(Ppxlib_Import[94][9], _a6_);
   }
   function resolve_internal(field, name){
    var _a5_ = resolve_actual_derivers(field, name);
    return caml_call2
            (Ppxlib_Import[94][55],
             _a5_,
             function(drv){
              var match = caml_call1(field[2], drv);
              if(! match)
               throw caml_maybe_attach_backtrace([0, Not_supported, name], 1);
              var g = match[1];
              return [0, drv[1], g];
             });
   }
   function not_supported(field, opt, name){
    var spellcheck = opt ? opt[1] : 1;
    if(spellcheck){
     var
      _a1_ = name[1],
      _aX_ = caml_call1(Ppx_derivers[3], 0),
      _aY_ =
        caml_call2
         (Ppxlib_Import[94][69],
          _aX_,
          function(param){
           var match = param[2];
           if(match[1] !== T) return 0;
           var t = match[2], name = param[1];
           return [0, [0, name, t]];
          }),
      _aZ_ =
        caml_call3
         (Ppxlib_Import[94][17],
          function(acc, param){
           var name = param[1];
           try{resolve_internal(field, name);}
           catch(_a4_){
            var _a3_ = caml_wrap_exception(_a4_);
            if(_a3_[1] === Not_supported) return acc;
            throw caml_maybe_attach_backtrace(_a3_, 0);
           }
           return caml_call2(Ppxlib_Import[99][82][2], name, acc);
          },
          Ppxlib_Import[99][82][1],
          _aY_),
      _a0_ = caml_call1(Ppxlib_Import[99][82][10], _aZ_),
      match = caml_call2(Ppxlib_Spellcheck[3], _a0_, _a1_);
     if(match)
      var s = match[1], _a2_ = caml_call2(Stdlib[28], cst$2, s);
     else
      var _a2_ = cst$3;
     var spellcheck_msg = _a2_;
    }
    else
     var spellcheck_msg = cst$4;
    return caml_call5
            (Ppxlib_Location[14],
             name[2],
             _j_,
             name[1],
             field[1],
             spellcheck_msg);
   }
   function resolve_all(field, derivers){
    var
     param =
       caml_call2
        (Ppxlib_Import[94][64],
         function(param){
          var
           args = param[2],
           name = param[1],
           match = caml_call1(Ppx_derivers[2], name[1]);
          if(! match) return [1, not_supported(field, 0, name)];
          if(match[1][1] !== T) return _l_;
          if(0 === args[0]){var l = args[1]; return [0, [0, [0, name, l]]];}
          var msg = args[2], loc = args[1];
          return [1, caml_call3(Ppxlib_Location[14], loc, _k_, msg)];
         },
         derivers),
     derivers_and_args_errors = param[2],
     l1 = param[1],
     derivers_and_args = caml_call1(Ppxlib_Import[94][68], l1),
     seen = caml_call2(Ppxlib_Import[90][1], 0, 16),
     match =
       caml_call3
        (Ppxlib_Import[94][17],
         function(_aS_, param){
          var
           args = param[2],
           name$0 = param[1],
           errors = _aS_[2],
           result = _aS_[1];
          try{
           var _aR_ = [0, resolve_internal(field, name$0[1])], match = _aR_;
          }
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0);
           if(exn[1] !== Not_supported)
            throw caml_maybe_attach_backtrace(exn, 0);
           var
            name = exn[2],
            match =
              [1,
               not_supported
                (field,
                 [0, caml_call2(Ppxlib_Import[99][72], name$0[1], name)],
                 name$0)];
          }
          if(0 === match[0]){
           var
            named_generators = match[1],
            l_err =
              caml_call2
               (Ppxlib_Import[94][70],
                named_generators,
                function(param){
                 var gen = param[2], actual_deriver_name = param[1];
                 a:
                 {
                  if
                   (Ppxlib_Options[7]
                    &&
                     caml_call2(Ppxlib_Import[90][7], seen, actual_deriver_name)){
                   var
                    dup_error =
                      [0,
                       caml_call3
                        (Ppxlib_Location[14], name$0[2], _n_, actual_deriver_name),
                       0];
                   break a;
                  }
                  var dup_error = 0;
                 }
                 var
                  l_err =
                    caml_call2
                     (Ppxlib_Import[94][70],
                      gen[4],
                      function(dep){
                       var _aW_ = resolve_actual_derivers(field, dep);
                       return caml_call2
                               (Ppxlib_Import[94][69],
                                _aW_,
                                function(drv){
                                 var dep_name = drv[1];
                                 return caml_call2(Ppxlib_Import[90][7], seen, dep_name)
                                         ? 0
                                         : [0,
                                           caml_call4
                                            (Ppxlib_Location[14], name$0[2], _o_, dep_name, name$0[1])];
                                });
                      });
                 caml_call3
                  (Ppxlib_Import[90][30], seen, actual_deriver_name, 0);
                 return caml_call2(Ppxlib_Import[100], dup_error, l_err);
                }),
            _aT_ = caml_call2(Ppxlib_Import[100], errors, l_err),
            _aU_ =
              [0,
               [0,
                name$0,
                caml_call2
                 (Ppxlib_Import[94][55],
                  named_generators,
                  function(_aV_){return _aV_[2];}),
                args],
               0];
           return [0, caml_call2(Ppxlib_Import[100], result, _aU_), _aT_];
          }
          var e = match[1];
          return [0,
                  result,
                  caml_call2(Ppxlib_Import[100], errors, [0, e, 0])];
         },
         _m_,
         derivers_and_args),
     dep_errors = match[2],
     result = match[1];
    return [0,
            result,
            caml_call2
             (Ppxlib_Import[100], derivers_and_args_errors, dep_errors)];
   }
   function add
   (str_type_decl,
    str_class_type_decl,
    str_type_ext,
    str_exception,
    str_module_type_decl,
    sig_type_decl,
    sig_class_type_decl,
    sig_type_ext,
    sig_exception,
    sig_module_type_decl,
    extension,
    name){
    var
     actual_deriver =
       [0,
        name,
        str_type_decl,
        str_class_type_decl,
        str_type_ext,
        str_exception,
        str_module_type_decl,
        sig_type_decl,
        sig_class_type_decl,
        sig_type_ext,
        sig_exception,
        sig_module_type_decl];
    caml_call2(Ppx_derivers[1], name, [0, T, [0, actual_deriver]]);
    if(extension){
     var
      f = extension[1],
      _aO_ = caml_call1(Ppxlib_Ast_pattern[236], Ppxlib_Ast_pattern[4]),
      extension$0 = caml_call4(Ppxlib_Extension[2], name, 5, _aO_, f),
      _aP_ = caml_call2(Stdlib[28], cst_Ppxlib_Deriving, name),
      _aQ_ = [0, [0, caml_call1(Ppxlib_Context_free[1][1], extension$0), 0]];
     caml_call13
      (Ppxlib_Driver[5], 0, _aQ_, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _aP_);
    }
    return name;
   }
   function add_alias
   (name,
    str_type_decl,
    str_class_type_decl,
    str_type_ext,
    str_exception,
    str_module_type_decl,
    sig_type_decl,
    sig_class_type_decl,
    sig_type_ext,
    sig_exception,
    sig_module_type_decl,
    set){
    function get(param){
     if(! param) return set;
     var set$0 = param[1];
     return set$0;
    }
    var
     _aF_ = get(sig_module_type_decl),
     _aG_ = get(sig_exception),
     _aH_ = get(sig_type_ext),
     _aI_ = get(sig_class_type_decl),
     _aJ_ = get(sig_type_decl),
     _aK_ = get(str_module_type_decl),
     _aL_ = get(str_exception),
     _aM_ = get(str_type_ext),
     _aN_ = get(str_class_type_decl),
     alias =
       [0,
        get(str_type_decl),
        _aN_,
        _aM_,
        _aL_,
        _aK_,
        _aJ_,
        _aI_,
        _aH_,
        _aG_,
        _aF_];
    caml_call2(Ppx_derivers[1], name, [0, T, [1, alias]]);
    return name;
   }
   var
    Unknown_syntax =
      [248, "Ppxlib__Deriving.Unknown_syntax", caml_fresh_oo_id(0)],
    _p_ =
      [0,
       [11, "invalid [", [17, 5, [11, "deriving ] attribute syntax", 0]]],
       "invalid [@@deriving ] attribute syntax"],
    cst_non_optional_labelled_argu = "non-optional labelled argument expected",
    cst_non_optional_labelled_argu$0 =
      "non-optional labelled argument or record expected",
    cst_simple_identifier_expected = "simple identifier expected",
    _q_ = [0, 0],
    cst_deriving = cst_deriving$0,
    cst_ocaml_warning = "ocaml.warning";
   function parse_arguments(l){
    try{
     a:
     {
      if(l){
       var _aB_ = l[1];
       if(typeof _aB_[1] === "number" && ! l[2]){
        var e = _aB_[2], _aE_ = e[1];
        if(typeof _aE_ !== "number" && 11 === _aE_[0] && ! _aE_[2]){
         var
          fields = _aE_[1],
          _aC_ =
            caml_call2
             (Ppxlib_Import[94][55],
              fields,
              function(param){
               var expr = param[2], id = param[1], match = id[1];
               if(0 !== match[0])
                throw [0,
                       Unknown_syntax,
                       id[2],
                       cst_simple_identifier_expected];
               var name = match[1];
               return [0, name, expr];
              });
         break a;
        }
        throw [0, Unknown_syntax, e[2], cst_non_optional_labelled_argu$0];
       }
      }
      var
       _aC_ =
         caml_call2
          (Ppxlib_Import[94][55],
           l,
           function(param){
            var expr = param[2], label = param[1];
            if(typeof label !== "number" && 0 === label[0]){var s = label[1]; return [0, s, expr];}
            throw [0, Unknown_syntax, expr[2], cst_non_optional_labelled_argu];
           });
     }
     var _aD_ = [0, _aC_];
     return _aD_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Unknown_syntax) throw caml_maybe_attach_backtrace(exn, 0);
     var msg = exn[3], loc = exn[2];
     return [1, loc, msg];
    }
   }
   function mk_deriving_attr(context, prefix, suffix){
    function generator_name(param){
     var _ay_ = caml_call1(Ppxlib_Ast_pattern[124], Ppxlib_Ast_pattern[4]);
     return caml_call2
             (Ppxlib_Ast_pattern[12],
              _ay_,
              function(loc, f, id){
               a:
               {
                try{var l = caml_call1(Ppxlib_Longident[3], id);}
                catch(_aA_){
                 var _az_ = caml_call2(Ppxlib_Location[5], [0, loc], _p_);
                 break a;
                }
                var
                 _az_ = [0, caml_call2(Ppxlib_Import[99][7], cst$5, l), loc];
               }
               return caml_call1(f, _az_);
              });
    }
    function generator(param){
     var
      _ar_ = caml_call1(Ppxlib_Ast_pattern[25], Ppxlib_Ast_pattern[4]),
      _as_ = caml_call2(Ppxlib_Ast_pattern[16], _ar_, parse_arguments),
      _at_ = generator_name(0),
      _au_ = caml_call2(Ppxlib_Ast_pattern[129], _at_, _as_),
      _av_ = caml_call1(Ppxlib_Ast_pattern[44], _au_),
      _aw_ = generator_name(0),
      _ax_ =
        caml_call2
         (Ppxlib_Ast_pattern[11],
          _aw_,
          function(f, x){return caml_call1(f, [0, x, _q_]);});
     return caml_call2(Ppxlib_Ast_pattern[10], _ax_, _av_);
    }
    var
     _ag_ = generator(0),
     _ah_ =
       caml_call2
        (Ppxlib_Ast_pattern[11],
         _ag_,
         function(f, x){return caml_call1(f, [0, x, 0]);}),
     _ai_ = generator(0),
     _aj_ = caml_call1(Ppxlib_Ast_pattern[25], _ai_),
     _ak_ = caml_call1(Ppxlib_Ast_pattern[132], _aj_),
     generators = caml_call2(Ppxlib_Ast_pattern[10], _ak_, _ah_),
     _al_ = Ppxlib_Ast_pattern[23],
     _am_ =
       caml_call2(Ppxlib_Ast_pattern[265], generators, Ppxlib_Ast_pattern[23]),
     _an_ = caml_call2(Ppxlib_Ast_pattern[24], _am_, _al_),
     _ao_ = caml_call1(Ppxlib_Ast_pattern[234], _an_),
     _ap_ = caml_call2(Stdlib[28], cst_deriving, suffix),
     _aq_ = caml_call2(Stdlib[28], prefix, _ap_);
    return caml_call4
            (Ppxlib_Attribute[2], _aq_, context, _ao_, function(x){return x;});
   }
   function disable_warnings_attribute(warnings){
    var
     loc = Ppxlib_Location[3],
     _ac_ = caml_call2(Ppxlib_Import[94][44], Ppxlib_Import[92][3], warnings),
     _ad_ =
       caml_call2
        (Ppxlib_Import[94][55],
         _ac_,
         function(warning){
          var _af_ = caml_call1(Ppxlib_Import[92][2], warning);
          return caml_call2(Stdlib[28], cst$6, _af_);
         }),
     string = caml_call1(caml_call1(Ppxlib_Import[99][7], cst$7), _ad_),
     _ae_ = caml_call2(Ppxlib_Ast_builder[1][175], loc, string);
    return [0,
            [0, cst_ocaml_warning, loc],
            [0, [0, caml_call3(Ppxlib_Ast_builder[1][22], loc, _ae_, 0), 0]],
            loc];
   }
   var
    loc$0 = Ppxlib_Location[3],
    _r_ = caml_call2(Ppxlib_Ast_builder[1][175], loc$0, "@inline"),
    inline_doc_attr =
      [0,
       [0, "ocaml.doc", loc$0],
       [0, [0, caml_call3(Ppxlib_Ast_builder[1][22], loc$0, _r_, 0), 0]],
       loc$0],
    _s_ = [0, 32, 0],
    cst_inline = "_inline";
   function wrap_str(loc, hide, list){
    return caml_call2
            (Ppxlib_Import[94][70],
             list,
             function(param){
              var unused_code_warnings$0 = param[2], items = param[1];
              if(caml_call1(Ppxlib_Import[94][66], items)) return 0;
              var
               loc$0 = [0, loc[1], loc[2], 1],
               unused_code_warnings =
                 allow_unused_code_warnings$0(unused_code_warnings$0);
              a:
              {
               if(! keep_w32_impl$0(0) && ! unused_code_warnings){
                if(do_insert_unused_warning_attri[1]){
                 var st = items, warnings$0 = warnings;
                 break a;
                }
                var
                 _ab_ = Ppxlib_Ignore_unused_warning[1],
                 st =
                   caml_call2
                    (caml_get_public_method(_ab_, -951102413, 82), _ab_, items),
                 warnings$0 = 0;
                break a;
               }
               var st = items, warnings$0 = 0;
              }
              var
               _Y_ = keep_w60_impl[1],
               ___ = _Y_ || caml_call1(Ppxlib_Driver[14], 0);
              a:
              {
               if(! ___ && ! unused_code_warnings){
                var _aa_ = Ppxlib_Ignore_unused_warning[2];
                if
                 (caml_call3
                   (caml_get_public_method(_aa_, -951102413, 81), _aa_, st, 0)){
                 var
                  warnings$2 = [0, 60, warnings$0],
                  warnings$1 = warnings$2;
                 break a;
                }
               }
               var warnings$1 = warnings$0;
              }
              if(caml_call1(Ppxlib_Import[94][66], warnings$1))
               var st$0 = st, wrap = hide;
              else
               var
                _$_ = disable_warnings_attribute(warnings$1),
                st$1 =
                  [0, caml_call2(Ppxlib_Ast_builder[1][9], loc$0, _$_), st],
                st$0 = st$1,
                wrap = 1;
              if(! wrap) return st$0;
              var
               _Z_ = caml_call2(Ppxlib_Ast_builder[1][75], loc$0, st$0),
               include_infos =
                 caml_call2(Ppxlib_Ast_builder[1][168], loc$0, _Z_),
               pincl_attributes =
                 hide
                  ? [0, inline_doc_attr, [0, Ppxlib_Merlin_helpers[1], 0]]
                  : [0, inline_doc_attr, 0];
              return [0,
                      caml_call2
                       (Ppxlib_Ast_builder[1][10],
                        loc$0,
                        [0, include_infos[1], include_infos[2], pincl_attributes]),
                      0];
             });
   }
   function wrap_sig(loc, hide, list){
    return caml_call2
            (Ppxlib_Import[94][70],
             list,
             function(param){
              var unused_code_warnings$0 = param[2], items = param[1];
              if(caml_call1(Ppxlib_Import[94][66], items)) return 0;
              var
               loc$0 = [0, loc[1], loc[2], 1],
               unused_code_warnings =
                 allow_unused_code_warnings$0(unused_code_warnings$0),
               _R_ = keep_w32_intf[1],
               _U_ = _R_ || caml_call1(Ppxlib_Driver[14], 0);
              a:
              {
               if(! _U_ && ! unused_code_warnings){var warnings = _s_; break a;}
               var warnings = 0;
              }
              var
               _S_ = keep_w60_intf[1],
               _V_ = _S_ || caml_call1(Ppxlib_Driver[14], 0);
              a:
              {
               if(! _V_){
                var _X_ = Ppxlib_Ignore_unused_warning[2];
                if
                 (caml_call3
                   (caml_get_public_method(_X_, 359375608, 83), _X_, items, 0)
                  && ! unused_code_warnings){
                 var warnings$0 = [0, 60, warnings];
                 break a;
                }
               }
               var warnings$0 = warnings;
              }
              if(caml_call1(Ppxlib_Import[94][66], warnings$0))
               var sg = items, wrap = hide;
              else
               var
                _W_ = disable_warnings_attribute(warnings$0),
                sg$0 =
                  [0,
                   caml_call2(Ppxlib_Ast_builder[1][24], loc$0, _W_),
                   items],
                sg = sg$0,
                wrap = 1;
              if(! wrap) return sg;
              var
               _T_ = caml_call2(Ppxlib_Ast_builder[1][67], loc$0, sg),
               include_infos =
                 caml_call2(Ppxlib_Ast_builder[1][168], loc$0, _T_),
               pincl_attributes =
                 hide
                  ? [0, inline_doc_attr, [0, Ppxlib_Merlin_helpers[1], 0]]
                  : [0, inline_doc_attr, 0];
              return [0,
                      caml_call2
                       (Ppxlib_Ast_builder[1][27],
                        loc$0,
                        [0, include_infos[1], include_infos[2], pincl_attributes]),
                      0];
             });
   }
   function merge_generators(field, l){
    var _Q_ = caml_call2(Ppxlib_Import[94][69], l, function(x){return x;});
    return resolve_all(field, caml_call1(Ppxlib_Import[94][59], _Q_));
   }
   function merge_derived(lists){
    return caml_call3
            (Ppxlib_Import[94][57],
             lists,
             0,
             function(derived, acc){
              if(acc){
               var others = acc[2], other = acc[1];
               if(caml_call2(Ppxlib_Import[84][3], derived[2], other[2])){
                var _P_ = other[2];
                return [0,
                        [0,
                         caml_call2(Ppxlib_Import[100], derived[1], other[1]),
                         _P_],
                        others];
               }
              }
              return [0, derived, acc];
             });
   }
   function expand_str_type_decls(ctxt, rec_flag, tds, values){
    var
     match = merge_generators(str_type_decl, values),
     l_err = match[2],
     generators = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][8], Ppxlib_Location[3], err, 0);
         }),
     ppx_allows_unused_code_warning =
       caml_call2
        (Ppxlib_Import[94][21],
         function(param){
          var generators = param[2];
          return caml_call2
                  (Ppxlib_Import[94][21],
                   function(param){return param[5];},
                   generators);
         },
         generators),
     _F_ =
       apply_all
        (ctxt, [0, rec_flag, tds], generators, Ppxlib_Ast_builder[1][8]),
     unused_code_warnings =
       allow_unused_code_warnings$0(ppx_allows_unused_code_warning),
     _G_ = 0;
    switch(allow_unused_type_warnings[1]){
      case 0:
       var unused_type_warnings = ppx_allows_unused_code_warning; break;
      case 1:
       var unused_type_warnings = 0; break;
      default: var unused_type_warnings = 1;
    }
    a:
    {
     if
      (!
       keep_w32_impl$0(0)
       && ! unused_code_warnings && ! unused_type_warnings){
      var
       _H_ =
         caml_call2
          (Ppxlib_Import[94][55],
           tds,
           function(td){
            var
             typ = caml_call1(Ppxlib_Common[2], td),
             loc = td[8],
             _J_ = caml_call1(Ppxlib_Ast_builder[1][189], loc),
             _K_ = caml_call1(Ppxlib_Ast_builder[1][58], loc),
             _L_ = caml_call3(Ppxlib_Ast_builder[1][48], loc, _K_, typ),
             _M_ = caml_call5(Ppxlib_Ast_builder[1][115], loc, 0, 0, _L_, _J_),
             _N_ = caml_call1(Ppxlib_Ast_builder[1][58], loc),
             _O_ = [0, caml_call3(Ppxlib_Ast_builder[1][3], loc, _N_, _M_), 0];
            return caml_call3(Ppxlib_Ast_builder[1][21], loc, 0, _O_);
           });
      break a;
     }
     var _H_ = 0;
    }
    var
     generated =
       merge_derived
        ([0, [0, caml_call2(Ppxlib_Import[100], _H_, l_err$0), _G_], _F_]),
     _I_ = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_str
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), _I_, generated);
   }
   function expand_sig_type_decls(ctxt, rec_flag, tds, values){
    var
     match = merge_generators(sig_type_decl, values),
     l_err = match[2],
     generators = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][23], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all
           (ctxt, [0, rec_flag, tds], generators, Ppxlib_Ast_builder[1][23])]),
     _E_ = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_sig
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), _E_, generated);
   }
   function expand_str_module_type_decl(ctxt, mtd, generators){
    var
     match = resolve_all(str_module_type_decl, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][8], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, mtd, generators$0, Ppxlib_Ast_builder[1][8])]),
     _D_ = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_str
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), _D_, generated);
   }
   function expand_sig_module_type_decl(ctxt, mtd, generators){
    var
     match = resolve_all(sig_module_type_decl, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][23], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, mtd, generators$0, Ppxlib_Ast_builder[1][23])]),
     _C_ = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_sig
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), _C_, generated);
   }
   function expand_str_exception(ctxt, ec, generators){
    var
     match = resolve_all(str_exception, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][8], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, ec, generators$0, Ppxlib_Ast_builder[1][8])]),
     _B_ = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_str
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), _B_, generated);
   }
   function expand_sig_exception(ctxt, ec, generators){
    var
     match = resolve_all(sig_exception, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][23], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, ec, generators$0, Ppxlib_Ast_builder[1][23])]),
     _A_ = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_sig
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), _A_, generated);
   }
   function expand_str_type_ext(ctxt, te, generators){
    var
     match = resolve_all(str_type_ext, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][8], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, te, generators$0, Ppxlib_Ast_builder[1][8])]),
     _z_ = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_str
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), _z_, generated);
   }
   function expand_sig_type_ext(ctxt, te, generators){
    var
     match = resolve_all(sig_type_ext, generators),
     l_err = match[2],
     generators$0 = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][23], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, te, generators$0, Ppxlib_Ast_builder[1][23])]),
     _y_ = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_sig
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), _y_, generated);
   }
   function expand_str_class_type_decls(ctxt, rec_flag, cds, values){
    var
     match = merge_generators(str_class_type_decl, values),
     l_err = match[2],
     generators = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][8], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, cds, generators, Ppxlib_Ast_builder[1][8])]),
     _x_ = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_str
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), _x_, generated);
   }
   function expand_sig_class_decls(ctxt, rec_flag, cds, values){
    var
     match = merge_generators(sig_class_type_decl, values),
     l_err = match[2],
     generators = match[1],
     l_err$0 =
       caml_call2
        (Ppxlib_Import[94][55],
         l_err,
         function(err){
          return caml_call3
                  (Ppxlib_Ast_builder[1][23], Ppxlib_Location[3], err, 0);
         }),
     generated =
       merge_derived
        ([0,
          [0, l_err$0, 0],
          apply_all(ctxt, cds, generators, Ppxlib_Ast_builder[1][23])]),
     _w_ = 1 - caml_call1(Ppxlib_Expansion_context[3][6], ctxt);
    return wrap_sig
            (caml_call1(Ppxlib_Expansion_context[3][1], ctxt), _w_, generated);
   }
   function rules
   (typ,
    expand_sig,
    expand_str,
    rule_str,
    rule_sig,
    rule_str_expect,
    rule_sig_expect){
    var
     deriving_attr = mk_deriving_attr(typ, prefix, cst$8),
     deriving_attr_expect = mk_deriving_attr(typ, prefix, cst_inline),
     _t_ =
       [0, caml_call2(rule_sig_expect, deriving_attr_expect, expand_sig), 0],
     _u_ =
       [0, caml_call2(rule_str_expect, deriving_attr_expect, expand_str), _t_],
     _v_ = [0, caml_call2(rule_str, deriving_attr, expand_str), _u_];
    return [0, caml_call2(rule_sig, deriving_attr, expand_sig), _v_];
   }
   var
    rules_type_decl =
      rules
       (2,
        expand_sig_type_decls,
        expand_str_type_decls,
        Ppxlib_Context_free[1][6],
        Ppxlib_Context_free[1][7],
        Ppxlib_Context_free[1][8],
        Ppxlib_Context_free[1][9]),
    rules_type_ext =
      rules
       (4,
        expand_sig_type_ext,
        expand_str_type_ext,
        Ppxlib_Context_free[1][14],
        Ppxlib_Context_free[1][15],
        Ppxlib_Context_free[1][16],
        Ppxlib_Context_free[1][17]),
    rules_exception =
      rules
       (3,
        expand_sig_exception,
        expand_str_exception,
        Ppxlib_Context_free[1][18],
        Ppxlib_Context_free[1][19],
        Ppxlib_Context_free[1][20],
        Ppxlib_Context_free[1][21]),
    rules_module_type_decl =
      rules
       (18,
        expand_sig_module_type_decl,
        expand_str_module_type_decl,
        Ppxlib_Context_free[1][10],
        Ppxlib_Context_free[1][11],
        Ppxlib_Context_free[1][12],
        Ppxlib_Context_free[1][13]),
    rules_class_type_decl =
      rules
       (15,
        expand_sig_class_decls,
        expand_str_class_type_decls,
        Ppxlib_Context_free[1][22],
        Ppxlib_Context_free[1][23],
        Ppxlib_Context_free[1][24],
        Ppxlib_Context_free[1][25]),
    rules$0 =
      caml_call1
       (Ppxlib_Import[94][59],
        [0,
         rules_type_decl,
         [0,
          rules_type_ext,
          [0,
           rules_exception,
           [0, rules_module_type_decl, [0, rules_class_type_decl, 0]]]]]);
   caml_call13
    (Ppxlib_Driver[5],
     0,
     [0, rules$0],
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     [0, [0, "type_conv", 0]],
     cst_deriving$0);
   var
    Ppxlib_Deriving =
      [0,
       [0,
        empty,
        arg,
        flag,
        symbol$4,
        parse,
        parse_res,
        symbol$3,
        symbol$2,
        drop,
        as,
        alt,
        alt_option,
        symbol$1,
        map$0,
        map,
        map_result,
        symbol_map,
        map0$0,
        map1$0,
        map2$0,
        map0,
        map1,
        map2,
        map_value$0,
        map_value,
        nil,
        symbol$0,
        many,
        int$0,
        char$0,
        string,
        float$0,
        int32,
        int64,
        nativeint,
        bool,
        ebool,
        pbool,
        cst,
        none,
        some,
        pair,
        symbol,
        triple,
        loc,
        pack0,
        pack2,
        pack3,
        nolabel,
        labelled,
        optional,
        binding_op,
        case$0,
        pcl_loc,
        pcl_attributes,
        pcl_constr,
        pcl_structure,
        pcl_fun,
        pcl_apply,
        pcl_let,
        pcl_constraint,
        pcl_extension,
        pcl_open,
        pcf_loc,
        pcf_attributes,
        pcf_inherit,
        pcf_val,
        pcf_method,
        pcf_constraint,
        pcf_initializer,
        pcf_attribute,
        pcf_extension,
        cfk_virtual,
        cfk_concrete,
        class_infos_attributes,
        class_infos,
        class_signature,
        class_structure,
        pcty_loc,
        pcty_attributes,
        pcty_constr,
        pcty_signature,
        pcty_arrow,
        pcty_extension,
        pcty_open,
        pctf_loc,
        pctf_attributes,
        pctf_inherit,
        pctf_val,
        pctf_method,
        pctf_constraint,
        pctf_attribute,
        pctf_extension,
        closed,
        open,
        pconst_integer,
        pconst_char,
        pconst_string,
        pconst_float,
        pcstr_tuple,
        pcstr_record,
        constructor_declaration_attrib,
        constructor_declaration,
        ptyp_loc,
        ptyp_attributes,
        ptyp_any,
        ptyp_var,
        ptyp_arrow,
        ptyp_tuple,
        ptyp_constr,
        ptyp_object,
        ptyp_class,
        ptyp_alias,
        ptyp_variant,
        ptyp_poly,
        ptyp_package,
        ptyp_extension,
        upto,
        downto,
        pdira_loc,
        pdir_string,
        pdir_int,
        pdir_ident,
        pdir_bool,
        pexp_loc,
        pexp_attributes,
        pexp_ident,
        pexp_constant,
        pexp_let,
        pexp_function,
        pexp_fun,
        pexp_apply,
        pexp_match,
        pexp_try,
        pexp_tuple,
        pexp_construct,
        pexp_variant,
        pexp_record,
        pexp_field,
        pexp_setfield,
        pexp_array,
        pexp_ifthenelse,
        pexp_sequence,
        pexp_while,
        pexp_for,
        pexp_constraint,
        pexp_coerce,
        pexp_send,
        pexp_new,
        pexp_setinstvar,
        pexp_override,
        pexp_letmodule,
        pexp_letexception,
        pexp_assert,
        pexp_lazy,
        pexp_poly,
        pexp_object,
        pexp_newtype,
        pexp_pack,
        pexp_open,
        pexp_letop,
        pexp_extension,
        pexp_unreachable,
        extension_constructor_attribut,
        extension_constructor,
        pext_decl,
        pext_rebind,
        unit,
        named,
        include_infos_attributes,
        include_infos,
        injective,
        noinjectivity,
        label_declaration_attributes,
        label_declaration,
        letop,
        location,
        lident,
        ldot,
        lapply,
        module_binding_attributes,
        module_binding,
        module_declaration_attributes,
        module_declaration,
        pmod_loc,
        pmod_attributes,
        pmod_ident,
        pmod_structure,
        pmod_functor,
        pmod_apply,
        pmod_constraint,
        pmod_unpack,
        pmod_extension,
        module_substitution_attributes,
        module_substitution,
        pmty_loc,
        pmty_attributes,
        pmty_ident,
        pmty_signature,
        pmty_functor,
        pmty_with,
        pmty_typeof,
        pmty_extension,
        pmty_alias,
        module_type_declaration_attrib,
        module_type_declaration,
        immutable,
        mutable,
        pof_loc,
        pof_attributes,
        otag,
        oinherit,
        open_infos_attributes,
        open_infos,
        override,
        fresh,
        ppat_loc,
        ppat_attributes,
        ppat_any,
        ppat_var,
        ppat_alias,
        ppat_constant,
        ppat_interval,
        ppat_tuple,
        ppat_construct,
        ppat_variant,
        ppat_record,
        ppat_array,
        ppat_or,
        ppat_constraint,
        ppat_type,
        ppat_lazy,
        ppat_unpack,
        ppat_exception,
        ppat_extension,
        ppat_open,
        pstr,
        psig,
        ptyp,
        ppat,
        position,
        private$0,
        public$0,
        nonrecursive,
        recursive,
        prf_loc,
        prf_attributes,
        rtag,
        rinherit,
        psig_loc,
        psig_value,
        psig_type,
        psig_typesubst,
        psig_typext,
        psig_exception,
        psig_module,
        psig_modsubst,
        psig_recmodule,
        psig_modtype,
        psig_modtypesubst,
        psig_open,
        psig_include,
        psig_class,
        psig_class_type,
        psig_attribute,
        psig_extension,
        pstr_loc,
        pstr_eval,
        pstr_value,
        pstr_primitive,
        pstr_type,
        pstr_typext,
        pstr_exception,
        pstr_module,
        pstr_recmodule,
        pstr_modtype,
        pstr_open,
        pstr_class,
        pstr_class_type,
        pstr_include,
        pstr_attribute,
        pstr_extension,
        toplevel_directive,
        ptop_def,
        ptop_dir,
        type_declaration_attributes,
        type_declaration,
        type_exception_attributes,
        type_exception,
        type_extension_attributes,
        type_extension,
        ptype_abstract,
        ptype_variant,
        ptype_record,
        ptype_open,
        value_binding_attributes,
        value_binding,
        value_description_attributes,
        value_description,
        covariant,
        contravariant,
        novariance,
        virtual,
        concrete,
        pwith_type,
        pwith_module,
        pwith_modtype,
        pwith_modtypesubst,
        pwith_typesubst,
        pwith_modsubst,
        true$0,
        false$0,
        eint,
        echar,
        estring,
        efloat,
        eint32,
        eint64,
        enativeint,
        pint,
        pchar,
        pstring,
        pfloat,
        pint32,
        pint64,
        pnativeint,
        single_expr_payload,
        no_label,
        attribute,
        extension,
        elist,
        esequence,
        of_func,
        to_func],
       [0, make$0, make_noarg$0, V2, apply$0],
       add,
       add_alias,
       ignore];
   runtime.caml_register_global(94, Ppxlib_Deriving, "Ppxlib__Deriving");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Expansion_helpers
//# unitInfo: Requires: Ppxlib__Import, Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst$4 = "_";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$4,
    cst$0 = cst$4,
    cst$1 = cst$4,
    cst$2 = cst$4,
    cst$3 = cst$4,
    Stdlib = global_data.Stdlib,
    Ppxlib_Import = global_data.Ppxlib__Import,
    cst_t = "t",
    cst_Ppxlib_Expansion_helpers_m =
      "Ppxlib.Expansion_helpers.mangle_lid: Lapply";
   function mangle(opt, affix, name){
    var fixpoint = opt ? opt[1] : cst_t;
    if(! caml_call2(Ppxlib_Import[99][73], name, fixpoint))
     switch(affix[0]){
       case 0:
        var x$0 = affix[1], _b_ = caml_call2(Stdlib[28], cst$0, name);
        return caml_call2(Stdlib[28], x$0, _b_);
       case 1:
        var x$1 = affix[1], _c_ = caml_call2(Stdlib[28], cst$1, x$1);
        return caml_call2(Stdlib[28], name, _c_);
       default:
        var
         s$0 = affix[2],
         p$0 = affix[1],
         _d_ = caml_call2(Stdlib[28], cst$2, s$0),
         _e_ = caml_call2(Stdlib[28], name, _d_),
         _f_ = caml_call2(Stdlib[28], cst$3, _e_);
        return caml_call2(Stdlib[28], p$0, _f_);
     }
    if(2 === affix[0]){
     var s = affix[2], p = affix[1], _a_ = caml_call2(Stdlib[28], cst, s);
     return caml_call2(Stdlib[28], p, _a_);
    }
    var x = affix[1];
    return x;
   }
   function mangle_type_decl(fixpoint, affix, param){
    var name = param[1][1];
    return mangle(fixpoint, affix, name);
   }
   function mangle_lid(fixpoint, affix, lid){
    switch(lid[0]){
      case 0:
       var s = lid[1]; return [0, mangle(fixpoint, affix, s)];
      case 1:
       var s$0 = lid[2], p = lid[1];
       return [1, p, mangle(fixpoint, affix, s$0)];
      default: return caml_call1(Stdlib[1], cst_Ppxlib_Expansion_helpers_m);
    }
   }
   var Ppxlib_Expansion_helpers = [0, mangle, mangle_type_decl, mangle_lid];
   runtime.caml_register_global
    (9, Ppxlib_Expansion_helpers, "Ppxlib__Expansion_helpers");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib__Keyword
//# unitInfo: Requires: Astlib__Keyword
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Astlib_Keyword = global_data.Astlib__Keyword,
    is_keyword = Astlib_Keyword[1],
    Ppxlib_Keyword = [0, is_keyword];
   runtime.caml_register_global(1, Ppxlib_Keyword, "Ppxlib__Keyword");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppxlib
//# unitInfo: Requires: Ocaml_shadow, Ppxlib__Common, Ppxlib_ast__Ast
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Ppxlib_Common = global_data.Ppxlib__Common,
    Ppxlib_ast_Ast = global_data.Ppxlib_ast__Ast,
    lident = Ppxlib_Common[1],
    core_type_of_type_declaration = Ppxlib_Common[2],
    name_type_params_in_td_res = Ppxlib_Common[3],
    name_type_params_in_td = Ppxlib_Common[4],
    combinator_type_of_type_declar = Ppxlib_Common[5],
    gen_symbol = Ppxlib_Common[6],
    string_of_core_type = Ppxlib_Common[7],
    assert_no_attributes = Ppxlib_Common[8],
    assert_no_attributes_in = Ppxlib_Common[9],
    attributes_errors = Ppxlib_Common[10],
    collect_attributes_errors = Ppxlib_Common[11],
    get_type_param_name_res = Ppxlib_Common[12],
    get_type_param_name = Ppxlib_Common[13],
    type_is_recursive = Ppxlib_Common[14],
    really_recursive = Ppxlib_Common[15],
    loc_of_payload = Ppxlib_Common[16],
    loc_of_attribute = Ppxlib_Common[17],
    loc_of_extension = Ppxlib_Common[18],
    curry_applications = Ppxlib_Common[19],
    attribute_of_warning = Ppxlib_Common[20],
    is_polymorphic_variant = Ppxlib_Common[21],
    mk_named_sig = Ppxlib_Common[22],
    exn_to_loc_error = Ppxlib_Common[23],
    With_errors = Ppxlib_Common[24],
    map = Ppxlib_ast_Ast[1],
    iter = Ppxlib_ast_Ast[2],
    fold = Ppxlib_ast_Ast[3],
    fold_map = Ppxlib_ast_Ast[4],
    map_with_context = Ppxlib_ast_Ast[5],
    lift = Ppxlib_ast_Ast[6],
    lift_map_with_context = Ppxlib_ast_Ast[7],
    Ppxlib_private = [0],
    Ppxlib =
      [0,
       lident,
       core_type_of_type_declaration,
       name_type_params_in_td_res,
       name_type_params_in_td,
       combinator_type_of_type_declar,
       gen_symbol,
       string_of_core_type,
       assert_no_attributes,
       assert_no_attributes_in,
       attributes_errors,
       collect_attributes_errors,
       get_type_param_name_res,
       get_type_param_name,
       type_is_recursive,
       really_recursive,
       loc_of_payload,
       loc_of_attribute,
       loc_of_extension,
       curry_applications,
       attribute_of_warning,
       is_polymorphic_variant,
       mk_named_sig,
       exn_to_loc_error,
       With_errors,
       map,
       iter,
       fold,
       fold_map,
       map_with_context,
       lift,
       lift_map_with_context,
       Ppxlib_private];
   runtime.caml_register_global(2, Ppxlib, "Ppxlib");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
