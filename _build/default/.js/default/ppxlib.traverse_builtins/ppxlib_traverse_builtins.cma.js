// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.0.1

//# unitInfo: Provides: Ppxlib_traverse_builtins
//# unitInfo: Requires: CamlinternalOO, Stdlib__Array, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$10 = "",
    cst$8 = "::",
    cst_None$1 = "None",
    cst_Some$1 = "Some",
    cst$9 = "[]",
    cst_array = "array",
    cst_bool = "bool",
    cst_char = "char",
    cst_int = "int",
    cst_list = "list",
    cst_option = "option",
    cst_string = "string",
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$6 = cst$8,
    cst$7 = cst$9,
    cst$4 = cst$8,
    cst$5 = cst$9,
    cst$3 = cst$10,
    cst$2 = cst$10,
    cst$1 = cst$10,
    cst$0 = cst$10,
    cst = cst$10,
    _a_ =
      [0,
       "unit",
       "tuple",
       cst_string,
       "record",
       "other",
       cst_option,
       "nativeint",
       cst_list,
       "int64",
       "int32",
       cst_int,
       "float",
       "constr",
       cst_char,
       cst_bool,
       cst_array],
    _b_ =
      [0,
       cst_bool,
       cst_char,
       cst_list,
       cst_int,
       cst_string,
       cst_array,
       cst_option],
    shared =
      [0,
       cst_string,
       cst_option,
       cst_list,
       cst_int,
       cst_char,
       cst_bool,
       cst_array],
    CamlinternalOO = global_data.CamlinternalOO,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    T = [0];
   function _c_(x){return x;}
   var
    map =
      caml_call2
       (CamlinternalOO[19],
        _b_,
        function(_ab_){
         var
          _ac_ = caml_call2(CamlinternalOO[3], _ab_, cst),
          _ad_ = caml_call2(CamlinternalOO[8], _ab_, shared);
         caml_call2
          (CamlinternalOO[11],
           _ab_,
           [0,
            _ad_[4],
            function(self_1){return self_1[1 + _ac_];},
            _ad_[1],
            function(self_1){return self_1[1 + _ac_];},
            _ad_[6],
            function(self_1){return self_1[1 + _ac_];},
            _ad_[5],
            function(self_1){return self_1[1 + _ac_];},
            _ad_[2],
            function(self_1, f, x){
             if(! x) return 0;
             var x$0 = x[1];
             return [0, caml_call1(f, x$0)];
            },
            _ad_[3],
            function(self_1){return Stdlib_List[20];},
            _ad_[7],
            function(self_1){return Stdlib_Array[14];}]);
         return function(_af_, _ae_){
          var _ag_ = caml_call2(CamlinternalOO[24], _ae_, _ab_);
          _ag_[1 + _ac_] = _c_;
          return _ag_;};
        });
   function _d_(_aa_){return 0;}
   var
    iter =
      caml_call2
       (CamlinternalOO[19],
        _b_,
        function(_W_){
         var
          _X_ = caml_call2(CamlinternalOO[3], _W_, cst$0),
          _Y_ = caml_call2(CamlinternalOO[8], _W_, shared);
         caml_call2
          (CamlinternalOO[11],
           _W_,
           [0,
            _Y_[4],
            function(self_2){return self_2[1 + _X_];},
            _Y_[1],
            function(self_2){return self_2[1 + _X_];},
            _Y_[6],
            function(self_2){return self_2[1 + _X_];},
            _Y_[5],
            function(self_2){return self_2[1 + _X_];},
            _Y_[2],
            function(self_2, f, x){
             if(! x) return 0;
             var x$0 = x[1];
             return caml_call1(f, x$0);
            },
            _Y_[3],
            function(self_2){return Stdlib_List[18];},
            _Y_[7],
            function(self_2){return Stdlib_Array[12];}]);
         return function(___, _Z_){
          var _$_ = caml_call2(CamlinternalOO[24], _Z_, _W_);
          _$_[1 + _X_] = _d_;
          return _$_;};
        });
   function _e_(param, acc){return acc;}
   var
    fold =
      caml_call2
       (CamlinternalOO[19],
        _b_,
        function(_N_){
         var
          _O_ = caml_call2(CamlinternalOO[3], _N_, cst$1),
          _P_ = caml_call2(CamlinternalOO[8], _N_, shared);
         caml_call2
          (CamlinternalOO[11],
           _N_,
           [0,
            _P_[4],
            function(self_3){return self_3[1 + _O_];},
            _P_[1],
            function(self_3){return self_3[1 + _O_];},
            _P_[6],
            function(self_3){return self_3[1 + _O_];},
            _P_[5],
            function(self_3){return self_3[1 + _O_];},
            _P_[2],
            function(self_3, f, x, acc){
             if(! x) return acc;
             var x$0 = x[1];
             return caml_call2(f, x$0, acc);
            },
            _P_[3],
            function(self_3){
             function loop(f, l, acc){
              var l$0 = l, acc$0 = acc;
              for(;;){
               if(! l$0) return acc$0;
               var l$1 = l$0[2], x = l$0[1], acc$1 = caml_call2(f, x, acc$0);
               l$0 = l$1;
               acc$0 = acc$1;
              }
             }
             return loop;
            },
            _P_[7],
            function(self_3, f, a, acc){
             var r = [0, acc], _U_ = a.length - 2 | 0, _T_ = 0;
             if(_U_ >= 0){
              var i = _T_;
              for(;;){
               r[1] = caml_call2(f, a[1 + i], r[1]);
               var _V_ = i + 1 | 0;
               if(_U_ === i) break;
               i = _V_;
              }
             }
             return r[1];
            }]);
         return function(_R_, _Q_){
          var _S_ = caml_call2(CamlinternalOO[24], _Q_, _N_);
          _S_[1 + _O_] = _e_;
          return _S_;};
        });
   function _f_(x, acc){return [0, x, acc];}
   var
    fold_map =
      caml_call2
       (CamlinternalOO[19],
        _b_,
        function(_E_){
         var
          _F_ = caml_call2(CamlinternalOO[3], _E_, cst$2),
          _G_ = caml_call2(CamlinternalOO[8], _E_, shared);
         caml_call2
          (CamlinternalOO[11],
           _E_,
           [0,
            _G_[4],
            function(self_4){return self_4[1 + _F_];},
            _G_[1],
            function(self_4){return self_4[1 + _F_];},
            _G_[6],
            function(self_4){return self_4[1 + _F_];},
            _G_[5],
            function(self_4){return self_4[1 + _F_];},
            _G_[2],
            function(self_4, f, x, acc){
             if(! x) return [0, 0, acc];
             var
              x$0 = x[1],
              match = caml_call2(f, x$0, acc),
              acc$0 = match[2],
              x$1 = match[1];
             return [0, [0, x$1], acc$0];
            },
            _G_[3],
            function(self_4){
             function loop(f, l, acc){
              if(! l) return [0, 0, acc];
              var
               l$0 = l[2],
               x = l[1],
               match = caml_call2(f, x, acc),
               acc$0 = match[2],
               x$0 = match[1],
               match$0 = loop(f, l$0, acc$0),
               acc$1 = match$0[2],
               l$1 = match$0[1];
              return [0, [0, x$0, l$1], acc$1];
             }
             return loop;
            },
            _G_[7],
            function(self_4, f, a, acc){
             var len = a.length - 1;
             if(0 === len) return [0, a, acc];
             var
              match = caml_call2(f, a[1], acc),
              acc$0 = match[2],
              x = match[1],
              a$0 = runtime.caml_array_make(len, x),
              r = [0, acc$0],
              _L_ = len - 1 | 0,
              _K_ = 1;
             if(_L_ >= 1){
              var i = _K_;
              for(;;){
               var
                match$0 = caml_call2(f, a[1 + i], r[1]),
                acc$1 = match$0[2],
                x$0 = match$0[1];
               a$0[1 + i] = x$0;
               r[1] = acc$1;
               var _M_ = i + 1 | 0;
               if(_L_ === i) break;
               i = _M_;
              }
             }
             return [0, a$0, r[1]];
            }]);
         return function(_I_, _H_){
          var _J_ = caml_call2(CamlinternalOO[24], _H_, _E_);
          _J_[1 + _F_] = _f_;
          return _J_;};
        });
   function _g_(param, x){return x;}
   var
    map_with_context =
      caml_call2
       (CamlinternalOO[19],
        _b_,
        function(_w_){
         var
          _x_ = caml_call2(CamlinternalOO[3], _w_, cst$3),
          _y_ = caml_call2(CamlinternalOO[8], _w_, shared);
         caml_call2
          (CamlinternalOO[11],
           _w_,
           [0,
            _y_[4],
            function(self_5){return self_5[1 + _x_];},
            _y_[1],
            function(self_5){return self_5[1 + _x_];},
            _y_[6],
            function(self_5){return self_5[1 + _x_];},
            _y_[5],
            function(self_5){return self_5[1 + _x_];},
            _y_[2],
            function(self_5, f, ctx, x){
             if(! x) return 0;
             var x$0 = x[1];
             return [0, caml_call2(f, ctx, x$0)];
            },
            _y_[3],
            function(self_5, f, ctx, l){
             var _D_ = caml_call1(f, ctx);
             return caml_call2(Stdlib_List[20], _D_, l);
            },
            _y_[7],
            function(self_5, f, ctx, a){
             var _C_ = caml_call1(f, ctx);
             return caml_call2(Stdlib_Array[14], _C_, a);
            }]);
         return function(_A_, _z_){
          var _B_ = caml_call2(CamlinternalOO[24], _z_, _w_);
          _B_[1 + _x_] = _g_;
          return _B_;};
        }),
    lift = [],
    cst_Some = cst_Some$1,
    cst_None = cst_None$1;
   caml_update_dummy
    (lift,
     [0,
      0,
      function(_n_){
       var
        _o_ = caml_call2(CamlinternalOO[8], _n_, _a_),
        _p_ = _o_[8],
        _q_ = _o_[13];
       caml_call2
        (CamlinternalOO[11],
         _n_,
         [0,
          _o_[6],
          function(self_6, f, x){
           if(! x) return caml_call3(self_6[1][1 + _q_], self_6, cst_None, 0);
           var x$0 = x[1], _v_ = [0, caml_call1(f, x$0), 0];
           return caml_call3(self_6[1][1 + _q_], self_6, cst_Some, _v_);
          },
          _p_,
          function(self_6, f, l){
           if(! l) return caml_call3(self_6[1][1 + _q_], self_6, cst$5, 0);
           var
            l$0 = l[2],
            x = l[1],
            _t_ = [0, caml_call3(self_6[1][1 + _p_], self_6, f, l$0), 0],
            _u_ = [0, caml_call1(f, x), _t_];
           return caml_call3(self_6[1][1 + _q_], self_6, cst$4, _u_);
          }]);
       return function(_s_, _r_){
        return caml_call2(CamlinternalOO[24], _r_, _n_);};
      },
      0]);
   var
    lift_map_with_context = [],
    cst_Some$0 = cst_Some$1,
    cst_None$0 = cst_None$1;
   caml_update_dummy
    (lift_map_with_context,
     [0,
      0,
      function(_h_){
       var
        _i_ = caml_call2(CamlinternalOO[8], _h_, _a_),
        _j_ = _i_[8],
        _k_ = _i_[13];
       caml_call2
        (CamlinternalOO[11],
         _h_,
         [0,
          _i_[6],
          function(self_7, f, ctx, x){
           if(! x)
            return [0,
                    0,
                    caml_call4(self_7[1][1 + _k_], self_7, ctx, cst_None$0, 0)];
           var
            x$0 = x[1],
            match = caml_call2(f, ctx, x$0),
            res = match[2],
            x$1 = match[1];
           return [0,
                   [0, x$1],
                   caml_call4
                    (self_7[1][1 + _k_], self_7, ctx, cst_Some$0, [0, res, 0])];
          },
          _j_,
          function(self_7, f, ctx, l){
           if(! l)
            return [0,
                    0,
                    caml_call4(self_7[1][1 + _k_], self_7, ctx, cst$7, 0)];
           var
            l$0 = l[2],
            x = l[1],
            match = caml_call2(f, ctx, x),
            res_head = match[2],
            x$0 = match[1],
            match$0 = caml_call4(self_7[1][1 + _j_], self_7, f, ctx, l$0),
            res_tail = match$0[2],
            l$1 = match$0[1];
           return [0,
                   [0, x$0, l$1],
                   caml_call4
                    (self_7[1][1 + _k_],
                     self_7,
                     ctx,
                     cst$6,
                     [0, res_head, [0, res_tail, 0]])];
          }]);
       return function(_m_, _l_){
        return caml_call2(CamlinternalOO[24], _l_, _h_);};
      },
      0]);
   var
    Ppxlib_traverse_builtins =
      [0,
       T,
       map,
       iter,
       fold,
       fold_map,
       map_with_context,
       lift,
       lift_map_with_context];
   runtime.caml_register_global
    (19, Ppxlib_traverse_builtins, "Ppxlib_traverse_builtins");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
