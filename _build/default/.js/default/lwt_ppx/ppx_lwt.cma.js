// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.0.1

//# unitInfo: Provides: Ppx_lwt
//# unitInfo: Requires: CamlinternalOO, Location, Ppxlib, Ppxlib__Ast_builder, Ppxlib__Ast_traverse, Ppxlib__Driver, Ppxlib__Location, Stdlib, Stdlib__List
//# unitInfo: Force_link: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_See_https_github_com_ocsig$1 =
      "  See https://github.com/ocsigen/lwt/issues/495",
    cst_has_no_effect_deprecated = " has no effect (deprecated)",
    cst$3 = "()",
    cst_Lwt = "Lwt",
    cst_ppx_lwt_bound$0 = "__ppx_lwt_bound",
    cst_ppx_lwt_loop$1 = "__ppx_lwt_loop",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_backtrace_bind = "backtrace_bind",
    cst_bind = "bind",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_exn$9 = "exn",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_finally = "finally",
    cst_functor_parameter = "functor_parameter",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_lwt = "lwt",
    cst_lwt_finally = "lwt.finally",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_reraise = "reraise",
    cst_return_unit = "return_unit",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) === 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "-",
    cst$0 = "<",
    cst$1 = "+",
    cst$2 = ">",
    shared =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    lwt_prefix = "__ppx_lwt_",
    Ppxlib_Driver = global_data.Ppxlib__Driver,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib = global_data.Ppxlib,
    Ppxlib_Ast_builder = global_data.Ppxlib__Ast_builder,
    Location = global_data.Location,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib = global_data.Stdlib,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    _b_ = [0, cst_exn$9],
    _c_ = [1, [0, cst_Lwt], cst_reraise],
    cst_exn = cst_exn$9;
   function is_catchall(case$0){
    var _a7_ = 0 === case$0[2] ? 1 : 0;
    if(! _a7_) return _a7_;
    var p$1 = case$0[1], p = p$1;
    for(;;){
     var match = p[1];
     if(typeof match !== "number")
      switch(match[0]){
        case 0: break;
        case 1:
        case 10:
         var p$0 = match[1]; p = p$0; continue;
        default: return 0;
      }
     return 1;
    }
   }
   function add_wildcard_case(cases){
    var has_wildcard = caml_call2(Stdlib_List[34], is_catchall, cases);
    if(has_wildcard) return cases;
    var
     loc = Ppxlib_Location[3],
     _a6_ =
       [0,
        caml_call3
         (Ppxlib_Ast_builder[1][164],
          [0, [0, [0, cst_exn, loc]], loc, 0, 0],
          0,
          [0,
           [5,
            [0, [0, [0, _c_, loc]], loc, 0, 0],
            [0, [0, 0, [0, [0, [0, _b_, loc]], loc, 0, 0]], 0]],
           loc,
           0,
           0]),
        0];
    return caml_call2(Stdlib[37], cases, _a6_);
   }
   var
    default_loc = [0, Ppxlib_Location[3]],
    used_no_sequence_option = [0, 0],
    used_no_strict_sequence_option = [0, 0],
    _d_ = [0, cst_exn$9],
    cst_exn$0 = cst_exn$9,
    _e_ = [0, cst_exn$9],
    _f_ = [1, [0, cst_Lwt], cst_reraise],
    cst_exn$1 = cst_exn$9,
    _g_ = [1, [0, cst_Lwt], cst_backtrace_bind],
    _h_ = [0, cst$3],
    _i_ = [0, cst_exn$9],
    cst_exn$2 = cst_exn$9,
    _j_ = [0, cst_exn$9],
    _k_ = [1, [0, cst_Lwt], cst_reraise],
    cst_exn$3 = cst_exn$9,
    _l_ = [1, [0, cst_Lwt], cst_backtrace_bind],
    _m_ =
      [0,
       [11,
        "match",
        [12,
         37,
         [11, "lwt must contain at least one non-exception pattern.", 0]]],
       "match%%lwt must contain at least one non-exception pattern."],
    _n_ = [0, "src/ppx/ppx_lwt.ml", 140, 15],
    _o_ = [0, cst$3],
    _p_ = [1, [0, cst_Lwt], "try_bind"],
    _q_ = [1, [0, cst_Lwt], cst_bind],
    _r_ = [0, cst$3],
    _s_ = [0, cst_exn$9],
    cst_exn$4 = cst_exn$9,
    _t_ = [0, cst_exn$9],
    _u_ = [1, [0, cst_Lwt], cst_reraise],
    cst_exn$5 = cst_exn$9,
    _v_ = [1, [0, cst_Lwt], "backtrace_catch"],
    _w_ = [0, "false"],
    _x_ = [0, "true"],
    _y_ = [1, [0, cst_Lwt], cst_bind],
    _z_ = [1, [0, cst_Lwt], cst_return_unit],
    _A_ = [0, cst$3],
    _B_ = [0, cst_ppx_lwt_loop$1],
    _C_ = [1, [0, cst_Lwt], cst_return_unit],
    _D_ = [0, cst_ppx_lwt_loop$1],
    _E_ = [1, [0, cst_Lwt], cst_bind],
    _F_ = [0, cst$3],
    cst_ppx_lwt_loop = cst_ppx_lwt_loop$1,
    _G_ = [0, cst_ppx_lwt_bound$0],
    cst_ppx_lwt_bound = cst_ppx_lwt_bound$0,
    _H_ = [0, cst_ppx_lwt_loop$1],
    _I_ = [1, [0, "1", 0]],
    _J_ = [0, cst_ppx_lwt_loop$1],
    _K_ = [0, cst$3],
    _L_ = [1, [0, cst_Lwt], cst_bind],
    _M_ = [1, [0, cst_Lwt], cst_return_unit],
    cst_ppx_lwt_loop$0 = cst_ppx_lwt_loop$1,
    _N_ = [0, cst_int],
    _O_ = [0, cst_exn$9],
    _P_ = [1, [0, cst_Lwt], cst_reraise],
    cst_exn$6 = cst_exn$9,
    _Q_ = [1, [0, cst_Lwt], "return"];
   function no_sequence_option(param){
    used_no_sequence_option[1] = 1;
    return 0;
   }
   function no_strict_sequence_option(param){
    used_no_strict_sequence_option[1] = 1;
    return 0;
   }
   function gen_name(i){
    var _a5_ = caml_call1(Stdlib[33], i);
    return caml_call2(Stdlib[28], lwt_prefix, _a5_);
   }
   function lwt_expression(mapper, exp, attributes, ext_loc){
    default_loc[1] = exp[2];
    var
     pexp_attributes = caml_call2(Stdlib[37], attributes, exp[4]),
     match = exp[1];
    if(typeof match !== "number")
     switch(match[0]){
       case 2:
        if(! match[1]){
         var
          e = match[3],
          vbl = match[2],
          e_loc = exp[2],
          aux$0 =
            function(i, bindings){
             if(! bindings) return e;
             var
              t = bindings[2],
              binding = bindings[1],
              _a3_ = gen_name(i),
              name =
                caml_call2(Ppxlib_Ast_builder[1][191], binding[2][2], _a3_),
              _a4_ = aux$0(i + 1 | 0, t),
              fun = [0, [4, 0, 0, binding[1], _a4_], e_loc, [0, e_loc, 0], 0];
             return [0,
                     [5,
                      [0, [0, [0, _g_, e_loc]], e_loc, 0, 0],
                      [0,
                       [0,
                        0,
                        [0,
                         [4,
                          0,
                          0,
                          [0, [0, [0, cst_exn$1, e_loc]], e_loc, 0, 0],
                          [0,
                           [7,
                            [0,
                             [5,
                              [0, [0, [0, _f_, e_loc]], e_loc, 0, 0],
                              [0, [0, 0, [0, [0, [0, _e_, e_loc]], e_loc, 0, 0]], 0]],
                             e_loc,
                             0,
                             0],
                            [0,
                             [0,
                              [0, [0, [0, cst_exn$0, e_loc]], e_loc, 0, 0],
                              0,
                              [0, [0, [0, _d_, e_loc]], e_loc, 0, 0]],
                             0]],
                           e_loc,
                           0,
                           0]],
                         e_loc,
                         [0, e_loc, 0],
                         0]],
                       [0, [0, 0, name], [0, [0, 0, fun], 0]]]],
                     e_loc,
                     0,
                     binding[3]];
            },
          aux =
            function(i, binding){
             var
              _aZ_ = binding[4],
              _a0_ = binding[3],
              _a1_ = binding[2],
              _a2_ = gen_name(i);
             return [0,
                     caml_call2(Ppxlib_Ast_builder[1][192], binding[2][2], _a2_),
                     _a1_,
                     _a0_,
                     _aZ_];
            },
          _aV_ = aux$0(0, vbl),
          _aU_ = caml_call2(Stdlib_List[21], aux, vbl),
          new_exp =
            caml_call4
             (Ppxlib_Ast_builder[1][117], default_loc[1], 0, _aU_, _aV_);
         return [0,
                 caml_call2
                  (caml_get_public_method(mapper, 782176664, 3),
                   mapper,
                   [0, new_exp[1], new_exp[2], new_exp[3], pexp_attributes])];
        }
        break;
       case 6:
        var
         cases = match[2],
         e$0 = match[1],
         match$0 =
           caml_call1
            (caml_call1
              (Stdlib_List[51],
               function(param){
                var _aY_ = param[1][1];
                if(typeof _aY_ !== "number" && 14 === _aY_[0]) return 1;
                return 0;
               }),
             cases),
         cases$0 = match$0[2],
         exns = match$0[1];
        if(0 === cases$0) caml_call2(Ppxlib_Location[5], [0, exp[2]], _m_);
        var
         exns$0 =
           caml_call1
            (caml_call1
              (Stdlib_List[20],
               function(case$0){
                var match = case$0[1][1];
                if(typeof match !== "number" && 14 === match[0]){
                 var pat = match[1];
                 return [0, pat, case$0[2], case$0[3]];
                }
                throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
               }),
             exns),
         exns$1 = add_wildcard_case(exns$0);
        if(exns$1)
         var
          loc$1 = default_loc[1],
          _aW_ =
            [0,
             [0, 0, caml_call2(Ppxlib_Ast_builder[1][116], loc$1, exns$1)],
             0],
          new_exp$0 =
            [0,
             [5,
              [0, [0, [0, _p_, loc$1]], loc$1, 0, 0],
              [0,
               [0,
                0,
                [0,
                 [4, 0, 0, [0, [5, [0, _o_, loc$1], 0], loc$1, 0, 0], e$0],
                 loc$1,
                 [0, loc$1, 0],
                 0]],
               [0,
                [0, 0, caml_call2(Ppxlib_Ast_builder[1][116], loc$1, cases$0)],
                _aW_]]],
             loc$1,
             0];
        else
         var
          loc$2 = default_loc[1],
          new_exp$0 =
            [0,
             [5,
              [0, [0, [0, _q_, loc$2]], loc$2, 0, 0],
              [0,
               [0, 0, e$0],
               [0,
                [0, 0, caml_call2(Ppxlib_Ast_builder[1][116], loc$2, cases$0)],
                0]]],
             loc$2,
             0];
        return [0,
                caml_call2
                 (caml_get_public_method(mapper, 782176664, 4),
                  mapper,
                  [0,
                   new_exp$0[1],
                   new_exp$0[2],
                   new_exp$0[3],
                   pexp_attributes])];
       case 7:
        var
         cases$1 = match[2],
         expr = match[1],
         cases$2 = add_wildcard_case(cases$1),
         loc$3 = default_loc[1];
        return [0,
                caml_call2
                 (caml_get_public_method(mapper, 782176664, 5),
                  mapper,
                  [0,
                   [5,
                    [0, [0, [0, _v_, loc$3]], loc$3, 0, 0],
                    [0,
                     [0,
                      0,
                      [0,
                       [4,
                        0,
                        0,
                        [0, [0, [0, cst_exn$5, loc$3]], loc$3, 0, 0],
                        [0,
                         [7,
                          [0,
                           [5,
                            [0, [0, [0, _u_, loc$3]], loc$3, 0, 0],
                            [0, [0, 0, [0, [0, [0, _t_, loc$3]], loc$3, 0, 0]], 0]],
                           loc$3,
                           0,
                           0],
                          [0,
                           [0,
                            [0, [0, [0, cst_exn$4, loc$3]], loc$3, 0, 0],
                            0,
                            [0, [0, [0, _s_, loc$3]], loc$3, 0, 0]],
                           0]],
                         loc$3,
                         0,
                         0]],
                       loc$3,
                       [0, loc$3, 0],
                       0]],
                     [0,
                      [0,
                       0,
                       [0,
                        [4, 0, 0, [0, [5, [0, _r_, loc$3], 0], loc$3, 0, 0], expr],
                        loc$3,
                        [0, loc$3, 0],
                        0]],
                      [0,
                       [0,
                        0,
                        caml_call2(Ppxlib_Ast_builder[1][116], loc$3, cases$2)],
                       0]]]],
                   loc$3,
                   0,
                   pexp_attributes])];
       case 15:
        var e2 = match[3], e1 = match[2], cond = match[1];
        if(e2)
         var e$1 = e2[1], e2$0 = e$1;
        else
         var
          loc$6 = default_loc[1],
          e2$0 = [0, [0, [0, _z_, loc$6]], loc$6, 0, 0];
        var
         loc$4 = default_loc[1],
         _aX_ =
           [0,
            caml_call3
             (Ppxlib_Ast_builder[1][164],
              [0, [5, [0, _w_, loc$4], 0], loc$4, 0, 0],
              0,
              e2$0),
            0],
         cases$3 =
           [0,
            caml_call3
             (Ppxlib_Ast_builder[1][164],
              [0, [5, [0, _x_, loc$4], 0], loc$4, 0, 0],
              0,
              e1),
            _aX_],
         loc$5 = default_loc[1];
        return [0,
                caml_call2
                 (caml_get_public_method(mapper, 782176664, 6),
                  mapper,
                  [0,
                   [5,
                    [0, [0, [0, _y_, loc$5]], loc$5, 0, 0],
                    [0,
                     [0, 0, cond],
                     [0,
                      [0,
                       0,
                       caml_call2(Ppxlib_Ast_builder[1][116], loc$5, cases$3)],
                      0]]],
                   loc$5,
                   0,
                   pexp_attributes])];
       case 16:
        var
         rhs$0 = match[2],
         lhs$0 = match[1],
         pat = [0, [5, [0, _h_, ext_loc], 0], ext_loc, 0, 0],
         rhs =
           caml_call2
            (caml_get_public_method(mapper, 782176664, 1), mapper, rhs$0),
         lhs =
           caml_call2
            (caml_get_public_method(mapper, 782176664, 2), mapper, lhs$0),
         loc$0 = exp[2];
        return [0,
                [0,
                 [5,
                  [0, [0, [0, _l_, loc$0]], loc$0, 0, 0],
                  [0,
                   [0,
                    0,
                    [0,
                     [4,
                      0,
                      0,
                      [0, [0, [0, cst_exn$3, loc$0]], loc$0, 0, 0],
                      [0,
                       [7,
                        [0,
                         [5,
                          [0, [0, [0, _k_, loc$0]], loc$0, 0, 0],
                          [0, [0, 0, [0, [0, [0, _j_, loc$0]], loc$0, 0, 0]], 0]],
                         loc$0,
                         0,
                         0],
                        [0,
                         [0,
                          [0, [0, [0, cst_exn$2, loc$0]], loc$0, 0, 0],
                          0,
                          [0, [0, [0, _i_, loc$0]], loc$0, 0, 0]],
                         0]],
                       loc$0,
                       0,
                       0]],
                     loc$0,
                     [0, loc$0, 0],
                     0]],
                   [0,
                    [0, 0, lhs],
                    [0,
                     [0, 0, [0, [4, 0, 0, pat, rhs], loc$0, [0, loc$0, 0], 0]],
                     0]]]],
                 loc$0,
                 0,
                 0]];
       case 17:
        var body = match[2], cond$0 = match[1], loc$7 = default_loc[1];
        return [0,
                caml_call2
                 (caml_get_public_method(mapper, 782176664, 7),
                  mapper,
                  [0,
                   [2,
                    1,
                    [0,
                     [0,
                      [0, [0, [0, cst_ppx_lwt_loop, loc$7]], loc$7, 0, 0],
                      [0,
                       [4,
                        0,
                        0,
                        [0, [5, [0, _F_, loc$7], 0], loc$7, 0, 0],
                        [0,
                         [15,
                          cond$0,
                          [0,
                           [5,
                            [0, [0, [0, _E_, loc$7]], loc$7, 0, 0],
                            [0,
                             [0, 0, body],
                             [0, [0, 0, [0, [0, [0, _D_, loc$7]], loc$7, 0, 0]], 0]]],
                           loc$7,
                           0,
                           0],
                          [0, [0, [0, [0, _C_, loc$7]], loc$7, 0, 0]]],
                         loc$7,
                         0,
                         0]],
                       loc$7,
                       0,
                       0],
                      0,
                      loc$7],
                     0],
                    [0,
                     [5,
                      [0, [0, [0, _B_, loc$7]], loc$7, 0, 0],
                      [0, [0, 0, [0, [9, [0, _A_, loc$7], 0], loc$7, 0, 0]], 0]],
                     loc$7,
                     0,
                     0]],
                   loc$7,
                   0,
                   pexp_attributes])];
       case 18:
        var p$0 = match[1], match$1 = p$0[1];
        if(typeof match$1 !== "number" && 0 === match$1[0]){
         var
          body$0 = match[5],
          dir = match[4],
          bound = match[3],
          start = match[2],
          p_var = match$1[1],
          loc$8 = default_loc[1];
         if(dir)
          var
           op = caml_call2(Ppxlib_Ast_builder[1][191], loc$8, cst),
           op$0 = op,
           comp = caml_call2(Ppxlib_Ast_builder[1][191], loc$8, cst$0);
         else
          var
           op$1 = caml_call2(Ppxlib_Ast_builder[1][191], loc$8, cst$1),
           comp$0 = caml_call2(Ppxlib_Ast_builder[1][191], loc$8, cst$2),
           op$0 = op$1,
           comp = comp$0;
         var
          f = Ppxlib_Ast_builder[1][191],
          loc = p_var[2],
          txt = p_var[1],
          p = caml_call2(f, loc, txt),
          loc$9 = bound[2],
          exp_bound = [0, [0, [0, _G_, loc$9]], loc$9, 0, 0],
          loc$10 = bound[2],
          pat_bound = [0, [0, [0, cst_ppx_lwt_bound, loc$10]], loc$10, 0, 0],
          loc$11 = default_loc[1];
         return [0,
                 caml_call2
                  (caml_get_public_method(mapper, 782176664, 8),
                   mapper,
                   [0,
                    [2,
                     0,
                     [0,
                      [0,
                       [0,
                        [10, pat_bound, [0, [3, [0, _N_, loc$11], 0], loc$11, 0, 0]],
                        loc$11,
                        0,
                        0],
                       bound,
                       0,
                       loc$11],
                      0],
                     [0,
                      [2,
                       1,
                       [0,
                        [0,
                         [0, [0, [0, cst_ppx_lwt_loop$0, loc$11]], loc$11, 0, 0],
                         [0,
                          [4,
                           0,
                           0,
                           p$0,
                           [0,
                            [15,
                             [0,
                              [5, comp, [0, [0, 0, p], [0, [0, 0, exp_bound], 0]]],
                              loc$11,
                              0,
                              0],
                             [0, [0, [0, _M_, loc$11]], loc$11, 0, 0],
                             [0,
                              [0,
                               [5,
                                [0, [0, [0, _L_, loc$11]], loc$11, 0, 0],
                                [0,
                                 [0, 0, body$0],
                                 [0,
                                  [0,
                                   0,
                                   [0,
                                    [4,
                                     0,
                                     0,
                                     [0, [5, [0, _K_, loc$11], 0], loc$11, 0, 0],
                                     [0,
                                      [5,
                                       [0, [0, [0, _J_, loc$11]], loc$11, 0, 0],
                                       [0,
                                        [0,
                                         0,
                                         [0,
                                          [5,
                                           op$0,
                                           [0, [0, 0, p], [0, [0, 0, [0, _I_, loc$11, 0, 0]], 0]]],
                                          loc$11,
                                          [0, loc$11, 0],
                                          0]],
                                        0]],
                                      loc$11,
                                      0,
                                      0]],
                                    loc$11,
                                    [0, loc$11, 0],
                                    0]],
                                  0]]],
                               loc$11,
                               0,
                               0]]],
                            loc$11,
                            0,
                            0]],
                          loc$11,
                          0,
                          0],
                         0,
                         loc$11],
                        0],
                       [0,
                        [5,
                         [0, [0, [0, _H_, loc$11]], loc$11, 0, 0],
                         [0, [0, 0, start], 0]],
                        loc$11,
                        0,
                        0]],
                      loc$11,
                      0,
                      0]],
                    loc$11,
                    0,
                    pexp_attributes])];
        }
        break;
       case 27:
        var e$2 = match[1], loc$12 = default_loc[1];
        return [0,
                caml_call2
                 (caml_get_public_method(mapper, 782176664, 9),
                  mapper,
                  [0,
                   [7,
                    [0,
                     [5,
                      [0, [0, [0, _Q_, loc$12]], loc$12, 0, 0],
                      [0, [0, 0, [0, [27, e$2], loc$12, [0, loc$12, 0], 0]], 0]],
                     loc$12,
                     0,
                     0],
                    [0,
                     [0,
                      [0, [0, [0, cst_exn$6, loc$12]], loc$12, 0, 0],
                      0,
                      [0,
                       [5,
                        [0, [0, [0, _P_, loc$12]], loc$12, 0, 0],
                        [0, [0, 0, [0, [0, [0, _O_, loc$12]], loc$12, 0, 0]], 0]],
                       loc$12,
                       0,
                       0]],
                     0]],
                   loc$12,
                   0,
                   pexp_attributes])];
     }
    return 0;
   }
   var
    warned = [0, 0],
    _a_ =
      [0,
       cst_arg_label,
       cst_array,
       cst_attribute,
       cst_attributes,
       cst_binding_op,
       cst_bool,
       cst_case,
       cst_cases,
       cst_char,
       cst_class_declaration,
       cst_class_description,
       cst_class_expr,
       cst_class_expr_desc,
       cst_class_field,
       cst_class_field_desc,
       cst_class_field_kind,
       cst_class_infos,
       cst_class_signature,
       cst_class_structure,
       cst_class_type,
       cst_class_type_declaration,
       cst_class_type_desc,
       cst_class_type_field,
       cst_class_type_field_desc,
       cst_closed_flag,
       cst_constant,
       cst_constructor_arguments,
       cst_constructor_declaration,
       cst_core_type,
       cst_core_type_desc,
       cst_direction_flag,
       cst_directive_argument,
       cst_directive_argument_desc,
       cst_expression,
       cst_expression_desc,
       cst_extension,
       cst_extension_constructor,
       cst_extension_constructor_kind,
       cst_functor_parameter,
       cst_include_declaration,
       cst_include_description,
       cst_include_infos,
       cst_injectivity,
       cst_int,
       cst_label,
       cst_label_declaration,
       cst_letop,
       cst_list,
       cst_loc,
       cst_location,
       cst_location_stack,
       cst_longident,
       cst_longident_loc,
       cst_module_binding,
       cst_module_declaration,
       cst_module_expr,
       cst_module_expr_desc,
       cst_module_substitution,
       cst_module_type,
       cst_module_type_declaration,
       cst_module_type_desc,
       cst_mutable_flag,
       cst_object_field,
       cst_object_field_desc,
       cst_open_declaration,
       cst_open_description,
       cst_open_infos,
       cst_option,
       cst_override_flag,
       cst_package_type,
       cst_pattern,
       cst_pattern_desc,
       cst_payload,
       cst_position,
       cst_private_flag,
       cst_rec_flag,
       cst_row_field,
       cst_row_field_desc,
       cst_signature,
       cst_signature_item,
       cst_signature_item_desc,
       cst_string,
       cst_structure,
       cst_structure_item,
       cst_structure_item_desc,
       cst_toplevel_directive,
       cst_toplevel_phrase,
       cst_type_declaration,
       cst_type_exception,
       cst_type_extension,
       cst_type_kind,
       cst_value_binding,
       cst_value_description,
       cst_variance,
       cst_virtual_flag,
       cst_with_constraint],
    cst_Replace_let_lwt_x_e_by_let =
      "Replace let%lwt x = e by let x = Lwt_main.run (e)",
    cst_let_lwt_should_not_be_used =
      "let%lwt should not be used at the module item level.\n",
    cst_ocaml_ppwarning = "ocaml.ppwarning",
    _R_ = [1, [0, "Lwt_main"], "run"],
    _S_ = [0, cst$3],
    _T_ = [0, cst$3],
    _U_ = [0, cst_exn$9],
    cst_exn$7 = cst_exn$9,
    _V_ = [0, cst_exn$9],
    _W_ = [1, [0, cst_Lwt], cst_reraise],
    cst_exn$8 = cst_exn$9,
    _X_ = [1, [0, cst_Lwt], "backtrace_finalize"],
    _Y_ =
      [0,
       [11,
        "Lwt's finally should be used only with the syntax: \"(<expr>)[",
        [12, 37, [11, 'finally ...]".', 0]]],
       'Lwt\'s finally should be used only with the syntax: "(<expr>)[%%finally ...]".'],
    cst_See_https_github_com_ocsig = cst_See_https_github_com_ocsig$1,
    cst_no_strict_sequence_is_a_de =
      "-no-strict-sequence is a deprecated Lwt PPX option\n",
    cst_See_https_github_com_ocsig$0 = cst_See_https_github_com_ocsig$1,
    cst_no_sequence_is_a_deprecate =
      "-no-sequence is a deprecated Lwt PPX option\n",
    mapper =
      caml_call2
       (CamlinternalOO[19],
        [0,
         cst_bool,
         cst_cases,
         cst_case,
         cst_char,
         cst_value_binding,
         cst_extension_constructor_kind,
         cst_core_type,
         cst_structure,
         cst_list,
         cst_label_declaration,
         cst_module_binding,
         cst_position,
         cst_toplevel_directive,
         cst_directive_argument,
         cst_object_field_desc,
         cst_class_type_field_desc,
         cst_open_infos,
         cst_pattern_desc,
         cst_signature_item,
         cst_extension_constructor,
         cst_toplevel_phrase,
         cst_extension,
         cst_location,
         cst_variance,
         cst_package_type,
         cst_virtual_flag,
         cst_module_type_desc,
         cst_rec_flag,
         cst_payload,
         cst_type_exception,
         cst_label,
         cst_letop,
         cst_location_stack,
         cst_value_description,
         cst_module_declaration,
         cst_class_type_declaration,
         cst_longident_loc,
         cst_closed_flag,
         cst_directive_argument_desc,
         cst_attribute,
         cst_class_infos,
         cst_signature_item_desc,
         cst_int,
         cst_loc,
         cst_row_field_desc,
         cst_override_flag,
         cst_structure_item_desc,
         cst_class_field_desc,
         cst_binding_op,
         cst_module_expr_desc,
         cst_class_signature,
         cst_type_extension,
         cst_class_field_kind,
         cst_module_type_declaration,
         cst_arg_label,
         cst_row_field,
         cst_longident,
         cst_string,
         cst_pattern,
         cst_include_description,
         cst_signature,
         cst_class_type_field,
         cst_attributes,
         cst_open_description,
         cst_with_constraint,
         cst_include_declaration,
         cst_class_type_desc,
         cst_private_flag,
         cst_injectivity,
         cst_open_declaration,
         cst_object_field,
         cst_array,
         cst_constant,
         cst_class_expr,
         cst_functor_parameter,
         cst_direction_flag,
         cst_core_type_desc,
         cst_type_declaration,
         cst_constructor_declaration,
         cst_option,
         cst_type_kind,
         cst_module_expr,
         cst_module_substitution,
         cst_class_description,
         cst_expression,
         cst_class_type,
         cst_structure_item,
         cst_include_infos,
         cst_class_declaration,
         cst_module_type,
         cst_class_expr_desc,
         cst_class_structure,
         cst_mutable_flag,
         cst_expression_desc,
         cst_constructor_arguments,
         cst_class_field],
        function(_$_){
         var
          _aa_ = caml_call2(CamlinternalOO[8], _$_, shared),
          _ab_ = _aa_[13],
          _ac_ = _aa_[14],
          _ad_ = _aa_[63],
          _ae_ =
            caml_call6
             (CamlinternalOO[18], _$_, 0, 0, _a_, Ppxlib_Ast_traverse[1], 1),
          _ag_ = _ae_[35],
          _ah_ = _ae_[84],
          _ai_ = _ae_[85],
          _af_ = _ae_[1];
         caml_call2
          (CamlinternalOO[11],
           _$_,
           [0,
            _ac_,
            function(self_1, structure){
             if(warned[1])
              return caml_call1(caml_call1(_ah_, self_1), structure);
             warned[1] = 1;
             var
              structure$0 = caml_call1(caml_call1(_ah_, self_1), structure),
              loc = caml_call1(Ppxlib_Location[1], Location[13][1]);
             function warn_if(condition, message, structure){
              if(! condition) return structure;
              var _aT_ = caml_call2(Ppxlib[20], loc, message);
              return [0,
                      caml_call2(Ppxlib_Ast_builder[1][9], loc, _aT_),
                      structure];
             }
             var
              _aQ_ =
                caml_call2
                 (Stdlib[28],
                  cst_no_strict_sequence_is_a_de,
                  cst_See_https_github_com_ocsig),
              _aS_ =
                warn_if(used_no_strict_sequence_option[1], _aQ_, structure$0),
              _aR_ =
                caml_call2
                 (Stdlib[28],
                  cst_no_sequence_is_a_deprecate,
                  cst_See_https_github_com_ocsig$0);
             return warn_if(used_no_sequence_option[1], _aR_, _aS_);
            },
            _ad_,
            function(self_1, expr){
             var _at_ = expr[1];
             a:
             if(typeof _at_ !== "number")
              switch(_at_[0]){
                case 5:
                 var _au_ = _at_[2];
                 if(! _au_) break a;
                 var _av_ = _au_[1];
                 if(typeof _av_[1] !== "number") break a;
                 var _aw_ = _av_[2][1];
                 if(typeof _aw_ !== "number" && 35 === _aw_[0]){
                  var _ax_ = _aw_[1], _ay_ = _ax_[1][1], exp = _at_[1];
                  if(_ay_ !== cst_finally){
                   if(_ay_ !== cst_lwt_finally) break a;
                   var _az_ = _ax_[2];
                   if(0 !== _az_[0]) break a;
                   var _aA_ = _az_[1];
                   if(! _aA_) break a;
                   var _aB_ = _aA_[1][1];
                   if(0 !== _aB_[0]) break a;
                   if(_aA_[2]) break a;
                   if(_au_[2]) break a;
                   var finally$0 = _aB_[1];
                  }
                  else{
                   var _aD_ = _ax_[2];
                   if(0 !== _aD_[0]) break a;
                   var _aE_ = _aD_[1];
                   if(! _aE_) break a;
                   var _aF_ = _aE_[1][1];
                   if(0 !== _aF_[0]) break a;
                   if(_aE_[2]) break a;
                   if(_au_[2]) break a;
                   var finally$0 = _aF_[1];
                  }
                  var
                   loc = default_loc[1],
                   _aC_ =
                     [0,
                      [5,
                       [0, [0, [0, _X_, loc]], loc, 0, 0],
                       [0,
                        [0,
                         0,
                         [0,
                          [4,
                           0,
                           0,
                           [0, [0, [0, cst_exn$8, loc]], loc, 0, 0],
                           [0,
                            [7,
                             [0,
                              [5,
                               [0, [0, [0, _W_, loc]], loc, 0, 0],
                               [0, [0, 0, [0, [0, [0, _V_, loc]], loc, 0, 0]], 0]],
                              loc,
                              0,
                              0],
                             [0,
                              [0,
                               [0, [0, [0, cst_exn$7, loc]], loc, 0, 0],
                               0,
                               [0, [0, [0, _U_, loc]], loc, 0, 0]],
                              0]],
                            loc,
                            0,
                            0]],
                          loc,
                          [0, loc, 0],
                          0]],
                        [0,
                         [0,
                          0,
                          [0,
                           [4, 0, 0, [0, [5, [0, _T_, loc], 0], loc, 0, 0], exp],
                           loc,
                           [0, loc, 0],
                           0]],
                         [0,
                          [0,
                           0,
                           [0,
                            [4, 0, 0, [0, [5, [0, _S_, loc], 0], loc, 0, 0], finally$0],
                            loc,
                            [0, loc, 0],
                            0]],
                          0]]]],
                      loc,
                      0,
                      caml_call2(Stdlib[37], expr[4], exp[4])];
                  return caml_call1(caml_call1(_ag_, self_1), _aC_);
                 }
                 break a;
                case 35:
                 var _aG_ = _at_[1], _aH_ = _aG_[1], _aI_ = _aH_[1];
                 if(_aI_ !== cst_finally){
                  if(_aI_ === cst_lwt){
                   var _aL_ = _aG_[2];
                   if(0 !== _aL_[0]) break a;
                   var _aM_ = _aL_[1];
                   if(! _aM_) break a;
                   var _aN_ = _aM_[1][1];
                   if(0 !== _aN_[0]) break a;
                   if(_aM_[2]) break a;
                   var
                    exp$0 = _aN_[1],
                    ext_loc = _aH_[2],
                    match = lwt_expression(self_1, exp$0, expr[4], ext_loc);
                   if(! match) return expr;
                   var expr$0 = match[1];
                   return expr$0;
                  }
                  if(_aI_ !== cst_lwt_finally) break a;
                  var _aJ_ = _aG_[2];
                  if(0 !== _aJ_[0]) break a;
                  var _aK_ = _aJ_[1];
                  if(! _aK_ || 0 !== _aK_[1][1][0] || _aK_[2]) break a;
                 }
                 else{
                  var _aO_ = _aG_[2];
                  if(0 !== _aO_[0]) break a;
                  var _aP_ = _aO_[1];
                  if(! _aP_ || 0 !== _aP_[1][1][0] || _aP_[2]) break a;
                 }
                 return caml_call2(Ppxlib_Location[5], [0, expr[2]], _Y_);
              }
             return caml_call1(caml_call1(_ag_, self_1), expr);
            },
            _ab_,
            function(self_1, stri){
             default_loc[1] = stri[2];
             var _am_ = stri[1];
             if(14 === _am_[0]){
              var _an_ = _am_[1];
              if(_an_[1][1] === cst_lwt){
               var _ao_ = _an_[2];
               if(0 === _ao_[0]){
                var _ap_ = _ao_[1];
                if(_ap_){
                 var _aq_ = _ap_[1][1];
                 if(1 === _aq_[0] && ! _aq_[1]){
                  var _ar_ = _aq_[2];
                  if(_ar_ && ! _ar_[2] && ! _ap_[2]){
                   var
                    match = _ar_[1],
                    exp = match[2],
                    var$0 = match[1],
                    _as_ =
                      caml_call2
                       (Stdlib[28],
                        cst_let_lwt_should_not_be_used,
                        cst_Replace_let_lwt_x_e_by_let),
                    warning =
                      caml_call2(Ppxlib_Ast_builder[1][175], default_loc[1], _as_),
                    loc = default_loc[1];
                   return [0,
                           [1,
                            0,
                            [0,
                             [0,
                              var$0,
                              [0,
                               [5,
                                [0,
                                 [0, [0, _R_, loc]],
                                 loc,
                                 [0, loc, 0],
                                 [0,
                                  [0,
                                   [0, cst_ocaml_ppwarning, loc],
                                   [0, [0, [0, [0, warning, 0], loc], 0]],
                                   loc],
                                  0]],
                                [0, [0, 0, caml_call1(caml_call1(_ag_, self_1), exp)], 0]],
                               loc,
                               0,
                               0],
                              0,
                              loc],
                             0]],
                           loc];
                  }
                 }
                }
               }
              }
             }
             return caml_call1(caml_call1(_ai_, self_1), stri);
            }]);
         return function(_ak_, _aj_){
          var _al_ = caml_call2(CamlinternalOO[24], _aj_, _$_);
          caml_call1(_af_, _al_);
          return caml_call3(CamlinternalOO[26], _aj_, _al_, _$_);};
        }),
    args =
      [0,
       [0,
        "-no-sequence",
        [0, no_sequence_option],
        cst_has_no_effect_deprecated],
       [0,
        [0,
         "-no-strict-sequence",
         [0, no_strict_sequence_option],
         cst_has_no_effect_deprecated],
        0]],
    mapper$0 = caml_call1(mapper[1], 0),
    _Z_ =
      [0,
       caml_call1(caml_get_public_method(mapper$0, 359375608, 10), mapper$0)],
    ___ =
      [0,
       caml_call1(caml_get_public_method(mapper$0, -951102413, 11), mapper$0)];
   caml_call13
    (Ppxlib_Driver[5], 0, 0, 0, 0, ___, _Z_, 0, 0, 0, 0, 0, 0, "ppx_lwt");
   caml_call2
    (Stdlib_List[18],
     function(param){
      var doc = param[3], spec = param[2], key = param[1];
      return caml_call3(Ppxlib_Driver[1], key, spec, doc);
     },
     args);
   var Ppx_lwt = [0, mapper];
   runtime.caml_register_global(99, Ppx_lwt, "Ppx_lwt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
