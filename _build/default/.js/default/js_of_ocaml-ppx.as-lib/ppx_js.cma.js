// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.0.1

//# unitInfo: Provides: Ppx_js__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Ppx_js = [0],
    Ppx_js$0 = [0, Ppx_js];
   runtime.caml_register_global(0, Ppx_js$0, "Ppx_js__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_js__Ppx_js_internal
//# unitInfo: Requires: Ast_mapper, CamlinternalOO, Ppxlib__Ast_traverse, Ppxlib__Driver, Ppxlib__Location, Ppxlib_ast__Ast_helper_lite, Ppxlib_ast__Import, Stdlib, Stdlib__ListLabels, Stdlib__Map, Stdlib__Printf, Stdlib__StringLabels
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst$2 = "##",
    cst$3 = "##.",
    cst_A_mutable_field_cannot_be_ = "A mutable field cannot be readonly.",
    cst_Duplicated_val_or_method = "Duplicated val or method ",
    cst_Duplicated_val_or_method_S = "Duplicated val or method %S%s.",
    cst_Javascript_methods_or_attr =
      "Javascript methods or attributes can only be simple identifiers.",
    cst_This_field_is_not_valid_in =
      "This field is not valid inside a js literal object.",
    cst_Too_many_attributes = "Too many attributes.",
    cst_arg_label = "arg_label",
    cst_array = "array",
    cst_attribute = "attribute",
    cst_attributes = "attributes",
    cst_binding_op = "binding_op",
    cst_bool = "bool",
    cst_case = "case",
    cst_cases = "cases",
    cst_char = "char",
    cst_class_declaration = "class_declaration",
    cst_class_description = "class_description",
    cst_class_expr = "class_expr",
    cst_class_expr_desc = "class_expr_desc",
    cst_class_field = "class_field",
    cst_class_field_desc = "class_field_desc",
    cst_class_field_kind = "class_field_kind",
    cst_class_infos = "class_infos",
    cst_class_signature = "class_signature",
    cst_class_structure = "class_structure",
    cst_class_type = "class_type",
    cst_class_type_declaration = "class_type_declaration",
    cst_class_type_desc = "class_type_desc",
    cst_class_type_field = "class_type_field",
    cst_class_type_field_desc = "class_type_field_desc",
    cst_closed_flag = "closed_flag",
    cst_constant = "constant",
    cst_constructor_arguments = "constructor_arguments",
    cst_constructor_declaration = "constructor_declaration",
    cst_core_type = "core_type",
    cst_core_type_desc = "core_type_desc",
    cst_direction_flag = "direction_flag",
    cst_directive_argument = "directive_argument",
    cst_directive_argument_desc = "directive_argument_desc",
    cst_expression = "expression",
    cst_expression_desc = "expression_desc",
    cst_extension = "extension",
    cst_extension_constructor = "extension_constructor",
    cst_extension_constructor_kind = "extension_constructor_kind",
    cst_functor_parameter = "functor_parameter",
    cst_gen_prop$1 = "gen_prop",
    cst_get$1 = "get",
    cst_include_declaration = "include_declaration",
    cst_include_description = "include_description",
    cst_include_infos = "include_infos",
    cst_inject$1 = "inject",
    cst_injectivity = "injectivity",
    cst_int = "int",
    cst_js = "js",
    cst_label = "label",
    cst_label_declaration = "label_declaration",
    cst_letop = "letop",
    cst_list = "list",
    cst_loc = "loc",
    cst_location = "location",
    cst_location_stack = "location_stack",
    cst_longident = "longident",
    cst_longident_loc = "longident_loc",
    cst_meth$1 = "meth",
    cst_module_binding = "module_binding",
    cst_module_declaration = "module_declaration",
    cst_module_expr = "module_expr",
    cst_module_expr_desc = "module_expr_desc",
    cst_module_substitution = "module_substitution",
    cst_module_type = "module_type",
    cst_module_type_declaration = "module_type_declaration",
    cst_module_type_desc = "module_type_desc",
    cst_mutable_flag = "mutable_flag",
    cst_object_field = "object_field",
    cst_object_field_desc = "object_field_desc",
    cst_open_declaration = "open_declaration",
    cst_open_description = "open_description",
    cst_open_infos = "open_infos",
    cst_optdef$0 = "optdef",
    cst_option = "option",
    cst_override_flag = "override_flag",
    cst_package_type = "package_type",
    cst_pattern = "pattern",
    cst_pattern_desc = "pattern_desc",
    cst_payload = "payload",
    cst_position = "position",
    cst_ppx_ppx_js_as_lib_ppx_js_i = "ppx/ppx_js/as-lib/ppx_js_internal.ml",
    cst_private_flag = "private_flag",
    cst_rec_flag = "rec_flag",
    cst_row_field = "row_field",
    cst_row_field_desc = "row_field_desc",
    cst_set$1 = "set",
    cst_signature = "signature",
    cst_signature_item = "signature_item",
    cst_signature_item_desc = "signature_item_desc",
    cst_string$0 = "string",
    cst_structure = "structure",
    cst_structure_item = "structure_item",
    cst_structure_item_desc = "structure_item_desc",
    cst_t$7 = "t",
    cst_toplevel_directive = "toplevel_directive",
    cst_toplevel_phrase = "toplevel_phrase",
    cst_type_declaration = "type_declaration",
    cst_type_exception = "type_exception",
    cst_type_extension = "type_extension",
    cst_type_kind = "type_kind",
    cst_unit = "unit",
    cst_value_binding = "value_binding",
    cst_value_description = "value_description",
    cst_variance = "variance",
    cst_virtual_flag = "virtual_flag",
    cst_with_constraint = "with_constraint",
    cst_x$5 = "x",
    caml_equal = runtime.caml_equal,
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) === 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    self = "self",
    cst$0 = cst$1,
    res = "res",
    cst = "_",
    shared =
      [0,
       cst_with_constraint,
       cst_virtual_flag,
       cst_variance,
       cst_value_description,
       cst_value_binding,
       cst_type_kind,
       cst_type_extension,
       cst_type_exception,
       cst_type_declaration,
       cst_toplevel_phrase,
       cst_toplevel_directive,
       cst_structure_item_desc,
       cst_structure_item,
       cst_structure,
       cst_string$0,
       cst_signature_item_desc,
       cst_signature_item,
       cst_signature,
       cst_row_field_desc,
       cst_row_field,
       cst_rec_flag,
       cst_private_flag,
       cst_position,
       cst_payload,
       cst_pattern_desc,
       cst_pattern,
       cst_package_type,
       cst_override_flag,
       cst_option,
       cst_open_infos,
       cst_open_description,
       cst_open_declaration,
       cst_object_field_desc,
       cst_object_field,
       cst_mutable_flag,
       cst_module_type_desc,
       cst_module_type_declaration,
       cst_module_type,
       cst_module_substitution,
       cst_module_expr_desc,
       cst_module_expr,
       cst_module_declaration,
       cst_module_binding,
       cst_longident_loc,
       cst_longident,
       cst_location_stack,
       cst_location,
       cst_loc,
       cst_list,
       cst_letop,
       cst_label_declaration,
       cst_label,
       cst_int,
       cst_injectivity,
       cst_include_infos,
       cst_include_description,
       cst_include_declaration,
       cst_functor_parameter,
       cst_extension_constructor_kind,
       cst_extension_constructor,
       cst_extension,
       cst_expression_desc,
       cst_expression,
       cst_directive_argument_desc,
       cst_directive_argument,
       cst_direction_flag,
       cst_core_type_desc,
       cst_core_type,
       cst_constructor_declaration,
       cst_constructor_arguments,
       cst_constant,
       cst_closed_flag,
       cst_class_type_field_desc,
       cst_class_type_field,
       cst_class_type_desc,
       cst_class_type_declaration,
       cst_class_type,
       cst_class_structure,
       cst_class_signature,
       cst_class_infos,
       cst_class_field_kind,
       cst_class_field_desc,
       cst_class_field,
       cst_class_expr_desc,
       cst_class_expr,
       cst_class_description,
       cst_class_declaration,
       cst_char,
       cst_cases,
       cst_case,
       cst_bool,
       cst_binding_op,
       cst_attributes,
       cst_attribute,
       cst_array,
       cst_arg_label],
    Stdlib_StringLabels = global_data.Stdlib__StringLabels,
    Stdlib = global_data.Stdlib,
    Ppxlib_ast_Import = global_data.Ppxlib_ast__Import,
    CamlinternalOO = global_data.CamlinternalOO,
    Ppxlib_ast_Ast_helper_lite = global_data.Ppxlib_ast__Ast_helper_lite,
    Stdlib_ListLabels = global_data.Stdlib__ListLabels,
    Ppxlib_Location = global_data.Ppxlib__Location,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Map = global_data.Stdlib__Map,
    Ppxlib_Ast_traverse = global_data.Ppxlib__Ast_traverse,
    Ppxlib_Driver = global_data.Ppxlib__Driver,
    Ast_mapper = global_data.Ast_mapper,
    nolabel = 0,
    Syntax_error =
      [248,
       "Ppx_js__Ppx_js_internal.Syntax_error",
       runtime.caml_fresh_oo_id(0)],
    _a_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 57, 18],
    _b_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 59, 15],
    _c_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 65, 18],
    _d_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 67, 15],
    _e_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 71, 17],
    _f_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 70, 12],
    _g_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 79, 12],
    _h_ = [0, "()"],
    _i_ =
      [0,
       [11, cst_Javascript_methods_or_attr, 0],
       cst_Javascript_methods_or_attr];
   function make_exception(loc, sub, str){
    return [0,
            Syntax_error,
            caml_call3(Ppxlib_Location[13][1], loc, str, sub)];
   }
   function raise_errorf(loc, fmt){
    return caml_call2
            (Stdlib_Printf[10],
             function(str){
              throw caml_maybe_attach_backtrace
                     (make_exception(loc, 0, str), 1);
             },
             fmt);
   }
   function unflatten(l){
    if(! l) return 0;
    var tl = l[2], hd = l[1];
    return [0,
            caml_call3
             (Stdlib_ListLabels[26],
              function(p, s){return [1, p, s];},
              [0, hd],
              tl)];
   }
   function split_at_dots(s, pos){
    try{
     var
      dot = caml_call3(Stdlib_StringLabels[32], s, pos, 46),
      _cC_ = split_at_dots(s, dot + 1 | 0),
      _cD_ =
        [0, caml_call3(Stdlib_StringLabels[16], s, pos, dot - pos | 0), _cC_];
     return _cD_;
    }
    catch(_cE_){
     var _cB_ = caml_wrap_exception(_cE_);
     if(_cB_ === Stdlib[8])
      return [0,
              caml_call3
               (Stdlib_StringLabels[16],
                s,
                pos,
                caml_ml_string_length(s) - pos | 0),
              0];
     throw caml_maybe_attach_backtrace(_cB_, 0);
    }
   }
   function parse_lid(s){
    var
     components = split_at_dots(s, 0),
     assert_lid =
       caml_call1
        (Stdlib_StringLabels[31],
         function(i, c){
          if(0 === i){
           a:
           {
            if(97 <= c){if(123 > c) break a;} else if(95 === c) break a;
            throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
           }
           return 0;
          }
          a:
          {
           if(91 <= c){
            if(97 <= c){if(123 > c) break a;} else if(95 === c) break a;
           }
           else
            if(58 <= c){if(65 <= c) break a;} else if(48 <= c) break a;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
          }
          return 0;
         }),
     assert_uid =
       caml_call1
        (Stdlib_StringLabels[31],
         function(i, c){
          if(0 === i){
           if(25 < c - 65 >>> 0)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
           return 0;
          }
          a:
          {
           if(91 <= c){
            if(97 <= c){if(123 > c) break a;} else if(95 === c) break a;
           }
           else
            if(58 <= c){if(65 <= c) break a;} else if(48 <= c) break a;
           throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
          }
          return 0;
         }),
     param = components;
    for(;;){
     if(! param)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
     var s$0 = param[1];
     if(s$0 === cst$1)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
     if(! param[2]){
      caml_call1(assert_lid, s$0);
      var match = unflatten(components);
      if(! match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
      var v = match[1];
      return v;
     }
     var rest = param[2];
     caml_call1(assert_uid, s$0);
     param = rest;
    }
   }
   function mkloc(txt, loc){return [0, txt, loc];}
   function mknoloc(txt){return [0, txt, Ppxlib_Location[3]];}
   function lid(opt, s){
    var
     loc = opt ? opt[1] : Ppxlib_ast_Ast_helper_lite[1][1],
     txt = parse_lid(s);
    return [0, txt, loc];
   }
   function mkloc_opt(opt, txt){
    var loc = opt ? opt[1] : Ppxlib_ast_Ast_helper_lite[1][1];
    return [0, txt, loc];
   }
   function unit(loc, attrs, param){
    var _cA_ = mkloc_opt(loc, _h_);
    return caml_call4(Ppxlib_ast_Ast_helper_lite[7][12], loc, attrs, _cA_, 0);
   }
   function tuple(loc, attrs, xs){
    if(! xs) return unit(loc, attrs, 0);
    if(xs[2])
     return caml_call3(Ppxlib_ast_Ast_helper_lite[7][11], loc, attrs, xs);
    var x = xs[1];
    return x;
   }
   function ocaml_str(loc, attrs, s){
    var _cz_ = caml_call3(Ppxlib_ast_Ast_helper_lite[3][2], 0, 0, s);
    return caml_call3(Ppxlib_ast_Ast_helper_lite[7][4], loc, attrs, _cz_);
   }
   function exp_to_string(param){
    var _cx_ = param[1];
    if(typeof _cx_ !== "number")
     switch(_cx_[0]){
       case 0:
        var match = _cx_[1][1];
        if(0 === match[0]){var s = match[1]; return s;}
        break;
       case 9:
        var _cy_ = _cx_[1][1];
        if(0 === _cy_[0] && ! _cx_[2]){
         var s$0 = _cy_[1];
         if
          (0 < caml_ml_string_length(s$0)
           && 65 <= caml_string_get(s$0, 0) && 90 >= caml_string_get(s$0, 0))
          return caml_call2(Stdlib[28], cst, s$0);
        }
        break;
     }
    var pexp_loc = param[2];
    return raise_errorf(pexp_loc, _i_);
   }
   function typ(s){
    var _cw_ = lid(0, s);
    return caml_call4(Ppxlib_ast_Ast_helper_lite[5][7], 0, 0, _cw_, 0);
   }
   function arrows(args, ret){
    return caml_call3
            (Stdlib_ListLabels[27],
             function(param, fun){
              var ty = param[2], l = param[1];
              return caml_call5
                      (Ppxlib_ast_Ast_helper_lite[5][5], 0, 0, l, ty, fun);
             },
             args,
             ret);
   }
   var wrapper = [0, 0];
   function make_str(loc, txt){
    if(! loc) return mknoloc(txt);
    var loc$0 = loc[1];
    return [0, txt, loc$0];
   }
   var
    merlin_hide =
      [0, [0, "merlin.hide", Ppxlib_Location[3]], [0, 0], Ppxlib_Location[3]],
    cst_Js = ".Js.",
    cst_Js$0 = "Js.",
    cst_Unsafe = "Unsafe.";
   function js_dot(name){
    var match = wrapper[1];
    if(! match) return caml_call2(Stdlib[28], cst_Js$0, name);
    var m = match[1], _cv_ = caml_call2(Stdlib[28], cst_Js, name);
    return caml_call2(Stdlib[28], m, _cv_);
   }
   function js_unsafe_dot(name){
    return js_dot(caml_call2(Stdlib[28], cst_Unsafe, name));
   }
   function type(loc, s, args){
    var _cu_ = lid(loc, js_dot(s));
    return caml_call4(Ppxlib_ast_Ast_helper_lite[5][7], loc, 0, _cu_, args);
   }
   function apply(where, loc, s, args){
    var
     args$0 =
       caml_call2
        (Stdlib_ListLabels[20], function(x){return [0, nolabel, x];}, args),
     _cs_ = lid(loc, caml_call1(where, s)),
     _ct_ = caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], loc, 0, _cs_);
    return caml_call4(Ppxlib_ast_Ast_helper_lite[7][8], loc, 0, _ct_, args$0);
   }
   function unsafe(_cp_, _cq_, _cr_){
    return apply(js_unsafe_dot, _cp_, _cq_, _cr_);
   }
   function fun(_cm_, _cn_, _co_){return apply(js_dot, _cm_, _cn_, _co_);}
   var
    Js = [0, type, unsafe, fun],
    cst_string = cst_string$0,
    cst_inject = cst_inject$1,
    cst_inject$0 = cst_inject$1;
   function javascript_str(loc, attrs, s){
    var _cl_ = [0, ocaml_str(loc, attrs, s), 0];
    return caml_call3(Js[3], loc, cst_string, _cl_);
   }
   function unescape(lab){
    if(lab === cst$1) return lab;
    var
     lab$0 =
       95 === caml_string_get(lab, 0)
        ? caml_call3
          (Stdlib_StringLabels[16],
           lab,
           1,
           caml_ml_string_length(lab) - 1 | 0)
        : lab;
    try{
     var i = caml_call2(Stdlib_StringLabels[38], lab$0, 95);
     if(0 === i) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var _cj_ = caml_call3(Stdlib_StringLabels[16], lab$0, 0, i);
     return _cj_;
    }
    catch(_ck_){
     var _ci_ = caml_wrap_exception(_ck_);
     if(_ci_ === Stdlib[8]) return lab$0;
     throw caml_maybe_attach_backtrace(_ci_, 0);
    }
   }
   function app_arg(e){return [0, nolabel, e];}
   function inject_arg(e){return caml_call3(Js[2], 0, cst_inject, [0, e, 0]);}
   function inject_args(args){
    var
     _ch_ =
       caml_call2
        (Stdlib_ListLabels[20],
         function(e){return caml_call3(Js[2], 0, cst_inject$0, [0, e, 0]);},
         args);
    return caml_call3(Ppxlib_ast_Ast_helper_lite[7][17], 0, 0, _ch_);
   }
   var count = [0, 0], cst_t = cst_t$7;
   function make(opt, param){
    var label = opt ? opt[1] : nolabel, c = count[1];
    count[1]++;
    var _cg_ = caml_call1(Stdlib[33], c);
    return [0, label, caml_call2(Stdlib[28], cst_t, _cg_)];
   }
   function label(arg){return arg[1];}
   function name(arg){return arg[2];}
   function typ$0(arg){return typ(arg[2]);}
   function args(l){
    return caml_call2
            (Stdlib_ListLabels[20],
             function(arg){var _cf_ = typ$0(arg); return [0, arg[1], _cf_];},
             l);
   }
   var
    Arg = [0, make, name, typ$0, label, args],
    cst_t$0 = cst_t$7,
    _j_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 220, 10],
    _k_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 252, 4],
    cst_t$1 = cst_t$7,
    cst_meth_call = "meth_call",
    _l_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 304, 16],
    cst_meth = cst_meth$1,
    cst_x = cst_x$5,
    cst_x$0 = cst_x$5,
    _m_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 350, 30],
    cst_get = cst_get$1,
    cst_get$0 = cst_get$1,
    cst_gen_prop = cst_gen_prop$1,
    cst_x$1 = cst_x$5,
    cst_x$2 = cst_x$5,
    _n_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 404, 15],
    cst_set = cst_set$1,
    _o_ = [0, cst_unit],
    _p_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 397, 15],
    _q_ = [0, cst_unit],
    cst_set$0 = cst_set$1,
    cst_gen_prop$0 = cst_gen_prop$1,
    _r_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 393, 12],
    _s_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 392, 12],
    cst_x$3 = cst_x$5,
    cst_x$4 = cst_x$5,
    cst_new_obj = "new_obj",
    _t_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 457, 15],
    cst_t$2 = cst_t$7,
    cst_constr = "constr",
    _u_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 452, 12],
    _v_ = [0, cst_ppx_ppx_js_as_lib_ppx_js_i, 450, 16],
    _w_ = [0, cst_unit];
   function js_dot_t_the_first_arg(args){
    if(! args) throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
    var
     xs = args[2],
     x = args[1],
     _cc_ = caml_call1(Arg[5], xs),
     _cd_ = [0, caml_call1(Arg[3], x), 0],
     _ce_ = caml_call3(Js[1], 0, cst_t$0, _cd_);
    return [0, [0, caml_call1(Arg[4], x), _ce_], _cc_];
   }
   function invoker(opt, uplift, downlift, body, arguments$0){
    var
     extra_types = opt ? opt[1] : 0,
     default_loc = Ppxlib_ast_Ast_helper_lite[1][1];
    Ppxlib_ast_Ast_helper_lite[1][1] = Ppxlib_Location[3];
    var
     typ_res = typ(res),
     twrap = caml_call2(uplift, arguments$0, typ_res),
     match = caml_call2(downlift, arguments$0, typ_res),
     tfunc_res = match[2],
     tfunc_args = match[1];
    function ident(d){
     var _cb_ = lid(0, caml_call1(Arg[2], d));
     return caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], 0, 0, _cb_);
    }
    var
     args = caml_call2(Stdlib_ListLabels[20], ident, arguments$0),
     ebody = caml_call1(body, args),
     annotated_ebody =
       caml_call4(Ppxlib_ast_Ast_helper_lite[7][23], 0, 0, ebody, tfunc_res),
     labels_and_pats =
       caml_call2
        (Stdlib_ListLabels[20],
         function(d){
          var
           label = caml_call1(Arg[4], d),
           _ca_ = mknoloc(caml_call1(Arg[2], d)),
           patt = caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], 0, 0, _ca_);
          return [0, label, patt];
         },
         arguments$0);
    function make_fun(_b__, param, expr){
     var typ = param[2], label = param[1], pat = _b__[2], label$0 = _b__[1];
     if(! caml_equal(label, label$0))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
     var _b$_ = caml_call4(Ppxlib_ast_Ast_helper_lite[6][14], 0, 0, pat, typ);
     return caml_call6
             (Ppxlib_ast_Ast_helper_lite[7][6], 0, 0, label$0, 0, _b$_, expr);
    }
    var
     _b7_ =
       make_fun
        ([0, nolabel, caml_call3(Ppxlib_ast_Ast_helper_lite[6][3], 0, 0, 0)],
         [0, nolabel, twrap],
         annotated_ebody),
     invoker =
       caml_call4
        (Stdlib_ListLabels[32], make_fun, labels_and_pats, tfunc_args, _b7_),
     _b8_ = caml_call2(Stdlib[37], extra_types, arguments$0),
     _b9_ =
       caml_call2
        (Stdlib_ListLabels[20],
         function(x){return make_str(0, caml_call1(Arg[2], x));},
         _b8_),
     local_types = [0, make_str(0, res), _b9_],
     arg = Ppxlib_ast_Ast_helper_lite[7][34],
     result =
       caml_call3
        (Stdlib_ListLabels[27],
         function(eta){return caml_call3(arg, 0, 0, eta);},
         local_types,
         invoker);
    Ppxlib_ast_Ast_helper_lite[1][1] = default_loc;
    return result;
   }
   function open_t(loc){
    var
     _b6_ =
       [0, caml_call4(Ppxlib_ast_Ast_helper_lite[5][8], [0, loc], 0, 0, 1), 0];
    return caml_call3(Js[1], [0, loc], cst_t$1, _b6_);
   }
   function method_call(loc, apply_loc, obj, param, args){
    var
     meth_loc = param[2],
     meth = param[1],
     gloc = [0, loc[1], loc[2], 1],
     _bU_ = obj[2],
     gloc$0 = [0, _bU_[1], _bU_[2], 1],
     _bV_ = open_t(gloc$0),
     obj$0 =
       caml_call4
        (Ppxlib_ast_Ast_helper_lite[7][23],
         [0, gloc$0],
         [0, [0, merlin_hide, 0]],
         obj,
         _bV_),
     _bW_ =
       caml_call2
        (Stdlib_ListLabels[20],
         function(param){
          var label = param[1];
          return caml_call2(Arg[1], [0, label], 0);
         },
         args),
     invoker$0 =
       invoker
        (0,
         function(args, tres){
          var _b5_ = caml_call3(Js[1], 0, cst_meth, [0, tres, 0]);
          return arrows(caml_call1(Arg[5], args), _b5_);
         },
         function(args, tres){return [0, js_dot_t_the_first_arg(args), tres];},
         function(eargs){
          if(! eargs)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
          var
           eargs$0 = eargs[2],
           eobj = eargs[1],
           eargs$1 = inject_args(eargs$0),
           _b4_ =
             [0, eobj, [0, ocaml_str(0, 0, unescape(meth)), [0, eargs$1, 0]]];
          return caml_call3(Js[2], 0, cst_meth_call, _b4_);
         },
         [0, caml_call2(Arg[1], 0, 0), _bW_]),
     _bX_ = make_str([0, meth_loc], meth),
     _bY_ = lid([0, obj$0[2]], cst_x),
     _bZ_ =
       caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], [0, obj$0[2]], 0, _bY_),
     _b0_ =
       caml_call4(Ppxlib_ast_Ast_helper_lite[7][24], [0, loc], 0, _bZ_, _bX_),
     _b1_ = mknoloc(cst_x$0),
     _b2_ = caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], [0, gloc], 0, _b1_),
     e =
       caml_call6
        (Ppxlib_ast_Ast_helper_lite[7][6],
         [0, gloc],
         0,
         nolabel,
         0,
         _b2_,
         _b0_),
     _b3_ =
       caml_call2
        (Stdlib[37], [0, [0, nolabel, obj$0], args], [0, [0, nolabel, e], 0]);
    return caml_call4
            (Ppxlib_ast_Ast_helper_lite[7][8],
             [0, apply_loc],
             0,
             [0,
              invoker$0[1],
              invoker$0[2],
              invoker$0[3],
              [0, merlin_hide, 0]],
             _b3_);
   }
   function prop_get(loc, obj, prop){
    var
     _bK_ = obj[2],
     gloc = [0, _bK_[1], _bK_[2], 1],
     _bL_ = open_t(gloc),
     obj$0 =
       caml_call4(Ppxlib_ast_Ast_helper_lite[7][23], [0, gloc], 0, obj, _bL_),
     invoker$0 =
       invoker
        (0,
         function(args, tres){
          var
           loc = Ppxlib_ast_Ast_helper_lite[1][1],
           _bT_ =
             caml_call3
              (Js[1],
               0,
               cst_gen_prop,
               [0,
                [0,
                 [4, [0, [0, [0, [0, cst_get$0, loc], tres], loc, 0], 0], 1],
                 loc,
                 0,
                 0],
                0]);
          return arrows(caml_call1(Arg[5], args), _bT_);
         },
         function(args, tres){return [0, js_dot_t_the_first_arg(args), tres];},
         function(eargs){
          if(eargs && ! eargs[2]){
           var
            only_arg = eargs[1],
            _bS_ = [0, only_arg, [0, javascript_str(0, 0, unescape(prop)), 0]];
           return caml_call3(Js[2], 0, cst_get, _bS_);
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
         },
         [0, caml_call2(Arg[1], 0, 0), 0]),
     _bM_ = make_str([0, loc], prop),
     _bN_ = lid([0, gloc], cst_x$1),
     _bO_ = caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], [0, gloc], 0, _bN_),
     _bP_ =
       caml_call4(Ppxlib_ast_Ast_helper_lite[7][24], [0, loc], 0, _bO_, _bM_),
     _bQ_ = mknoloc(cst_x$2),
     _bR_ = caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], [0, gloc], 0, _bQ_),
     e =
       caml_call6
        (Ppxlib_ast_Ast_helper_lite[7][6],
         [0, gloc],
         0,
         nolabel,
         0,
         _bR_,
         _bP_);
    return caml_call4
            (Ppxlib_ast_Ast_helper_lite[7][8],
             0,
             0,
             invoker$0,
             [0, [0, nolabel, obj$0], [0, [0, nolabel, e], 0]]);
   }
   function prop_set(loc, prop_loc, obj, prop, value){
    var
     _bu_ = obj[2],
     gloc = [0, _bu_[1], _bu_[2], 1],
     _bv_ = open_t(gloc),
     _bw_ =
       caml_call4(Ppxlib_ast_Ast_helper_lite[7][23], [0, gloc], 0, obj, _bv_),
     obj$0 = [0, _bw_[1], _bw_[2], _bw_[3], [0, merlin_hide, 0]],
     _bx_ = [0, caml_call2(Arg[1], 0, 0), 0],
     invoker$0 =
       invoker
        (0,
         function(args, tres){
          if(args){
           var _bH_ = args[2];
           if(_bH_ && ! _bH_[2]){
            var
             arg = _bH_[1],
             obj = args[1],
             loc = Ppxlib_ast_Ast_helper_lite[1][1];
            if(! caml_equal(caml_call1(Arg[4], obj), nolabel))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
            if(! caml_equal(caml_call1(Arg[4], arg), nolabel))
             throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
            var
             _bI_ =
               [0,
                [0,
                 [4,
                  [0,
                   [0,
                    [0,
                     [0, cst_set$0, loc],
                     [0,
                      [1,
                       0,
                       caml_call1(Arg[3], arg),
                       [0, [3, [0, _q_, loc], 0], loc, 0, 0]],
                      loc,
                      0,
                      0]],
                    loc,
                    0],
                   0],
                  1],
                 loc,
                 0,
                 0],
                0],
             _bJ_ = caml_call3(Js[1], 0, cst_gen_prop$0, _bI_);
            return arrows([0, [0, nolabel, caml_call1(Arg[3], obj)], 0], _bJ_);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
         },
         function(args, tres){
          var loc = Ppxlib_ast_Ast_helper_lite[1][1];
          return [0,
                  js_dot_t_the_first_arg(args),
                  [0, [3, [0, _o_, loc], 0], loc, 0, 0]];
         },
         function(param){
          if(param){
           var _bE_ = param[2];
           if(_bE_ && ! _bE_[2]){
            var
             arg = _bE_[1],
             obj = param[1],
             _bF_ = [0, inject_arg(arg), 0],
             _bG_ = [0, obj, [0, javascript_str(0, 0, unescape(prop)), _bF_]];
            return caml_call3(Js[2], 0, cst_set, _bG_);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
         },
         [0, caml_call2(Arg[1], 0, 0), _bx_]),
     _by_ = make_str([0, loc], prop),
     _bz_ = lid([0, gloc], cst_x$3),
     _bA_ =
       caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], [0, obj$0[2]], 0, _bz_),
     _bB_ =
       caml_call4
        (Ppxlib_ast_Ast_helper_lite[7][24], [0, prop_loc], 0, _bA_, _by_),
     _bC_ = mknoloc(cst_x$4),
     _bD_ = caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], [0, gloc], 0, _bC_),
     e =
       caml_call6
        (Ppxlib_ast_Ast_helper_lite[7][6],
         [0, [0, loc[1], loc[2], 1]],
         0,
         nolabel,
         0,
         _bD_,
         _bB_);
    return caml_call4
            (Ppxlib_ast_Ast_helper_lite[7][8],
             0,
             0,
             invoker$0,
             [0,
              [0, nolabel, obj$0],
              [0, [0, nolabel, value], [0, [0, nolabel, e], 0]]]);
   }
   function new_object(constr, args){
    var
     _bp_ =
       caml_call2
        (Stdlib_ListLabels[20],
         function(param){
          var label = param[1];
          return caml_call2(Arg[1], [0, label], 0);
         },
         args),
     invoker$0 =
       invoker
        (0,
         function(args, tres){
          var loc = Ppxlib_ast_Ast_helper_lite[1][1];
          return [0, [3, [0, _w_, loc], 0], loc, 0, 0];
         },
         function(args, tres){
          var tres$0 = caml_call3(Js[1], 0, cst_t$2, [0, tres, 0]);
          if(! args)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
          var args$0 = args[2], unit = args[1];
          if(! caml_equal(caml_call1(Arg[4], unit), nolabel))
           throw caml_maybe_attach_backtrace([0, Assert_failure, _u_], 1);
          var
           args$1 = caml_call1(Arg[5], args$0),
           _bt_ = [0, arrows(args$1, tres$0), 0];
          return [0,
                  [0,
                   [0, nolabel, caml_call3(Js[1], 0, cst_constr, _bt_)],
                   args$1],
                  tres$0];
         },
         function(param){
          if(! param)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
          var
           args = param[2],
           constr = param[1],
           _bs_ = [0, constr, [0, inject_args(args), 0]];
          return caml_call3(Js[2], 0, cst_new_obj, _bs_);
         },
         [0, caml_call2(Arg[1], 0, 0), _bp_]),
     _bq_ = constr[2],
     gloc = [0, _bq_[1], _bq_[2], 1],
     e = unit([0, gloc], 0, 0),
     e$0 =
       caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], [0, constr[2]], 0, constr),
     _br_ =
       caml_call2
        (Stdlib[37], [0, [0, nolabel, e$0], args], [0, [0, nolabel, e], 0]);
    return caml_call4(Ppxlib_ast_Ast_helper_lite[7][8], 0, 0, invoker$0, _br_);
   }
   var
    S = caml_call1(Stdlib_Map[1], [0, Stdlib_StringLabels[10]]),
    cst_prop = "prop",
    cst_writeonly_prop = "writeonly_prop",
    cst_readonly_prop = "readonly_prop",
    cst_optdef_prop = "optdef_prop",
    cst_optdef = cst_optdef$0;
   function format_meth(body){
    var match = body[1];
    if(typeof match !== "number" && 29 === match[0]){var e = match[1]; return e;}
    return body;
   }
   function prop_type(constr, ty){
    var
     constr$0 =
       157298091 <= constr
        ? 803613097 <= constr ? cst_prop : cst_writeonly_prop
        : -528289822 <= constr ? cst_readonly_prop : cst_optdef_prop;
    return caml_call3(Js[1], 0, constr$0, [0, ty, 0]);
   }
   function wrap_arg_type(constr, ty){
    return -528289822 <= constr
            ? ty
            : caml_call3(Js[1], 0, cst_optdef, [0, ty, 0]);
   }
   var
    Prop_kind = [0, prop_type, wrap_arg_type],
    _x_ =
      [0,
       [11, " (normalized to ", [3, 0, [12, 41, 0]]],
       " (normalized to %S)"],
    _y_ =
      [0,
       [11, cst_Duplicated_val_or_method, [3, 0, [2, 0, [12, 46, 0]]]],
       cst_Duplicated_val_or_method_S],
    _z_ =
      [0,
       [11, cst_Duplicated_val_or_method, [3, 0, [2, 0, [12, 46, 0]]]],
       cst_Duplicated_val_or_method_S],
    _A_ = [0, 157298091],
    _B_ = [0, 803613097],
    _C_ = [0, -528289822],
    _D_ = [0, -536120430],
    _E_ =
      [0,
       [11, cst_This_field_is_not_valid_in, 0],
       cst_This_field_is_not_valid_in],
    _F_ = [0, [11, cst_Too_many_attributes, 0], cst_Too_many_attributes],
    _G_ =
      [0,
       [11, "Unkown jsoo attribute ([", [17, 5, [2, 0, [11, "]).", 0]]]],
       "Unkown jsoo attribute ([@@%s])."],
    _H_ =
      [0,
       [11, cst_A_mutable_field_cannot_be_, 0],
       cst_A_mutable_field_cannot_be_],
    cst_wrap_meth_callback = "wrap_meth_callback",
    cst_obj = "obj",
    cst_t$3 = cst_t$7,
    cst_t$4 = cst_t$7,
    cst_meth$0 = cst_meth$1,
    cst_t$5 = cst_t$7,
    cst_t$6 = cst_t$7;
   function filter_map(f, l){
    var
     l$0 =
       caml_call3
        (Stdlib_ListLabels[26],
         function(acc, x){
          var match = caml_call1(f, x);
          if(! match) return acc;
          var x$0 = match[1];
          return [0, x$0, acc];
         },
         0,
         l);
    return caml_call1(Stdlib_ListLabels[10], l$0);
   }
   function preprocess_literal_object(mappper, fields){
    function check_name(id, names){
     var txt = unescape(id[1]);
     if(! caml_call2(S[32], txt, names))
      return caml_call3(S[2], txt, id, names);
     var id$0 = caml_call2(S[17], txt, names);
     function details(id){
      return id[1] !== txt ? caml_call2(Stdlib_Printf[4], _x_, txt) : cst$0;
     }
     var
      _bl_ = details(id$0),
      _bm_ = caml_call3(Stdlib_Printf[4], _y_, id$0[1], _bl_),
      sub = [0, [0, id$0[2], _bm_], 0],
      _bn_ = details(id),
      _bo_ = caml_call3(Stdlib_Printf[4], _z_, id[1], _bn_);
     throw caml_maybe_attach_backtrace(make_exception(id[2], sub, _bo_), 1);
    }
    function _a9_(param){
     var txt = param[1][1], prefix_len = 5;
     a:
     {
      if
       (5 < caml_ml_string_length(txt)
        && caml_call3(Stdlib_StringLabels[16], txt, 0, prefix_len) === "jsoo."){
       var
        _bi_ =
          [0,
           1,
           caml_call3
            (Stdlib_StringLabels[16],
             txt,
             prefix_len,
             caml_ml_string_length(txt) - 5 | 0)];
       break a;
      }
      var _bi_ = [0, 0, txt];
     }
     var _bk_ = _bi_[2], _bj_ = _bi_[1];
     return _bk_ !== cst_optdef$0
             ? _bk_
               !== "readonly"
               ? _bk_
                 !== "readwrite"
                 ? _bk_
                   !== "writeonly"
                   ? _bj_ ? [0, [0, 427291060, txt]] : 0
                   : _A_
                 : _B_
               : _C_
             : _D_;
    }
    function f(param, exp){
     var fields = param[2], names = param[1], _ba_ = exp[1];
     switch(_ba_[0]){
       case 1:
        var _bb_ = _ba_[1], match = _bb_[3], mut = _bb_[2], id = _bb_[1];
        if(0 !== match[0]){
         var
          body = match[2],
          bang = match[1],
          names$0 = check_name(id, names),
          body$0 = caml_call1(mappper, body),
          match$2 = filter_map(_a9_, exp[3]);
         a:
         {
          if(mut){
           if(! match$2){var kind = 803613097; break a;}
           var _bc_ = match$2[1];
           if(typeof _bc_ === "number" && -528289822 === _bc_ && ! match$2[2]){var kind = raise_errorf(exp[2], _H_); break a;}
          }
          else{
           if(! match$2){var kind = -528289822; break a;}
           var _bf_ = match$2[1];
           if(typeof _bf_ === "number" && -528289822 === _bf_ && ! match$2[2]){var kind = -528289822; break a;}
          }
          if(match$2[2])
           var _bd_ = raise_errorf(exp[2], _F_);
          else{
           var match$0 = match$2[1];
           if(typeof match$0 === "number")
            var
             _be_ =
               157298091 === match$0
                ? 157298091
                : 803613097 <= match$0 ? 803613097 : -536120430;
           else
            var
             s = match$0[2],
             _be_ = caml_call1(raise_errorf(exp[2], _G_), s);
           var _bd_ = _be_;
          }
          var kind = _bd_;
         }
         return [0, names$0, [0, [1, id, kind, bang, body$0], fields]];
        }
        break;
       case 2:
        var _bg_ = _ba_[1], match$1 = _bg_[3], priv = _bg_[2], id$0 = _bg_[1];
        if(0 !== match$1[0]){
         var
          body$1 = match$1[2],
          bang$0 = match$1[1],
          names$1 = check_name(id$0, names),
          body$2 = format_meth(caml_call1(mappper, body$1)),
          create_meth_ty =
            function(exp){
             var match = exp[1];
             if(typeof match !== "number" && 4 === match[0]){
              var
               body = match[4],
               label = match[1],
               _bh_ = create_meth_ty(body);
              return [0, caml_call2(Arg[1], [0, label], 0), _bh_];
             }
             return 0;
            },
          fun_ty = create_meth_ty(body$2);
         return [0,
                 names$1,
                 [0, [0, id$0, priv, bang$0, body$2, fun_ty], fields]];
        }
        break;
     }
     return raise_errorf(exp[2], _E_);
    }
    try{
     var
      _a__ = caml_call3(Stdlib_ListLabels[26], f, [0, S[1], 0], fields)[2],
      _a$_ = [0, 891486873, caml_call1(Stdlib_ListLabels[10], _a__)];
     return _a$_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Syntax_error) throw caml_maybe_attach_backtrace(exn, 0);
     var error = exn[2];
     return [0, 106380200, caml_call1(Ppxlib_Location[13][7], error)];
    }
   }
   function literal_object(self_id, fields){
    function name(param){
     if(0 === param[0]){var id = param[1]; return id;}
     var id$0 = param[1];
     return id$0;
    }
    var
     _aK_ =
       caml_call2
        (Stdlib_ListLabels[20],
         function(param){
          if(0 !== param[0]) return 0;
          var l = param[5];
          return l;
         },
         fields),
     extra_types = caml_call1(Stdlib_ListLabels[14], _aK_),
     invoker$0 =
       invoker
        ([0, extra_types],
         function(args, tres){
          var
           args$0 =
             caml_call3
              (Stdlib_ListLabels[29],
               function(f, desc){
                var
                 ret_ty = caml_call1(Arg[3], desc),
                 label = caml_call1(Arg[4], desc);
                if(0 === f[0]){
                 var
                  args = f[5],
                  _a7_ = caml_call3(Js[1], 0, cst_meth$0, [0, ret_ty, 0]),
                  _a8_ = caml_call1(Arg[5], args);
                 return [0,
                         label,
                         arrows
                          ([0,
                            [0, nolabel, caml_call3(Js[1], 0, cst_t$5, [0, tres, 0])],
                            _a8_],
                           _a7_)];
                }
                var constr = f[2];
                return [0, label, caml_call2(Prop_kind[1], constr, ret_ty)];
               },
               fields,
               args);
          return arrows
                  ([0,
                    [0, nolabel, caml_call3(Js[1], 0, cst_t$6, [0, tres, 0])],
                    args$0],
                   tres);
         },
         function(args, tres){
          var
           args$0 =
             caml_call3
              (Stdlib_ListLabels[29],
               function(f, desc){
                var
                 ret_ty = caml_call1(Arg[3], desc),
                 label = caml_call1(Arg[4], desc);
                if(0 === f[0]){
                 var args = f[5], _a6_ = caml_call1(Arg[5], args);
                 return [0,
                         label,
                         arrows
                          ([0,
                            [0, nolabel, caml_call3(Js[1], 0, cst_t$3, [0, tres, 0])],
                            _a6_],
                           ret_ty)];
                }
                var constr = f[2];
                return [0, label, caml_call2(Prop_kind[2], constr, ret_ty)];
               },
               fields,
               args);
          return [0, args$0, caml_call3(Js[1], 0, cst_t$4, [0, tres, 0])];
         },
         function(args){
          var
           _a1_ =
             caml_call3
              (Stdlib_ListLabels[29],
               function(f, arg){
                var
                 _a3_ = 0,
                 _a4_ =
                   0 === f[0]
                    ? caml_call3(Js[3], 0, cst_wrap_meth_callback, [0, arg, 0])
                    : arg,
                 _a5_ = [0, inject_arg(_a4_), _a3_];
                return tuple
                        (0, 0, [0, ocaml_str(0, 0, unescape(name(f)[1])), _a5_]);
               },
               fields,
               args),
           _a2_ =
             [0, caml_call3(Ppxlib_ast_Ast_helper_lite[7][17], 0, 0, _a1_), 0];
          return caml_call3(Js[2], 0, cst_obj, _a2_);
         },
         caml_call2
          (Stdlib_ListLabels[20],
           function(param){
            return 0 === param[0]
                    ? caml_call2(Arg[1], 0, 0)
                    : caml_call2(Arg[1], 0, 0);
           },
           fields)),
     _aL_ = Ppxlib_ast_Ast_helper_lite[1][1],
     gloc = [0, _aL_[1], _aL_[2], 1],
     _aM_ =
       caml_call2
        (Stdlib_ListLabels[20],
         function(f){
          var
           loc = name(f)[2],
           _aY_ = name(f)[1],
           _aZ_ = lid([0, Ppxlib_Location[3]], _aY_),
           e = caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], [0, loc], 0, _aZ_),
           _aX_ = 0;
          if(0 === f[0])
           var
            _aV_ = lid([0, Ppxlib_Location[3]], self),
            _aW_ =
              [0,
               [0,
                nolabel,
                caml_call3(Ppxlib_ast_Ast_helper_lite[7][3], 0, 0, _aV_)],
               0],
            _a0_ = caml_call4(Ppxlib_ast_Ast_helper_lite[7][8], 0, 0, e, _aW_);
          else
           var _a0_ = e;
          return [0, [2, [0, name(f), 1, [1, 1, _a0_]]], loc, _aX_];
         },
         fields),
     _aN_ =
       [0,
        caml_call3(Ppxlib_ast_Ast_helper_lite[6][3], [0, gloc], 0, 0),
        _aM_],
     fake_object = caml_call3(Ppxlib_ast_Ast_helper_lite[7][33], 0, 0, _aN_),
     _aO_ =
       [0,
        self,
        caml_call2
         (Stdlib_ListLabels[20], function(f){return name(f)[1];}, fields)],
     _aP_ =
       caml_call3
        (Stdlib_ListLabels[27],
         function(name, fun){
          var
           _aT_ = mknoloc(name),
           _aU_ =
             caml_call3(Ppxlib_ast_Ast_helper_lite[6][4], [0, gloc], 0, _aT_);
          return caml_call6
                  (Ppxlib_ast_Ast_helper_lite[7][6],
                   [0, gloc],
                   0,
                   nolabel,
                   0,
                   _aU_,
                   fun);
         },
         _aO_,
         fake_object),
     e = [0, _aP_[1], _aP_[2], _aP_[3], [0, merlin_hide, 0]],
     _aQ_ =
       caml_call2
        (Stdlib_ListLabels[20],
         function(f){
          if(0 === f[0])
           var
            body = f[4],
            _aS_ = body[2],
            e =
              caml_call6
               (Ppxlib_ast_Ast_helper_lite[7][6],
                [0, [0, _aS_[1], _aS_[2], 1]],
                0,
                0,
                0,
                self_id,
                body);
          else
           var body$0 = f[4], e = body$0;
          return [0, nolabel, e];
         },
         fields),
     _aR_ = caml_call2(Stdlib[37], _aQ_, [0, [0, nolabel, e], 0]);
    return caml_call4(Ppxlib_ast_Ast_helper_lite[7][8], 0, 0, invoker$0, _aR_);
   }
   var
    _I_ =
      caml_call1
       (CamlinternalOO[16],
        [0,
         cst_bool,
         cst_cases,
         cst_case,
         cst_char,
         cst_value_binding,
         cst_extension_constructor_kind,
         cst_core_type,
         cst_structure,
         cst_list,
         cst_label_declaration,
         cst_module_binding,
         cst_position,
         cst_toplevel_directive,
         cst_directive_argument,
         cst_object_field_desc,
         cst_class_type_field_desc,
         cst_open_infos,
         cst_pattern_desc,
         cst_signature_item,
         cst_extension_constructor,
         cst_toplevel_phrase,
         cst_extension,
         cst_location,
         cst_variance,
         cst_package_type,
         cst_virtual_flag,
         cst_module_type_desc,
         cst_rec_flag,
         cst_payload,
         cst_type_exception,
         cst_label,
         cst_letop,
         cst_location_stack,
         cst_value_description,
         cst_module_declaration,
         cst_class_type_declaration,
         cst_longident_loc,
         cst_closed_flag,
         cst_directive_argument_desc,
         cst_attribute,
         cst_class_infos,
         cst_signature_item_desc,
         cst_int,
         cst_loc,
         cst_row_field_desc,
         cst_override_flag,
         cst_structure_item_desc,
         cst_class_field_desc,
         cst_binding_op,
         cst_module_expr_desc,
         cst_class_signature,
         cst_type_extension,
         cst_class_field_kind,
         cst_module_type_declaration,
         cst_arg_label,
         cst_row_field,
         cst_longident,
         cst_string$0,
         cst_pattern,
         cst_include_description,
         cst_signature,
         cst_class_type_field,
         cst_attributes,
         cst_open_description,
         cst_with_constraint,
         cst_include_declaration,
         cst_class_type_desc,
         cst_private_flag,
         cst_injectivity,
         cst_open_declaration,
         cst_object_field,
         cst_array,
         cst_constant,
         cst_class_expr,
         cst_functor_parameter,
         cst_direction_flag,
         cst_core_type_desc,
         cst_type_declaration,
         cst_constructor_declaration,
         cst_option,
         cst_type_kind,
         cst_module_expr,
         cst_module_substitution,
         cst_class_description,
         cst_expression,
         cst_class_type,
         cst_structure_item,
         cst_include_infos,
         cst_class_declaration,
         cst_module_type,
         cst_class_expr_desc,
         cst_class_structure,
         cst_mutable_flag,
         cst_expression_desc,
         cst_constructor_arguments,
         cst_class_field]),
    _J_ = caml_call2(CamlinternalOO[8], _I_, shared)[63],
    _K_ =
      caml_call6
       (CamlinternalOO[18],
        _I_,
        0,
        0,
        [0,
         cst_arg_label,
         cst_array,
         cst_attribute,
         cst_attributes,
         cst_binding_op,
         cst_bool,
         cst_case,
         cst_cases,
         cst_char,
         cst_class_declaration,
         cst_class_description,
         cst_class_expr,
         cst_class_expr_desc,
         cst_class_field,
         cst_class_field_desc,
         cst_class_field_kind,
         cst_class_infos,
         cst_class_signature,
         cst_class_structure,
         cst_class_type,
         cst_class_type_declaration,
         cst_class_type_desc,
         cst_class_type_field,
         cst_class_type_field_desc,
         cst_closed_flag,
         cst_constant,
         cst_constructor_arguments,
         cst_constructor_declaration,
         cst_core_type,
         cst_core_type_desc,
         cst_direction_flag,
         cst_directive_argument,
         cst_directive_argument_desc,
         cst_expression,
         cst_expression_desc,
         cst_extension,
         cst_extension_constructor,
         cst_extension_constructor_kind,
         cst_functor_parameter,
         cst_include_declaration,
         cst_include_description,
         cst_include_infos,
         cst_injectivity,
         cst_int,
         cst_label,
         cst_label_declaration,
         cst_letop,
         cst_list,
         cst_loc,
         cst_location,
         cst_location_stack,
         cst_longident,
         cst_longident_loc,
         cst_module_binding,
         cst_module_declaration,
         cst_module_expr,
         cst_module_expr_desc,
         cst_module_substitution,
         cst_module_type,
         cst_module_type_declaration,
         cst_module_type_desc,
         cst_mutable_flag,
         cst_object_field,
         cst_object_field_desc,
         cst_open_declaration,
         cst_open_description,
         cst_open_infos,
         cst_option,
         cst_override_flag,
         cst_package_type,
         cst_pattern,
         cst_pattern_desc,
         cst_payload,
         cst_position,
         cst_private_flag,
         cst_rec_flag,
         cst_row_field,
         cst_row_field_desc,
         cst_signature,
         cst_signature_item,
         cst_signature_item_desc,
         cst_string$0,
         cst_structure,
         cst_structure_item,
         cst_structure_item_desc,
         cst_toplevel_directive,
         cst_toplevel_phrase,
         cst_type_declaration,
         cst_type_exception,
         cst_type_extension,
         cst_type_kind,
         cst_value_binding,
         cst_value_description,
         cst_variance,
         cst_virtual_flag,
         cst_with_constraint],
        Ppxlib_Ast_traverse[1],
        1),
    _M_ = _K_[35],
    _L_ = _K_[1];
   caml_call3
    (CamlinternalOO[10],
     _I_,
     _J_,
     function(self_1, expr){
      var prev_default_loc = Ppxlib_ast_Ast_helper_lite[1][1];
      Ppxlib_ast_Ast_helper_lite[1][1] = expr[2];
      var pexp_attributes = expr[4], _R_ = expr[1];
      a:
      {
       b:
       c:
       if(typeof _R_ !== "number"){
        switch(_R_[0]){
          case 5:
           var prop = _R_[1], _S_ = prop[1];
           d:
           if(typeof _S_ !== "number"){
            switch(_S_[0]){
              case 0:
               var _T_ = _S_[1][1];
               if(0 !== _T_[0]) break b;
               var _U_ = _T_[1];
               e:
               if(_U_ !== cst$2){
                if(_U_ !== cst$3){
                 if(_U_ !== ":=") break b;
                 var _V_ = _R_[2];
                 if(! _V_) break b;
                 var _W_ = _V_[1];
                 if(typeof _W_[1] !== "number") break b;
                 var prop$0 = _W_[2], _X_ = prop$0[1];
                 if(typeof _X_ !== "number" && 5 === _X_[0]){
                  var _Y_ = _X_[1][1];
                  if(typeof _Y_ !== "number" && 0 === _Y_[0]){
                   var _Z_ = _Y_[1][1];
                   if(0 !== _Z_[0]) break b;
                   if(_Z_[1] !== cst$3) break b;
                   var ___ = _X_[2];
                   if(! ___) break b;
                   var _$_ = ___[1];
                   if(typeof _$_[1] !== "number") break b;
                   var _aa_ = ___[2];
                   if(! _aa_) break b;
                   var _ab_ = _aa_[1];
                   if(typeof _ab_[1] !== "number") break b;
                   if(_aa_[2]) break b;
                   var _ac_ = _V_[2];
                   if(! _ac_) break b;
                   var _ad_ = _ac_[1];
                   if(typeof _ad_[1] !== "number") break b;
                   if(_ac_[2]) break b;
                   var
                    value = _ad_[2],
                    meth = _ab_[2],
                    obj = _$_[2],
                    obj$0 = caml_call2(self_1[1][1 + _J_], self_1, obj),
                    value$0 = caml_call2(self_1[1][1 + _J_], self_1, value),
                    prop_loc = prop$0[2],
                    prop$1 = exp_to_string(meth),
                    new_expr$0 =
                      prop_set(meth[2], prop_loc, obj$0, prop$1, value$0),
                    _ae_ =
                      caml_call2
                       (self_1[1][1 + _J_],
                        self_1,
                        [0,
                         new_expr$0[1],
                         new_expr$0[2],
                         new_expr$0[3],
                         pexp_attributes]);
                   break e;
                  }
                  break b;
                 }
                 break b;
                }
                var _ah_ = _R_[2];
                if(! _ah_) break b;
                var _ai_ = _ah_[1];
                if(typeof _ai_[1] !== "number") break b;
                var _aj_ = _ah_[2];
                if(! _aj_) break b;
                var _ak_ = _aj_[1];
                if(typeof _ak_[1] !== "number") break b;
                if(_aj_[2]) break b;
                var
                 meth$0 = _ak_[2],
                 obj$1 = _ai_[2],
                 obj$2 = caml_call2(self_1[1][1 + _J_], self_1, obj$1),
                 prop$2 = exp_to_string(meth$0),
                 new_expr$1 = prop_get(meth$0[2], obj$2, prop$2),
                 _ae_ =
                   caml_call2
                    (self_1[1][1 + _J_],
                     self_1,
                     [0,
                      new_expr$1[1],
                      new_expr$1[2],
                      new_expr$1[3],
                      pexp_attributes]);
               }
               else{
                var _al_ = _R_[2];
                if(! _al_) break b;
                var _am_ = _al_[1];
                if(typeof _am_[1] !== "number") break b;
                var _an_ = _al_[2];
                if(! _an_) break b;
                var _ao_ = _an_[1];
                if(typeof _ao_[1] !== "number") break b;
                var meth$1 = _ao_[2], _ap_ = meth$1[1], obj$3 = _am_[2];
                f:
                {
                 if(typeof _ap_ !== "number" && 5 === _ap_[0]){
                  if(_an_[2]) break b;
                  var
                   args = _ap_[2],
                   meth$2 = _ap_[1],
                   meth_str$0 = exp_to_string(meth$2),
                   obj$5 = caml_call2(self_1[1][1 + _J_], self_1, obj$3),
                   args$0 =
                     caml_call2
                      (Stdlib_ListLabels[20],
                       function(param){
                        var e = param[2], s = param[1];
                        return [0, s, caml_call2(self_1[1][1 + _J_], self_1, e)];
                       },
                       args),
                   _ar_ = expr[2],
                   loc = [0, _ar_[1], _ar_[2], 1],
                   new_expr$3 =
                     method_call
                      (loc, expr[2], obj$5, [0, meth_str$0, meth$2[2]], args$0),
                   _aq_ =
                     caml_call2
                      (self_1[1][1 + _J_],
                       self_1,
                       [0,
                        new_expr$3[1],
                        new_expr$3[2],
                        new_expr$3[3],
                        pexp_attributes]);
                  break f;
                 }
                 if(_an_[2]) break b;
                 var
                  obj$4 = caml_call2(self_1[1][1 + _J_], self_1, obj$3),
                  meth_str = exp_to_string(meth$1),
                  new_expr$2 =
                    method_call
                     (expr[2], expr[2], obj$4, [0, meth_str, meth$1[2]], 0),
                  _aq_ =
                    caml_call2
                     (self_1[1][1 + _J_],
                      self_1,
                      [0,
                       new_expr$2[1],
                       new_expr$2[2],
                       new_expr$2[3],
                       pexp_attributes]);
                }
                var _ae_ = _aq_;
               }
               var _af_ = _ae_;
               break;
              case 5:
               var _as_ = _S_[1][1];
               if(typeof _as_ !== "number" && 0 === _as_[0]){
                var _at_ = _as_[1][1];
                if(0 !== _at_[0]) break b;
                if(_at_[1] !== cst$2) break b;
                var _au_ = _S_[2];
                if(! _au_) break b;
                var _av_ = _au_[1];
                if(typeof _av_[1] !== "number") break b;
                var _aw_ = _au_[2];
                if(! _aw_) break b;
                var _ax_ = _aw_[1];
                if(typeof _ax_[1] !== "number") break b;
                if(_aw_[2]) break b;
                var
                 pexp_loc = expr[2],
                 args$1 = _R_[2],
                 meth$3 = _ax_[2],
                 obj$6 = _av_[2],
                 meth_str$1 = exp_to_string(meth$3),
                 obj$7 = caml_call2(self_1[1][1 + _J_], self_1, obj$6),
                 args$2 =
                   caml_call2
                    (Stdlib_ListLabels[20],
                     function(param){
                      var e = param[2], s = param[1];
                      return [0, s, caml_call2(self_1[1][1 + _J_], self_1, e)];
                     },
                     args$1),
                 new_expr$4 =
                   method_call
                    (prop[2],
                     pexp_loc,
                     obj$7,
                     [0, meth_str$1, meth$3[2]],
                     args$2),
                 _af_ =
                   caml_call2
                    (self_1[1][1 + _J_],
                     self_1,
                     [0,
                      new_expr$4[1],
                      new_expr$4[2],
                      new_expr$4[3],
                      pexp_attributes]);
                break;
               }
               break b;
              case 35:
               var _ay_ = _S_[1];
               if(_ay_[1][1] !== cst_js) break b;
               var _az_ = _ay_[2];
               if(0 !== _az_[0]) break b;
               var _aA_ = _az_[1];
               if(! _aA_) break b;
               var _aB_ = _aA_[1][1];
               if(0 !== _aB_[0]) break b;
               var _aC_ = _aB_[1][1];
               if(typeof _aC_ !== "number" && 22 === _aC_[0]){
                if(_aA_[2]) break b;
                var
                 args$3 = _R_[2],
                 constr = _aC_[1],
                 args$4 =
                   caml_call2
                    (Stdlib_ListLabels[20],
                     function(param){
                      var e = param[2], s = param[1];
                      return [0, s, caml_call2(self_1[1][1 + _J_], self_1, e)];
                     },
                     args$3),
                 new_expr$5 = new_object(constr, args$4),
                 _af_ =
                   caml_call2
                    (self_1[1][1 + _J_],
                     self_1,
                     [0,
                      new_expr$5[1],
                      new_expr$5[2],
                      new_expr$5[3],
                      pexp_attributes]);
                break;
               }
               break b;
              default: break d;
            }
            var _ag_ = _af_;
            break;
           }
           break b;
          case 35:
           var _aD_ = _R_[1];
           if(_aD_[1][1] !== cst_js) break b;
           var _aE_ = _aD_[2];
           if(0 !== _aE_[0]) break b;
           var _aF_ = _aE_[1];
           if(! _aF_) break b;
           var _aG_ = _aF_[1][1];
           if(0 !== _aG_[0]) break b;
           var _aH_ = _aG_[1][1];
           d:
           if(typeof _aH_ !== "number"){
            switch(_aH_[0]){
              case 22:
               if(_aF_[2]) break b;
               var
                constr$0 = _aH_[1],
                new_expr$6 = new_object(constr$0, 0),
                _aI_ =
                  caml_call2
                   (self_1[1][1 + _J_],
                    self_1,
                    [0,
                     new_expr$6[1],
                     new_expr$6[2],
                     new_expr$6[3],
                     pexp_attributes]);
               break;
              case 30:
               if(_aF_[2]) break b;
               var
                class_struct = _aH_[1],
                _aJ_ = class_struct[2],
                fields =
                  preprocess_literal_object
                   (caml_call1(self_1[1][1 + _J_], self_1), _aJ_);
               if(891486873 <= fields[1])
                var
                 fields$0 = fields[2],
                 new_expr$7 = literal_object(class_struct[1], fields$0);
               else
                var
                 e = fields[2],
                 new_expr$7 =
                   caml_call3(Ppxlib_ast_Ast_helper_lite[7][38], 0, 0, e);
               var
                _aI_ =
                  caml_call2
                   (self_1[1][1 + _J_],
                    self_1,
                    [0,
                     new_expr$7[1],
                     new_expr$7[2],
                     new_expr$7[3],
                     pexp_attributes]);
               break;
              default: break d;
            }
            var _ag_ = _aI_;
            break;
           }
           break b;
          default: break c;
        }
        var new_expr = _ag_;
        break a;
       }
       var new_expr = caml_call1(caml_call1(_M_, self_1), expr);
      }
      Ppxlib_ast_Ast_helper_lite[1][1] = prev_default_loc;
      return new_expr;
     });
   caml_call1(CamlinternalOO[17], _I_);
   var _N_ = caml_call2(CamlinternalOO[24], 0, _I_);
   caml_call1(_L_, _N_);
   var
    transform = caml_call3(CamlinternalOO[26], 0, _N_, _I_),
    _O_ =
      [0,
       caml_call1(caml_get_public_method(transform, -951102413, 1), transform)];
   caml_call13
    (Ppxlib_Driver[5], 0, 0, 0, 0, _O_, 0, 0, 0, 0, 0, 0, 0, "ppx_js");
   function expr(param, exp){
    var
     _Q_ =
       caml_call2
        (caml_get_public_method(transform, 782176664, 2),
         transform,
         caml_call2(Ppxlib_ast_Import[2][9], 4, exp));
    return caml_call1(caml_call1(Ppxlib_ast_Import[2][10], 4), _Q_);
   }
   var
    _P_ = Ast_mapper[1],
    mapper =
      [0,
       _P_[1],
       _P_[2],
       _P_[3],
       _P_[4],
       _P_[5],
       _P_[6],
       _P_[7],
       _P_[8],
       _P_[9],
       _P_[10],
       _P_[11],
       _P_[12],
       _P_[13],
       _P_[14],
       _P_[15],
       _P_[16],
       _P_[17],
       expr,
       _P_[19],
       _P_[20],
       _P_[21],
       _P_[22],
       _P_[23],
       _P_[24],
       _P_[25],
       _P_[26],
       _P_[27],
       _P_[28],
       _P_[29],
       _P_[30],
       _P_[31],
       _P_[32],
       _P_[33],
       _P_[34],
       _P_[35],
       _P_[36],
       _P_[37],
       _P_[38],
       _P_[39],
       _P_[40],
       _P_[41],
       _P_[42],
       _P_[43],
       _P_[44],
       _P_[45],
       _P_[46],
       _P_[47],
       _P_[48]],
    Ppx_js_Ppx_js_internal =
      [0,
       nolabel,
       Syntax_error,
       make_exception,
       raise_errorf,
       unflatten,
       split_at_dots,
       parse_lid,
       mkloc,
       mknoloc,
       lid,
       mkloc_opt,
       unit,
       tuple,
       ocaml_str,
       exp_to_string,
       typ,
       arrows,
       wrapper,
       make_str,
       merlin_hide,
       Js,
       javascript_str,
       unescape,
       app_arg,
       inject_arg,
       inject_args,
       Arg,
       js_dot_t_the_first_arg,
       invoker,
       open_t,
       method_call,
       prop_get,
       prop_set,
       new_object,
       S,
       format_meth,
       Prop_kind,
       filter_map,
       preprocess_literal_object,
       literal_object,
       transform,
       mapper];
   runtime.caml_register_global
    (110, Ppx_js_Ppx_js_internal, "Ppx_js__Ppx_js_internal");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ppx_js
//# unitInfo: Requires: Ppx_js__Ppx_js_internal
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Ppx_js_Ppx_js_internal = global_data.Ppx_js__Ppx_js_internal,
    wrapper = Ppx_js_Ppx_js_internal[18],
    mapper = Ppx_js_Ppx_js_internal[42];
   wrapper[1] = [0, "Js_of_ocaml"];
   var Ppx_js = [0, mapper];
   runtime.caml_register_global(2, Ppx_js, "Ppx_js");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
