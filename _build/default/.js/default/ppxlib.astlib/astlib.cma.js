// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.0.1

//# unitInfo: Provides: Astlib__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Astlib = [0],
    Astlib$0 = [0, Astlib];
   runtime.caml_register_global(0, Astlib$0, "Astlib__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Stdlib0
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    to_string = Stdlib[33],
    Int = [0, to_string];
   function map(f, o){
    if(! o) return 0;
    var v = o[1];
    return [0, caml_call1(f, v)];
   }
   var Option = [0, map], Astlib_Stdlib0 = [0, Int, Option];
   runtime.caml_register_global(1, Astlib_Stdlib0, "Astlib__Stdlib0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Location
//# unitInfo: Requires: Format_doc, Location, Stdlib__Format, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_s = "%s";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Format_doc = global_data.Format_doc,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_List = global_data.Stdlib__List,
    Location = global_data.Location,
    none = Location[1],
    input_name = Location[13],
    input_lexbuf = Location[14],
    register_error_of_exn = Location[55],
    error_of_exn = Location[56],
    Error = Location[57],
    raise_errorf = Location[59],
    report_exception = Location[60],
    _a_ = [0, [15, 0], "%a"],
    _b_ = [0, [2, 0, 0], cst_s],
    _c_ = [0, [2, 0, 0], cst_s],
    _d_ = [0, [16, 0], "%t"];
   function set_input_name(name){input_name[1] = name; return 0;}
   function set_input_lexbuf(lexbuf_opt){
    input_lexbuf[1] = lexbuf_opt;
    return 0;
   }
   function is_well_formed(error){
    return typeof error[1] === "number" ? 1 : 0;
   }
   function string_of_location_msg(msg){
    return caml_call3(Stdlib_Format[147], _a_, Format_doc[1][2], msg[1]);
   }
   function main_msg(param){
    var main = param[2], _g_ = main[2];
    return [0, string_of_location_msg(main), _g_];
   }
   function sub_msgs(param){
    var sub = param[3];
    return caml_call2
            (Stdlib_List[20],
             function(err){
              var _f_ = err[2];
              return [0, string_of_location_msg(err), _f_];
             },
             sub);
   }
   function of_exn(exn){
    var match = caml_call1(error_of_exn, exn);
    if(match){
     var match$0 = match[1];
     if(typeof match$0 !== "number"){var e = match$0[2]; return [0, e];}
    }
    return 0;
   }
   function set_main_msg(error, msg){
    var
     txt = caml_call2(Format_doc[1][4], _b_, msg),
     main = [0, txt, error[2][2]];
    return [0, error[1], main, error[3], error[4]];
   }
   function make(sub, param){
    var loc = param[2], txt = param[1];
    function mk(loc, x){
     return [0, caml_call2(Format_doc[1][4], _c_, x), loc];
    }
    var
     _e_ =
       caml_call2
        (Stdlib_List[20],
         function(param){
          var loc = param[2], txt = param[1];
          return mk(loc, txt);
         },
         sub);
    return [0, 0, mk(loc, txt), _e_, 0];
   }
   function set_main_loc(error, loc){
    var main = [0, error[2][1], loc];
    return [0, error[1], main, error[3], error[4]];
   }
   function raise_errorf$0(loc, msg){
    return caml_call2
            (Stdlib_Format[151],
             function(pr){
              return caml_call5
                      (raise_errorf,
                       loc,
                       0,
                       0,
                       _d_,
                       caml_call1(Format_doc[6], pr));
             },
             msg);
   }
   var
    Astlib_Location =
      [0,
       [0,
        is_well_formed,
        main_msg,
        sub_msgs,
        set_main_msg,
        set_main_loc,
        make,
        of_exn],
       set_input_name,
       set_input_lexbuf,
       none,
       register_error_of_exn,
       Error,
       raise_errorf$0,
       report_exception];
   runtime.caml_register_global(8, Astlib_Location, "Astlib__Location");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Longident
//# unitInfo: Requires: Longident, Parse, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Parse = global_data.Parse,
    Longident = global_data.Longident,
    flatten = Longident[1];
   function parse(s){
    var _a_ = caml_call2(Stdlib_Lexing[3], 0, s);
    return caml_call1(Parse[10], _a_);
   }
   var Astlib_Longident = [0, flatten, parse];
   runtime.caml_register_global(3, Astlib_Longident, "Astlib__Longident");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_414
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M031",
    ast_intf_magic_number = "Caml1999N031",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_414 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_414, "Astlib__Ast_414");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Pprintast
//# unitInfo: Requires: Astlib__Location, Stdlib, Stdlib__Format, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$48 = "",
    cst$73 = " (",
    cst_a$3 = " (%a)",
    cst$72 = " :",
    cst$71 = " : ",
    cst$74 = " :=",
    cst$49 = " ;..",
    cst$70 = " =",
    cst_in = " in",
    cst_when = " when ",
    cst$47 = " |",
    cst$80 = "!",
    cst_S = "%S",
    cst_a$0 = "%a",
    cst_a_a$0 = "%a%a",
    cst_a_a$1 = "%a@ %a",
    cst_a$1 = "%a@;",
    cst_a_a$3 = "%a@;->@;%a",
    cst_a = "%a@;.@;",
    cst_a_a_a = "%a@;: %a@;=@;%a",
    cst_a_a$2 = "%a@;=@;%a",
    cst_s = "%s",
    cst_s_c = "%s%c",
    cst$52 = "(",
    cst$42 = "((",
    cst_a_a = "((%a)%a)",
    cst$68 = "()",
    cst_module = "(module",
    cst_type$2 = "(type",
    cst$57 = ")",
    cst$40 = ",",
    cst$53 = ",@;",
    cst$43 = "->",
    cst$64 = ".(",
    cst$50 = "..",
    cst$66 = ".{",
    cst$51 = ": ",
    cst$58 = "::",
    cst$76 = ":=",
    cst$77 = ":@ ",
    cst$56 = ";",
    cst$79 = ";;",
    cst$59 = ";@;",
    cst$62 = "<-",
    cst_0 = "<0>",
    cst_1 = "<1>",
    cst_2 = "<2>",
    cst_hov0 = "<hov0>",
    cst_hov2 = "<hov2>",
    cst_hov = "<hov>",
    cst_hv0 = "<hv0>",
    cst_hv2 = "<hv2>",
    cst_hv = "<hv>",
    cst_v = "<v>",
    cst_a$5 = "=@;%a",
    cst$46 = ">",
    cst_s_a = "?%s:%a",
    cst$78 = "?@ ",
    cst$75 = "@\n",
    cst$44 = "@ ",
    cst_s$1 = "@ %s",
    cst_a$2 = "@ =@ %a",
    cst_and$5 = "@ and@ ",
    cst$67 = "@,",
    cst$41 = "@;",
    cst$55 = "@;*@;",
    cst_1_2 = "@;<1 -2>",
    cst_of_a = "@;of@;%a",
    cst_2_a_a$0 = "@[<2>%a %a@]",
    cst_2_a_a = "@[<2>%a@;->@;%a@]",
    cst_2_a_as_a = "@[<2>%a@;as@;%a@]",
    cst_2_a = "@[<2>%a@]",
    cst_2_s_a = "@[<2>`%s@;%a@]",
    cst_2_let_open_s_a_in_a = "@[<2>let open%s %a in@;%a@]",
    cst_hov0_a = "@[<hov0>%a@]",
    cst_hov2_a = "@[<hov2>%a@]",
    cst_hov2_include_a_a = "@[<hov2>include@ %a@]%a",
    cst_hov2_module_type_s_a_a = "@[<hov2>module@ type@ %s%a@]%a",
    cst_v_a_a = "@[<v>%a@,%a@]",
    cst_a$4 = "[%a]@ ",
    cst$69 = "[]",
    cst$60 = "[|",
    cst$63 = "]",
    cst$54 = "_",
    cst_s$0 = "`%s",
    cst_and$4 = "and",
    cst_as = "as",
    cst_astlib_pprintast_ml = "astlib/pprintast.ml",
    cst_class$3 = "class",
    cst_class_type$1 = "class type",
    cst_constraint = "constraint",
    cst_do = "do",
    cst_done = "done",
    cst_end = "end",
    cst_exception = "exception",
    cst_external$0 = "external",
    cst_fun = "fun",
    cst_functor = "functor",
    cst_in$0 = "in",
    cst_include = "include",
    cst_inherit = "inherit",
    cst_let$1 = "let",
    cst_let_open = "let open",
    cst_module$0 = "module",
    cst_module$1 = "module ",
    cst_module_type = "module type ",
    cst_nonrec = "nonrec ",
    cst_object = "object",
    cst_of = "of",
    cst_open = "open",
    cst_private = "private",
    cst_rec = "rec",
    cst_rec$0 = "rec ",
    cst_set = "set",
    cst_type$3 = "type",
    cst_type$1 = "type ",
    cst_val$0 = "val",
    cst_with = "with",
    cst$45 = "| ",
    cst$61 = "|]",
    cst$65 = "}",
    caml_equal = runtime.caml_equal,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) === 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) === 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   function caml_call12(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
    return (f.l >= 0 ? f.l : f.l = f.length) === 12
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) === 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   function caml_call16
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15){
    return (f.l >= 0 ? f.l : f.l = f.length) === 16
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a15)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$6 = cst$46,
    cst$7 = "<",
    cst$8 = cst$47,
    cst$9 = cst$48,
    partial = [17, 0, 0],
    cst$12 = cst$63,
    cst$13 = ".[",
    cst$14 = cst$57,
    cst$15 = cst$64,
    cst$16 = cst$65,
    cst$17 = cst$66,
    cst$18 = cst$65,
    cst$19 = cst$66,
    cst$20 = cst$65,
    cst$21 = cst$66,
    cst$22 = cst$65,
    cst$23 = cst$66,
    cst$11 = cst$65,
    cst$10 = cst$63,
    right = cst$57,
    partial$0 = [17, 0, 0],
    partial$1 = [11, cst_0, 0],
    partial$2 = [17, 0, [17, 0, 0]],
    cst$24 = cst$54,
    partial$3 =
      [17,
       [0, cst$44, 1, 0],
       [11, cst_in$0, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]],
    partial$4 = [17, 0, 0],
    partial$5 = [15, [17, 0, 0]],
    partial$6 = [0, cst$41, 1, 0],
    partial$7 = [11, cst_2, 0],
    partial$8 = [15, [17, 0, [15, [17, 0, 0]]]],
    partial$9 = [0, cst$44, 1, 0],
    fmt =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11,
          "if",
          [17,
           [0, cst$44, 1, 0],
           [15,
            [17,
             0,
             [17,
              [0, cst$41, 1, 0],
              [18,
               [1, [0, partial$7, cst_2]],
               [11, "then", [17, partial$9, partial$8]]]]]]]]]],
       "@[<hv0>@[<2>if@ %a@]@;@[<2>then@ %a@]%a@]"],
    partial$10 = [17, 0, 0],
    fmt$0 =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "while",
         [17,
          [0, cst$41, 1, 0],
          [15,
           [17,
            [0, cst$41, 1, 0],
            [11,
             cst_do,
             [17,
              [0, cst$41, 1, 0],
              [15, [17, [0, cst$41, 1, 0], [11, cst_done, partial$10]]]]]]]]]],
       "@[<2>while@;%a@;do@;%a@;done@]"],
    partial$11 =
      [15,
       [17,
        [0, cst$41, 1, 0],
        [11,
         cst_do,
         [17,
          0,
          [17,
           [0, cst$41, 1, 0],
           [15, [17, 0, [17, [0, cst$41, 1, 0], [11, cst_done, [17, 0, 0]]]]]]]]]],
    fmt$1 =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [18,
          [1, [0, [11, cst_2, 0], cst_2]],
          [11,
           "for ",
           [15,
            [11,
             cst$70,
             [17,
              [0, cst$41, 1, 0],
              [15, [17, [0, cst$41, 1, 0], [15, partial$11]]]]]]]]]],
       "@[<hv0>@[<hv2>@[<2>for %a =@;%a@;%a%a@;do@]@;%a@]@;done@]"],
    partial$12 = [17, 0, [15, 0]],
    partial$13 = [15, 0],
    partial$14 = [11, cst_end, [17, 0, 0]],
    partial$15 = [0, cst$44, 1, 0],
    partial$16 = [17, 0, [15, 0]],
    partial$17 = [15, 0],
    partial$18 =
      [17,
       [0, cst$44, 1, 0],
       [11, cst$43, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]],
    partial$19 = [17, 0, [15, 0]],
    cst$28 = cst$54,
    cst$27 = cst$54,
    partial$20 = [15, 0],
    opt = [0, 0],
    cst$26 = cst$54,
    cst$25 = cst$54,
    partial$21 = [17, 0, [15, 0]],
    cst$29 = cst$54,
    partial$22 = [11, cst$43, [17, [0, cst$41, 1, 0], [15, 0]]],
    partial$23 = [0, cst$41, 1, 0],
    partial$24 = [17, [0, cst$41, 1, 0], [15, 0]],
    partial$25 = [15, 0],
    partial$26 = [0, cst$41, 1, 0],
    partial$27 = [17, [0, cst$41, 1, 0], [15, [17, 0, [15, 0]]]],
    cst$32 = cst$54,
    partial$28 = [15, 0],
    cst$33 = cst$54,
    partial$29 = [15, [17, 0, [15, 0]]],
    partial$30 = [0, cst$44, 1, 0],
    cst$30 = cst$54,
    cst$31 = cst$54,
    cst$34 = cst$54,
    partial$31 =
      [15, [17, 0, [15, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]]],
    partial$32 = [0, cst$44, 1, 0],
    cst$35 = cst$54,
    partial$33 =
      [12,
       61,
       [17,
        [0, cst$44, 1, 0],
        [15, [17, 0, [15, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]]]]],
    partial$34 = [0, cst$44, 1, 0],
    cst$36 = cst$48,
    cst$37 = cst$70,
    cst$38 = cst$74,
    cst$39 = "(::)",
    _L_ = [0, [12, 96, [2, 0, 0]], cst_s$0],
    cst$4 = cst$48,
    cst$5 = cst$80,
    cst$1 = "+",
    cst$2 = "-",
    cst$3 = cst$48,
    cst = cst$48,
    cst$0 = cst$80,
    prefix_symbols = [0, 33, [0, 63, [0, 126, 0]]],
    infix_symbols =
      caml_list_of_js_array
       ([61, 60, 62, 64, 94, 124, 38, 43, 45, 42, 47, 36, 37, 35]),
    special_infix_strings =
      caml_list_of_js_array
       (["asr",
         "land",
         "lor",
         "lsl",
         "lsr",
         "lxor",
         "mod",
         "or",
         cst$76,
         "!=",
         cst$58]),
    reset_ctxt = [0, 0, 0, 0],
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Astlib_Location = global_data.Astlib__Location,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    _b_ = [0, [2, 0, 0], cst_s],
    _c_ =
      [0,
       [12,
        40,
        [17, [0, cst$41, 1, 0], [2, 0, [17, [0, cst$41, 1, 0], [12, 41, 0]]]]],
       "(@;%s@;)"],
    _d_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    _e_ = [0, [2, 0, 0], cst_s];
   function value(t, default$0){
    if(! t) return default$0;
    var x = t[1];
    return x;
   }
   function fixity_of_string(s){
    if(s === cst$48) return -453122489;
    if(caml_call2(Stdlib_List[37], s, special_infix_strings))
     return [0, -784100624, s];
    var _w__ = caml_string_get(s, 0);
    if(caml_call2(Stdlib_List[37], _w__, infix_symbols))
     return [0, -784100624, s];
    var _w$_ = caml_string_get(s, 0);
    if(caml_call2(Stdlib_List[37], _w$_, prefix_symbols))
     return [0, -481604174, s];
    if(46 === caml_string_get(s, 0)) return [0, 237833689, s];
    var _wY_ = 3 < caml_ml_string_length(s) ? 1 : 0;
    a:
    {
     if(_wY_){
      var _wZ_ = 108 === caml_string_get(s, 0) ? 1 : 0;
      if(_wZ_){
       var _w0_ = 101 === caml_string_get(s, 1) ? 1 : 0;
       if(_w0_){
        var _w1_ = 116 === caml_string_get(s, 2) ? 1 : 0;
        if(_w1_){
         var
          _w2_ = caml_string_get(s, 3),
          _xa_ = caml_call2(Stdlib_List[37], _w2_, infix_symbols);
         break a;
        }
        var _w3_ = _w1_;
       }
       else
        var _w3_ = _w0_;
      }
      else
       var _w3_ = _wZ_;
     }
     else
      var _w3_ = _wY_;
     var _xa_ = _w3_;
    }
    if(_xa_) return [0, 93260188, s];
    var _w4_ = 3 < caml_ml_string_length(s) ? 1 : 0;
    a:
    {
     if(_w4_){
      var _w5_ = 97 === caml_string_get(s, 0) ? 1 : 0;
      if(_w5_){
       var _w6_ = 110 === caml_string_get(s, 1) ? 1 : 0;
       if(_w6_){
        var _w7_ = 100 === caml_string_get(s, 2) ? 1 : 0;
        if(_w7_){
         var
          _w8_ = caml_string_get(s, 3),
          _xb_ = caml_call2(Stdlib_List[37], _w8_, infix_symbols);
         break a;
        }
        var _w9_ = _w7_;
       }
       else
        var _w9_ = _w6_;
      }
      else
       var _w9_ = _w5_;
     }
     else
      var _w9_ = _w4_;
     var _xb_ = _w9_;
    }
    return _xb_ ? [0, 906850200, s] : -453122489;
   }
   function first_is(c, str){
    var
     _wW_ = str !== cst$48 ? 1 : 0,
     _wX_ = _wW_ ? caml_string_get(str, 0) === c ? 1 : 0 : _wW_;
    return _wX_;
   }
   function last_is(c, str){
    var
     _wU_ = str !== cst$48 ? 1 : 0,
     _wV_ =
       _wU_
        ? caml_string_get
           (str, caml_ml_string_length(str) - 1 | 0)
          === c
          ? 1
          : 0
        : _wU_;
    return _wV_;
   }
   function needs_parens(txt){
    var fix = fixity_of_string(txt);
    a:
    {
     if(typeof fix !== "number" && -784100624 === fix[1]){var _wQ_ = 1; break a;}
     var _wQ_ = 0;
    }
    if(_wQ_)
     var _wR_ = _wQ_;
    else{
     a:
     {
      if(typeof fix !== "number" && 237833689 === fix[1]){var _wS_ = 1; break a;}
      var _wS_ = 0;
     }
     if(_wS_)
      var _wR_ = _wS_;
     else{
      a:
      {
       b:
       if(typeof fix !== "number"){
        var _wN_ = fix[1];
        if(93260188 !== _wN_ && 906850200 !== _wN_) break b;
        var _wT_ = 1;
        break a;
       }
       var _wT_ = 0;
      }
      if(! _wT_){
       var _wO_ = txt !== cst$48 ? 1 : 0;
       if(! _wO_) return _wO_;
       var _wP_ = caml_string_get(txt, 0);
       return caml_call2(Stdlib_List[37], _wP_, prefix_symbols);
      }
      var _wR_ = _wT_;
     }
    }
    return _wR_;
   }
   function needs_spaces(txt){
    var _wM_ = first_is(42, txt);
    return _wM_ ? _wM_ : last_is(42, txt);
   }
   function string_loc(ppf, x){
    return caml_call3(Stdlib_Format[143], ppf, _b_, x[1]);
   }
   function protect_ident(ppf, txt){
    var format = needs_parens(txt) ? needs_spaces(txt) ? _c_ : _d_ : _e_;
    return caml_call3(Stdlib_Format[143], ppf, format, txt);
   }
   function override(param){return param ? cst : cst$0;}
   function view_expr(exp){
    var _wB_ = exp[1];
    if(typeof _wB_ !== "number" && 9 === _wB_[0]){
     var x = _wB_[1], _wC_ = x[1];
     if(0 === _wC_[0]){
      var _wD_ = _wC_[1];
      if(_wD_ === cst$68) return 405183496;
      if(_wD_ !== cst$58){
       if(_wD_ === cst$69) return 5493713;
      }
      else if(_wB_[2]){
       a:
       {
        b:
        {
         var exp$0 = exp, acc = 0;
         for(;;){
          var _wE_ = exp$0[1];
          if(typeof _wE_ !== "number" && 9 === _wE_[0]){
           var _wF_ = _wE_[1][1];
           if(0 !== _wF_[0]) break b;
           var _wG_ = _wF_[1];
           if(_wG_ !== cst$58) break;
           var _wH_ = _wE_[2];
           if(! _wH_) break b;
           var _wI_ = _wH_[1], _wJ_ = _wI_[1];
           if(typeof _wJ_ !== "number" && 8 === _wJ_[0]){
            var _wK_ = _wJ_[1];
            if(! _wK_) break b;
            var _wL_ = _wK_[2];
            if(! _wL_) break b;
            if(_wL_[2]) break b;
            if(_wI_[4]) break b;
            if(exp$0[4]) break b;
            var exp$1 = _wL_[1], e1 = _wK_[1], acc$0 = [0, e1, acc];
            exp$0 = exp$1;
            acc = acc$0;
            continue;
           }
           break b;
          }
          break b;
         }
         if(_wG_ === cst$69 && ! exp$0[4]){
          var match = [0, caml_call1(Stdlib_List[10], acc), 1];
          break a;
         }
        }
        var match = [0, caml_call1(Stdlib_List[10], [0, exp$0, acc]), 0];
       }
       var b = match[2], ls = match[1];
       return b ? [0, -944563106, ls] : [0, -1044071951, ls];
      }
     }
     if(! _wB_[2]) return [0, 947848242, x[1]];
    }
    return 812216871;
   }
   function is_simple_construct(param){
    a:
    {
     if(typeof param === "number"){
      if(812216871 > param) break a;
     }
     else if(-944563106 <= param[1]) break a;
     return 0;
    }
    return 1;
   }
   var
    pp = Stdlib_Format[143],
    _a_ =
      [0,
       [11, "variable in scope syntax error: ", [2, 0, 0]],
       "variable in scope syntax error: %s"],
    _f_ =
      [0,
       [15,
        [11,
         cst$64,
         [17, [0, cst$41, 1, 0], [2, 0, [17, [0, cst$41, 1, 0], [12, 41, 0]]]]]],
       "%a.(@;%s@;)"],
    _g_ = [0, [15, [11, cst$64, [2, 0, [12, 41, 0]]]], "%a.(%s)"],
    _h_ = [0, [15, [12, 46, [2, 0, 0]]], "%a.%s"],
    _i_ = [0, cst_astlib_pprintast_ml, 258, 17],
    _j_ = [0, [17, [0, cst$44, 1, 0], 0], cst$44],
    _k_ = [0, 0, cst$48],
    _l_ = [0, 0, cst$48],
    _m_ = [0, 0, cst$48],
    _n_ = [0, 0, cst$48],
    _o_ = [0, [12, 40, 0], cst$52],
    _p_ = [0, [12, 41, 0], cst$57],
    _q_ = [0, 0, cst$48],
    _r_ = [0, 0, cst$48],
    _s_ = [0, [15, [12, 40, [15, [12, 41, 0]]]], "%a(%a)"],
    _t_ = [0, [15, 0], cst_a$0],
    _u_ = [0, [2, 0, [0, 0]], cst_s_c],
    _v_ = [0, [2, 0, 0], cst_s],
    _w_ = [0, [1, 0], "%C"],
    _x_ =
      [0,
       [12, 123, [2, 0, [12, 124, [2, 0, [12, 124, [2, 0, [12, 125, 0]]]]]]],
       "{%s|%s|%s}"],
    _y_ = [0, [3, 0, 0], cst_S],
    _z_ = [0, [2, 0, [0, 0]], cst_s_c],
    _A_ = [0, [2, 0, 0], cst_s],
    _B_ = [0, [11, "mutable", [17, [0, cst$41, 1, 0], 0]], "mutable@;"],
    _C_ = [0, [11, "virtual", [17, [0, cst$41, 1, 0], 0]], "virtual@;"],
    _D_ = [0, [11, cst_rec$0, 0], cst_rec$0],
    _E_ = [0, [11, cst_nonrec, 0], cst_nonrec],
    _F_ = [0, [11, "downto", [17, [0, cst$44, 1, 0], 0]], "downto@ "],
    _G_ = [0, [11, "to", [17, [0, cst$44, 1, 0], 0]], "to@ "],
    _H_ = [0, [11, cst_private, [17, [0, cst$44, 1, 0], 0]], "private@ "],
    _I_ = [0, [3, 0, 0], cst_S],
    _J_ = [0, [11, "' ", [2, 0, 0]], "' %s"],
    _K_ = [0, [12, 39, [2, 0, 0]], "'%s"],
    _N_ = [0, [0, [12, 44, 0], cst$40]],
    _O_ = [0, [12, 91, [15, [11, "] ", 0]]], "[%a] "],
    _P_ = [0, [2, 0, [12, 58, [15, 0]]], "%s:%a"],
    _Q_ = [0, [12, 63, [2, 0, [12, 58, [15, 0]]]], cst_s_a],
    _R_ =
      [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [17, 0, 0]]], cst_2_a],
    _S_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$41, 1, 0],
          [11, cst$43, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]],
       cst_2_a_a],
    _T_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$41, 1, 0],
          [11, cst_as, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]],
       cst_2_a_as_a],
    _U_ = [0, [0, [17, [0, cst$41, 1, 0], 0], cst$41]],
    _V_ =
      [0,
       [15, [17, [0, cst$41, 1, 0], [12, 46, [17, [0, cst$41, 1, 0], 0]]]],
       cst_a],
    _W_ = [0, [15, 0], cst_a$0],
    _X_ =
      [0,
       [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [15, [17, 0, 0]]]],
       "@[<2>%a%a@]"],
    _Y_ = [0, [11, cst$42, [15, [12, 41, [15, [12, 41, 0]]]]], cst_a_a],
    _Z_ = [0, [12, 95, 0], cst$54],
    ___ =
      [0,
       [0,
        [17, [0, cst$41, 1, 0], [12, 42, [17, [0, cst$41, 1, 0], 0]]],
        cst$55]],
    _$_ = [0, [12, 40, [15, [12, 41, 0]]], "(%a)"],
    _aa_ = [0, [0, [12, 41, [17, [0, cst$41, 1, 0], 0]], ")@;"]],
    _ab_ = [0, [0, [12, 40, 0], cst$52]],
    _ac_ = [0, [0, [12, 44, [17, [0, cst$41, 1, 0], 0]], cst$53]],
    _ad_ = [0, [15, [17, [0, cst$41, 1, 0], 0]], cst_a$1],
    _ae_ = [0, [15, [15, 0]], cst_a_a$0],
    _af_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [2,
         0,
         [11,
          cst$51,
          [15,
           [17, [0, cst$44, 1, 0], [15, [17, [0, cst$44, 1, 0], [17, 0, 0]]]]]]]],
       "@[<hov2>%s: %a@ %a@ @]"],
    _ag_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15, [17, [0, cst$44, 1, 0], [17, 0, 0]]]],
       "@[<hov2>%a@ @]"],
    _ah_ = [0, [11, cst$49, 0], cst$49],
    _ai_ = [0, [11, cst$50, 0], cst$50],
    _aj_ = [0, [0, [12, 59, 0], cst$56]],
    _ak_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [12,
         60,
         [17,
          [0, cst$44, 1, 0],
          [15, [15, [17, [0, cst$44, 1, 0], [11, "> ", [17, 0, 0]]]]]]]],
       "@[<hov2><@ %a%a@ > @]"],
    _al_ = [0, [0, [12, 41, 0], cst$57]],
    _am_ = [0, [0, [12, 40, 0], cst$52]],
    _an_ = [0, [0, [12, 44, 0], cst$40]],
    _ao_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15, [12, 35, [15, [17, 0, 0]]]]],
       "@[<hov2>%a#%a@]"],
    _ap_ = [0, [0, [12, 38, 0], "&"]],
    _aq_ =
      [0,
       [17, [0, cst$41, 1, 0], [11, cst_of, [17, [0, cst$41, 1, 0], [15, 0]]]],
       cst_of_a],
    _ar_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15, [15, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]],
       "@[<2>%a%a@;%a@]"],
    _as_ = [0, [12, 62, [17, [0, cst$44, 1, 0], [15, 0]]], ">@ %a"],
    _at_ = [0, [0, [17, [0, cst_1_2, 1, -2], [11, cst$45, 0]], "@;<1 -2>| "]],
    _au_ = [0, [2, 0, [17, [0, cst$41, 1, 0], [15, 0]]], "%s@;%a"],
    _av_ = [0, [12, 62, 0], cst$46],
    _aw_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12, 91, [15, [15, [12, 93, [17, 0, 0]]]]]],
       "@[<2>[%a%a]@]"],
    _ax_ =
      [0,
       [11,
        cst_type$1,
        [15,
         [17, [0, cst$44, 1, 0], [12, 61, [17, [0, cst$44, 1, 0], [15, 0]]]]]],
       "type %a@ =@ %a"],
    _ay_ =
      [0,
       [0,
        [17, [0, cst$44, 1, 0], [11, cst_and$4, [17, [0, cst$44, 1, 0], 0]]],
        cst_and$5]],
    _az_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module,
         [17,
          [0, cst$44, 1, 0],
          [15,
           [17,
            [0, cst$44, 1, 0],
            [11,
             cst_with,
             [17, [0, cst$44, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]]]]],
       "@[<hov2>(module@ %a@ with@ %a)@]"],
    _aA_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst_module, [17, [0, cst$44, 1, 0], [15, [12, 41, [17, 0, 0]]]]]],
       "@[<hov2>(module@ %a)@]"],
    _aB_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$41, 1, 0],
          [11, cst_as, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]],
       cst_2_a_as_a],
    _aC_ = [0, [11, cst$42, [15, [12, 41, [15, [12, 41, 0]]]]], cst_a_a],
    _aD_ = [0, [0, [17, [0, cst$44, 1, 0], [11, cst$45, 0]], "@ | "]],
    _aE_ =
      [0,
       [18, [1, [0, [11, cst_hov0, 0], cst_hov0]], [15, [17, 0, 0]]],
       cst_hov0_a],
    _aF_ = [0, [15, [11, cst$58, [15, 0]]], "%a::%a"],
    _aG_ = [0, cst$58],
    _aH_ = [0, [15, 0], cst_a$0],
    _aI_ = [0, [0, [17, [0, cst$44, 1, 0], 0], cst$44]],
    _aJ_ =
      [0,
       [15,
        [17,
         [0, cst$44, 1, 0],
         [11, "(type ", [15, [12, 41, [17, [0, cst$41, 1, 0], [15, 0]]]]]]],
       "%a@ (type %a)@;%a"],
    _aK_ = [0, [15, [17, [0, cst$41, 1, 0], [15, 0]]], "%a@;%a"],
    _aL_ = [0, [15, 0], cst_a$0],
    _aM_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12, 96, [2, 0, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]],
       cst_2_s_a],
    _aN_ = [0, [12, 95, 0], cst$54],
    _aO_ = [0, [15, 0], cst_a$0],
    _aP_ = [0, [15, [11, cst$50, [15, 0]]], "%a..%a"],
    _aQ_ = [0, [0, [12, 44, [17, [0, cst$41, 1, 0], 0]], cst$53]],
    _aR_ =
      [0,
       [18,
        [1, [0, [11, cst_1, 0], cst_1]],
        [12, 40, [15, [12, 41, [17, 0, 0]]]]],
       "@[<1>(%a)@]"],
    _aS_ = [0, [2, 0, 0], cst_s],
    _aT_ = [0, [12, 96, [2, 0, 0]], cst_s$0],
    _aU_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$41, 1, 0],
          [12, 61, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<2>%a@;=@;%a@]"],
    _aV_ =
      [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [17, 0, 0]]], cst_2_a],
    _aW_ = [0, [0, [12, 59, [17, [0, cst$41, 1, 0], 0]], cst$59]],
    _aX_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12, 123, [17, [0, cst$41, 1, 0], [15, [11, ";_}", [17, 0, 0]]]]]],
       "@[<2>{@;%a;_}@]"],
    _aY_ = [0, [0, [12, 59, [17, [0, cst$41, 1, 0], 0]], cst$59]],
    _aZ_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         123,
         [17,
          [0, cst$41, 1, 0],
          [15, [17, [0, cst$41, 1, 0], [12, 125, [17, 0, 0]]]]]]],
       "@[<2>{@;%a@;}@]"],
    _a0_ = [0, [0, [12, 59, 0], cst$56]],
    _a1_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, cst$60, [15, [11, cst$61, [17, 0, 0]]]]],
       "@[<2>[|%a|]@]"],
    _a2_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         40,
         [15,
          [17,
           [0, cst$41, 1, 0],
           [12, 58, [17, [0, cst$41, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]]]],
       "@[<2>(%a@;:@;%a)@]"],
    _a3_ = [0, [12, 35, [15, 0]], "#%a"],
    _a4_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, "(lazy", [17, [0, cst$41, 1, 0], [15, [12, 41, [17, 0, 0]]]]]],
       "@[<2>(lazy@;%a)@]"],
    _a5_ =
      [0,
       [11,
        cst_module,
        [17, [0, cst$44, 1, 0], [2, 0, [12, 41, [17, [0, cst$44, 1, 0], 0]]]]],
       "(module@ %s)@ "],
    _a6_ =
      [0,
       [11,
        cst_module,
        [17, [0, cst$44, 1, 0], [11, "_)", [17, [0, cst$44, 1, 0], 0]]]],
       "(module@ _)@ "],
    _a7_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, cst_exception, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]],
       "@[<2>exception@;%a@]"],
    _a8_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15, [12, 46, [15, [12, 32, [17, 0, 0]]]]]],
       "@[<2>%a.%a @]"],
    _a9_ = [0, [15, [17, [0, cst$44, 1, 0], 0]], "%a@ "],
    _a__ =
      [0,
       [12, 126, [2, 0, [12, 58, [15, [17, [0, cst$41, 1, 0], 0]]]]],
       "~%s:%a@;"],
    _a$_ = [0, [12, 126, [2, 0, [17, [0, cst$41, 1, 0], 0]]], "~%s@;"],
    _ba_ =
      [0,
       [12,
        63,
        [2,
         0,
         [11,
          ":(",
          [15,
           [12,
            61,
            [17,
             [0, cst$41, 1, 0],
             [15, [12, 41, [17, [0, cst$41, 1, 0], 0]]]]]]]]],
       "?%s:(%a=@;%a)@;"],
    _bb_ =
      [0,
       [12, 63, [2, 0, [12, 58, [15, [17, [0, cst$41, 1, 0], 0]]]]],
       "?%s:%a@;"],
    _bc_ =
      [0,
       [11,
        "?(",
        [2,
         0,
         [12,
          61,
          [17, [0, cst$41, 1, 0], [15, [12, 41, [17, [0, cst$41, 1, 0], 0]]]]]]],
       "?(%s=@;%a)@;"],
    _bd_ = [0, [12, 63, [2, 0, [17, [0, cst$44, 1, 0], 0]]], "?%s@ "],
    _be_ = [0, [12, 46, [15, 0]], ".%a"],
    _bf_ =
      [0,
       [18,
        [1, [0, 0, cst$48]],
        [15,
         [15,
          [2,
           0,
           [15,
            [2,
             0,
             [17,
              [0, cst$44, 1, 0],
              [11, cst$62, [17, [0, "@;<1 2>", 1, 2], [15, partial]]]]]]]]]],
       "@[%a%a%s%a%s@ <-@;<1 2>%a@]"],
    _bg_ =
      [0,
       [18, [1, [0, 0, cst$48]], [15, [15, [2, 0, [15, [2, 0, [17, 0, 0]]]]]]],
       "@[%a%a%s%a%s@]"],
    _bh_ = [0, [12, 59, 0], cst$56],
    _bi_ = [0, cst_astlib_pprintast_ml, 674, 21],
    _bj_ =
      [0,
       [18, [1, [0, [11, cst_hov, 0], cst_hov]], [12, 33, [15, [17, 0, 0]]]],
       "@[<hov>!%a@]"],
    _bk_ = [0, 0, cst$48],
    _bl_ = [0, 0, cst$48],
    _bm_ = [0, [12, 44, 0], cst$40],
    _bn_ = [0, [12, 44, 0], cst$40],
    _bo_ = [0, [12, 44, 0], cst$40],
    _bp_ = [0, [12, 44, 0], cst$40],
    _bq_ = [0, [12, 46, 0], "."],
    _br_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15, [11, cst_in, [17, [0, cst_1_2, 1, -2], [15, [17, 0, 0]]]]]],
       "@[<2>%a in@;<1 -2>%a@]"],
    _bs_ =
      [0,
       [18,
        [1, [0, [11, cst_hv, 0], cst_hv]],
        [11, "function", [15, [17, 0, 0]]]],
       "@[<hv>function%a@]"],
    _bt_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_fun,
         [17,
          [0, cst$41, 1, 0],
          [15, [11, cst$43, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]]],
       "@[<2>fun@;%a->@;%a@]"],
    _bu_ =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv0, 0], cst_hv0]],
         [18,
          [1, [0, [11, cst_2, 0], cst_2]],
          [11,
           "match ",
           [15,
            [17,
             0,
             [17, [0, cst$44, 1, 0], [11, cst_with, [17, 0, [15, partial$0]]]]]]]]]],
       "@[<hv0>@[<hv0>@[<2>match %a@]@ with@]%a@]"],
    _bv_ =
      [0,
       [18,
        [1, [0, [11, cst_0, 0], cst_0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [11,
          "try",
          [17,
           [0, cst$44, 1, 0],
           [15,
            [17,
             0,
             [17,
              [0, cst$44, 1, 0],
              [18,
               [1, [0, partial$1, cst_0]],
               [11, cst_with, [15, partial$2]]]]]]]]]],
       "@[<0>@[<hv2>try@ %a@]@ @[<0>with%a@]@]"],
    _bw_ =
      [0,
       [17,
        [0, cst$41, 1, 0],
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, "else", [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]],
       "@;@[<2>else@;%a@]"],
    _bx_ = [0, [0, [12, 59, [17, [0, cst$41, 1, 0], 0]], cst$59]],
    _by_ =
      [0,
       [18, [1, [0, [11, cst_hv, 0], cst_hv]], [15, [17, 0, 0]]],
       "@[<hv>%a@]"],
    _bz_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_let$1,
         [17,
          [0, cst$44, 1, 0],
          [11,
           cst_module$0,
           [17,
            [0, cst$44, 1, 0],
            [2,
             0,
             [17,
              [0, cst$44, 1, 0],
              [12, 61, [17, [0, cst$44, 1, 0], [15, partial$3]]]]]]]]]],
       "@[<hov2>let@ module@ %s@ =@ %a@ in@ %a@]"],
    _bA_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_let$1,
         [17,
          [0, cst$44, 1, 0],
          [11,
           cst_exception,
           [17,
            [0, cst$44, 1, 0],
            [15,
             [17,
              [0, cst$44, 1, 0],
              [11, cst_in$0, [17, [0, cst$44, 1, 0], [15, partial$4]]]]]]]]]],
       "@[<hov2>let@ exception@ %a@ in@ %a@]"],
    _bB_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_fun,
         [17,
          [0, cst$41, 1, 0],
          [11,
           cst_type$2,
           [17,
            [0, cst$41, 1, 0],
            [2,
             0,
             [12,
              41,
              [17,
               [0, cst$41, 1, 0],
               [11, cst$43, [17, partial$6, partial$5]]]]]]]]]],
       "@[<2>fun@;(type@;%s)@;->@;%a@]"],
    _bC_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_let_open,
         [2,
          0,
          [12,
           32,
           [15, [11, cst_in, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]]]],
       cst_2_let_open_s_a_in_a],
    _bD_ = [0, [0, [17, [0, cst$67, 0, 0], 0], cst$67]],
    _bE_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [18,
         [1, [0, [11, cst_v, 0], cst_v]],
         [15,
          [17,
           [0, cst$67, 0, 0],
           [15,
            [17, 0, [11, cst_in, [17, [0, cst_1_2, 1, -2], [15, [17, 0, 0]]]]]]]]]],
       "@[<2>@[<v>%a@,%a@] in@;<1 -2>%a@]"],
    _bF_ = [0, [15, [17, [0, cst$44, 1, 0], [15, 0]]], cst_a_a$1],
    _bG_ =
      [0,
       [18, [1, [0, [11, cst_hov2, 0], cst_hov2]], [15, [17, 0, 0]]],
       cst_hov2_a],
    _bH_ =
      [0,
       [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [12, 32, [15, [17, 0, 0]]]]],
       cst_2_a_a$0],
    _bI_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$41, 1, 0],
          [2, 0, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<2>%a@;%s@;%a@]"],
    _bJ_ = [0, "~+", [0, "~-", [0, "~+.", [0, "~-.", 0]]]],
    _bK_ =
      [0,
       [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [12, 32, [15, [17, 0, 0]]]]],
       cst_2_a_a$0],
    _bL_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2, 0, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]],
       "@[<2>%s@;%a@]"],
    _bM_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]],
       "@[<2>%a@;%a@]"],
    _bN_ = [0, cst_astlib_pprintast_ml, 773, 15],
    _bO_ =
      [0,
       [0,
        [17, [0, cst$41, 1, 0], [11, cst$58, [17, [0, cst$41, 1, 0], 0]]],
        "@;::@;"]],
    _bP_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12, 96, [2, 0, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]],
       cst_2_s_a],
    _bQ_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [12,
          46,
          [15,
           [17,
            [0, cst$44, 1, 0],
            [11, cst$62, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]]]]]],
       "@[<2>%a.%a@ <-@ %a@]"],
    _bR_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "new", [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]],
       "@[<hov2>new@ %a@]"],
    _bS_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [2,
         0,
         [17,
          [0, cst$44, 1, 0],
          [11, cst$62, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<hov2>%s@ <-@ %a@]"],
    _bT_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [2,
         0,
         [17,
          [0, cst$44, 1, 0],
          [12, 61, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<hov2>%s@ =@ %a@]"],
    _bU_ = [0, [0, [12, 59, 0], cst$56]],
    _bV_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "{<", [15, [11, ">}", [17, 0, 0]]]]],
       "@[<hov2>{<%a>}@]"],
    _bW_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "assert", [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]],
       "@[<hov2>assert@ %a@]"],
    _bX_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "lazy", [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]],
       "@[<hov2>lazy@ %a@]"],
    _bY_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         "(!poly!",
         [17,
          [0, cst$44, 1, 0],
          [15,
           [17, [0, cst$44, 1, 0], [11, cst$51, [15, [12, 41, [17, 0, 0]]]]]]]]],
       "@[<hov2>(!poly!@ %a@ : %a)@]"],
    _bZ_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "!poly!", [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]],
       "@[<hov2>!poly!@ %a@]"],
    _b0_ =
      [0,
       [11,
        cst$42,
        [15, [12, 41, [17, [0, cst$67, 0, 0], [15, [12, 41, 0]]]]]],
       "((%a)@,%a)"],
    _b1_ = [0, [15, 0], cst_a$0],
    _b2_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15, [12, 46, [15, [17, 0, 0]]]]],
       "@[<hov2>%a.%a@]"],
    _b3_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15, [12, 35, [2, 0, [17, 0, 0]]]]],
       "@[<hov2>%a#%s@]"],
    _b4_ = [0, [0, [12, 44, [17, [0, cst$41, 1, 0], 0]], cst$53]],
    _b5_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [12, 40, [15, [12, 41, [17, 0, 0]]]]],
       "@[<hov2>(%a)@]"],
    _b6_ = [0, [11, cst$69, 0], cst$69],
    _b7_ = [0, [11, cst$68, 0], cst$68],
    _b8_ = [0, cst_astlib_pprintast_ml, 867, 15],
    _b9_ = [0, [0, [12, 59, [17, [0, cst$41, 1, 0], 0]], cst$59]],
    _b__ =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [12, 91, [15, [12, 93, [17, 0, 0]]]]],
       "@[<hv0>[%a]@]"],
    _b$_ = [0, [12, 96, [2, 0, 0]], cst_s$0],
    _ca_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15,
         [17,
          [0, cst$41, 1, 0],
          [12, 61, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<hov2>%a@;=@;%a@]"],
    _cb_ =
      [0,
       [18, [1, [0, [11, cst_hov2, 0], cst_hov2]], [15, [17, 0, 0]]],
       cst_hov2_a],
    _cc_ = [0, [0, [12, 59, [17, [0, cst$41, 1, 0], 0]], cst$59]],
    _cd_ = [0, [0, [11, " with", [17, [0, cst$41, 1, 0], 0]], " with@;"]],
    _ce_ =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [12,
          123,
          [17,
           [0, cst$41, 1, 0],
           [15, [15, [17, 0, [17, [0, cst$41, 1, 0], [12, 125, [17, 0, 0]]]]]]]]]],
       "@[<hv0>@[<hv2>{@;%a%a@]@;}@]"],
    _cf_ = [0, [0, [12, 59, 0], cst$56]],
    _cg_ =
      [0,
       [18,
        [1, [0, [11, cst_0, 0], cst_0]],
        [18,
         [1, [0, [11, cst_2, 0], cst_2]],
         [11, cst$60, [15, [11, cst$61, [17, 0, [17, 0, 0]]]]]]],
       "@[<0>@[<2>[|%a|]@]@]"],
    _ch_ = [0, [12, 40, [15, [11, cst$71, [15, [12, 41, 0]]]]], "(%a : %a)"],
    _ci_ = [0, [0, [12, 32, 0], " "]],
    _cj_ = [0, [0, [11, cst$71, 0], cst$71]],
    _ck_ =
      [0,
       [12, 40, [15, [15, [11, " :> ", [15, [12, 41, 0]]]]]],
       "(%a%a :> %a)"],
    _cl_ =
      [0,
       [11, cst_module, [17, [0, cst$41, 1, 0], [15, [12, 41, 0]]]],
       "(module@;%a)"],
    _cm_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         91,
         [17, 5, [2, 0, [17, [0, cst$44, 1, 0], [15, [12, 93, [17, 0, 0]]]]]]]],
       "@[<2>[@@%s@ %a]@]"],
    _cn_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         91,
         [17,
          5,
          [17, 5, [2, 0, [17, [0, cst$44, 1, 0], [15, [12, 93, [17, 0, 0]]]]]]]]],
       "@[<2>[@@@@%s@ %a]@]"],
    _co_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         91,
         [17,
          5,
          [17,
           5,
           [17,
            5,
            [2, 0, [17, [0, cst$44, 1, 0], [15, [12, 93, [17, 0, 0]]]]]]]]]],
       "@[<2>[@@@@@@%s@ %a]@]"],
    _cp_ =
      [0,
       [17, [0, cst$44, 1, 0], [12, 61, [17, [0, cst$44, 1, 0], [15, 0]]]],
       cst_a$2],
    _cq_ =
      [0,
       [18, [1, [0, [11, cst_hov2, 0], cst_hov2]], [15, [15, [17, 0, 0]]]],
       "@[<hov2>%a%a@]"],
    _cr_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         91,
         [12, 37, [2, 0, [17, [0, cst$44, 1, 0], [15, [12, 93, [17, 0, 0]]]]]]]],
       "@[<2>[%%%s@ %a]@]"],
    _cs_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [12,
         91,
         [12,
          37,
          [12,
           37,
           [2, 0, [17, [0, cst$44, 1, 0], [15, [12, 93, [17, 0, 0]]]]]]]]],
       "@[<2>[%%%%%s@ %a]@]"],
    _ct_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst_exception, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]],
       "@[<hov2>exception@ %a@]%a"],
    _cu_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, cst_inherit, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]],
       "@[<2>inherit@ %a@]%a"],
    _cv_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "val ",
         [17,
          [0, cst$44, 1, 0],
          [15,
           [15,
            [2,
             0,
             [17,
              [0, cst$44, 1, 0],
              [12, 58, [17, [0, cst$44, 1, 0], [15, partial$12]]]]]]]]]],
       "@[<2>val @ %a%a%s@ :@ %a@]%a"],
    _cw_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "method ",
         [15,
          [12,
           32,
           [15,
            [2,
             0,
             [11, cst$72, [17, [0, cst$41, 1, 0], [15, [17, 0, partial$13]]]]]]]]]],
       "@[<2>method %a %a%s :@;%a@]%a"],
    _cx_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_constraint,
         [17,
          [0, cst$44, 1, 0],
          [15,
           [17,
            [0, cst$44, 1, 0],
            [12, 61, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<2>constraint@ %a@ =@ %a@]%a"],
    _cy_ = [0, [0, [17, [0, cst$41, 1, 0], 0], cst$41]],
    _cz_ = [0, [11, cst$73, [15, [12, 41, 0]]], cst_a$3],
    _cA_ =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [11,
          cst_object,
          [18,
           [1, [0, [11, cst_1, 0], cst_1]],
           [15,
            [17,
             0,
             [17,
              [0, cst$44, 1, 0],
              [15, [17, 0, [17, partial$15, partial$14]]]]]]]]]],
       "@[<hv0>@[<hv2>object@[<1>%a@]@ %a@]@ end@]"],
    _cB_ = [0, [0, [12, 44, 0], cst$40]],
    _cC_ = [0, [12, 91, [15, [12, 93, [17, [0, cst$44, 1, 0], 0]]]], cst_a$4],
    _cD_ = [0, [15, [15, [15, 0]]], "%a%a%a"],
    _cE_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [17,
          [0, cst$41, 1, 0],
          [11, cst$43, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]],
       cst_2_a_a],
    _cF_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_let_open,
         [2,
          0,
          [12,
           32,
           [15, [11, cst_in, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]]]],
       cst_2_let_open_s_a_in_a],
    _cG_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2,
         0,
         [12,
          32,
          [15,
           [15,
            [2,
             0,
             [17,
              [0, cst$44, 1, 0],
              [12, 61, [17, [0, cst$44, 1, 0], [15, partial$16]]]]]]]]]],
       "@[<2>%s %a%a%s@ =@ %a@]%a"],
    cst_and = cst_and$4,
    _cH_ = [0, [0, [17, [0, cst$67, 0, 0], 0], cst$67]],
    cst_class_type = cst_class_type$1,
    _cI_ =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [17, [0, cst$67, 0, 0], [15, [17, 0, 0]]]]],
       cst_v_a_a],
    cst_class_type$0 = cst_class_type$1,
    _cJ_ = [0, [17, [0, cst$44, 1, 0], [11, "as ", [2, 0, 0]]], "@ as %s"],
    _cK_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_inherit,
         [17,
          [0, cst$44, 1, 0],
          [2, 0, [17, [0, cst$44, 1, 0], [15, [15, [17, 0, [15, 0]]]]]]]]],
       "@[<2>inherit@ %s@ %a%a@]%a"],
    _cL_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "val virtual ",
         [15,
          [2,
           0,
           [11, cst$72, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]]]]],
       "@[<2>val virtual %a%s :@ %a@]%a"],
    _cM_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_val$0,
         [2,
          0,
          [12,
           32,
           [15,
            [2,
             0,
             [11, cst$70, [17, [0, cst$41, 1, 0], [15, [17, 0, partial$17]]]]]]]]]],
       "@[<2>val%s %a%s =@;%a@]%a"],
    _cN_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "method virtual ",
         [15,
          [12,
           32,
           [2,
            0,
            [11, cst$72, [17, [0, cst$41, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<2>method virtual %a %s :@;%a@]%a"],
    _cO_ =
      [0,
       [2,
        0,
        [11,
         cst$72,
         [17,
          [0, cst$41, 1, 0],
          [15, [12, 61, [17, [0, cst$41, 1, 0], [15, 0]]]]]]],
       "%s :@;%a=@;%a"],
    _cP_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, "method", [2, 0, [12, 32, [15, [15, [17, 0, [15, 0]]]]]]]],
       "@[<2>method%s %a%a@]%a"],
    _cQ_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         "constraint ",
         [15, [11, cst$70, [17, [0, cst$41, 1, 0], [15, [17, 0, [15, 0]]]]]]]],
       "@[<2>constraint %a =@;%a@]%a"],
    _cR_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, "initializer", [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]],
       "@[<2>initializer@ %a@]%a"],
    _cS_ = [0, [11, cst$73, [15, [12, 41, 0]]], cst_a$3],
    _cT_ = [0, [12, 32, [15, 0]], " %a"],
    _cU_ =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [11,
          cst_object,
          [15,
           [17,
            [0, cst$41, 1, 0],
            [15, [17, 0, [17, [0, cst$41, 1, 0], [11, cst_end, [17, 0, 0]]]]]]]]]],
       "@[<hv0>@[<hv2>object%a@;%a@]@;end@]"],
    _cV_ = [0, [0, [12, 44, 0], cst$40]],
    _cW_ = [0, [12, 91, [15, [12, 93, [17, [0, cst$44, 1, 0], 0]]]], cst_a$4],
    _cX_ = [0, [15, [15, 0]], cst_a_a$0],
    _cY_ =
      [0,
       [11,
        cst_fun,
        [17,
         [0, cst$44, 1, 0],
         [15,
          [17,
           [0, cst$44, 1, 0],
           [11, cst$43, [17, [0, cst$44, 1, 0], [15, 0]]]]]]],
       "fun@ %a@ ->@ %a"],
    _cZ_ =
      [0,
       [11,
        cst$42,
        [15, [12, 41, [17, [0, cst$44, 1, 0], [15, [12, 41, 0]]]]]],
       "((%a)@ %a)"],
    _c0_ =
      [0,
       [15,
        [17,
         [0, cst$44, 1, 0],
         [11, cst_in$0, [17, [0, cst$44, 1, 0], [15, 0]]]]],
       "%a@ in@ %a"],
    _c1_ =
      [0,
       [12,
        40,
        [15,
         [17,
          [0, cst$44, 1, 0],
          [12, 58, [17, [0, cst$44, 1, 0], [15, [12, 41, 0]]]]]]],
       "(%a@ :@ %a)"],
    _c2_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_let_open,
         [2,
          0,
          [12,
           32,
           [15, [11, cst_in, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]]]],
       cst_2_let_open_s_a_in_a],
    _c3_ = [0, [11, cst$42, [15, [12, 41, [15, [12, 41, 0]]]]], cst_a_a],
    _c4_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_functor,
         [17,
          [0, cst$44, 1, 0],
          [12,
           40,
           [2,
            0,
            [17,
             [0, cst$44, 1, 0],
             [12, 58, [17, [0, cst$44, 1, 0], [15, [12, 41, partial$18]]]]]]]]]],
       "@[<hov2>functor@ (%s@ :@ %a)@ ->@ %a@]"],
    _c5_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15,
         [17,
          [0, cst$44, 1, 0],
          [11, cst$43, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<hov2>%a@ ->@ %a@]"],
    _c6_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, "functor () ->", [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]],
       "@[<hov2>functor () ->@ %a@]"],
    _c7_ =
      [0,
       [0,
        [17, [0, cst$44, 1, 0], [11, cst_and$4, [17, [0, cst$44, 1, 0], 0]]],
        cst_and$5]],
    _c8_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [15,
         [17,
          [0, cst$44, 1, 0],
          [11, cst_with, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[<hov2>%a@ with@ %a@]"],
    _c9_ = [0, [11, cst$42, [15, [12, 41, [15, [12, 41, 0]]]]], cst_a_a],
    _c__ = [0, [0, [12, 41, 0], cst$57]],
    _c$_ = [0, [0, [12, 40, 0], cst$52]],
    _da_ = [0, [0, [12, 44, 0], cst$40]],
    _db_ =
      [0,
       [11,
        cst_type$3,
        [17,
         [0, cst$44, 1, 0],
         [15, [12, 32, [15, [11, cst$70, [17, [0, cst$44, 1, 0], [15, 0]]]]]]]],
       "type@ %a %a =@ %a"],
    _dc_ =
      [0,
       [11,
        cst_module$1,
        [15, [11, cst$70, [17, [0, cst$44, 1, 0], [15, 0]]]]],
       "module %a =@ %a"],
    _dd_ =
      [0,
       [11,
        cst_module_type,
        [15, [11, cst$70, [17, [0, cst$44, 1, 0], [15, 0]]]]],
       "module type %a =@ %a"],
    _de_ =
      [0,
       [11,
        cst_module_type,
        [15, [11, cst$74, [17, [0, cst$44, 1, 0], [15, 0]]]]],
       "module type %a :=@ %a"],
    _df_ = [0, [0, [12, 41, 0], cst$57]],
    _dg_ = [0, [0, [12, 40, 0], cst$52]],
    _dh_ = [0, [0, [12, 44, 0], cst$40]],
    _di_ =
      [0,
       [11,
        cst_type$3,
        [17,
         [0, cst$44, 1, 0],
         [15, [12, 32, [15, [11, cst$74, [17, [0, cst$44, 1, 0], [15, 0]]]]]]]],
       "type@ %a %a :=@ %a"],
    _dj_ =
      [0,
       [11,
        cst_module$1,
        [15, [11, cst$74, [17, [0, cst$44, 1, 0], [15, 0]]]]],
       "module %a :=@ %a"],
    _dk_ = [0, [15, 0], cst_a$0],
    _dl_ =
      [0,
       [18,
        [1, [0, [11, cst_hv0, 0], cst_hv0]],
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [11,
          "sig",
          [17,
           [0, cst$44, 1, 0],
           [15, [17, 0, [17, [0, cst$44, 1, 0], [11, cst_end, [17, 0, 0]]]]]]]]],
       "@[<hv0>@[<hv2>sig@ %a@]@ end@]"],
    _dm_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module$0,
         [17,
          [0, cst$44, 1, 0],
          [11,
           cst_type$3,
           [17,
            [0, cst$44, 1, 0],
            [11, cst_of, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]]]]]],
       "@[<hov2>module@ type@ of@ %a@]"],
    _dn_ = [0, [11, "(module ", [15, [12, 41, 0]]], "(module %a)"],
    _do_ = [0, [0, [17, 3, 0], cst$75]],
    cst_val = cst_val$0,
    _dp_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2,
         0,
         [17,
          [0, cst$44, 1, 0],
          [15,
           [17,
            [0, cst$44, 1, 0],
            [12, 58, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<2>%s@ %a@ :@ %a@]%a"],
    cst_external = cst_external$0,
    _dq_ =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         cst_module$0,
         [17,
          [0, cst$44, 1, 0],
          [2,
           0,
           [17,
            [0, cst$44, 1, 0],
            [12, 58, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<hov>module@ %s@ :@ %a@]%a"],
    _dr_ =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         cst_module$0,
         [17,
          [0, cst$44, 1, 0],
          [2,
           0,
           [17,
            [0, cst$44, 1, 0],
            [12, 61, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<hov>module@ %s@ =@ %a@]%a"],
    _ds_ =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         cst_module$0,
         [17,
          [0, cst$44, 1, 0],
          [2,
           0,
           [17,
            [0, cst$44, 1, 0],
            [11, cst$76, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<hov>module@ %s@ :=@ %a@]%a"],
    _dt_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module$0,
         [17,
          [0, cst$44, 1, 0],
          [11,
           cst_rec,
           [17,
            [0, cst$44, 1, 0],
            [2,
             0,
             [12, 58, [17, [0, cst$44, 1, 0], [15, [17, 0, partial$20]]]]]]]]]],
       "@[<hov2>module@ rec@ %s:@ %a@]%a"],
    _du_ =
      [0,
       [17,
        [0, cst$44, 1, 0],
        [18,
         [1, [0, [11, cst_hov2, 0], cst_hov2]],
         [11,
          cst_and$4,
          [17,
           [0, cst$44, 1, 0],
           [2, 0, [12, 58, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@ @[<hov2>and@ %s:@ %a@]%a"],
    _dv_ =
      [0,
       [17, [0, cst$44, 1, 0], [12, 61, [17, [0, cst$44, 1, 0], [15, 0]]]],
       cst_a$2],
    _dw_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module$0,
         [17,
          [0, cst$44, 1, 0],
          [11,
           cst_type$3,
           [17, [0, cst$44, 1, 0], [2, 0, [15, [17, 0, [15, 0]]]]]]]]],
       cst_hov2_module_type_s_a_a],
    _dx_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module$0,
         [17,
          [0, cst$44, 1, 0],
          [11,
           cst_type$3,
           [17,
            [0, cst$44, 1, 0],
            [2,
             0,
             [17,
              [0, cst$44, 1, 0],
              [11, cst$76, [17, [0, cst$44, 1, 0], [15, partial$21]]]]]]]]]],
       "@[<hov2>module@ type@ %s@ :=@ %a@]%a"],
    _dy_ = [0, cst_astlib_pprintast_ml, 1236, 30],
    _dz_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_open,
         [2, 0, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]]],
       "@[<hov2>open%s@ %a@]%a"],
    _dA_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst_include, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]],
       cst_hov2_include_a_a],
    _dB_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2,
         0,
         [12,
          32,
          [15,
           [15,
            [2,
             0,
             [17,
              [0, cst$41, 1, 0],
              [12, 58, [17, [0, cst$41, 1, 0], [15, partial$19]]]]]]]]]],
       "@[<2>%s %a%a%s@;:@;%a@]%a"],
    cst_and$0 = cst_and$4,
    _dC_ = [0, [0, [17, [0, cst$67, 0, 0], 0], cst$67]],
    cst_class = cst_class$3,
    _dD_ =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [17, [0, cst$67, 0, 0], [15, [17, 0, 0]]]]],
       cst_v_a_a],
    cst_class$0 = cst_class$3,
    _dE_ = [0, [15, 0], cst_a$0],
    _dF_ = [0, [0, [17, 3, 0], cst$75]],
    _dG_ =
      [0,
       [18,
        [1, [0, [11, cst_hv2, 0], cst_hv2]],
        [11,
         "struct",
         [17,
          [0, cst$41, 1, 0],
          [18,
           [1, [0, [11, cst_0, 0], cst_0]],
           [15, [17, 0, [17, [0, cst_1_2, 1, -2], [11, cst_end, [17, 0, 0]]]]]]]]],
       "@[<hv2>struct@;@[<0>%a@]@;<1 -2>end@]"],
    _dH_ =
      [0,
       [11,
        cst_functor,
        [17,
         [0, cst$44, 1, 0],
         [12,
          40,
          [2,
           0,
           [17,
            [0, cst$44, 1, 0],
            [12,
             58,
             [17,
              [0, cst$44, 1, 0],
              [15, [12, 41, [17, partial$23, partial$22]]]]]]]]]],
       "functor@ (%s@ :@ %a)@;->@;%a"],
    _dI_ =
      [0,
       [11,
        "functor ()",
        [17,
         [0, cst$41, 1, 0],
         [11, cst$43, [17, [0, cst$41, 1, 0], [15, 0]]]]],
       "functor ()@;->@;%a"],
    _dJ_ = [0, [12, 40, [15, [11, ")(", [15, [12, 41, 0]]]]], "(%a)(%a)"],
    _dK_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [12,
         40,
         [15,
          [17,
           [0, cst$44, 1, 0],
           [12, 58, [17, [0, cst$44, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]]]],
       "@[<hov2>(%a@ :@ %a)@]"],
    _dL_ =
      [0,
       [11, "(val", [17, [0, cst$44, 1, 0], [15, [12, 41, 0]]]],
       "(val@ %a)"],
    _dM_ = [0, [11, cst$42, [15, [12, 41, [15, [12, 41, 0]]]]], cst_a_a],
    _dN_ = [0, [0, [17, 3, 0], cst$75]],
    _dO_ =
      [0,
       [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [17, 0, [15, 0]]]],
       "@[<2>%a@]%a"],
    _dP_ = [0, [12, 58, [17, [0, cst$44, 1, 0], 0]], cst$77],
    _dQ_ = [0, [12, 58, [17, [0, cst$44, 1, 0], 0]], cst$77],
    _dR_ = [0, [12, 63, [17, [0, cst$44, 1, 0], 0]], cst$78],
    _dS_ = [0, [11, cst_when, 0], cst_when],
    _dT_ = [0, [12, 63, [17, [0, cst$44, 1, 0], 0]], cst$78],
    _dU_ = [0, [12, 61, [17, [0, cst$41, 1, 0], [15, 0]]], cst_a$5],
    _dV_ = [0, [15, [17, [0, cst$44, 1, 0], [15, 0]]], cst_a_a$1],
    _dW_ = [0, [15, [17, [0, cst$44, 1, 0], [15, 0]]], cst_a_a$1],
    _dX_ =
      [0,
       [11,
        cst_type$2,
        [17,
         [0, cst$44, 1, 0],
         [2, 0, [12, 41, [17, [0, cst$44, 1, 0], [15, 0]]]]]],
       "(type@ %s)@ %a"],
    _dY_ = [0, [12, 61, [17, [0, cst$41, 1, 0], [15, 0]]], cst_a$5],
    _dZ_ = [0, [0, [17, [0, cst$41, 1, 0], 0], cst$41]],
    _d0_ =
      [0,
       [15,
        [17,
         [0, cst$41, 1, 0],
         [11,
          ": type",
          [17,
           [0, cst$41, 1, 0],
           [15,
            [12,
             46,
             [17,
              [0, cst$41, 1, 0],
              [15, [17, [0, cst$41, 1, 0], [12, 61, partial$24]]]]]]]]]],
       "%a@;: type@;%a.@;%a@;=@;%a"],
    _d1_ =
      [0,
       [15,
        [17,
         [0, cst$41, 1, 0],
         [11,
          cst$51,
          [15,
           [17, [0, cst$41, 1, 0], [12, 61, [17, [0, cst$41, 1, 0], [15, 0]]]]]]]],
       cst_a_a_a],
    _d2_ =
      [0,
       [15,
        [17, [0, cst$41, 1, 0], [12, 61, [17, [0, cst$41, 1, 0], [15, 0]]]]],
       cst_a_a$2],
    _d3_ = [0, [15, [17, [0, cst$44, 1, 0], [15, 0]]], cst_a_a$1],
    _d4_ =
      [0,
       [12,
        40,
        [15,
         [17,
          [0, cst$41, 1, 0],
          [12,
           58,
           [17,
            [0, cst$41, 1, 0],
            [15,
             [12,
              41,
              [17, [0, cst$41, 1, 0], [12, 61, [17, partial$26, partial$25]]]]]]]]]],
       "(%a@;:@;%a)@;=@;%a"],
    _d5_ =
      [0,
       [15,
        [17,
         [0, cst$41, 1, 0],
         [12,
          58,
          [17,
           [0, cst$41, 1, 0],
           [15,
            [17,
             [0, cst$41, 1, 0],
             [12, 61, [17, [0, cst$41, 1, 0], [15, 0]]]]]]]]],
       "%a@;:@;%a@;=@;%a"],
    _d6_ =
      [0,
       [15,
        [17, [0, cst$41, 1, 0], [12, 61, [17, [0, cst$41, 1, 0], [15, 0]]]]],
       cst_a_a$2],
    _d7_ =
      [0,
       [15,
        [17,
         [0, cst$41, 1, 0],
         [11,
          cst$51,
          [15,
           [17, [0, cst$41, 1, 0], [12, 61, [17, [0, cst$41, 1, 0], [15, 0]]]]]]]],
       cst_a_a_a],
    _d8_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2, 0, [12, 32, [15, [15, [17, 0, [15, 0]]]]]]],
       "@[<2>%s %a%a@]%a"],
    cst_and$1 = cst_and$4,
    _d9_ = [0, [0, [17, [0, cst$67, 0, 0], 0], cst$67]],
    cst_let = cst_let$1,
    _d__ =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [17, [0, cst$67, 0, 0], [15, [17, 0, 0]]]]],
       cst_v_a_a],
    cst_let$0 = cst_let$1,
    _d$_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2,
         0,
         [12,
          32,
          [15,
           [17,
            [0, cst$41, 1, 0],
            [12, 61, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]]]],
       "@[<2>%s %a@;=@;%a@]"],
    _ea_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2, 0, [12, 32, [2, 0, [17, 0, 0]]]]],
       "@[<2>%s %s@]"],
    _eb_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst$79, [15, [17, 0, [15, 0]]]]],
       "@[<hov2>;;%a@]%a"],
    _ec_ =
      [0, [18, [1, [0, [11, cst_2, 0], cst_2]], [15, [17, 0, 0]]], cst_2_a],
    _ed_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_external$0,
         [17,
          [0, cst$44, 1, 0],
          [15,
           [17,
            [0, cst$44, 1, 0],
            [12, 58, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<hov2>external@ %a@ :@ %a@]%a"],
    _ee_ = [0, cst_astlib_pprintast_ml, 1426, 25],
    _ef_ = [0, [12, 40, [2, 0, [12, 58, [15, [12, 41, 0]]]]], "(%s:%a)"],
    _eg_ = [0, [11, cst$68, 0], cst$68],
    _eh_ = [0, [11, cst$70, [17, [0, cst$44, 1, 0], [15, 0]]], " =@ %a"],
    _ei_ =
      [0,
       [11,
        cst$72,
        [17,
         [0, cst$41, 1, 0],
         [15,
          [17,
           [0, cst$41, 1, 0],
           [12, 61, [17, [0, cst$41, 1, 0], [15, [17, [0, cst$41, 1, 0], 0]]]]]]]],
       " :@;%a@;=@;%a@;"],
    _ej_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst_module$1, [2, 0, [15, [17, 0, [15, 0]]]]]],
       "@[<hov2>module %s%a@]%a"],
    _ek_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [17,
         [0, cst$44, 1, 0],
         [11,
          cst_and$4,
          [17,
           [0, cst$44, 1, 0],
           [2,
            0,
            [17,
             [0, cst$44, 1, 0],
             [12, 61, [17, [0, cst$44, 1, 0], [15, [17, 0, partial$28]]]]]]]]]],
       "@[<hov2>@ and@ %s@ =@ %a@]%a"],
    _el_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [17,
         [0, cst$44, 1, 0],
         [11,
          cst_and$4,
          [17,
           [0, cst$44, 1, 0],
           [2,
            0,
            [12,
             58,
             [15,
              [17, [0, cst$44, 1, 0], [12, 61, [17, partial$30, partial$29]]]]]]]]]],
       "@[<hov2>@ and@ %s:%a@ =@ %a@]%a"],
    _em_ =
      [0,
       [18,
        [1, [0, [11, cst_hv, 0], cst_hv]],
        [18,
         [1, [0, [11, cst_hov2, 0], cst_hov2]],
         [11,
          cst_module$0,
          [17,
           [0, cst$44, 1, 0],
           [11,
            cst_rec,
            [17,
             [0, cst$44, 1, 0],
             [2,
              0,
              [17, [0, cst$44, 1, 0], [12, 61, [17, partial$32, partial$31]]]]]]]]]],
       "@[<hv>@[<hov2>module@ rec@ %s@ =@ %a@]%a@ %a@]"],
    _en_ =
      [0,
       [18,
        [1, [0, [11, cst_hv, 0], cst_hv]],
        [18,
         [1, [0, [11, cst_hov2, 0], cst_hov2]],
         [11,
          cst_module$0,
          [17,
           [0, cst$44, 1, 0],
           [11,
            cst_rec,
            [17,
             [0, cst$44, 1, 0],
             [2, 0, [12, 58, [15, [17, partial$34, partial$33]]]]]]]]]],
       "@[<hv>@[<hov2>module@ rec@ %s:%a@ =@ %a@]%a@ %a@]"],
    _eo_ = [0, cst_astlib_pprintast_ml, 1546, 13],
    _ep_ =
      [0,
       [17, [0, cst$44, 1, 0], [12, 61, [17, [0, cst$44, 1, 0], [15, 0]]]],
       cst_a$2],
    _eq_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11,
         cst_module$0,
         [17,
          [0, cst$44, 1, 0],
          [11,
           cst_type$3,
           [17, [0, cst$44, 1, 0], [2, 0, [15, [17, 0, [15, 0]]]]]]]]],
       cst_hov2_module_type_s_a_a],
    _er_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_open,
         [2, 0, [17, [0, cst$41, 1, 0], [15, [17, 0, [15, 0]]]]]]],
       "@[<2>open%s@;%a@]%a"],
    _es_ =
      [0,
       [11, cst$51, [18, [1, [0, 0, cst$48]], [15, [17, 0, [12, 32, 0]]]]],
       ": @[%a@] "],
    _et_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2,
         0,
         [12,
          32,
          [15, [15, [2, 0, [12, 32, [15, [15, [12, 61, partial$27]]]]]]]]]],
       "@[<2>%s %a%a%s %a%a=@;%a@]%a"],
    cst_and$2 = cst_and$4,
    _eu_ = [0, [0, [17, [0, cst$67, 0, 0], 0], cst$67]],
    cst_class$1 = cst_class$3,
    _ev_ =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [17, [0, cst$67, 0, 0], [15, [17, 0, 0]]]]],
       cst_v_a_a],
    cst_class$2 = cst_class$3,
    _ew_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [11, cst_include, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]],
       cst_hov2_include_a_a],
    _ex_ = [0, [2, 0, [2, 0, [15, 0]]], "%s%s%a"],
    _ey_ = [0, [0, [12, 41, 0], cst$57]],
    _ez_ = [0, [0, [12, 40, 0], cst$52]],
    _eA_ = [0, [0, [12, 44, [17, [0, cst$41, 1, 0], 0]], cst$53]],
    _eB_ = [0, [15, [12, 32, 0]], "%a "],
    _eC_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [2, 0, [12, 32, [15, [15, [2, 0, [2, 0, [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<2>%s %a%a%s%s%a@]%a"],
    cst_and$3 = cst_and$4,
    _eD_ = [0, [0, [17, [0, cst$67, 0, 0], 0], cst$67]],
    cst_type = cst_type$3,
    _eE_ =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [17, [0, cst$67, 0, 0], [15, [17, 0, 0]]]]],
       cst_v_a_a],
    cst_type$0 = cst_type$3,
    _eF_ = [0, cst_astlib_pprintast_ml, 1571, 10],
    _eG_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [15,
         [2,
          0,
          [12,
           58,
           [17,
            [0, cst$41, 1, 0],
            [15, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]]]],
       "@[<2>%a%s:@;%a@;%a@]"],
    _eH_ = [0, [0, [12, 59, [17, 3, 0]], ";@\n"]],
    _eI_ = [0, [12, 123, [17, 3, [15, [12, 125, 0]]]], "{@\n%a}"],
    _eJ_ = [0, [17, [0, cst$41, 1, 0], [11, cst_private, 0]], "@;private"],
    _eK_ = [0, [16, [17, [0, cst$41, 1, 0], [15, 0]]], "%t@;%a"],
    _eL_ = [0, [17, [0, cst$41, 1, 0], [15, 0]], "@;%a"],
    _eM_ = [0, [12, 124, [17, [0, cst$41, 1, 0], 0]], "|@;"],
    _eN_ = [0, [17, [0, cst$41, 1, 0], [12, 61, 0]], "@;="],
    _eO_ =
      [0, [16, [16, [17, [0, cst$41, 1, 0], [11, cst$50, 0]]]], "%t%t@;.."],
    _eP_ = [0, [11, cst$47, 0], cst$47],
    _eQ_ = [0, [0, [17, 3, 0], cst$75]],
    _eR_ = [0, [17, 3, [15, 0]], "@\n%a"],
    _eS_ = [0, [16, [16, [15, 0]]], "%t%t%a"],
    _eT_ = [0, [16, [16, [17, [0, cst$41, 1, 0], [15, 0]]]], "%t%t@;%a"],
    _eU_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [17,
         [0, cst$44, 1, 0],
         [11,
          cst_constraint,
          [17,
           [0, cst$44, 1, 0],
           [15,
            [17,
             [0, cst$44, 1, 0],
             [12, 61, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]]]]]]],
       "@[<hov2>@ constraint@ %a@ =@ %a@]"],
    _eV_ = [0, [16, [16, [16, 0]]], "%t%t%t"],
    _eW_ =
      [0, [17, 3, [12, 124, [17, [0, cst$41, 1, 0], [15, 0]]]], "@\n|@;%a"],
    _eX_ = [0, [0, 0, cst$48]],
    _eY_ = [0, [0, [12, 41, 0], cst$57]],
    _eZ_ = [0, [0, [12, 40, 0], cst$52]],
    _e0_ = [0, [0, [12, 44, 0], cst$40]],
    _e1_ = [0, [15, [17, [0, cst$41, 1, 0], 0]], cst_a$1],
    _e2_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_type$1,
         [15,
          [15,
           [11, " += ", [15, [17, [0, cst$44, 1, 0], [15, [17, 0, [15, 0]]]]]]]]]],
       "@[<2>type %a%a += %a@ %a@]%a"],
    _e3_ = [0, [0, [17, [0, cst$41, 1, 0], 0], cst$41]],
    _e4_ =
      [0,
       [15, [17, [0, cst$41, 1, 0], [12, 46, [17, [0, cst$41, 1, 0], 0]]]],
       cst_a],
    _e5_ =
      [0,
       [0,
        [17, [0, cst$41, 1, 0], [12, 42, [17, [0, cst$41, 1, 0], 0]]],
        cst$55]],
    _e6_ =
      [0,
       [15,
        [17,
         [0, cst$41, 1, 0],
         [11, cst$43, [17, [0, cst$41, 1, 0], [15, 0]]]]],
       cst_a_a$3],
    _e7_ =
      [0,
       [15,
        [17,
         [0, cst$41, 1, 0],
         [11, cst$43, [17, [0, cst$41, 1, 0], [15, 0]]]]],
       cst_a_a$3],
    _e8_ =
      [0,
       [2,
        0,
        [12,
         58,
         [17, [0, cst$41, 1, 0], [15, [15, [17, [0, cst$41, 1, 0], [15, 0]]]]]]],
       "%s:@;%a%a@;%a"],
    _e9_ =
      [0,
       [0,
        [17, [0, cst$41, 1, 0], [12, 42, [17, [0, cst$41, 1, 0], 0]]],
        cst$55]],
    _e__ =
      [0,
       [17, [0, cst$41, 1, 0], [11, cst_of, [17, [0, cst$41, 1, 0], [15, 0]]]],
       cst_of_a],
    _e$_ =
      [0,
       [17, [0, cst$41, 1, 0], [11, cst_of, [17, [0, cst$41, 1, 0], [15, 0]]]],
       cst_of_a],
    _fa_ = [0, [2, 0, [15, [17, [0, cst$41, 1, 0], [15, 0]]]], "%s%a@;%a"],
    _fb_ =
      [0,
       [2,
        0,
        [17,
         [0, cst$41, 1, 0],
         [12, 61, [17, [0, cst$41, 1, 0], [15, [15, 0]]]]]],
       "%s@;=@;%a%a"],
    _fc_ =
      [0,
       [0,
        [17, [0, cst$41, 1, 0], [11, "when", [17, [0, cst$41, 1, 0], 0]]],
        "@;when@;"]],
    _fd_ =
      [0,
       [17,
        [0, cst$41, 1, 0],
        [11,
         cst$45,
         [18,
          [1, [0, [11, cst_2, 0], cst_2]],
          [15,
           [15,
            [17,
             [0, cst$41, 1, 0],
             [11, cst$43, [17, [0, cst$41, 1, 0], [15, [17, 0, 0]]]]]]]]]],
       "@;| @[<2>%a%a@;->@;%a@]"],
    _fe_ = [0, [0, 0, cst$48]],
    _ff_ = [0, [12, 126, [2, 0, 0]], "~%s"],
    _fg_ = [0, [12, 126, [2, 0, [12, 58, [15, 0]]]], "~%s:%a"],
    _fh_ = [0, [12, 63, [2, 0, 0]], "?%s"],
    _fi_ = [0, [12, 63, [2, 0, [12, 58, [15, 0]]]], cst_s_a],
    _fj_ = [0, [17, [0, cst$44, 1, 0], [3, 0, 0]], "@ %S"],
    _fk_ = [0, [17, [0, cst$44, 1, 0], [2, 0, [0, 0]]], "@ %s%c"],
    _fl_ = [0, [17, [0, cst$44, 1, 0], [2, 0, 0]], cst_s$1],
    _fm_ = [0, [17, [0, cst$44, 1, 0], [15, 0]], "@ %a"],
    _fn_ = [0, [17, [0, cst$44, 1, 0], [2, 0, 0]], cst_s$1],
    _fo_ =
      [0,
       [18, [1, [0, [11, cst_hov0, 0], cst_hov0]], [15, [17, 0, 0]]],
       cst_hov0_a],
    _fp_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [12, 35, [2, 0, [17, [0, cst$44, 1, 0], [15, [17, 0, 0]]]]]],
       "@[<hov2>#%s@ %a@]"],
    _fq_ =
      [0,
       [18,
        [1, [0, [11, cst_hov2, 0], cst_hov2]],
        [12, 35, [2, 0, [17, 0, 0]]]],
       "@[<hov2>#%s@]"],
    _fr_ = [0, [18, [1, [0, 0, cst$48]], [15, [17, 0, 0]]], "@[%a@]"],
    _fs_ = [0, [11, cst$79, 0], cst$79];
   function under_semi(ctxt){return [0, ctxt[1], 1, ctxt[3]];}
   function list(sep, first, last, fu, f, xs){
    if(first) var x = first[1], first$0 = x; else var first$0 = _l_;
    if(last) var x$0 = last[1], last$0 = x$0; else var last$0 = _k_;
    if(sep) var x$1 = sep[1], sep$0 = x$1; else var sep$0 = _j_;
    if(! xs) return 0;
    if(! xs[2]){var x$3 = xs[1]; return caml_call2(fu, f, x$3);}
    caml_call2(pp, f, first$0);
    var param = xs;
    for(;;){
     if(! param)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
     var x$2 = param[1];
     if(! param[2]){caml_call2(fu, f, x$2); return caml_call2(pp, f, last$0);}
     var xs$0 = param[2];
     caml_call2(fu, f, x$2);
     caml_call2(pp, f, sep$0);
     param = xs$0;
    }
   }
   function option(first, last, fu, f, a){
    if(first) var x = first[1], first$0 = x; else var first$0 = _n_;
    if(last) var x$0 = last[1], last$0 = x$0; else var last$0 = _m_;
    if(! a) return 0;
    var x$1 = a[1];
    caml_call2(pp, f, first$0);
    caml_call2(fu, f, x$1);
    return caml_call2(pp, f, last$0);
   }
   function paren(_wA_, opt, b, fu, f, x){
    var first = _wA_ ? _wA_[1] : _r_, last = opt ? opt[1] : _q_;
    return b
            ? (caml_call2
               (pp, f, _o_),
              caml_call2(pp, f, first),
              caml_call2(fu, f, x),
              caml_call2(pp, f, last),
              caml_call2(pp, f, _p_))
            : caml_call2(fu, f, x);
   }
   function print_longident(ppf, param){
    switch(param[0]){
      case 0:
       var s = param[1]; return protect_ident(ppf, s);
      case 1:
       var
        txt = param[2],
        longprefix = param[1],
        format = needs_parens(txt) ? needs_spaces(txt) ? _f_ : _g_ : _h_;
       return caml_call5
               (Stdlib_Format[143],
                ppf,
                format,
                print_longident,
                longprefix,
                txt);
      default:
       var s$0 = param[2], y = param[1];
       return caml_call6
               (pp, ppf, _s_, print_longident, y, print_longident, s$0);
    }
   }
   function longident_loc(f, x){
    return caml_call4(pp, f, _t_, print_longident, x[1]);
   }
   function constant(f, param){
    switch(param[0]){
      case 0:
       var match = param[2], i = param[1];
       if(! match)
        return paren
                (0,
                 0,
                 first_is(45, i),
                 function(f){return caml_call2(pp, f, _v_);},
                 f,
                 i);
       var m = match[1];
       return paren
               (0,
                0,
                first_is(45, i),
                function(f, param){
                 var m = param[2], i = param[1];
                 return caml_call4(pp, f, _u_, i, m);
                },
                f,
                [0, i, m]);
      case 1:
       var i$0 = param[1]; return caml_call3(pp, f, _w_, i$0);
      case 2:
       var match$0 = param[3], i$1 = param[1];
       if(! match$0) return caml_call3(pp, f, _y_, i$1);
       var delim = match$0[1];
       return caml_call5(pp, f, _x_, delim, i$1, delim);
      default:
       var match$1 = param[2], i$2 = param[1];
       if(! match$1)
        return paren
                (0,
                 0,
                 first_is(45, i$2),
                 function(f){return caml_call2(pp, f, _A_);},
                 f,
                 i$2);
       var m$0 = match$1[1];
       return paren
               (0,
                0,
                first_is(45, i$2),
                function(f, param){
                 var m = param[2], i = param[1];
                 return caml_call4(pp, f, _z_, i, m);
                },
                f,
                [0, i$2, m$0]);
    }
   }
   function mutable_flag(f, param){return param ? caml_call2(pp, f, _B_) : 0;}
   function virtual_flag(f, param){return param ? 0 : caml_call2(pp, f, _C_);}
   function rec_flag(f, rf){return rf ? caml_call2(pp, f, _D_) : 0;}
   function nonrec_flag(f, rf){return rf ? 0 : caml_call2(pp, f, _E_);}
   function direction_flag(f, param){
    return param ? caml_call2(pp, f, _F_) : caml_call2(pp, f, _G_);
   }
   function private_flag(f, param){return param ? 0 : caml_call2(pp, f, _H_);}
   function constant_string(f, s){return caml_call3(pp, f, _I_, s);}
   function tyvar(ppf, s){
    if(2 <= caml_ml_string_length(s) && 39 === caml_string_get(s, 1))
     return caml_call3(Stdlib_Format[143], ppf, _J_, s);
    return caml_call3(Stdlib_Format[143], ppf, _K_, s);
   }
   function tyvar_loc(f, str){return tyvar(f, str[1]);}
   function string_quot(f, x){return caml_call3(pp, f, _L_, x);}
   function class_params_def(ctxt, f, l){
    if(! l) return 0;
    function _wt_(_wy_, _wz_){return type_param(ctxt, _wy_, _wz_);}
    var _wu_ = 0, _wv_ = 0;
    return caml_call4
            (pp,
             f,
             _O_,
             function(_ww_, _wx_){
              return list(_N_, _wv_, _wu_, _wt_, _ww_, _wx_);
             },
             l);
   }
   function type_with_label(ctxt, f, param){
    var c = param[2], label = param[1];
    if(typeof label === "number") return core_type1(ctxt, f, c);
    if(0 === label[0]){
     var s = label[1];
     return caml_call5
             (pp,
              f,
              _P_,
              s,
              function(_wr_, _ws_){return core_type1(ctxt, _wr_, _ws_);},
              c);
    }
    var s$0 = label[1];
    return caml_call5
            (pp,
             f,
             _Q_,
             s$0,
             function(_wp_, _wq_){return core_type1(ctxt, _wp_, _wq_);},
             c);
   }
   function core_type(ctxt, f, x){
    var x$0 = x;
    for(;;){
     if(0 !== x$0[4])
      return caml_call6
              (pp,
               f,
               _Y_,
               function(_wn_, _wo_){return core_type(ctxt, _wn_, _wo_);},
               [0, x$0[1], x$0[2], x$0[3], 0],
               function(_wl_, _wm_){return attributes(ctxt, _wl_, _wm_);},
               x$0[4]);
     var match = x$0[1];
     if(typeof match !== "number")
      switch(match[0]){
        case 1:
         var ct2 = match[3], ct1 = match[2], l = match[1];
         return caml_call6
                 (pp,
                  f,
                  _S_,
                  function(_wj_, _wk_){
                   return type_with_label(ctxt, _wj_, _wk_);
                  },
                  [0, l, ct1],
                  function(_wh_, _wi_){return core_type(ctxt, _wh_, _wi_);},
                  ct2);
        case 6:
         var s = match[2], ct = match[1];
         return caml_call6
                 (pp,
                  f,
                  _T_,
                  function(_wf_, _wg_){return core_type1(ctxt, _wf_, _wg_);},
                  ct,
                  tyvar,
                  s);
        case 8:
         var sl = match[1];
         if(sl){
          var ct$0 = match[2];
          return caml_call6
                  (pp,
                   f,
                   _X_,
                   function(f, l){
                    return caml_call4
                            (pp,
                             f,
                             _W_,
                             function(f, l){
                              if(! l) return 0;
                              var _wb_ = 0, _wc_ = 0;
                              return caml_call4
                                      (pp,
                                       f,
                                       _V_,
                                       function(_wd_, _we_){
                                        return list(_U_, _wc_, _wb_, tyvar_loc, _wd_, _we_);
                                       },
                                       l);
                             },
                             l);
                   },
                   sl,
                   function(_v$_, _wa_){return core_type(ctxt, _v$_, _wa_);},
                   ct$0);
         }
         var ct$1 = match[2];
         x$0 = ct$1;
         continue;
      }
     return caml_call4
             (pp,
              f,
              _R_,
              function(_v9_, _v__){return core_type1(ctxt, _v9_, _v__);},
              x$0);
    }
   }
   function core_type1(ctxt, f, x){
    if(0 !== x[4]) return core_type(ctxt, f, x);
    var match = x[1];
    if(typeof match === "number") return caml_call2(pp, f, _Z_);
    switch(match[0]){
      case 0:
       var s = match[1]; return tyvar(f, s);
      case 2:
       var
        l = match[1],
        _vh_ = function(_v7_, _v8_){return core_type1(ctxt, _v7_, _v8_);},
        _vi_ = 0,
        _vj_ = 0;
       return caml_call4
               (pp,
                f,
                _$_,
                function(_v5_, _v6_){
                 return list(___, _vj_, _vi_, _vh_, _v5_, _v6_);
                },
                l);
      case 3:
       var l$0 = match[2], li = match[1];
       return caml_call6
               (pp,
                f,
                _ae_,
                function(f, l){
                 if(! l) return 0;
                 if(l[2])
                  return list
                          (_ac_,
                           _ab_,
                           _aa_,
                           function(_v3_, _v4_){return core_type(ctxt, _v3_, _v4_);},
                           f,
                           l);
                 var x = l[1];
                 return caml_call4
                         (pp,
                          f,
                          _ad_,
                          function(_v1_, _v2_){return core_type1(ctxt, _v1_, _v2_);},
                          x);
                },
                l$0,
                longident_loc,
                li);
      case 4:
       var
        o = match[2],
        l$1 = match[1],
        core_field_type =
          function(f, x){
           var match = x[1];
           if(0 === match[0]){
            var ct = match[2], l = match[1];
            return caml_call7
                    (pp,
                     f,
                     _af_,
                     l[1],
                     function(_vZ_, _v0_){return core_type(ctxt, _vZ_, _v0_);},
                     ct,
                     function(_vX_, _vY_){return attributes(ctxt, _vX_, _vY_);},
                     x[3]);
           }
           var ct$0 = match[1];
           return caml_call4
                   (pp,
                    f,
                    _ag_,
                    function(_vV_, _vW_){return core_type(ctxt, _vV_, _vW_);},
                    ct$0);
          },
        field_var =
          function(f, param){
           return param
                   ? l$1 ? caml_call2(pp, f, _ah_) : caml_call2(pp, f, _ai_)
                   : 0;
          },
        _vk_ = 0,
        _vl_ = 0;
       return caml_call6
               (pp,
                f,
                _ak_,
                function(_vT_, _vU_){
                 return list(_aj_, _vl_, _vk_, core_field_type, _vT_, _vU_);
                },
                l$1,
                field_var,
                o);
      case 5:
       var
        l$2 = match[2],
        li$0 = match[1],
        _vm_ = function(_vR_, _vS_){return core_type(ctxt, _vR_, _vS_);};
       return caml_call6
               (pp,
                f,
                _ao_,
                function(_vP_, _vQ_){
                 return list(_an_, _am_, _al_, _vm_, _vP_, _vQ_);
                },
                l$2,
                longident_loc,
                li$0);
      case 7:
       var low = match[3], closed = match[2], l$3 = match[1];
       a:
       {
        if(l$3 && 0 !== l$3[1][1][0]){var first_is_inherit = 1; break a;}
        var first_is_inherit = 0;
       }
       var
        type_variant_helper =
          function(f, x){
           var match = x[1];
           if(0 === match[0]){
            var ctl = match[3], l = match[1];
            return caml_call8
                    (pp,
                     f,
                     _ar_,
                     function(ctxt, param){
                      var txt = param[1];
                      return caml_call3(pp, ctxt, _L_, txt);
                     },
                     l,
                     function(f, l){
                      if(! l) return 0;
                      function _vI_(_vN_, _vO_){
                       return core_type(ctxt, _vN_, _vO_);
                      }
                      var _vJ_ = 0, _vK_ = 0;
                      return caml_call4
                              (pp,
                               f,
                               _aq_,
                               function(_vL_, _vM_){
                                return list(_ap_, _vK_, _vJ_, _vI_, _vL_, _vM_);
                               },
                               ctl);
                     },
                     ctl,
                     function(_vG_, _vH_){return attributes(ctxt, _vG_, _vH_);},
                     x[3]);
           }
           var ct = match[1];
           return core_type(ctxt, f, ct);
          };
       return caml_call6
               (pp,
                f,
                _aw_,
                function(f, l){
                 if(! l) return closed ? caml_call2(pp, f, _av_) : 0;
                 var _vA_ = 0, _vB_ = 0;
                 function _vC_(_vE_, _vF_){
                  return list
                          (_at_, _vB_, _vA_, type_variant_helper, _vE_, _vF_);
                 }
                 var
                  _vD_ =
                    closed
                     ? cst$6
                     : low ? cst$7 : first_is_inherit ? cst$8 : cst$9;
                 return caml_call5(pp, f, _au_, _vD_, _vC_, l);
                },
                l$3,
                function(f, low){
                 if(low){
                  var xs = low[1];
                  if(xs){
                   var _vv_ = 0, _vw_ = 0, _vx_ = 0;
                   return caml_call4
                           (pp,
                            f,
                            _as_,
                            function(_vy_, _vz_){
                             return list(_vx_, _vw_, _vv_, string_quot, _vy_, _vz_);
                            },
                            xs);
                  }
                 }
                 return 0;
                },
                low);
      case 9:
       var
        match$0 = match[1],
        cstrs = match$0[2],
        lid = match$0[1],
        aux =
          function(f, param){
           var ct = param[2], s = param[1];
           return caml_call6
                   (pp,
                    f,
                    _ax_,
                    longident_loc,
                    s,
                    function(_vt_, _vu_){return core_type(ctxt, _vt_, _vu_);},
                    ct);
          };
       if(! cstrs) return caml_call4(pp, f, _aA_, longident_loc, lid);
       var _vn_ = 0, _vo_ = 0;
       return caml_call6
               (pp,
                f,
                _az_,
                longident_loc,
                lid,
                function(_vr_, _vs_){
                 return list(_ay_, _vo_, _vn_, aux, _vr_, _vs_);
                },
                cstrs);
      case 10:
       var e = match[1]; return extension(ctxt, f, e);
      default:
       return paren
               (0,
                0,
                1,
                function(_vp_, _vq_){return core_type(ctxt, _vp_, _vq_);},
                f,
                x);
    }
   }
   function pattern$1(counter, ctxt, f, x){
    if(0 !== x[4])
     return caml_call6
             (pp,
              f,
              _aC_,
              function(_vf_, _vg_){return pattern(ctxt, _vf_, _vg_);},
              [0, x[1], x[2], x[3], 0],
              function(_vd_, _ve_){return attributes(ctxt, _vd_, _ve_);},
              x[4]);
    var match = x[1];
    if(typeof match !== "number" && 1 === match[0]){
     var s = match[2], p = match[1];
     return caml_call6
             (pp,
              f,
              _aB_,
              function(_vb_, _vc_){return pattern(ctxt, _vb_, _vc_);},
              p,
              protect_ident,
              s[1]);
    }
    a:
    b:
    c:
    {
     var x$0 = x, acc = 0;
     for(;;){
      var _u5_ = x$0[1];
      if(typeof _u5_ === "number") break c;
      if(9 !== _u5_[0]) break b;
      if(x$0[4]) break;
      var p2 = _u5_[2], p1 = _u5_[1], acc$0 = [0, p2, acc];
      x$0 = p1;
      acc = acc$0;
     }
     break a;
    }
    var orpats = [0, x$0, acc];
    if(orpats[2]){
     var
      _u6_ = function(_u$_, _va_){return pattern1(ctxt, _u$_, _va_);},
      _u7_ = 0,
      _u8_ = 0;
     return caml_call4
             (pp,
              f,
              _aE_,
              function(_u9_, _u__){
               return list(_aD_, _u8_, _u7_, _u6_, _u9_, _u__);
              },
              orpats);
    }
    var x$1 = orpats[1];
    if(counter >= 50)
     return caml_trampoline_return(pattern1$0, [0, ctxt, f, x$1]);
    var counter$0 = counter + 1 | 0;
    return pattern1$0(counter$0, ctxt, f, x$1);
   }
   function pattern(ctxt, f, x){
    return caml_trampoline(pattern$1(0, ctxt, f, x));
   }
   function pattern1$0(counter, ctxt, f, x){
    function pattern_list_helper(f, p){
     var _uW_ = p[1];
     a:
     if(typeof _uW_ !== "number" && 5 === _uW_[0]){
      var _uX_ = _uW_[1][1];
      if(0 !== _uX_[0]) break a;
      if(_uX_[1] !== cst$58) break a;
      var _uY_ = _uW_[2];
      if(! _uY_) break a;
      var _uZ_ = _uY_[1];
      if(_uZ_[1]) break a;
      var _u0_ = _uZ_[2][1];
      if(typeof _u0_ !== "number" && 4 === _u0_[0]){
       var _u1_ = _u0_[1];
       if(! _u1_) break a;
       var _u2_ = _u1_[2];
       if(! _u2_) break a;
       if(_u2_[2]) break a;
       if(p[4]) break a;
       var pat2 = _u2_[1], pat1 = _u1_[1];
       return caml_call6
               (pp,
                f,
                _aF_,
                function(_u3_, _u4_){return simple_pattern(ctxt, _u3_, _u4_);},
                pat1,
                pattern_list_helper,
                pat2);
      }
      break a;
     }
     return pattern1(ctxt, f, p);
    }
    if(0 !== x[4]){
     if(counter >= 50)
      return caml_trampoline_return(pattern$1, [0, ctxt, f, x]);
     var counter$2 = counter + 1 | 0;
     return pattern$1(counter$2, ctxt, f, x);
    }
    var match = x[1];
    if(typeof match !== "number")
     switch(match[0]){
       case 5:
        var li = match[1], txt = li[1];
        a:
        if(0 === txt[0]){
         var _uL_ = txt[1];
         if(_uL_ !== cst$68 && _uL_ !== cst$69) break a;
         if(counter >= 50)
          return caml_trampoline_return(simple_pattern$0, [0, ctxt, f, x]);
         var counter$0 = counter + 1 | 0;
         return simple_pattern$0(counter$0, ctxt, f, x);
        }
        var po = match[2];
        if(caml_equal(txt, _aG_))
         return caml_call4(pp, f, _aH_, pattern_list_helper, x);
        if(! po) return caml_call4(pp, f, _aL_, longident_loc, li);
        var match$0 = po[1], vl = match$0[1];
        if(vl){
         var x$0 = match$0[2], _uM_ = 0, _uN_ = 0;
         return caml_call8
                 (pp,
                  f,
                  _aJ_,
                  longident_loc,
                  li,
                  function(_uU_, _uV_){
                   return list(_aI_, _uN_, _uM_, string_loc, _uU_, _uV_);
                  },
                  vl,
                  function(_uS_, _uT_){
                   return simple_pattern(ctxt, _uS_, _uT_);
                  },
                  x$0);
        }
        var x$1 = match$0[2];
        return caml_call6
                (pp,
                 f,
                 _aK_,
                 longident_loc,
                 li,
                 function(_uQ_, _uR_){
                  return simple_pattern(ctxt, _uQ_, _uR_);
                 },
                 x$1);
       case 6:
        var match$1 = match[2];
        if(match$1){
         var p = match$1[1], l = match[1];
         return caml_call5
                 (pp,
                  f,
                  _aM_,
                  l,
                  function(_uO_, _uP_){
                   return simple_pattern(ctxt, _uO_, _uP_);
                  },
                  p);
        }
        break;
     }
    if(counter >= 50)
     return caml_trampoline_return(simple_pattern$0, [0, ctxt, f, x]);
    var counter$1 = counter + 1 | 0;
    return simple_pattern$0(counter$1, ctxt, f, x);
   }
   function pattern1(ctxt, f, x){
    return caml_trampoline(pattern1$0(0, ctxt, f, x));
   }
   function simple_pattern$0(counter, ctxt, f, x){
    if(0 !== x[4]){
     if(counter >= 50)
      return caml_trampoline_return(pattern$1, [0, ctxt, f, x]);
     var counter$0 = counter + 1 | 0;
     return pattern$1(counter$0, ctxt, f, x);
    }
    var match = x[1];
    if(typeof match === "number") return caml_call2(pp, f, _aN_);
    switch(match[0]){
      case 0:
       var txt = match[1][1]; return protect_ident(f, txt);
      case 2:
       var c = match[1]; return caml_call4(pp, f, _aO_, constant, c);
      case 3:
       var c2 = match[2], c1 = match[1];
       return caml_call6(pp, f, _aP_, constant, c1, constant, c2);
      case 4:
       var
        l = match[1],
        _t2_ = function(_uJ_, _uK_){return pattern1(ctxt, _uJ_, _uK_);},
        _t3_ = 0,
        _t4_ = 0;
       return caml_call4
               (pp,
                f,
                _aR_,
                function(_uH_, _uI_){
                 return list(_aQ_, _t4_, _t3_, _t2_, _uH_, _uI_);
                },
                l);
      case 5:
       var _t5_ = match[1][1];
       if(0 === _t5_[0]){
        var x$0 = _t5_[1];
        if(x$0 !== cst$68 && x$0 !== cst$69) break;
        if(! match[2]) return caml_call3(pp, f, _aS_, x$0);
       }
       break;
      case 6:
       if(! match[2]){
        var l$0 = match[1];
        return caml_call3(pp, f, _aT_, l$0);
       }
       break;
      case 7:
       var
        closed = match[2],
        l$1 = match[1],
        longident_x_pattern =
          function(f, param){
           var p = param[2], li = param[1], _uD_ = li[1];
           a:
           if(0 === _uD_[0]){
            var _uE_ = p[1];
            if(typeof _uE_ !== "number" && 0 === _uE_[0]){
             if(p[4]) break a;
             var txt = _uE_[1][1], s = _uD_[1];
             if(s === txt) return caml_call4(pp, f, _aV_, longident_loc, li);
             break a;
            }
           }
           return caml_call6
                   (pp,
                    f,
                    _aU_,
                    longident_loc,
                    li,
                    function(_uF_, _uG_){return pattern1(ctxt, _uF_, _uG_);},
                    p);
          };
       if(closed){
        var _t6_ = 0, _t7_ = 0;
        return caml_call4
                (pp,
                 f,
                 _aX_,
                 function(_uB_, _uC_){
                  return list
                          (_aW_, _t7_, _t6_, longident_x_pattern, _uB_, _uC_);
                 },
                 l$1);
       }
       var _t8_ = 0, _t9_ = 0;
       return caml_call4
               (pp,
                f,
                _aZ_,
                function(_uz_, _uA_){
                 return list
                         (_aY_, _t9_, _t8_, longident_x_pattern, _uz_, _uA_);
                },
                l$1);
      case 8:
       var
        l$2 = match[1],
        _t__ = function(_ux_, _uy_){return pattern1(ctxt, _ux_, _uy_);},
        _t$_ = 0,
        _ua_ = 0;
       return caml_call4
               (pp,
                f,
                _a1_,
                function(_uv_, _uw_){
                 return list(_a0_, _ua_, _t$_, _t__, _uv_, _uw_);
                },
                l$2);
      case 10:
       var ct = match[2], p = match[1];
       return caml_call6
               (pp,
                f,
                _a2_,
                function(_ut_, _uu_){return pattern1(ctxt, _ut_, _uu_);},
                p,
                function(_ur_, _us_){return core_type(ctxt, _ur_, _us_);},
                ct);
      case 11:
       var li = match[1]; return caml_call4(pp, f, _a3_, longident_loc, li);
      case 12:
       var p$0 = match[1];
       return caml_call4
               (pp,
                f,
                _a4_,
                function(_up_, _uq_){return simple_pattern(ctxt, _up_, _uq_);},
                p$0);
      case 13:
       var match$0 = match[1][1];
       if(! match$0) return caml_call2(pp, f, _a6_);
       var s = match$0[1];
       return caml_call3(pp, f, _a5_, s);
      case 14:
       var p$1 = match[1];
       return caml_call4
               (pp,
                f,
                _a7_,
                function(_un_, _uo_){return pattern1(ctxt, _un_, _uo_);},
                p$1);
      case 15:
       var e = match[1]; return extension(ctxt, f, e);
      case 16:
       var p$2 = match[2], lid = match[1], _ub_ = p$2[1];
       a:
       {
        b:
        if(typeof _ub_ !== "number"){
         switch(_ub_[0]){
           case 5:
            var _uf_ = _ub_[1][1];
            if(0 !== _uf_[0]) break b;
            var _ug_ = _uf_[1];
            if(_ug_ !== cst$68 && _ug_ !== cst$69) break b;
            if(_ub_[2]) break b;
            break;
           case 7:
           case 8: break;
           default: break b;
         }
         var with_paren = 0;
         break a;
        }
        var with_paren = 1;
       }
       var
        _uc_ = function(_ul_, _um_){return pattern1(ctxt, _ul_, _um_);},
        _ud_ = 0,
        _ue_ = 0;
       return caml_call6
               (pp,
                f,
                _a8_,
                longident_loc,
                lid,
                function(_uj_, _uk_){
                 return paren(_ue_, _ud_, with_paren, _uc_, _uj_, _uk_);
                },
                p$2);
    }
    return paren
            (0,
             0,
             1,
             function(_uh_, _ui_){return pattern(ctxt, _uh_, _ui_);},
             f,
             x);
   }
   function simple_pattern(ctxt, f, x){
    return caml_trampoline(simple_pattern$0(0, ctxt, f, x));
   }
   function label_exp(ctxt, f, param){
    var p = param[3], opt = param[2], l = param[1];
    if(typeof l === "number")
     return caml_call4
             (pp,
              f,
              _a9_,
              function(_t0_, _t1_){return simple_pattern(ctxt, _t0_, _t1_);},
              p);
    if(0 === l[0]){
     var l$0 = l[1], _tO_ = p[1];
     a:
     if(typeof _tO_ !== "number" && 0 === _tO_[0]){
      if(p[4]) break a;
      var txt = _tO_[1][1];
      if(txt === l$0) return caml_call3(pp, f, _a$_, l$0);
      break a;
     }
     return caml_call5
             (pp,
              f,
              _a__,
              l$0,
              function(_tY_, _tZ_){return simple_pattern(ctxt, _tY_, _tZ_);},
              p);
    }
    var rest = l[1], _tP_ = p[1];
    a:
    if(typeof _tP_ !== "number" && 0 === _tP_[0]){
     if(p[4]) break a;
     var txt$0 = _tP_[1][1];
     if(txt$0 !== rest) break a;
     if(! opt) return caml_call3(pp, f, _bd_, rest);
     var o$0 = opt[1];
     return caml_call5
             (pp,
              f,
              _bc_,
              rest,
              function(_tW_, _tX_){return _M_(ctxt, _tW_, _tX_);},
              o$0);
    }
    if(! opt)
     return caml_call5
             (pp,
              f,
              _bb_,
              rest,
              function(_tU_, _tV_){return simple_pattern(ctxt, _tU_, _tV_);},
              p);
    var o = opt[1];
    return caml_call7
            (pp,
             f,
             _ba_,
             rest,
             function(_tS_, _tT_){return pattern1(ctxt, _tS_, _tT_);},
             p,
             function(_tQ_, _tR_){return _M_(ctxt, _tQ_, _tR_);},
             o);
   }
   function sugar_expr(ctxt, f, e){
    if(0 !== e[4]) return 0;
    var _s4_ = e[1];
    a:
    if(typeof _s4_ !== "number" && 5 === _s4_[0]){
     var _s5_ = _s4_[1], _s6_ = _s5_[1];
     if(typeof _s6_ !== "number" && 0 === _s6_[0]){
      if(_s5_[4]) break a;
      var args = _s4_[2], id = _s6_[1][1];
      if
       (!
        caml_call2
         (Stdlib_List[33],
          function(param){var lab = param[1]; return 0 === lab ? 1 : 0;},
          args))
       break a;
      var
       print_indexop =
         function
         (a,
          path_prefix,
          assign,
          left,
          sep,
          right,
          print_index,
          indices,
          rem_args){
          function print_path(ppf, param){
           if(! param) return 0;
           var m = param[1];
           return caml_call4(pp, ppf, _be_, print_longident, m);
          }
          if(assign){
           if(rem_args && ! rem_args[2]){
            var v = rem_args[1], _ty_ = 0, _tz_ = 0, _tA_ = [0, sep];
            caml_call12
             (pp,
              f,
              _bf_,
              function(_tI_, _tJ_){return simple_expr(ctxt, _tI_, _tJ_);},
              a,
              print_path,
              path_prefix,
              left,
              function(_tG_, _tH_){
               return list(_tA_, _tz_, _ty_, print_index, _tG_, _tH_);
              },
              indices,
              right,
              function(_tE_, _tF_){return simple_expr(ctxt, _tE_, _tF_);},
              v);
            return 1;
           }
          }
          else if(! rem_args){
           var _tB_ = 0, _tC_ = 0, _tD_ = [0, sep];
           caml_call10
            (pp,
             f,
             _bg_,
             function(_tM_, _tN_){return simple_expr(ctxt, _tM_, _tN_);},
             a,
             print_path,
             path_prefix,
             left,
             function(_tK_, _tL_){
              return list(_tD_, _tC_, _tB_, print_index, _tK_, _tL_);
             },
             indices,
             right);
           return 1;
          }
          return 0;
         },
       match =
         caml_call2(Stdlib_List[20], function(_tx_){return _tx_[2];}, args);
      b:
      {
       switch(id[0]){
         case 0:
          var _s7_ = id[1];
          if(_s7_ === cst$80 && match && ! match[2]){
           var e$0 = match[1];
           caml_call4
            (pp,
             f,
             _bj_,
             function(_tv_, _tw_){return simple_expr(ctxt, _tv_, _tw_);},
             e$0);
           return 1;
          }
          var s = _s7_;
          break;
         case 1:
          var path = id[1], func = id[2];
          c:
          {
           if(func !== "get" && func !== cst_set) break c;
           if(match){
            var
             other_args = match[2],
             a$0 = match[1],
             assign$0 = func === cst_set ? 1 : 0,
             _s__ = 0;
            switch(path[0]){
              case 0:
               var _s$_ = path[1];
               if(_s$_ !== "Array"){
                if(_s$_ === "String" && other_args){
                 var rest$0 = other_args[2], i$1 = other_args[1];
                 return print_indexop
                         (a$0,
                          _s__,
                          assign$0,
                          cst$13,
                          _bk_,
                          cst$12,
                          function(_tr_, _ts_){return _M_(ctxt, _tr_, _ts_);},
                          [0, i$1, 0],
                          rest$0);
                }
               }
               else if(other_args){
                var rest$1 = other_args[2], i$2 = other_args[1];
                return print_indexop
                        (a$0,
                         _s__,
                         assign$0,
                         cst$15,
                         _bl_,
                         cst$14,
                         function(_tt_, _tu_){return _M_(ctxt, _tt_, _tu_);},
                         [0, i$2, 0],
                         rest$1);
               }
               break;
              case 1:
               var _ta_ = path[1];
               if(0 === _ta_[0] && _ta_[1] === "Bigarray"){
                var _tb_ = path[2];
                if(_tb_ !== "Array1"){
                 if(_tb_ !== "Array2"){
                  if(_tb_ !== "Array3"){
                   if(_tb_ === "Genarray" && other_args){
                    var _tc_ = other_args[1], _td_ = _tc_[1];
                    if(typeof _td_ !== "number" && 14 === _td_[0]){
                     if(_tc_[4]) break;
                     var rest$2 = other_args[2], indexes = _td_[1];
                     return print_indexop
                             (a$0,
                              _s__,
                              assign$0,
                              cst$17,
                              _bm_,
                              cst$16,
                              function(_tj_, _tk_){return simple_expr(ctxt, _tj_, _tk_);},
                              indexes,
                              rest$2);
                    }
                   }
                  }
                  else if(other_args){
                   var _te_ = other_args[2];
                   if(_te_){
                    var match$2 = _te_[2];
                    if(match$2){
                     var
                      rest$3 = match$2[2],
                      i3 = match$2[1],
                      i2 = _te_[1],
                      i1 = other_args[1];
                     return print_indexop
                             (a$0,
                              _s__,
                              assign$0,
                              cst$19,
                              _bn_,
                              cst$18,
                              function(_tl_, _tm_){return simple_expr(ctxt, _tl_, _tm_);},
                              [0, i1, [0, i2, [0, i3, 0]]],
                              rest$3);
                    }
                   }
                  }
                 }
                 else if(other_args){
                  var match$3 = other_args[2];
                  if(match$3){
                   var
                    rest$4 = match$3[2],
                    i2$0 = match$3[1],
                    i1$0 = other_args[1];
                   return print_indexop
                           (a$0,
                            _s__,
                            assign$0,
                            cst$21,
                            _bo_,
                            cst$20,
                            function(_tn_, _to_){return simple_expr(ctxt, _tn_, _to_);},
                            [0, i1$0, [0, i2$0, 0]],
                            rest$4);
                  }
                 }
                }
                else if(other_args){
                 var rest$5 = other_args[2], i1$1 = other_args[1];
                 return print_indexop
                         (a$0,
                          _s__,
                          assign$0,
                          cst$23,
                          _bp_,
                          cst$22,
                          function(_tp_, _tq_){return simple_expr(ctxt, _tp_, _tq_);},
                          [0, i1$1, 0],
                          rest$5);
                }
               }
               break;
            }
            return 0;
           }
          }
          var s = id[2];
          break;
         default: break b;
       }
       if(match){
        var match$0 = match[2];
        if(match$0){
         var rest = match$0[2], i = match$0[1], a = match[1];
         if(first_is(46, s)){
          var
           multi_indices = caml_call2(Stdlib_String[15], s, 59),
           match$1 = i[1];
          c:
          {
           if(typeof match$1 !== "number" && 14 === match$1[0]){
            var l = match$1[1];
            if(multi_indices){var i$0 = l; break c;}
           }
           var i$0 = [0, i, 0];
          }
          var
           assign = last_is(45, s),
           n = caml_ml_string_length(s),
           kind =
             assign
              ? caml_string_get(s, n - 3 | 0)
              : caml_string_get(s, n - 1 | 0);
          if(41 === kind)
           var right$0 = right, left = 40;
          else if(93 === kind)
           var right$0 = cst$10, left = 91;
          else{
           if(125 !== kind)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _bi_], 1);
           var right$0 = cst$11, left = 123;
          }
          if(1 === id[0])
           var m = id[1], path_prefix = [0, m];
          else
           var path_prefix = 0;
          var
           _s8_ = 1 + caml_call2(Stdlib_String[36], s, left) | 0,
           left$0 = caml_call3(Stdlib_String[16], s, 0, _s8_),
           _s9_ =
             multi_indices
              ? function(_tf_, _tg_){return _M_(ctxt, _tf_, _tg_);}
              : function(_th_, _ti_){return simple_expr(ctxt, _th_, _ti_);};
          return print_indexop
                  (a,
                   path_prefix,
                   assign,
                   left$0,
                   _bh_,
                   right$0,
                   _s9_,
                   i$0,
                   rest);
         }
        }
       }
      }
      return 0;
     }
    }
    return 0;
   }
   function _ft_(counter, ctxt, f, x){
    for(;;){
     if(0 !== x[4])
      return caml_call6
              (pp,
               f,
               _b0_,
               function(_s2_, _s3_){return _M_(ctxt, _s2_, _s3_);},
               [0, x[1], x[2], x[3], 0],
               function(_s0_, _s1_){return attributes(ctxt, _s0_, _s1_);},
               x[4]);
     var match = x[1];
     if(typeof match === "number") return caml_call2(pp, f, _bq_);
     a:
     {
      switch(match[0]){
        case 5:
         var
          l$5 = match[2],
          e$7 = match[1],
          _q1_ = 1 - sugar_expr(ctxt, f, x);
         if(! _q1_) return _q1_;
         var _qP_ = e$7[1];
         b:
         {
          c:
          if(typeof _qP_ !== "number" && 0 === _qP_[0]){
           var _qQ_ = _qP_[1][1];
           if(0 !== _qQ_[0]) break c;
           if(e$7[4]) break c;
           var l = _qQ_[1], match$1 = fixity_of_string(l);
           break b;
          }
          var match$1 = -453122489;
         }
         if(typeof match$1 !== "number"){
          var _q2_ = match$1[1];
          if(-784100624 === _q2_){
           var s$0 = match$1[2];
           if(l$5){
            var arg1 = l$5[1];
            if(typeof arg1[1] === "number"){
             var _q3_ = l$5[2];
             if(_q3_){
              var arg2 = _q3_[1];
              if(typeof arg2[1] === "number" && ! _q3_[2])
               return caml_call7
                       (pp,
                        f,
                        _bI_,
                        function(_sY_, _sZ_){
                         return label_x_expression_param(reset_ctxt, _sY_, _sZ_);
                        },
                        arg1,
                        s$0,
                        function(_sW_, _sX_){
                         return label_x_expression_param(ctxt, _sW_, _sX_);
                        },
                        arg2);
             }
            }
           }
           var
            _q4_ =
              function(_sU_, _sV_){
               return label_x_expression_param(ctxt, _sU_, _sV_);
              },
            _q5_ = 0,
            _q6_ = 0,
            _q7_ = 0;
           return caml_call6
                   (pp,
                    f,
                    _bH_,
                    function(_sS_, _sT_){return simple_expr(ctxt, _sS_, _sT_);},
                    e$7,
                    function(_sQ_, _sR_){
                     return list(_q7_, _q6_, _q5_, _q4_, _sQ_, _sR_);
                    },
                    l$5);
          }
          if(-481604174 === _q2_){
           var s$1 = match$1[2];
           b:
           {
            if(caml_call2(Stdlib_List[37], s$1, _bJ_)){
             c:
             {
              d:
              if(l$5){
               var _q8_ = l$5[1][2][1];
               if(typeof _q8_ !== "number" && 1 === _q8_[0]){if(l$5[2]) break d; var _q9_ = 0; break c;}
              }
              var _q9_ = 1;
             }
             if(_q9_){
              var
               s$2 =
                 caml_call3
                  (Stdlib_String[16],
                   s$1,
                   1,
                   caml_ml_string_length(s$1) - 1 | 0);
              break b;
             }
            }
            var s$2 = s$1;
           }
           if(l$5){
            var _q__ = l$5[1];
            if(typeof _q__[1] === "number" && ! l$5[2]){
             var x$0 = _q__[2];
             return caml_call5
                     (pp,
                      f,
                      _bL_,
                      s$2,
                      function(_sO_, _sP_){return simple_expr(ctxt, _sO_, _sP_);},
                      x$0);
            }
           }
           var
            _q$_ =
              function(_sM_, _sN_){
               return label_x_expression_param(ctxt, _sM_, _sN_);
              },
            _ra_ = 0,
            _rb_ = 0,
            _rc_ = 0;
           return caml_call6
                   (pp,
                    f,
                    _bK_,
                    function(_sK_, _sL_){return simple_expr(ctxt, _sK_, _sL_);},
                    e$7,
                    function(_sI_, _sJ_){
                     return list(_rc_, _rb_, _ra_, _q$_, _sI_, _sJ_);
                    },
                    l$5);
          }
         }
         return caml_call4
                 (pp,
                  f,
                  _bG_,
                  function(f, param){
                   var l = param[2], e = param[1];
                   function _sy_(_sG_, _sH_){
                    return label_x_expression_param(reset_ctxt, _sG_, _sH_);
                   }
                   var _sz_ = 0, _sA_ = 0, _sB_ = 0;
                   return caml_call6
                           (pp,
                            f,
                            _bF_,
                            function(_sE_, _sF_){return expression2(ctxt, _sE_, _sF_);},
                            e,
                            function(_sC_, _sD_){
                             return list(_sB_, _sA_, _sz_, _sy_, _sC_, _sD_);
                            },
                            l);
                  },
                  [0, e$7, l$5]);
        case 9:
         var match$2 = match[2];
         if(! match$2) break a;
         var eo$0 = match$2[1], li = match[1];
         if(is_simple_construct(view_expr(x))) break a;
         var match$3 = view_expr(x);
         if(typeof match$3 === "number"){
          if(812216871 === match$3)
           return caml_call6
                   (pp,
                    f,
                    _bM_,
                    longident_loc,
                    li,
                    function(_su_, _sv_){return simple_expr(ctxt, _su_, _sv_);},
                    eo$0);
         }
         else if(-1044071951 === match$3[1]){
          var ls = match$3[2];
          return list
                  (_bO_,
                   0,
                   0,
                   function(_sw_, _sx_){return simple_expr(ctxt, _sw_, _sx_);},
                   f,
                   ls);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _bN_], 1);
        case 10:
         var match$4 = match[2];
         if(! match$4) break a;
         var eo$1 = match$4[1], l$6 = match[1];
         return caml_call5
                 (pp,
                  f,
                  _bP_,
                  l$6,
                  function(_ss_, _st_){return simple_expr(ctxt, _ss_, _st_);},
                  eo$1);
        case 13:
         var e2$1 = match[3], li$0 = match[2], e1$1 = match[1];
         return caml_call8
                 (pp,
                  f,
                  _bQ_,
                  function(_sq_, _sr_){return simple_expr(ctxt, _sq_, _sr_);},
                  e1$1,
                  longident_loc,
                  li$0,
                  function(_so_, _sp_){return simple_expr(ctxt, _so_, _sp_);},
                  e2$1);
        case 22:
         var li$1 = match[1];
         return caml_call4(pp, f, _bR_, longident_loc, li$1);
        case 23:
         var e$8 = match[2], s$3 = match[1];
         return caml_call5
                 (pp,
                  f,
                  _bS_,
                  s$3[1],
                  function(_sm_, _sn_){return _M_(ctxt, _sm_, _sn_);},
                  e$8);
        case 24:
         var
          l$7 = match[1],
          string_x_expression =
            function(f, param){
             var e = param[2], s = param[1];
             return caml_call5
                     (pp,
                      f,
                      _bT_,
                      s[1],
                      function(_sk_, _sl_){return _M_(ctxt, _sk_, _sl_);},
                      e);
            },
          _rd_ = 0,
          _re_ = 0;
         return caml_call4
                 (pp,
                  f,
                  _bV_,
                  function(_si_, _sj_){
                   return list
                           (_bU_, _re_, _rd_, string_x_expression, _si_, _sj_);
                  },
                  l$7);
        case 27:
         var e$9 = match[1];
         return caml_call4
                 (pp,
                  f,
                  _bW_,
                  function(_sg_, _sh_){return simple_expr(ctxt, _sg_, _sh_);},
                  e$9);
        case 28:
         var e$10 = match[1];
         return caml_call4
                 (pp,
                  f,
                  _bX_,
                  function(_se_, _sf_){return simple_expr(ctxt, _se_, _sf_);},
                  e$10);
        case 29:
         var match$5 = match[2], e$11 = match[1];
         if(! match$5)
          return caml_call4
                  (pp,
                   f,
                   _bZ_,
                   function(_sc_, _sd_){return simple_expr(ctxt, _sc_, _sd_);},
                   e$11);
         var ct = match$5[1];
         return caml_call6
                 (pp,
                  f,
                  _bY_,
                  function(_sa_, _sb_){return simple_expr(ctxt, _sa_, _sb_);},
                  e$11,
                  function(_r__, _r$_){return core_type(ctxt, _r__, _r$_);},
                  ct);
        case 35:
         var e$12 = match[1]; return extension(ctxt, f, e$12);
        case 15: break;
        case 2:
        case 25:
        case 26:
        case 33:
        case 34:
         if(ctxt[2])
          return paren
                  (0,
                   0,
                   1,
                   function(_r8_, _r9_){return _M_(reset_ctxt, _r8_, _r9_);},
                   f,
                   x);
         break;
        case 3:
        case 4:
        case 6:
        case 7:
        case 16:
        case 31:
         if(! ctxt[1] && ! ctxt[2]) break;
         return paren
                 (0,
                  0,
                  1,
                  function(_r6_, _r7_){return _M_(reset_ctxt, _r6_, _r7_);},
                  f,
                  x);
        default: break a;
      }
      if(typeof match !== "number")
       switch(match[0]){
         case 3:
          var l$1 = match[1];
          return caml_call4
                  (pp,
                   f,
                   _bs_,
                   function(_r4_, _r5_){return case_list(ctxt, _r4_, _r5_);},
                   l$1);
         case 4:
          var e$0 = match[4], p = match[3], e0 = match[2], l$2 = match[1];
          return caml_call6
                  (pp,
                   f,
                   _bt_,
                   function(_r2_, _r3_){return label_exp(ctxt, _r2_, _r3_);},
                   [0, l$2, e0, p],
                   function(_r0_, _r1_){return _M_(ctxt, _r0_, _r1_);},
                   e$0);
         case 6:
          var l$3 = match[2], e$1 = match[1];
          return caml_call6
                  (pp,
                   f,
                   _bu_,
                   function(_rY_, _rZ_){return _M_(reset_ctxt, _rY_, _rZ_);},
                   e$1,
                   function(_rW_, _rX_){return case_list(ctxt, _rW_, _rX_);},
                   l$3);
         case 7:
          var l$4 = match[2], e$2 = match[1];
          return caml_call6
                  (pp,
                   f,
                   _bv_,
                   function(_rU_, _rV_){return _M_(reset_ctxt, _rU_, _rV_);},
                   e$2,
                   function(_rS_, _rT_){return case_list(ctxt, _rS_, _rT_);},
                   l$4);
         case 25:
          var e$3 = match[3], me = match[2], s = match[1];
          return caml_call7
                  (pp,
                   f,
                   _bz_,
                   value(s[1], cst$24),
                   function(_rQ_, _rR_){
                    return module_expr(reset_ctxt, _rQ_, _rR_);
                   },
                   me,
                   function(_rO_, _rP_){return _M_(ctxt, _rO_, _rP_);},
                   e$3);
         case 26:
          var e$4 = match[2], cd = match[1];
          return caml_call6
                  (pp,
                   f,
                   _bA_,
                   function(_rM_, _rN_){
                    return extension_constructor(ctxt, _rM_, _rN_);
                   },
                   cd,
                   function(_rK_, _rL_){return _M_(ctxt, _rK_, _rL_);},
                   e$4);
         case 31:
          var e$5 = match[2], lid = match[1];
          return caml_call5
                  (pp,
                   f,
                   _bB_,
                   lid[1],
                   function(_rI_, _rJ_){return _M_(ctxt, _rI_, _rJ_);},
                   e$5);
         case 33:
          var e$6 = match[2], o = match[1], _qX_ = o[1];
          return caml_call7
                  (pp,
                   f,
                   _bC_,
                   override(o[2]),
                   function(_rG_, _rH_){return module_expr(ctxt, _rG_, _rH_);},
                   _qX_,
                   function(_rE_, _rF_){return _M_(ctxt, _rE_, _rF_);},
                   e$6);
         case 34:
          var
           match$0 = match[1],
           body = match$0[3],
           ands = match$0[2],
           let$0 = match$0[1],
           _qY_ = function(_rC_, _rD_){return binding_op(ctxt, _rC_, _rD_);},
           _qZ_ = 0,
           _q0_ = 0;
          return caml_call8
                  (pp,
                   f,
                   _bE_,
                   function(_rA_, _rB_){return binding_op(ctxt, _rA_, _rB_);},
                   let$0,
                   function(_ry_, _rz_){
                    return list(_bD_, _q0_, _qZ_, _qY_, _ry_, _rz_);
                   },
                   ands,
                   function(_rw_, _rx_){return _M_(ctxt, _rw_, _rx_);},
                   body);
         case 15:
         case 16:
          if(ctxt[3])
           return paren
                   (0,
                    0,
                    1,
                    function(_ru_, _rv_){return _M_(reset_ctxt, _ru_, _rv_);},
                    f,
                    x);
          if(typeof match === "number") break a;
          switch(match[0]){
            case 15:
             var
              eo = match[3],
              e2 = match[2],
              e1 = match[1],
              _qR_ = [0, ctxt[1], ctxt[2], 1],
              expression_under_ifthenelse =
                function(_rs_, _rt_){return _M_(_qR_, _rs_, _rt_);};
             return caml_call8
                     (pp,
                      f,
                      fmt,
                      expression_under_ifthenelse,
                      e1,
                      expression_under_ifthenelse,
                      e2,
                      function(f, eo){
                       if(! eo) return 0;
                       var x = eo[1], _rp_ = under_semi(ctxt);
                       return caml_call4
                               (pp,
                                f,
                                _bw_,
                                function(_rq_, _rr_){return _M_(_rp_, _rq_, _rr_);},
                                x);
                      },
                      eo);
            case 16:
             b:
             c:
             d:
             {
              var acc = 0, v = x;
              for(;;){
               var _qS_ = v[1];
               if(typeof _qS_ === "number") break d;
               if(16 !== _qS_[0]) break c;
               if(v[4]) break;
               var e2$0 = _qS_[2], e1$0 = _qS_[1], acc$0 = [0, e1$0, acc];
               acc = acc$0;
               v = e2$0;
              }
              break b;
             }
             var
              lst = caml_call1(Stdlib_List[10], [0, v, acc]),
              _qT_ = under_semi(ctxt),
              _qU_ = function(_rn_, _ro_){return _M_(_qT_, _rn_, _ro_);},
              _qV_ = 0,
              _qW_ = 0;
             return caml_call4
                     (pp,
                      f,
                      _by_,
                      function(_rl_, _rm_){
                       return list(_bx_, _qW_, _qV_, _qU_, _rl_, _rm_);
                      },
                      lst);
            default: break a;
          }
       }
      var e = match[3], l$0 = match[2], rf = match[1];
      return caml_call6
              (pp,
               f,
               _br_,
               function(_rj_, _rk_){return bindings(reset_ctxt, _rj_, _rk_);},
               [0, rf, l$0],
               function(_rh_, _ri_){return _M_(ctxt, _rh_, _ri_);},
               e);
     }
     if(0 === x[4]){
      var match$6 = x[1];
      if(typeof match$6 !== "number" && 30 === match$6[0]){
       var cs = match$6[1];
       return caml_call4
               (pp,
                f,
                _b1_,
                function(_rf_, _rg_){
                 return class_structure(ctxt, _rf_, _rg_);
                },
                cs);
      }
      if(counter >= 50)
       return caml_trampoline_return(expression2$0, [0, ctxt, f, x]);
      var counter$0 = counter + 1 | 0;
      return expression2$0(counter$0, ctxt, f, x);
     }
    }
   }
   function _M_(ctxt, f, x){return caml_trampoline(_ft_(0, ctxt, f, x));}
   function expression2$0(counter, ctxt, f, x){
    if(0 === x[4]){
     var match = x[1];
     if(typeof match !== "number")
      switch(match[0]){
        case 12:
         var li = match[2], e = match[1];
         return caml_call6
                 (pp,
                  f,
                  _b2_,
                  function(_qN_, _qO_){return simple_expr(ctxt, _qN_, _qO_);},
                  e,
                  longident_loc,
                  li);
        case 21:
         var s = match[2], e$0 = match[1];
         return caml_call5
                 (pp,
                  f,
                  _b3_,
                  function(_qL_, _qM_){return simple_expr(ctxt, _qL_, _qM_);},
                  e$0,
                  s[1]);
      }
     if(counter >= 50)
      return caml_trampoline_return(simple_expr$0, [0, ctxt, f, x]);
     var counter$0 = counter + 1 | 0;
     return simple_expr$0(counter$0, ctxt, f, x);
    }
    if(counter >= 50) return caml_trampoline_return(_ft_, [0, ctxt, f, x]);
    var counter$1 = counter + 1 | 0;
    return _ft_(counter$1, ctxt, f, x);
   }
   function expression2(ctxt, f, x){
    return caml_trampoline(expression2$0(0, ctxt, f, x));
   }
   function simple_expr$0(counter, ctxt, f, x){
    if(0 !== x[4]){
     if(counter >= 50) return caml_trampoline_return(_ft_, [0, ctxt, f, x]);
     var counter$0 = counter + 1 | 0;
     return _ft_(counter$0, ctxt, f, x);
    }
    var match = x[1];
    if(typeof match !== "number")
     switch(match[0]){
       case 0:
        var li = match[1]; return longident_loc(f, li);
       case 1:
        var c = match[1]; return constant(f, c);
       case 8:
        var
         l = match[1],
         _pN_ = function(_qJ_, _qK_){return simple_expr(ctxt, _qJ_, _qK_);},
         _pO_ = 0,
         _pP_ = 0;
        return caml_call4
                (pp,
                 f,
                 _b5_,
                 function(_qH_, _qI_){
                  return list(_b4_, _pP_, _pO_, _pN_, _qH_, _qI_);
                 },
                 l);
       case 9:
        if(is_simple_construct(view_expr(x))){
         var match$0 = view_expr(x);
         if(typeof match$0 === "number"){
          if(5493713 === match$0) return caml_call2(pp, f, _b6_);
          if(405183496 === match$0) return caml_call2(pp, f, _b7_);
         }
         else{
          var _pQ_ = match$0[1];
          if(-944563106 === _pQ_){
           var
            xs = match$0[2],
            _pR_ = under_semi(ctxt),
            _pS_ = function(_qF_, _qG_){return _M_(_pR_, _qF_, _qG_);},
            _pT_ = 0,
            _pU_ = 0;
           return caml_call4
                   (pp,
                    f,
                    _b__,
                    function(_qD_, _qE_){
                     return list(_b9_, _pU_, _pT_, _pS_, _qD_, _qE_);
                    },
                    xs);
          }
          if(947848242 === _pQ_){
           var x$0 = match$0[2];
           return print_longident(f, x$0);
          }
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _b8_], 1);
        }
        break;
       case 10:
        if(! match[2]){
         var l$0 = match[1];
         return caml_call3(pp, f, _b$_, l$0);
        }
        break;
       case 11:
        var
         eo = match[2],
         l$1 = match[1],
         longident_x_expression =
           function(f, param){
            var e = param[2], li = param[1], _qA_ = e[1];
            a:
            if(typeof _qA_ !== "number" && 0 === _qA_[0]){
             if(e[4]) break a;
             var txt = _qA_[1][1];
             if(caml_equal(li[1], txt))
              return caml_call4(pp, f, _cb_, longident_loc, li);
             break a;
            }
            return caml_call6
                    (pp,
                     f,
                     _ca_,
                     longident_loc,
                     li,
                     function(_qB_, _qC_){return simple_expr(ctxt, _qB_, _qC_);},
                     e);
           },
         _pV_ = 0,
         _pW_ = 0,
         _pX_ = function(_qy_, _qz_){return simple_expr(ctxt, _qy_, _qz_);},
         _pY_ = 0;
        return caml_call6
                (pp,
                 f,
                 _ce_,
                 function(_qw_, _qx_){
                  return option(_pY_, _cd_, _pX_, _qw_, _qx_);
                 },
                 eo,
                 function(_qu_, _qv_){
                  return list
                          (_cc_, _pW_, _pV_, longident_x_expression, _qu_, _qv_);
                 },
                 l$1);
       case 14:
        var
         l$2 = match[1],
         _pZ_ = under_semi(ctxt),
         _p0_ = function(_qs_, _qt_){return simple_expr(_pZ_, _qs_, _qt_);},
         _p1_ = 0,
         _p2_ = 0;
        return caml_call4
                (pp,
                 f,
                 _cg_,
                 function(_qq_, _qr_){
                  return list(_cf_, _p2_, _p1_, _p0_, _qq_, _qr_);
                 },
                 l$2);
       case 17:
        var e2 = match[2], e1 = match[1];
        return caml_call6
                (pp,
                 f,
                 fmt$0,
                 function(_qo_, _qp_){return _M_(ctxt, _qo_, _qp_);},
                 e1,
                 function(_qm_, _qn_){return _M_(ctxt, _qm_, _qn_);},
                 e2);
       case 18:
        var
         e3 = match[5],
         df = match[4],
         e2$0 = match[3],
         e1$0 = match[2],
         s = match[1],
         expression = function(_qk_, _ql_){return _M_(ctxt, _qk_, _ql_);};
        return caml_call12
                (pp,
                 f,
                 fmt$1,
                 function(_qi_, _qj_){return pattern(ctxt, _qi_, _qj_);},
                 s,
                 expression,
                 e1$0,
                 direction_flag,
                 df,
                 expression,
                 e2$0,
                 expression,
                 e3);
       case 19:
        var ct = match[2], e = match[1];
        return caml_call6
                (pp,
                 f,
                 _ch_,
                 function(_qg_, _qh_){return _M_(ctxt, _qg_, _qh_);},
                 e,
                 function(_qe_, _qf_){return core_type(ctxt, _qe_, _qf_);},
                 ct);
       case 20:
        var
         ct$0 = match[3],
         cto1 = match[2],
         e$0 = match[1],
         _p3_ = function(_qc_, _qd_){return core_type(ctxt, _qc_, _qd_);};
        return caml_call8
                (pp,
                 f,
                 _ck_,
                 function(_qa_, _qb_){return _M_(ctxt, _qa_, _qb_);},
                 e$0,
                 function(_p__, _p$_){
                  return option(_cj_, _ci_, _p3_, _p__, _p$_);
                 },
                 cto1,
                 function(_p8_, _p9_){return core_type(ctxt, _p8_, _p9_);},
                 ct$0);
       case 32:
        var me = match[1];
        return caml_call4
                (pp,
                 f,
                 _cl_,
                 function(_p6_, _p7_){return module_expr(ctxt, _p6_, _p7_);},
                 me);
     }
    return paren
            (0,
             0,
             1,
             function(_p4_, _p5_){return _M_(ctxt, _p4_, _p5_);},
             f,
             x);
   }
   function simple_expr(ctxt, f, x){
    return caml_trampoline(simple_expr$0(0, ctxt, f, x));
   }
   function attributes(ctxt, f, l){
    return caml_call2
            (Stdlib_List[18],
             function(a){
              return caml_call5
                      (pp,
                       f,
                       _cm_,
                       a[1][1],
                       function(_pL_, _pM_){return payload(ctxt, _pL_, _pM_);},
                       a[2]);
             },
             l);
   }
   function item_attributes(ctxt, f, l){
    return caml_call2
            (Stdlib_List[18],
             function(a){
              return caml_call5
                      (pp,
                       f,
                       _cn_,
                       a[1][1],
                       function(_pJ_, _pK_){return payload(ctxt, _pJ_, _pK_);},
                       a[2]);
             },
             l);
   }
   function floating_attribute(ctxt, f, a){
    return caml_call5
            (pp,
             f,
             _co_,
             a[1][1],
             function(_pH_, _pI_){return payload(ctxt, _pH_, _pI_);},
             a[2]);
   }
   function value_description(ctxt, f, x){
    return caml_call6
            (pp,
             f,
             _cq_,
             function(_pF_, _pG_){return core_type(ctxt, _pF_, _pG_);},
             x[2],
             function(f, x){
              var _pz_ = 0 !== x[3] ? 1 : 0;
              if(! _pz_) return _pz_;
              var _pA_ = 0, _pB_ = 0, _pC_ = 0;
              return caml_call4
                      (pp,
                       f,
                       _cp_,
                       function(_pD_, _pE_){
                        return list(_pC_, _pB_, _pA_, constant_string, _pD_, _pE_);
                       },
                       x[3]);
             },
             x);
   }
   function extension(ctxt, f, param){
    var e = param[2], s = param[1];
    return caml_call5
            (pp,
             f,
             _cr_,
             s[1],
             function(_px_, _py_){return payload(ctxt, _px_, _py_);},
             e);
   }
   function item_extension(ctxt, f, param){
    var e = param[2], s = param[1];
    return caml_call5
            (pp,
             f,
             _cs_,
             s[1],
             function(_pv_, _pw_){return payload(ctxt, _pv_, _pw_);},
             e);
   }
   function exception_declaration(ctxt, f, x){
    return caml_call6
            (pp,
             f,
             _ct_,
             function(_pt_, _pu_){
              return extension_constructor(ctxt, _pt_, _pu_);
             },
             x[1],
             function(_pr_, _ps_){return item_attributes(ctxt, _pr_, _ps_);},
             x[3]);
   }
   function class_type_field(ctxt, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var ct = match[1];
       return caml_call6
               (pp,
                f,
                _cu_,
                function(_pp_, _pq_){return class_type(ctxt, _pp_, _pq_);},
                ct,
                function(_pn_, _po_){
                 return item_attributes(ctxt, _pn_, _po_);
                },
                x[3]);
      case 1:
       var
        match$0 = match[1],
        ct$0 = match$0[4],
        vf = match$0[3],
        mf = match$0[2],
        s = match$0[1];
       return caml_call11
               (pp,
                f,
                _cv_,
                mutable_flag,
                mf,
                virtual_flag,
                vf,
                s[1],
                function(_pl_, _pm_){return core_type(ctxt, _pl_, _pm_);},
                ct$0,
                function(_pj_, _pk_){
                 return item_attributes(ctxt, _pj_, _pk_);
                },
                x[3]);
      case 2:
       var
        match$1 = match[1],
        ct$1 = match$1[4],
        vf$0 = match$1[3],
        pf = match$1[2],
        s$0 = match$1[1];
       return caml_call11
               (pp,
                f,
                _cw_,
                private_flag,
                pf,
                virtual_flag,
                vf$0,
                s$0[1],
                function(_ph_, _pi_){return core_type(ctxt, _ph_, _pi_);},
                ct$1,
                function(_pf_, _pg_){
                 return item_attributes(ctxt, _pf_, _pg_);
                },
                x[3]);
      case 3:
       var match$2 = match[1], ct2 = match$2[2], ct1 = match$2[1];
       return caml_call8
               (pp,
                f,
                _cx_,
                function(_pd_, _pe_){return core_type(ctxt, _pd_, _pe_);},
                ct1,
                function(_pb_, _pc_){return core_type(ctxt, _pb_, _pc_);},
                ct2,
                function(_o$_, _pa_){
                 return item_attributes(ctxt, _o$_, _pa_);
                },
                x[3]);
      case 4:
       var a = match[1]; return floating_attribute(ctxt, f, a);
      default:
       var e = match[1];
       item_extension(ctxt, f, e);
       return item_attributes(ctxt, f, x[3]);
    }
   }
   function class_signature(ctxt, f, param){
    var l = param[2], ct = param[1];
    function _o2_(_o9_, _o__){return class_type_field(ctxt, _o9_, _o__);}
    var _o3_ = 0, _o4_ = 0;
    return caml_call6
            (pp,
             f,
             _cA_,
             function(f, ct){
              if(typeof ct[1] === "number" && ! ct[4]) return 0;
              return caml_call4
                      (pp,
                       f,
                       _cz_,
                       function(_o7_, _o8_){return core_type(ctxt, _o7_, _o8_);},
                       ct);
             },
             ct,
             function(_o5_, _o6_){
              return list(_cy_, _o4_, _o3_, _o2_, _o5_, _o6_);
             },
             l);
   }
   function class_type(ctxt, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var l = match[2], li = match[1];
       return caml_call8
               (pp,
                f,
                _cD_,
                function(f, l){
                 if(! l) return 0;
                 function _oV_(_o0_, _o1_){
                  return core_type(ctxt, _o0_, _o1_);
                 }
                 var _oW_ = 0, _oX_ = 0;
                 return caml_call4
                         (pp,
                          f,
                          _cC_,
                          function(_oY_, _oZ_){
                           return list(_cB_, _oX_, _oW_, _oV_, _oY_, _oZ_);
                          },
                          l);
                },
                l,
                longident_loc,
                li,
                function(_oT_, _oU_){return attributes(ctxt, _oT_, _oU_);},
                x[3]);
      case 1:
       var cs = match[1];
       class_signature(ctxt, f, cs);
       return attributes(ctxt, f, x[3]);
      case 2:
       var cl = match[3], co = match[2], l$0 = match[1];
       return caml_call6
               (pp,
                f,
                _cE_,
                function(_oR_, _oS_){
                 return type_with_label(ctxt, _oR_, _oS_);
                },
                [0, l$0, co],
                function(_oP_, _oQ_){return class_type(ctxt, _oP_, _oQ_);},
                cl);
      case 3:
       var e = match[1];
       extension(ctxt, f, e);
       return attributes(ctxt, f, x[3]);
      default:
       var e$0 = match[2], o = match[1], _oM_ = o[1];
       return caml_call7
               (pp,
                f,
                _cF_,
                override(o[2]),
                longident_loc,
                _oM_,
                function(_oN_, _oO_){return class_type(ctxt, _oN_, _oO_);},
                e$0);
    }
   }
   function class_type_declaration_list(ctxt, f, l){
    function class_type_declaration(kwd, f, x){
     var txt = x[3][1], ls = x[2];
     return caml_call12
             (pp,
              f,
              _cG_,
              kwd,
              virtual_flag,
              x[1],
              function(_oK_, _oL_){return class_params_def(ctxt, _oK_, _oL_);},
              ls,
              txt,
              function(_oI_, _oJ_){return class_type(ctxt, _oI_, _oJ_);},
              x[4],
              function(_oG_, _oH_){return item_attributes(ctxt, _oG_, _oH_);},
              x[6]);
    }
    if(! l) return 0;
    var x = l[1];
    if(! l[2]) return class_type_declaration(cst_class_type$0, f, x);
    var xs = l[2];
    function _ox_(_oE_, _oF_){
     return class_type_declaration(cst_and, _oE_, _oF_);
    }
    var _oy_ = 0, _oz_ = 0;
    return caml_call6
            (pp,
             f,
             _cI_,
             function(_oC_, _oD_){
              return class_type_declaration(cst_class_type, _oC_, _oD_);
             },
             x,
             function(_oA_, _oB_){
              return list(_cH_, _oz_, _oy_, _ox_, _oA_, _oB_);
             },
             xs);
   }
   function class_field(ctxt, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var so = match[3], ce = match[2], ovf = match[1], _nV_ = x[3];
       return caml_call9
               (pp,
                f,
                _cK_,
                override(ovf),
                function(_ov_, _ow_){return class_expr(ctxt, _ov_, _ow_);},
                ce,
                function(f, so){
                 if(! so) return 0;
                 var s = so[1];
                 return caml_call3(pp, f, _cJ_, s[1]);
                },
                so,
                function(_ot_, _ou_){
                 return item_attributes(ctxt, _ot_, _ou_);
                },
                _nV_);
      case 1:
       var _nW_ = match[1], match$0 = _nW_[3], mf = _nW_[2], s = _nW_[1];
       if(0 === match$0[0]){
        var ct = match$0[1];
        return caml_call9
                (pp,
                 f,
                 _cL_,
                 mutable_flag,
                 mf,
                 s[1],
                 function(_or_, _os_){return core_type(ctxt, _or_, _os_);},
                 ct,
                 function(_op_, _oq_){
                  return item_attributes(ctxt, _op_, _oq_);
                 },
                 x[3]);
       }
       var e = match$0[2], ovf$0 = match$0[1], _nX_ = x[3], _nY_ = s[1];
       return caml_call10
               (pp,
                f,
                _cM_,
                override(ovf$0),
                mutable_flag,
                mf,
                _nY_,
                function(_on_, _oo_){return _M_(ctxt, _on_, _oo_);},
                e,
                function(_ol_, _om_){
                 return item_attributes(ctxt, _ol_, _om_);
                },
                _nX_);
      case 2:
       var _nZ_ = match[1], match$1 = _nZ_[3], pf = _nZ_[2], s$0 = _nZ_[1];
       if(0 === match$1[0]){
        var ct$0 = match$1[1];
        return caml_call9
                (pp,
                 f,
                 _cN_,
                 private_flag,
                 pf,
                 s$0[1],
                 function(_oj_, _ok_){return core_type(ctxt, _oj_, _ok_);},
                 ct$0,
                 function(_oh_, _oi_){
                  return item_attributes(ctxt, _oh_, _oi_);
                 },
                 x[3]);
       }
       var
        e$0 = match$1[2],
        ovf$1 = match$1[1],
        bind =
          function(e){
           return binding
                   (ctxt,
                    f,
                    [0,
                     [0, [0, s$0], Astlib_Location[4], 0, 0],
                     e,
                     0,
                     Astlib_Location[4]]);
          },
        _n0_ = x[3];
       return caml_call9
               (pp,
                f,
                _cP_,
                override(ovf$1),
                private_flag,
                pf,
                function(f, param){
                 var _ob_ = param[1];
                 a:
                 if(typeof _ob_ !== "number" && 29 === _ob_[0]){
                  var _oc_ = _ob_[2], e = _ob_[1];
                  if(_oc_){
                   if(param[4]) break a;
                   var ct = _oc_[1];
                   return caml_call7
                           (pp,
                            f,
                            _cO_,
                            s$0[1],
                            function(_of_, _og_){return core_type(ctxt, _of_, _og_);},
                            ct,
                            function(_od_, _oe_){return _M_(ctxt, _od_, _oe_);},
                            e);
                  }
                  if(param[4]) break a;
                  return bind(e);
                 }
                 return bind(e$0);
                },
                e$0,
                function(_n$_, _oa_){
                 return item_attributes(ctxt, _n$_, _oa_);
                },
                _n0_);
      case 3:
       var match$2 = match[1], ct2 = match$2[2], ct1 = match$2[1];
       return caml_call8
               (pp,
                f,
                _cQ_,
                function(_n9_, _n__){return core_type(ctxt, _n9_, _n__);},
                ct1,
                function(_n7_, _n8_){return core_type(ctxt, _n7_, _n8_);},
                ct2,
                function(_n5_, _n6_){
                 return item_attributes(ctxt, _n5_, _n6_);
                },
                x[3]);
      case 4:
       var e$1 = match[1];
       return caml_call6
               (pp,
                f,
                _cR_,
                function(_n3_, _n4_){return _M_(ctxt, _n3_, _n4_);},
                e$1,
                function(_n1_, _n2_){
                 return item_attributes(ctxt, _n1_, _n2_);
                },
                x[3]);
      case 5:
       var a = match[1]; return floating_attribute(ctxt, f, a);
      default:
       var e$2 = match[1];
       item_extension(ctxt, f, e$2);
       return item_attributes(ctxt, f, x[3]);
    }
   }
   function class_structure(ctxt, f, param){
    var l = param[2], p = param[1];
    function _nI_(_nT_, _nU_){return class_field(ctxt, _nT_, _nU_);}
    var _nJ_ = 0, _nK_ = 0, _nL_ = 0;
    return caml_call6
            (pp,
             f,
             _cU_,
             function(f, p){
              var _nO_ = p[1];
              return typeof _nO_ === "number"
                      ? 0
                      : 10
                        === _nO_[0]
                        ? caml_call4
                          (pp,
                           f,
                           _cT_,
                           function(_nP_, _nQ_){return pattern(ctxt, _nP_, _nQ_);},
                           p)
                        : caml_call4
                          (pp,
                           f,
                           _cS_,
                           function(_nR_, _nS_){return pattern(ctxt, _nR_, _nS_);},
                           p);
             },
             p,
             function(_nM_, _nN_){
              return list(_nL_, _nK_, _nJ_, _nI_, _nM_, _nN_);
             },
             l);
   }
   function class_expr(ctxt, f, x){
    if(0 !== x[3])
     return caml_call6
             (pp,
              f,
              _c3_,
              function(_nG_, _nH_){return class_expr(ctxt, _nG_, _nH_);},
              [0, x[1], x[2], 0],
              function(_nE_, _nF_){return attributes(ctxt, _nE_, _nF_);},
              x[3]);
    var match = x[1];
    switch(match[0]){
      case 0:
       var l = match[2], li = match[1];
       return caml_call6
               (pp,
                f,
                _cX_,
                function(f, l){
                 var _nw_ = 0 !== l ? 1 : 0;
                 if(! _nw_) return _nw_;
                 function _nx_(_nC_, _nD_){
                  return core_type(ctxt, _nC_, _nD_);
                 }
                 var _ny_ = 0, _nz_ = 0;
                 return caml_call4
                         (pp,
                          f,
                          _cW_,
                          function(_nA_, _nB_){
                           return list(_cV_, _nz_, _ny_, _nx_, _nA_, _nB_);
                          },
                          l);
                },
                l,
                longident_loc,
                li);
      case 1:
       var cs = match[1]; return class_structure(ctxt, f, cs);
      case 2:
       var e = match[4], p = match[3], eo = match[2], l$0 = match[1];
       return caml_call6
               (pp,
                f,
                _cY_,
                function(_nu_, _nv_){return label_exp(ctxt, _nu_, _nv_);},
                [0, l$0, eo, p],
                function(_ns_, _nt_){return class_expr(ctxt, _ns_, _nt_);},
                e);
      case 3:
       var
        l$1 = match[2],
        ce = match[1],
        _m9_ =
          function(_nq_, _nr_){
           return label_x_expression_param(ctxt, _nq_, _nr_);
          },
        _m__ = 0,
        _m$_ = 0,
        _na_ = 0;
       return caml_call6
               (pp,
                f,
                _cZ_,
                function(_no_, _np_){return class_expr(ctxt, _no_, _np_);},
                ce,
                function(_nm_, _nn_){
                 return list(_na_, _m$_, _m__, _m9_, _nm_, _nn_);
                },
                l$1);
      case 4:
       var ce$0 = match[3], l$2 = match[2], rf = match[1];
       return caml_call6
               (pp,
                f,
                _c0_,
                function(_nk_, _nl_){return bindings(ctxt, _nk_, _nl_);},
                [0, rf, l$2],
                function(_ni_, _nj_){return class_expr(ctxt, _ni_, _nj_);},
                ce$0);
      case 5:
       var ct = match[2], ce$1 = match[1];
       return caml_call6
               (pp,
                f,
                _c1_,
                function(_ng_, _nh_){return class_expr(ctxt, _ng_, _nh_);},
                ce$1,
                function(_ne_, _nf_){return class_type(ctxt, _ne_, _nf_);},
                ct);
      case 6:
       var e$0 = match[1]; return extension(ctxt, f, e$0);
      default:
       var e$1 = match[2], o = match[1], _nb_ = o[1];
       return caml_call7
               (pp,
                f,
                _c2_,
                override(o[2]),
                longident_loc,
                _nb_,
                function(_nc_, _nd_){return class_expr(ctxt, _nc_, _nd_);},
                e$1);
    }
   }
   function module_type$1(counter, ctxt, f, x){
    var x$0 = x;
    for(;;){
     if(0 !== x$0[3])
      return caml_call6
              (pp,
               f,
               _c9_,
               function(_m7_, _m8_){return module_type(ctxt, _m7_, _m8_);},
               [0, x$0[1], x$0[2], 0],
               function(_m5_, _m6_){return attributes(ctxt, _m5_, _m6_);},
               x$0[3]);
     var _mt_ = x$0[1];
     switch(_mt_[0]){
       case 2:
        var match = _mt_[1];
        if(! match){
         var mt2$0 = _mt_[2];
         return caml_call4
                 (pp,
                  f,
                  _c6_,
                  function(_m3_, _m4_){return module_type(ctxt, _m3_, _m4_);},
                  mt2$0);
        }
        var mt2 = _mt_[2], mt1 = match[2], s = match[1], match$0 = s[1];
        if(! match$0)
         return caml_call6
                 (pp,
                  f,
                  _c5_,
                  function(_m1_, _m2_){return module_type1(ctxt, _m1_, _m2_);},
                  mt1,
                  function(_mZ_, _m0_){return module_type(ctxt, _mZ_, _m0_);},
                  mt2);
        var name = match$0[1];
        return caml_call7
                (pp,
                 f,
                 _c4_,
                 name,
                 function(_mX_, _mY_){return module_type(ctxt, _mX_, _mY_);},
                 mt1,
                 function(_mV_, _mW_){return module_type(ctxt, _mV_, _mW_);},
                 mt2);
       case 3:
        var mt = _mt_[1];
        if(_mt_[2]){
         var
          l = _mt_[2],
          _mu_ =
            function(f, param){
             switch(param[0]){
               case 0:
                var
                 td = param[2],
                 ls = td[2],
                 li = param[1],
                 ls$0 =
                   caml_call2
                    (Stdlib_List[20], function(_mU_){return _mU_[1];}, ls),
                 _mB_ =
                   function(_mS_, _mT_){return core_type(ctxt, _mS_, _mT_);};
                return caml_call8
                        (pp,
                         f,
                         _db_,
                         function(_mQ_, _mR_){
                          return list(_da_, _c$_, _c__, _mB_, _mQ_, _mR_);
                         },
                         ls$0,
                         longident_loc,
                         li,
                         function(_mO_, _mP_){
                          return type_declaration(ctxt, _mO_, _mP_);
                         },
                         td);
               case 1:
                var li2 = param[2], li$0 = param[1];
                return caml_call6
                        (pp, f, _dc_, longident_loc, li$0, longident_loc, li2);
               case 2:
                var mty = param[2], li$1 = param[1];
                return caml_call6
                        (pp,
                         f,
                         _dd_,
                         longident_loc,
                         li$1,
                         function(_mM_, _mN_){return module_type(ctxt, _mM_, _mN_);},
                         mty);
               case 3:
                var mty$0 = param[2], li$2 = param[1];
                return caml_call6
                        (pp,
                         f,
                         _de_,
                         longident_loc,
                         li$2,
                         function(_mK_, _mL_){return module_type(ctxt, _mK_, _mL_);},
                         mty$0);
               case 4:
                var
                 td$0 = param[2],
                 ls$1 = td$0[2],
                 li$3 = param[1],
                 ls$2 =
                   caml_call2
                    (Stdlib_List[20], function(_mJ_){return _mJ_[1];}, ls$1),
                 _mC_ =
                   function(_mH_, _mI_){return core_type(ctxt, _mH_, _mI_);};
                return caml_call8
                        (pp,
                         f,
                         _di_,
                         function(_mF_, _mG_){
                          return list(_dh_, _dg_, _df_, _mC_, _mF_, _mG_);
                         },
                         ls$2,
                         longident_loc,
                         li$3,
                         function(_mD_, _mE_){
                          return type_declaration(ctxt, _mD_, _mE_);
                         },
                         td$0);
               default:
                var li2$0 = param[2], li$4 = param[1];
                return caml_call6
                        (pp, f, _dj_, longident_loc, li$4, longident_loc, li2$0);
             }
            },
          _mv_ = 0,
          _mw_ = 0;
         return caml_call6
                 (pp,
                  f,
                  _c8_,
                  function(_mz_, _mA_){return module_type1(ctxt, _mz_, _mA_);},
                  mt,
                  function(_mx_, _my_){
                   return list(_c7_, _mw_, _mv_, _mu_, _mx_, _my_);
                  },
                  l);
        }
        x$0 = mt;
        break;
       default:
        if(counter >= 50)
         return caml_trampoline_return(module_type1$0, [0, ctxt, f, x$0]);
        var counter$0 = counter + 1 | 0;
        return module_type1$0(counter$0, ctxt, f, x$0);
     }
    }
   }
   function module_type(ctxt, f, x){
    return caml_trampoline(module_type$1(0, ctxt, f, x));
   }
   function module_type1$0(counter, ctxt, f, x){
    if(0 === x[3]){
     var match = x[1];
     switch(match[0]){
       case 0:
        var li = match[1]; return caml_call4(pp, f, _dk_, longident_loc, li);
       case 1:
        var
         s = match[1],
         _mh_ = function(_mr_, _ms_){return signature_item(ctxt, _mr_, _ms_);},
         _mi_ = 0,
         _mj_ = 0,
         _mk_ = 0;
        return caml_call4
                (pp,
                 f,
                 _dl_,
                 function(_mp_, _mq_){
                  return list(_mk_, _mj_, _mi_, _mh_, _mp_, _mq_);
                 },
                 s);
       case 4:
        var me = match[1];
        return caml_call4
                (pp,
                 f,
                 _dm_,
                 function(_mn_, _mo_){return module_expr(ctxt, _mn_, _mo_);},
                 me);
       case 5:
        var e = match[1]; return extension(ctxt, f, e);
       case 6:
        var li$0 = match[1];
        return caml_call4(pp, f, _dn_, longident_loc, li$0);
       default:
        return paren
                (0,
                 0,
                 1,
                 function(_ml_, _mm_){return module_type(ctxt, _ml_, _mm_);},
                 f,
                 x);
     }
    }
    if(counter >= 50)
     return caml_trampoline_return(module_type$1, [0, ctxt, f, x]);
    var counter$0 = counter + 1 | 0;
    return module_type$1(counter$0, ctxt, f, x);
   }
   function module_type1(ctxt, f, x){
    return caml_trampoline(module_type1$0(0, ctxt, f, x));
   }
   function signature(ctxt, f, x){
    return list
            (_do_,
             0,
             0,
             function(_mf_, _mg_){return signature_item(ctxt, _mf_, _mg_);},
             f,
             x);
   }
   function signature_item(ctxt, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var vd = match[1], intro = 0 === vd[3] ? cst_val : cst_external;
       return caml_call9
               (pp,
                f,
                _dp_,
                intro,
                protect_ident,
                vd[1][1],
                function(_md_, _me_){
                 return value_description(ctxt, _md_, _me_);
                },
                vd,
                function(_mb_, _mc_){
                 return item_attributes(ctxt, _mb_, _mc_);
                },
                vd[4]);
      case 1:
       var l = match[2], rf = match[1];
       return type_def_list(ctxt, f, [0, rf, 1, l]);
      case 2:
       var l$0 = match[1]; return type_def_list(ctxt, f, [0, 1, 0, l$0]);
      case 3:
       var te = match[1]; return type_extension(ctxt, f, te);
      case 4:
       var ed = match[1]; return exception_declaration(ctxt, f, ed);
      case 5:
       var pmd = match[1], _lj_ = pmd[2], _lk_ = _lj_[1];
       if(6 === _lk_[0] && ! _lj_[3]){
        var alias = _lk_[1], _ln_ = pmd[3];
        return caml_call7
                (pp,
                 f,
                 _dr_,
                 value(pmd[1][1], cst$26),
                 longident_loc,
                 alias,
                 function(_l$_, _ma_){
                  return item_attributes(ctxt, _l$_, _ma_);
                 },
                 _ln_);
       }
       var _ll_ = pmd[3], _lm_ = pmd[2];
       return caml_call7
               (pp,
                f,
                _dq_,
                value(pmd[1][1], cst$25),
                function(_l9_, _l__){return module_type(ctxt, _l9_, _l__);},
                _lm_,
                function(_l7_, _l8_){
                 return item_attributes(ctxt, _l7_, _l8_);
                },
                _ll_);
      case 6:
       var pms = match[1];
       return caml_call7
               (pp,
                f,
                _ds_,
                pms[1][1],
                longident_loc,
                pms[2],
                function(_l5_, _l6_){
                 return item_attributes(ctxt, _l5_, _l6_);
                },
                pms[3]);
      case 7:
       var decls = match[1], opt$0 = 0, l$1 = decls;
       for(;;){
        var first = opt$0 ? opt$0[1] : 1;
        if(! l$1) return 0;
        var tl = l$1[2], pmd$0 = l$1[1];
        if(first){
         var _lo_ = pmd$0[3], _lp_ = pmd$0[2];
         caml_call7
          (pp,
           f,
           _dt_,
           value(pmd$0[1][1], cst$27),
           function(_lZ_, _l0_){return module_type1(ctxt, _lZ_, _l0_);},
           _lp_,
           function(_lX_, _lY_){return item_attributes(ctxt, _lX_, _lY_);},
           _lo_);
        }
        else{
         var _lq_ = pmd$0[3], _lr_ = pmd$0[2];
         caml_call7
          (pp,
           f,
           _du_,
           value(pmd$0[1][1], cst$28),
           function(_l3_, _l4_){return module_type1(ctxt, _l3_, _l4_);},
           _lr_,
           function(_l1_, _l2_){return item_attributes(ctxt, _l1_, _l2_);},
           _lq_);
        }
        opt$0 = opt;
        l$1 = tl;
       }
       break;
      case 8:
       var
        match$0 = match[1],
        attrs = match$0[3],
        md = match$0[2],
        s = match$0[1];
       return caml_call7
               (pp,
                f,
                _dw_,
                s[1],
                function(f, md){
                 if(! md) return 0;
                 var mt = md[1];
                 caml_call2(Stdlib_Format[32], f, 0);
                 return caml_call4
                         (pp,
                          f,
                          _dv_,
                          function(_lV_, _lW_){return module_type(ctxt, _lV_, _lW_);},
                          mt);
                },
                md,
                function(_lT_, _lU_){
                 return item_attributes(ctxt, _lT_, _lU_);
                },
                attrs);
      case 9:
       var
        match$1 = match[1],
        attrs$0 = match$1[3],
        md$0 = match$1[2],
        s$0 = match$1[1];
       if(! md$0)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dy_], 1);
       var mt = md$0[1];
       return caml_call7
               (pp,
                f,
                _dx_,
                s$0[1],
                function(_lR_, _lS_){return module_type(ctxt, _lR_, _lS_);},
                mt,
                function(_lP_, _lQ_){
                 return item_attributes(ctxt, _lP_, _lQ_);
                },
                attrs$0);
      case 10:
       var od = match[1], _ls_ = od[4], _lt_ = od[1];
       return caml_call7
               (pp,
                f,
                _dz_,
                override(od[2]),
                longident_loc,
                _lt_,
                function(_lN_, _lO_){
                 return item_attributes(ctxt, _lN_, _lO_);
                },
                _ls_);
      case 11:
       var incl = match[1];
       return caml_call6
               (pp,
                f,
                _dA_,
                function(_lL_, _lM_){return module_type(ctxt, _lL_, _lM_);},
                incl[1],
                function(_lJ_, _lK_){
                 return item_attributes(ctxt, _lJ_, _lK_);
                },
                incl[3]);
      case 12:
       var
        l$2 = match[1],
        class_description =
          function(kwd, f, x){
           var txt = x[3][1], ls = x[2];
           return caml_call12
                   (pp,
                    f,
                    _dB_,
                    kwd,
                    virtual_flag,
                    x[1],
                    function(_lH_, _lI_){
                     return class_params_def(ctxt, _lH_, _lI_);
                    },
                    ls,
                    txt,
                    function(_lF_, _lG_){return class_type(ctxt, _lF_, _lG_);},
                    x[4],
                    function(_lD_, _lE_){
                     return item_attributes(ctxt, _lD_, _lE_);
                    },
                    x[6]);
          };
       if(! l$2) return 0;
       var x$0 = l$2[1];
       if(! l$2[2]) return class_description(cst_class$0, f, x$0);
       var
        xs = l$2[2],
        _lu_ =
          function(_lB_, _lC_){
           return class_description(cst_and$0, _lB_, _lC_);
          },
        _lv_ = 0,
        _lw_ = 0;
       return caml_call6
               (pp,
                f,
                _dD_,
                function(_lz_, _lA_){
                 return class_description(cst_class, _lz_, _lA_);
                },
                x$0,
                function(_lx_, _ly_){
                 return list(_dC_, _lw_, _lv_, _lu_, _lx_, _ly_);
                },
                xs);
      case 13:
       var l$3 = match[1]; return class_type_declaration_list(ctxt, f, l$3);
      case 14:
       var a = match[1]; return floating_attribute(ctxt, f, a);
      default:
       var a$0 = match[2], e = match[1];
       item_extension(ctxt, f, e);
       return item_attributes(ctxt, f, a$0);
    }
   }
   function module_expr(ctxt, f, x){
    if(0 !== x[3])
     return caml_call6
             (pp,
              f,
              _dM_,
              function(_lh_, _li_){return module_expr(ctxt, _lh_, _li_);},
              [0, x[1], x[2], 0],
              function(_lf_, _lg_){return attributes(ctxt, _lf_, _lg_);},
              x[3]);
    var match = x[1];
    switch(match[0]){
      case 0:
       var li = match[1]; return caml_call4(pp, f, _dE_, longident_loc, li);
      case 1:
       var
        s = match[1],
        _kU_ = function(_ld_, _le_){return structure_item(ctxt, _ld_, _le_);},
        _kV_ = 0,
        _kW_ = 0;
       return caml_call4
               (pp,
                f,
                _dG_,
                function(_lb_, _lc_){
                 return list(_dF_, _kW_, _kV_, _kU_, _lb_, _lc_);
                },
                s);
      case 2:
       var match$0 = match[1];
       if(match$0){
        var me = match[2], mt = match$0[2], s$0 = match$0[1];
        return caml_call7
                (pp,
                 f,
                 _dH_,
                 value(s$0[1], cst$29),
                 function(_k$_, _la_){return module_type(ctxt, _k$_, _la_);},
                 mt,
                 function(_k9_, _k__){return module_expr(ctxt, _k9_, _k__);},
                 me);
       }
       var me$0 = match[2];
       return caml_call4
               (pp,
                f,
                _dI_,
                function(_k7_, _k8_){return module_expr(ctxt, _k7_, _k8_);},
                me$0);
      case 3:
       var me2 = match[2], me1 = match[1];
       return caml_call6
               (pp,
                f,
                _dJ_,
                function(_k5_, _k6_){return module_expr(ctxt, _k5_, _k6_);},
                me1,
                function(_k3_, _k4_){return module_expr(ctxt, _k3_, _k4_);},
                me2);
      case 4:
       var mt$0 = match[2], me$1 = match[1];
       return caml_call6
               (pp,
                f,
                _dK_,
                function(_k1_, _k2_){return module_expr(ctxt, _k1_, _k2_);},
                me$1,
                function(_kZ_, _k0_){return module_type(ctxt, _kZ_, _k0_);},
                mt$0);
      case 5:
       var e = match[1];
       return caml_call4
               (pp,
                f,
                _dL_,
                function(_kX_, _kY_){return _M_(ctxt, _kX_, _kY_);},
                e);
      default: var e$0 = match[1]; return extension(ctxt, f, e$0);
    }
   }
   function structure(ctxt, f, x){
    return list
            (_dN_,
             0,
             0,
             function(_kS_, _kT_){return structure_item(ctxt, _kS_, _kT_);},
             f,
             x);
   }
   function payload(ctxt, f, param){
    switch(param[0]){
      case 0:
       var x = param[1];
       if(x){
        var _kN_ = x[1][1];
        if(0 === _kN_[0] && ! x[2]){
         var attrs = _kN_[2], e = _kN_[1];
         return caml_call6
                 (pp,
                  f,
                  _dO_,
                  function(_kQ_, _kR_){return _M_(ctxt, _kQ_, _kR_);},
                  e,
                  function(_kO_, _kP_){
                   return item_attributes(ctxt, _kO_, _kP_);
                  },
                  attrs);
        }
       }
       return structure(ctxt, f, x);
      case 1:
       var x$0 = param[1];
       caml_call2(pp, f, _dP_);
       return signature(ctxt, f, x$0);
      case 2:
       var x$1 = param[1];
       caml_call2(pp, f, _dQ_);
       return core_type(ctxt, f, x$1);
      default:
       var match = param[2], x$2 = param[1];
       if(match){
        var e$0 = match[1];
        caml_call2(pp, f, _dR_);
        pattern(ctxt, f, x$2);
        caml_call2(pp, f, _dS_);
        return _M_(ctxt, f, e$0);
       }
       caml_call2(pp, f, _dT_);
       return pattern(ctxt, f, x$2);
    }
   }
   function binding(ctxt, f, param){
    var x = param[2], p = param[1];
    function pp_print_pexp_function(f, x){
     if(0 !== x[4])
      return caml_call4
              (pp,
               f,
               _dY_,
               function(_kL_, _kM_){return _M_(ctxt, _kL_, _kM_);},
               x);
     var match = x[1];
     if(typeof match !== "number")
      switch(match[0]){
        case 4:
         var e = match[4], p = match[3], eo = match[2], label = match[1];
         return 0 === label
                 ? caml_call6
                   (pp,
                    f,
                    _dV_,
                    function(_kH_, _kI_){
                     return simple_pattern(ctxt, _kH_, _kI_);
                    },
                    p,
                    pp_print_pexp_function,
                    e)
                 : caml_call6
                   (pp,
                    f,
                    _dW_,
                    function(_kJ_, _kK_){return label_exp(ctxt, _kJ_, _kK_);},
                    [0, label, eo, p],
                    pp_print_pexp_function,
                    e);
        case 31:
         var e$0 = match[2], str = match[1];
         return caml_call5(pp, f, _dX_, str[1], pp_print_pexp_function, e$0);
      }
     return caml_call4
             (pp,
              f,
              _dU_,
              function(_kF_, _kG_){return _M_(ctxt, _kF_, _kG_);},
              x);
    }
    function tyvars_str(tyvars){
     return caml_call2(Stdlib_List[20], function(v){return v[1];}, tyvars);
    }
    if(0 !== x[4]){
     var _jU_ = p[1];
     a:
     if(typeof _jU_ !== "number" && 10 === _jU_[0]){
      var pat$0 = _jU_[1], _jV_ = pat$0[1];
      if(typeof _jV_ !== "number" && 0 === _jV_[0]){
       var typ = _jU_[2], _jW_ = typ[1];
       if(typeof _jW_ !== "number" && 8 === _jW_[0]){
        if(p[4]) break a;
        return caml_call8
                (pp,
                 f,
                 _d7_,
                 function(_kD_, _kE_){
                  return simple_pattern(ctxt, _kD_, _kE_);
                 },
                 pat$0,
                 function(_kB_, _kC_){return core_type(ctxt, _kB_, _kC_);},
                 typ,
                 function(_kz_, _kA_){return _M_(ctxt, _kz_, _kA_);},
                 x);
       }
       break a;
      }
      break a;
     }
     return caml_call6
             (pp,
              f,
              _d6_,
              function(_kx_, _ky_){return pattern(ctxt, _kx_, _ky_);},
              p,
              function(_kv_, _kw_){return _M_(ctxt, _kv_, _kw_);},
              x);
    }
    var _jH_ = p[1];
    a:
    {
     b:
     if(typeof _jH_ !== "number" && 10 === _jH_[0]){
      var pat = _jH_[1], _jL_ = pat[1];
      if(typeof _jL_ !== "number" && 0 === _jL_[0]){
       var _jM_ = _jH_[2][1];
       if(typeof _jM_ !== "number" && 8 === _jM_[0]){
        if(p[4]) break b;
        var
         rt = _jM_[2],
         args_tyvars = _jM_[1],
         gadt_pattern = [0, [0, pat, args_tyvars, rt]];
        break a;
       }
       break b;
      }
      break b;
     }
     var gadt_pattern = 0;
    }
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var tyvars = 0, e = x;
       f:
       for(;;){
        var _jI_ = e[1];
        if(typeof _jI_ === "number") break d;
        switch(_jI_[0]){
          case 19:
           break e;
          case 31:
           if(e[4]) break f;
           var e$1 = _jI_[2], tyvar = _jI_[1], tyvars$0 = [0, tyvar, tyvars];
           tyvars = tyvars$0;
           e = e$1;
           break;
          default: break c;
        }
       }
       break b;
      }
      if(e[4]) break b;
      var
       ct = _jI_[2],
       e$0 = _jI_[1],
       gadt_exp = [0, [0, caml_call1(Stdlib_List[10], tyvars), e$0, ct]];
      break a;
     }
     var gadt_exp = 0;
    }
    a:
    {
     if(gadt_pattern && gadt_exp){
      var
       _jJ_ = gadt_exp[1],
       e_ct = _jJ_[3],
       e$2 = _jJ_[2],
       var_names$0 = _jJ_[1],
       match = gadt_pattern[1],
       pt_ct = match[3],
       pt_tyvars = match[2],
       p$0 = match[1],
       _jK_ = tyvars_str(var_names$0);
      if(caml_equal(tyvars_str(pt_tyvars), _jK_)){
       var
        check_variable =
          function(vl, loc, v){
           var _ku_ = caml_call2(Stdlib_List[37], v, vl);
           return _ku_
                   ? caml_call3(Astlib_Location[7], [0, loc], _a_, v)
                   : _ku_;
          },
        var_names =
          caml_call2(Stdlib_List[20], function(v){return v[1];}, var_names$0),
        loop =
          function(t){
           var match = t[1];
           if(typeof match === "number")
            var desc = 0;
           else
            switch(match[0]){
              case 0:
               var x = match[1];
               check_variable(var_names, t[2], x);
               var desc = [0, x];
               break;
              case 1:
               var
                core_type = match[3],
                core_type$0 = match[2],
                label = match[1],
                _kr_ = loop(core_type),
                desc = [1, label, loop(core_type$0), _kr_];
               break;
              case 2:
               var
                lst = match[1],
                desc = [2, caml_call2(Stdlib_List[20], loop, lst)];
               break;
              case 3:
               var longident = match[1], _ks_ = longident[1];
               a:
               {
                if(0 === _ks_[0] && ! match[2]){
                 var s = _ks_[1];
                 if(caml_call2(Stdlib_List[37], s, var_names)){var _kt_ = [0, s]; break a;}
                }
                var
                 lst$0 = match[2],
                 _kt_ =
                   [3, longident, caml_call2(Stdlib_List[20], loop, lst$0)];
               }
               var desc = _kt_;
               break;
              case 4:
               var
                o = match[2],
                lst$1 = match[1],
                desc =
                  [4,
                   caml_call2(Stdlib_List[20], loop_object_field, lst$1),
                   o];
               break;
              case 5:
               var
                lst$2 = match[2],
                longident$0 = match[1],
                desc =
                  [5, longident$0, caml_call2(Stdlib_List[20], loop, lst$2)];
               break;
              case 6:
               var string = match[2], core_type$1 = match[1];
               check_variable(var_names, t[2], string);
               var desc = [6, loop(core_type$1), string];
               break;
              case 7:
               var
                lbl_lst_option = match[3],
                flag = match[2],
                row_field_list = match[1],
                desc =
                  [7,
                   caml_call2(Stdlib_List[20], loop_row_field, row_field_list),
                   flag,
                   lbl_lst_option];
               break;
              case 8:
               var core_type$2 = match[2], string_lst = match[1];
               caml_call2
                (Stdlib_List[18],
                 function(v){return check_variable(var_names, t[2], v[1]);},
                 string_lst);
               var desc = [8, string_lst, loop(core_type$2)];
               break;
              case 9:
               var
                match$0 = match[1],
                lst$3 = match$0[2],
                longident$1 = match$0[1],
                desc =
                  [9,
                   [0,
                    longident$1,
                    caml_call2
                     (Stdlib_List[20],
                      function(param){
                       var typ = param[2], n = param[1];
                       return [0, n, loop(typ)];
                      },
                      lst$3)]];
               break;
              default:
               var
                match$1 = match[1],
                arg = match$1[2],
                s$0 = match$1[1],
                desc = [10, [0, s$0, arg]];
            }
           return [0, desc, t[2], t[3], t[4]];
          },
        loop_row_field =
          function(field){
           var match = field[1];
           if(0 === match[0])
            var
             lst = match[3],
             flag = match[2],
             label = match[1],
             prf_desc =
               [0, label, flag, caml_call2(Stdlib_List[20], loop, lst)];
           else
            var t = match[1], prf_desc = [1, loop(t)];
           return [0, prf_desc, field[2], field[3]];
          },
        loop_object_field =
          function(field){
           var match = field[1];
           if(0 === match[0])
            var
             t = match[2],
             label = match[1],
             pof_desc = [0, label, loop(t)];
           else
            var t$0 = match[1], pof_desc = [1, loop(t$0)];
           return [0, pof_desc, field[2], field[3]];
          },
        ety = loop(e_ct);
       if(caml_equal(ety, pt_ct)){
        var match$0 = [0, [0, p$0, pt_tyvars, e_ct, e$2]];
        break a;
       }
       var match$0 = 0;
       break a;
      }
     }
     var match$0 = 0;
    }
    if(match$0){
     var _jN_ = match$0[1], p$1 = _jN_[1];
     if(_jN_[2]){
      var
       e$3 = _jN_[4],
       ct$0 = _jN_[3],
       tyvars$1 = _jN_[2],
       _jO_ = tyvars_str(tyvars$1),
       _jP_ = Stdlib_Format[13],
       _jQ_ = 0,
       _jR_ = 0;
      return caml_call10
              (pp,
               f,
               _d0_,
               function(_kp_, _kq_){return simple_pattern(ctxt, _kp_, _kq_);},
               p$1,
               function(_kn_, _ko_){
                return list(_dZ_, _jR_, _jQ_, _jP_, _kn_, _ko_);
               },
               _jO_,
               function(_kl_, _km_){return core_type(ctxt, _kl_, _km_);},
               ct$0,
               function(_kj_, _kk_){return _M_(ctxt, _kj_, _kk_);},
               e$3);
     }
     var e$4 = _jN_[4], ct$1 = _jN_[3];
     return caml_call8
             (pp,
              f,
              _d1_,
              function(_kh_, _ki_){return simple_pattern(ctxt, _kh_, _ki_);},
              p$1,
              function(_kf_, _kg_){return core_type(ctxt, _kf_, _kg_);},
              ct$1,
              function(_kd_, _ke_){return _M_(ctxt, _kd_, _ke_);},
              e$4);
    }
    var _jS_ = p[1];
    a:
    if(typeof _jS_ !== "number")
     switch(_jS_[0]){
       case 0:
        if(p[4]) break a;
        return caml_call6
                (pp,
                 f,
                 _d3_,
                 function(_kb_, _kc_){
                  return simple_pattern(ctxt, _kb_, _kc_);
                 },
                 p,
                 pp_print_pexp_function,
                 x);
       case 10:
        if(p[4]) break a;
        var ty = _jS_[2], p$2 = _jS_[1], _jT_ = ty[1];
        b:
        if(typeof _jT_ !== "number" && 8 === _jT_[0]){
         if(ty[4]) break b;
         return caml_call8
                 (pp,
                  f,
                  _d5_,
                  function(_j$_, _ka_){
                   return simple_pattern(ctxt, _j$_, _ka_);
                  },
                  p$2,
                  function(_j9_, _j__){return core_type(ctxt, _j9_, _j__);},
                  ty,
                  function(_j7_, _j8_){return _M_(ctxt, _j7_, _j8_);},
                  x);
        }
        return caml_call8
                (pp,
                 f,
                 _d4_,
                 function(_j5_, _j6_){
                  return simple_pattern(ctxt, _j5_, _j6_);
                 },
                 p$2,
                 function(_j3_, _j4_){return core_type(ctxt, _j3_, _j4_);},
                 ty,
                 function(_j1_, _j2_){return _M_(ctxt, _j1_, _j2_);},
                 x);
     }
    return caml_call6
            (pp,
             f,
             _d2_,
             function(_jZ_, _j0_){return pattern(ctxt, _jZ_, _j0_);},
             p,
             function(_jX_, _jY_){return _M_(ctxt, _jX_, _jY_);},
             x);
   }
   function bindings(ctxt, f, param){
    var l = param[2], rf = param[1];
    function binding$0(kwd, rf, f, x){
     return caml_call9
             (pp,
              f,
              _d8_,
              kwd,
              rec_flag,
              rf,
              function(_jF_, _jG_){return binding(ctxt, _jF_, _jG_);},
              x,
              function(_jD_, _jE_){return item_attributes(ctxt, _jD_, _jE_);},
              x[3]);
    }
    if(! l) return 0;
    var x = l[1];
    if(! l[2]) return binding$0(cst_let$0, rf, f, x);
    var xs = l[2], _jt_ = 0;
    function _ju_(_jB_, _jC_){return binding$0(cst_and$1, _jt_, _jB_, _jC_);}
    var _jv_ = 0, _jw_ = 0;
    return caml_call6
            (pp,
             f,
             _d__,
             function(_jz_, _jA_){return binding$0(cst_let, rf, _jz_, _jA_);},
             x,
             function(_jx_, _jy_){
              return list(_d9_, _jw_, _jv_, _ju_, _jx_, _jy_);
             },
             xs);
   }
   function binding_op(ctxt, f, x){
    var pat = x[2], match = x[3], _jm_ = pat[1];
    a:
    if(typeof _jm_ !== "number" && 0 === _jm_[0]){
     if(pat[4]) break a;
     var _jn_ = match[1];
     if(typeof _jn_ !== "number" && 0 === _jn_[0]){
      var _jo_ = _jn_[1][1], pvar = _jm_[1][1];
      if(0 !== _jo_[0]) break a;
      if(match[4]) break a;
      var evar = _jo_[1];
      if(pvar === evar) return caml_call4(pp, f, _ea_, x[1][1], evar);
      break a;
     }
     break a;
    }
    return caml_call7
            (pp,
             f,
             _d$_,
             x[1][1],
             function(_jr_, _js_){return pattern(ctxt, _jr_, _js_);},
             pat,
             function(_jp_, _jq_){return _M_(ctxt, _jp_, _jq_);},
             match);
   }
   function structure_item(ctxt, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var attrs = match[2], e = match[1];
       return caml_call6
               (pp,
                f,
                _eb_,
                function(_jk_, _jl_){return _M_(ctxt, _jk_, _jl_);},
                e,
                function(_ji_, _jj_){
                 return item_attributes(ctxt, _ji_, _jj_);
                },
                attrs);
      case 1:
       var l = match[2], rf = match[1];
       return caml_call4
               (pp,
                f,
                _ec_,
                function(_jg_, _jh_){return bindings(ctxt, _jg_, _jh_);},
                [0, rf, l]);
      case 2:
       var vd = match[1];
       return caml_call8
               (pp,
                f,
                _ed_,
                protect_ident,
                vd[1][1],
                function(_je_, _jf_){
                 return value_description(ctxt, _je_, _jf_);
                },
                vd,
                function(_jc_, _jd_){
                 return item_attributes(ctxt, _jc_, _jd_);
                },
                vd[4]);
      case 3:
       var rf$0 = match[1];
       if(! match[2])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ee_], 1);
       var l$0 = match[2];
       return type_def_list(ctxt, f, [0, rf$0, 1, l$0]);
      case 4:
       var te = match[1]; return type_extension(ctxt, f, te);
      case 5:
       var ed = match[1]; return exception_declaration(ctxt, f, ed);
      case 6:
       var x$0 = match[1], _hR_ = x$0[3], _hS_ = x$0[2];
       return caml_call7
               (pp,
                f,
                _ej_,
                value(x$0[1][1], cst$31),
                function(f$0, me$1){
                 a:
                 b:
                 {
                  var me = me$1;
                  for(;;){
                   var _i4_ = me[1];
                   if(2 !== _i4_[0]) break b;
                   if(me[3]) break;
                   var me$0 = _i4_[2], arg_opt = _i4_[1];
                   if(arg_opt){
                    var mt = arg_opt[2], s = arg_opt[1];
                    caml_call5
                     (pp,
                      f,
                      _ef_,
                      value(s[1], cst$30),
                      function(_ja_, _jb_){return module_type(ctxt, _ja_, _jb_);},
                      mt);
                   }
                   else
                    caml_call2(pp, f, _eg_);
                   me = me$0;
                  }
                  break a;
                 }
                 var _i5_ = me[1];
                 if(4 === _i5_[0]){
                  var mt$0 = _i5_[2], me$2 = _i5_[1];
                  if(1 >= mt$0[1][0] && ! me[3])
                   return caml_call6
                           (pp,
                            f$0,
                            _ei_,
                            function(_i__, _i$_){return module_type(ctxt, _i__, _i$_);},
                            mt$0,
                            function(_i8_, _i9_){return module_expr(ctxt, _i8_, _i9_);},
                            me$2);
                 }
                 return caml_call4
                         (pp,
                          f$0,
                          _eh_,
                          function(_i6_, _i7_){return module_expr(ctxt, _i6_, _i7_);},
                          me);
                },
                _hS_,
                function(_i2_, _i3_){
                 return item_attributes(ctxt, _i2_, _i3_);
                },
                _hR_);
      case 7:
       var
        decls = match[1],
        aux =
          function(f, pmb){
           var match = pmb[2][1];
           if(4 === match[0]){
            var typ = match[2], expr = match[1], _iR_ = pmb[3];
            return caml_call9
                    (pp,
                     f,
                     _el_,
                     value(pmb[1][1], cst$33),
                     function(_i0_, _i1_){return module_type(ctxt, _i0_, _i1_);},
                     typ,
                     function(_iY_, _iZ_){return module_expr(ctxt, _iY_, _iZ_);},
                     expr,
                     function(_iW_, _iX_){
                      return item_attributes(ctxt, _iW_, _iX_);
                     },
                     _iR_);
           }
           var _iP_ = pmb[3], _iQ_ = pmb[2];
           return caml_call7
                   (pp,
                    f,
                    _ek_,
                    value(pmb[1][1], cst$32),
                    function(_iU_, _iV_){return module_expr(ctxt, _iU_, _iV_);},
                    _iQ_,
                    function(_iS_, _iT_){
                     return item_attributes(ctxt, _iS_, _iT_);
                    },
                    _iP_);
          };
       if(! decls)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _eo_], 1);
       var pmb = decls[1], match$0 = pmb[2][1];
       if(4 === match$0[0]){
        var
         l2$0 = decls[2],
         typ = match$0[2],
         expr = match$0[1],
         _hV_ = pmb[3];
        return caml_call11
                (pp,
                 f,
                 _en_,
                 value(pmb[1][1], cst$35),
                 function(_iN_, _iO_){return module_type(ctxt, _iN_, _iO_);},
                 typ,
                 function(_iL_, _iM_){return module_expr(ctxt, _iL_, _iM_);},
                 expr,
                 function(_iJ_, _iK_){
                  return item_attributes(ctxt, _iJ_, _iK_);
                 },
                 _hV_,
                 function(f, l2){
                  return caml_call2
                          (Stdlib_List[18], function(_iI_){return aux(f, _iI_);}, l2);
                 },
                 l2$0);
       }
       var l2 = decls[2], _hT_ = pmb[3], _hU_ = pmb[2];
       return caml_call9
               (pp,
                f,
                _em_,
                value(pmb[1][1], cst$34),
                function(_iG_, _iH_){return module_expr(ctxt, _iG_, _iH_);},
                _hU_,
                function(_iE_, _iF_){
                 return item_attributes(ctxt, _iE_, _iF_);
                },
                _hT_,
                function(f, l2){
                 return caml_call2
                         (Stdlib_List[18], function(_iD_){return aux(f, _iD_);}, l2);
                },
                l2);
      case 8:
       var
        match$1 = match[1],
        attrs$0 = match$1[3],
        md = match$1[2],
        s = match$1[1];
       return caml_call7
               (pp,
                f,
                _eq_,
                s[1],
                function(f, md){
                 if(! md) return 0;
                 var mt = md[1];
                 caml_call2(Stdlib_Format[32], f, 0);
                 return caml_call4
                         (pp,
                          f,
                          _ep_,
                          function(_iB_, _iC_){return module_type(ctxt, _iB_, _iC_);},
                          mt);
                },
                md,
                function(_iz_, _iA_){
                 return item_attributes(ctxt, _iz_, _iA_);
                },
                attrs$0);
      case 9:
       var od = match[1], _hW_ = od[4], _hX_ = od[1];
       return caml_call7
               (pp,
                f,
                _er_,
                override(od[2]),
                function(_ix_, _iy_){return module_expr(ctxt, _ix_, _iy_);},
                _hX_,
                function(_iv_, _iw_){
                 return item_attributes(ctxt, _iv_, _iw_);
                },
                _hW_);
      case 10:
       var
        l$1 = match[1],
        class_constraint =
          function(f, ct){
           return caml_call4
                   (pp,
                    f,
                    _es_,
                    function(_it_, _iu_){return class_type(ctxt, _it_, _iu_);},
                    ct);
          },
        class_declaration =
          function(kwd, f, x){
           var txt = x[3][1], ls = x[2], cl$3 = x[4];
           a:
           b:
           {
            var acc = 0, cl = cl$3;
            for(;;){
             var _h$_ = cl[1];
             if(2 !== _h$_[0]) break b;
             if(cl[3]) break;
             var
              cl$0 = _h$_[4],
              p = _h$_[3],
              eo = _h$_[2],
              l = _h$_[1],
              acc$0 = [0, [0, l, eo, p], acc];
             acc = acc$0;
             cl = cl$0;
            }
            break a;
           }
           var args = caml_call1(Stdlib_List[10], acc), _ia_ = cl[1];
           a:
           {
            if(5 === _ia_[0] && ! cl[3]){
             var ct = _ia_[2], cl$2 = _ia_[1], cl$1 = cl$2, constr = [0, ct];
             break a;
            }
            var cl$1 = cl, constr = 0;
           }
           var _ib_ = 0, _ic_ = 0;
           function _id_(_ir_, _is_){return label_exp(ctxt, _ir_, _is_);}
           var _ie_ = 0, _if_ = 0, _ig_ = 0;
           return caml_call16
                   (pp,
                    f,
                    _et_,
                    kwd,
                    virtual_flag,
                    x[1],
                    function(_ip_, _iq_){
                     return class_params_def(ctxt, _ip_, _iq_);
                    },
                    ls,
                    txt,
                    function(_in_, _io_){
                     return list(_ig_, _if_, _ie_, _id_, _in_, _io_);
                    },
                    args,
                    function(_il_, _im_){
                     return option(_ic_, _ib_, class_constraint, _il_, _im_);
                    },
                    constr,
                    function(_ij_, _ik_){return class_expr(ctxt, _ij_, _ik_);},
                    cl$1,
                    function(_ih_, _ii_){
                     return item_attributes(ctxt, _ih_, _ii_);
                    },
                    x[6]);
          };
       if(! l$1) return 0;
       var x$1 = l$1[1];
       if(! l$1[2]) return class_declaration(cst_class$2, f, x$1);
       var
        xs = l$1[2],
        _hY_ =
          function(_h9_, _h__){
           return class_declaration(cst_and$2, _h9_, _h__);
          },
        _hZ_ = 0,
        _h0_ = 0;
       return caml_call6
               (pp,
                f,
                _ev_,
                function(_h7_, _h8_){
                 return class_declaration(cst_class$1, _h7_, _h8_);
                },
                x$1,
                function(_h5_, _h6_){
                 return list(_eu_, _h0_, _hZ_, _hY_, _h5_, _h6_);
                },
                xs);
      case 11:
       var l$2 = match[1]; return class_type_declaration_list(ctxt, f, l$2);
      case 12:
       var incl = match[1];
       return caml_call6
               (pp,
                f,
                _ew_,
                function(_h3_, _h4_){return module_expr(ctxt, _h3_, _h4_);},
                incl[1],
                function(_h1_, _h2_){
                 return item_attributes(ctxt, _h1_, _h2_);
                },
                incl[3]);
      case 13:
       var a = match[1]; return floating_attribute(ctxt, f, a);
      default:
       var a$0 = match[2], e$0 = match[1];
       item_extension(ctxt, f, e$0);
       return item_attributes(ctxt, f, a$0);
    }
   }
   function type_param(ctxt, f, param){
    var match = param[2], b = match[2], a = match[1], ct = param[1];
    function _hM_(_hP_, _hQ_){return core_type(ctxt, _hP_, _hQ_);}
    var _hN_ = b ? cst$4 : cst$5;
    switch(a){
      case 0:
       var _hO_ = cst$1; break;
      case 1:
       var _hO_ = cst$2; break;
      default: var _hO_ = cst$3;
    }
    return caml_call6(pp, f, _ex_, _hO_, _hN_, _hM_, ct);
   }
   function type_def_list(ctxt, f, param){
    var l = param[3], exported = param[2], rf = param[1];
    function type_decl(kwd, rf, f, x){
     a:
     {
      if(0 === x[4] && 0 === x[6]){var eq = cst$36; break a;}
      var eq = exported ? cst$37 : cst$38;
     }
     return caml_call13
             (pp,
              f,
              _eC_,
              kwd,
              nonrec_flag,
              rf,
              function(f, l){
               if(! l) return 0;
               function _hH_(_hK_, _hL_){return type_param(ctxt, _hK_, _hL_);}
               return caml_call4
                       (pp,
                        f,
                        _eB_,
                        function(_hI_, _hJ_){
                         return list(_eA_, _ez_, _ey_, _hH_, _hI_, _hJ_);
                        },
                        l);
              },
              x[2],
              x[1][1],
              eq,
              function(_hF_, _hG_){return type_declaration(ctxt, _hF_, _hG_);},
              x,
              function(_hD_, _hE_){return item_attributes(ctxt, _hD_, _hE_);},
              x[7]);
    }
    if(! l) throw caml_maybe_attach_backtrace([0, Assert_failure, _eF_], 1);
    var x = l[1];
    if(! l[2]) return type_decl(cst_type$0, rf, f, x);
    var xs = l[2], _ht_ = 1;
    function _hu_(_hB_, _hC_){return type_decl(cst_and$3, _ht_, _hB_, _hC_);}
    var _hv_ = 0, _hw_ = 0;
    return caml_call6
            (pp,
             f,
             _eE_,
             function(_hz_, _hA_){return type_decl(cst_type, rf, _hz_, _hA_);},
             x,
             function(_hx_, _hy_){
              return list(_eD_, _hw_, _hv_, _hu_, _hx_, _hy_);
             },
             xs);
   }
   function record_declaration(ctxt, f, lbls){
    function type_record_field(f, pld){
     return caml_call9
             (pp,
              f,
              _eG_,
              mutable_flag,
              pld[2],
              pld[1][1],
              function(_hr_, _hs_){return core_type(ctxt, _hr_, _hs_);},
              pld[3],
              function(_hp_, _hq_){return attributes(ctxt, _hp_, _hq_);},
              pld[5]);
    }
    var _hl_ = 0, _hm_ = 0;
    return caml_call4
            (pp,
             f,
             _eI_,
             function(_hn_, _ho_){
              return list(_eH_, _hm_, _hl_, type_record_field, _hn_, _ho_);
             },
             lbls);
   }
   function type_declaration(ctxt, f, x){
    function priv(f){return x[5] ? 0 : caml_call2(pp, f, _eJ_);}
    function manifest(f){
     var match = x[6];
     if(! match) return 0;
     var y = match[1];
     return 0 === x[4]
             ? caml_call5
               (pp,
                f,
                _eK_,
                priv,
                function(_hh_, _hi_){return core_type(ctxt, _hh_, _hi_);},
                y)
             : caml_call4
               (pp,
                f,
                _eL_,
                function(_hj_, _hk_){return core_type(ctxt, _hj_, _hk_);},
                y);
    }
    function constructor_declaration$0(f, pcd){
     caml_call2(pp, f, _eM_);
     return constructor_declaration
             (ctxt, f, [0, pcd[1][1], pcd[2], pcd[3], pcd[4], pcd[6]]);
    }
    function repr(f){
     function intro(f){return 0 === x[6] ? 0 : caml_call2(pp, f, _eN_);}
     var match = x[4];
     if(typeof match === "number")
      return 0 === match ? 0 : caml_call4(pp, f, _eO_, intro, priv);
     if(0 === match[0]){
      var
       xs = match[1],
       variants =
         function(fmt, xs){
          if(0 === xs) return caml_call2(pp, fmt, _eP_);
          var _hd_ = 0, _he_ = 0;
          return caml_call4
                  (pp,
                   fmt,
                   _eR_,
                   function(_hf_, _hg_){
                    return list
                            (_eQ_, _he_, _hd_, constructor_declaration$0, _hf_, _hg_);
                   },
                   xs);
         };
      return caml_call6(pp, f, _eS_, intro, priv, variants, xs);
     }
     var l = match[1];
     return caml_call6
             (pp,
              f,
              _eT_,
              intro,
              priv,
              function(_hb_, _hc_){
               return record_declaration(ctxt, _hb_, _hc_);
              },
              l);
    }
    function constraints(f){
     return caml_call2
             (Stdlib_List[18],
              function(param){
               var ct2 = param[2], ct1 = param[1];
               return caml_call6
                       (pp,
                        f,
                        _eU_,
                        function(_g$_, _ha_){return core_type(ctxt, _g$_, _ha_);},
                        ct1,
                        function(_g9_, _g__){return core_type(ctxt, _g9_, _g__);},
                        ct2);
              },
              x[3]);
    }
    return caml_call5(pp, f, _eV_, manifest, repr, constraints);
   }
   function type_extension(ctxt, f, x){
    function extension_constructor$0(f, x){
     return caml_call4
             (pp,
              f,
              _eW_,
              function(_g7_, _g8_){
               return extension_constructor(ctxt, _g7_, _g8_);
              },
              x);
    }
    var _gW_ = 0, _gX_ = 0;
    return caml_call12
            (pp,
             f,
             _e2_,
             function(f, l){
              if(! l) return 0;
              function _g2_(_g5_, _g6_){return type_param(ctxt, _g5_, _g6_);}
              return caml_call4
                      (pp,
                       f,
                       _e1_,
                       function(_g3_, _g4_){
                        return list(_e0_, _eZ_, _eY_, _g2_, _g3_, _g4_);
                       },
                       l);
             },
             x[2],
             longident_loc,
             x[1],
             private_flag,
             x[4],
             function(_g0_, _g1_){
              return list
                      (_eX_, _gX_, _gW_, extension_constructor$0, _g0_, _g1_);
             },
             x[3],
             function(_gY_, _gZ_){return item_attributes(ctxt, _gY_, _gZ_);},
             x[6]);
   }
   function constructor_declaration(ctxt, f, param){
    var
     attrs = param[5],
     res = param[4],
     args = param[3],
     vars = param[2],
     name = param[1],
     name$0 = name !== cst$58 ? name : cst$39;
    function pp_vars(f, vs){
     if(! vs) return 0;
     var _gS_ = 0, _gT_ = 0;
     return caml_call4
             (pp,
              f,
              _e4_,
              function(_gU_, _gV_){
               return list(_e3_, _gT_, _gS_, tyvar_loc, _gU_, _gV_);
              },
              vs);
    }
    if(! res)
     return caml_call7
             (pp,
              f,
              _fa_,
              name$0,
              function(f, param){
               if(0 !== param[0]){
                var l$0 = param[1];
                return caml_call4
                        (pp,
                         f,
                         _e$_,
                         function(_gQ_, _gR_){
                          return record_declaration(ctxt, _gQ_, _gR_);
                         },
                         l$0);
               }
               var l = param[1];
               if(! l) return 0;
               function _gJ_(_gO_, _gP_){return core_type1(ctxt, _gO_, _gP_);}
               var _gK_ = 0, _gL_ = 0;
               return caml_call4
                       (pp,
                        f,
                        _e__,
                        function(_gM_, _gN_){
                         return list(_e9_, _gL_, _gK_, _gJ_, _gM_, _gN_);
                        },
                        l);
              },
              args,
              function(_gH_, _gI_){return attributes(ctxt, _gH_, _gI_);},
              attrs);
    var r = res[1];
    return caml_call9
            (pp,
             f,
             _e8_,
             name$0,
             pp_vars,
             vars,
             function(f, param){
              if(0 !== param[0]){
               var l$0 = param[1];
               return caml_call6
                       (pp,
                        f,
                        _e7_,
                        function(_gF_, _gG_){
                         return record_declaration(ctxt, _gF_, _gG_);
                        },
                        l$0,
                        function(_gD_, _gE_){return core_type1(ctxt, _gD_, _gE_);},
                        r);
              }
              var l = param[1];
              if(! l) return core_type1(ctxt, f, r);
              function _gu_(_gB_, _gC_){return core_type1(ctxt, _gB_, _gC_);}
              var _gv_ = 0, _gw_ = 0;
              return caml_call6
                      (pp,
                       f,
                       _e6_,
                       function(_gz_, _gA_){
                        return list(_e5_, _gw_, _gv_, _gu_, _gz_, _gA_);
                       },
                       l,
                       function(_gx_, _gy_){return core_type1(ctxt, _gx_, _gy_);},
                       r);
             },
             args,
             function(_gs_, _gt_){return attributes(ctxt, _gs_, _gt_);},
             attrs);
   }
   function extension_constructor(ctxt, f, x){
    var match = x[2];
    if(0 === match[0]){
     var r = match[3], l = match[2], v = match[1];
     return constructor_declaration(ctxt, f, [0, x[1][1], v, l, r, x[4]]);
    }
    var li = match[1];
    return caml_call7
            (pp,
             f,
             _fb_,
             x[1][1],
             longident_loc,
             li,
             function(_gq_, _gr_){return attributes(ctxt, _gq_, _gr_);},
             x[4]);
   }
   function case_list(ctxt, f, l){
    function aux(f, param){
     var
      pc_rhs = param[3],
      pc_guard = param[2],
      pc_lhs = param[1],
      _gf_ = [0, 1, ctxt[2], ctxt[3]];
     function _gg_(_go_, _gp_){return _M_(ctxt, _go_, _gp_);}
     var _gh_ = 0;
     return caml_call8
             (pp,
              f,
              _fd_,
              function(_gm_, _gn_){return pattern(ctxt, _gm_, _gn_);},
              pc_lhs,
              function(_gk_, _gl_){
               return option(_fc_, _gh_, _gg_, _gk_, _gl_);
              },
              pc_guard,
              function(_gi_, _gj_){return _M_(_gf_, _gi_, _gj_);},
              pc_rhs);
    }
    return list(_fe_, 0, 0, aux, f, l);
   }
   function label_x_expression_param(ctxt, f, param){
    var e = param[2], l = param[1], _f$_ = e[1];
    a:
    {
     b:
     if(typeof _f$_ !== "number" && 0 === _f$_[0]){
      var _ga_ = _f$_[1][1];
      if(0 !== _ga_[0]) break b;
      if(e[4]) break b;
      var l$0 = _ga_[1], simple_name = [0, l$0];
      break a;
     }
     var simple_name = 0;
    }
    if(typeof l === "number") return expression2(ctxt, f, e);
    if(0 === l[0]){
     var lbl = l[1];
     return caml_equal([0, lbl], simple_name)
             ? caml_call3(pp, f, _ff_, lbl)
             : caml_call5
               (pp,
                f,
                _fg_,
                lbl,
                function(_gd_, _ge_){return simple_expr(ctxt, _gd_, _ge_);},
                e);
    }
    var str = l[1];
    return caml_equal([0, str], simple_name)
            ? caml_call3(pp, f, _fh_, str)
            : caml_call5
              (pp,
               f,
               _fi_,
               str,
               function(_gb_, _gc_){return simple_expr(ctxt, _gb_, _gc_);},
               e);
   }
   function directive_argument(f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var s = match[1]; return caml_call3(pp, f, _fj_, s);
      case 1:
       var match$0 = match[2], n = match[1];
       if(! match$0) return caml_call3(pp, f, _fl_, n);
       var m = match$0[1];
       return caml_call4(pp, f, _fk_, n, m);
      case 2:
       var li = match[1]; return caml_call4(pp, f, _fm_, print_longident, li);
      default:
       var b = match[1];
       return caml_call3(pp, f, _fn_, caml_call1(Stdlib[30], b));
    }
   }
   function toplevel_phrase(f, x){
    if(0 === x[0]){
     var
      s = x[1],
      _f2_ =
        function(_f9_, _f__){return structure_item(reset_ctxt, _f9_, _f__);},
      _f3_ = 0,
      _f4_ = 0,
      _f5_ = 0;
     return caml_call4
             (pp,
              f,
              _fo_,
              function(_f7_, _f8_){
               return list(_f5_, _f4_, _f3_, _f2_, _f7_, _f8_);
              },
              s);
    }
    var _f6_ = x[1], match = _f6_[2], pdir_name = _f6_[1];
    if(! match) return caml_call3(pp, f, _fq_, pdir_name[1]);
    var pdir_arg = match[1];
    return caml_call5(pp, f, _fp_, pdir_name[1], directive_argument, pdir_arg);
   }
   function expression(f, x){
    return caml_call4
            (pp,
             f,
             _fr_,
             function(_f0_, _f1_){return _M_(reset_ctxt, _f0_, _f1_);},
             x);
   }
   function string_of_expression(x){
    caml_call1(Stdlib_Format[125], 0);
    var f = Stdlib_Format[123];
    expression(f, x);
    return caml_call1(Stdlib_Format[125], 0);
   }
   function string_of_structure(x){
    caml_call1(Stdlib_Format[125], 0);
    var f = Stdlib_Format[123];
    structure(reset_ctxt, f, x);
    return caml_call1(Stdlib_Format[125], 0);
   }
   function top_phrase(f, x){
    caml_call2(Stdlib_Format[45], f, 0);
    toplevel_phrase(f, x);
    caml_call2(pp, f, _fs_);
    return caml_call2(Stdlib_Format[45], f, 0);
   }
   function core_type$0(_fY_, _fZ_){return core_type(reset_ctxt, _fY_, _fZ_);}
   function pattern$0(_fW_, _fX_){return pattern(reset_ctxt, _fW_, _fX_);}
   function signature$0(_fU_, _fV_){return signature(reset_ctxt, _fU_, _fV_);}
   function structure$0(_fS_, _fT_){return structure(reset_ctxt, _fS_, _fT_);}
   function class_expr$0(_fQ_, _fR_){
    return class_expr(reset_ctxt, _fQ_, _fR_);
   }
   function class_field$0(_fO_, _fP_){
    return class_field(reset_ctxt, _fO_, _fP_);
   }
   function class_type$0(_fM_, _fN_){
    return class_type(reset_ctxt, _fM_, _fN_);
   }
   function class_signature$0(_fK_, _fL_){
    return class_signature(reset_ctxt, _fK_, _fL_);
   }
   function class_type_field$0(_fI_, _fJ_){
    return class_type_field(reset_ctxt, _fI_, _fJ_);
   }
   function module_expr$0(_fG_, _fH_){
    return module_expr(reset_ctxt, _fG_, _fH_);
   }
   function module_type$0(_fE_, _fF_){
    return module_type(reset_ctxt, _fE_, _fF_);
   }
   function signature_item$0(_fC_, _fD_){
    return signature_item(reset_ctxt, _fC_, _fD_);
   }
   function structure_item$0(_fA_, _fB_){
    return structure_item(reset_ctxt, _fA_, _fB_);
   }
   function type_declaration$0(_fy_, _fz_){
    return type_declaration(reset_ctxt, _fy_, _fz_);
   }
   function binding$0(_fw_, _fx_){return binding(reset_ctxt, _fw_, _fx_);}
   function payload$0(_fu_, _fv_){return payload(reset_ctxt, _fu_, _fv_);}
   var
    Astlib_Pprintast =
      [0,
       toplevel_phrase,
       expression,
       string_of_expression,
       top_phrase,
       core_type$0,
       pattern$0,
       signature$0,
       structure$0,
       string_of_structure,
       binding$0,
       print_longident,
       payload$0,
       class_expr$0,
       class_field$0,
       class_type$0,
       class_signature$0,
       class_type_field$0,
       module_expr$0,
       module_type$0,
       signature_item$0,
       structure_item$0,
       type_declaration$0];
   runtime.caml_register_global(494, Astlib_Pprintast, "Astlib__Pprintast");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Parse
//# unitInfo: Requires: Parse
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Parse = global_data.Parse,
    implementation = Parse[1],
    interface$0 = Parse[2],
    toplevel_phrase = Parse[3],
    use_file = Parse[4],
    core_type = Parse[5],
    expression = Parse[6],
    pattern = Parse[7],
    Astlib_Parse =
      [0,
       implementation,
       interface$0,
       toplevel_phrase,
       use_file,
       core_type,
       expression,
       pattern];
   runtime.caml_register_global(1, Astlib_Parse, "Astlib__Parse");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_502
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M034",
    ast_intf_magic_number = "Caml1999N034",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_502 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_502, "Astlib__Ast_502");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_503
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M035",
    ast_intf_magic_number = "Caml1999N035",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_503 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_503, "Astlib__Ast_503");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_503_502
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    cst_ppxlib_migration_ppat_effe = "ppxlib.migration.ppat_effect";
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _cf_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _cf_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _cd_ = copy_attributes(pexp_attributes),
     _ce_ = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _ce_, _cd_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bJ_ = copy_expression(x2),
        _bK_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bK_, _bJ_];
      case 3:
       var
        fun_body = param[3],
        typ_constraint = param[2],
        params = param[1],
        params$0 = caml_call2(Stdlib_List[20], copy_function_param, params),
        typ_constraint$0 =
          caml_call2
           (Astlib_Stdlib0[2][1], copy_type_constraint, typ_constraint),
        fun_body$0 = copy_function_body(fun_body);
       return [3, params$0, typ_constraint$0, fun_body$0];
      case 4:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _bL_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _cc_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _cc_];
            },
            x1$0);
       return [4, copy_expression(x0$2), _bL_];
      case 5:
       var
        x1$1 = param[2],
        x0$3 = param[1],
        _bM_ = caml_call2(Stdlib_List[20], copy_case, x1$1);
       return [5, copy_expression(x0$3), _bM_];
      case 6:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _bN_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$4), _bN_];
      case 7:
       var x0$5 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_expression, x0$5)];
      case 8:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bO_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$3);
       return [8, copy_loc(copy_Longident_t, x0$6), _bO_];
      case 9:
       var x1$4 = param[2], x0$7 = param[1];
       return [9,
               x0$7,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4)];
      case 10:
       var
        x1$5 = param[2],
        x0$8 = param[1],
        _bP_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5);
       return [10,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _cb_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _cb_];
                 },
                 x0$8),
               _bP_];
      case 11:
       var
        x1$6 = param[2],
        x0$9 = param[1],
        _bQ_ = copy_loc(copy_Longident_t, x1$6);
       return [11, copy_expression(x0$9), _bQ_];
      case 12:
       var
        x2$0 = param[3],
        x1$7 = param[2],
        x0$10 = param[1],
        _bR_ = copy_expression(x2$0),
        _bS_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$10), _bS_, _bR_];
      case 13:
       var x0$11 = param[1];
       return [13, caml_call2(Stdlib_List[20], copy_expression, x0$11)];
      case 14:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bT_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$1),
        _bU_ = copy_expression(x1$8);
       return [14, copy_expression(x0$12), _bU_, _bT_];
      case 15:
       var x1$9 = param[2], x0$13 = param[1], _bV_ = copy_expression(x1$9);
       return [15, copy_expression(x0$13), _bV_];
      case 16:
       var x1$10 = param[2], x0$14 = param[1], _bW_ = copy_expression(x1$10);
       return [16, copy_expression(x0$14), _bW_];
      case 17:
       var
        x4 = param[5],
        x3 = param[4],
        x2$2 = param[3],
        x1$11 = param[2],
        x0$15 = param[1],
        _bX_ = copy_expression(x4),
        _bY_ = copy_direction_flag(x3),
        _bZ_ = copy_expression(x2$2),
        _b0_ = copy_expression(x1$11);
       return [17, copy_pattern(x0$15), _b0_, _bZ_, _bY_, _bX_];
      case 18:
       var x1$12 = param[2], x0$16 = param[1], _b1_ = copy_core_type(x1$12);
       return [18, copy_expression(x0$16), _b1_];
      case 19:
       var
        x2$3 = param[3],
        x1$13 = param[2],
        x0$17 = param[1],
        _b2_ = copy_core_type(x2$3),
        _b3_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$13);
       return [19, copy_expression(x0$17), _b3_, _b2_];
      case 20:
       var
        x1$14 = param[2],
        x0$18 = param[1],
        _b4_ = copy_loc(copy_label, x1$14);
       return [20, copy_expression(x0$18), _b4_];
      case 21:
       var x0$19 = param[1]; return [21, copy_loc(copy_Longident_t, x0$19)];
      case 22:
       var x1$15 = param[2], x0$20 = param[1], _b5_ = copy_expression(x1$15);
       return [22, copy_loc(copy_label, x0$20), _b5_];
      case 23:
       var x0$21 = param[1];
       return [23,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _ca_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _ca_];
                 },
                 x0$21)];
      case 24:
       var
        x2$4 = param[3],
        x1$16 = param[2],
        x0$22 = param[1],
        _b6_ = copy_expression(x2$4),
        _b7_ = copy_module_expr(x1$16);
       return [24,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$22),
               _b7_,
               _b6_];
      case 25:
       var x1$17 = param[2], x0$23 = param[1], _b8_ = copy_expression(x1$17);
       return [25, copy_extension_constructor(x0$23), _b8_];
      case 26:
       var x0$24 = param[1]; return [26, copy_expression(x0$24)];
      case 27:
       var x0$25 = param[1]; return [27, copy_expression(x0$25)];
      case 28:
       var
        x1$18 = param[2],
        x0$26 = param[1],
        _b9_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$18);
       return [28, copy_expression(x0$26), _b9_];
      case 29:
       var x0$27 = param[1]; return [29, copy_class_structure(x0$27)];
      case 30:
       var x1$19 = param[2], x0$28 = param[1], _b__ = copy_expression(x1$19);
       return [30, copy_loc(function(x){return x;}, x0$28), _b__];
      case 31:
       var x0$29 = param[1]; return [31, copy_module_expr(x0$29)];
      case 32:
       var x1$20 = param[2], x0$30 = param[1], _b$_ = copy_expression(x1$20);
       return [32, copy_open_infos(copy_module_expr, x0$30), _b$_];
      case 33:
       var x0$31 = param[1]; return [33, copy_letop(x0$31)];
      default: var x0$32 = param[1]; return [34, copy_extension(x0$32)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bH_ = copy_expression(body),
     _bI_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bI_, _bH_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bF_ = copy_expression(pbop_exp),
     _bG_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bG_,
            _bF_,
            pbop_loc];
   }
   function copy_function_param_desc(param){
    if(0 === param[0]){
     var
      p = param[3],
      e = param[2],
      l = param[1],
      _bD_ = copy_pattern(p),
      _bE_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, e);
     return [0, copy_arg_label(l), _bE_, _bD_];
    }
    var x = param[1];
    return [1, copy_loc(function(x){return x;}, x)];
   }
   function copy_function_param(param){
    var pparam_desc = param[2], pparam_loc = param[1];
    return [0, pparam_loc, copy_function_param_desc(pparam_desc)];
   }
   function copy_function_body(param){
    if(0 === param[0]){var e = param[1]; return [0, copy_expression(e)];}
    var
     attributes = param[3],
     loc = param[2],
     cases = param[1],
     _bC_ = copy_attributes(attributes);
    return [1, caml_call2(Stdlib_List[20], copy_case, cases), loc, _bC_];
   }
   function copy_type_constraint(param){
    if(0 === param[0]){var t = param[1]; return [0, copy_core_type(t)];}
    var t2 = param[2], t1 = param[1], _bB_ = copy_core_type(t2);
    return [1, caml_call2(Astlib_Stdlib0[2][1], copy_core_type, t1), _bB_];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bz_ = copy_expression(pc_rhs),
     _bA_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bA_, _bz_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[5],
     pvb_attributes = param[4],
     pvb_constraint = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bw_ = copy_attributes(pvb_attributes),
     _bx_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_value_constraint, pvb_constraint),
     _by_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _by_, _bx_, _bw_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bu_ = copy_attributes(ppat_attributes),
     _bv_ = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_loc, ppat_desc), ppat_loc, _bv_, _bu_];
   }
   function copy_pattern_desc(loc, param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _bk_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _bk_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _bl_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _bl_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bm_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){
             var x1 = x[2], x0 = x[1], _bt_ = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){return copy_loc(function(x){return x;}, x);},
                       x0),
                     _bt_];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bm_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bn_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bs_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bs_];
                 },
                 x0$6),
               _bn_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bo_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bo_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bp_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bp_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var c = param[2], e = param[1], _bq_ = [0, copy_pattern(c), 0];
       return [15,
               [0,
                [0, cst_ppxlib_migration_ppat_effe, loc],
                [3, [0, [4, [0, copy_pattern(e), _bq_]], loc, 0, 0], 0]]];
      case 16:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _br_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _br_];
    }
   }
   function copy_value_constraint(param){
    if(0 === param[0]){
     var
      typ = param[2],
      locally_abstract_univars = param[1],
      _bh_ = function(x){return x;},
      _bg_ = copy_core_type(typ);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(_bj_){return copy_loc(_bh_, _bj_);},
               locally_abstract_univars),
             _bg_];
    }
    var
     coercion = param[2],
     ground = param[1],
     _bi_ = copy_core_type(coercion);
    return [1, caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ground), _bi_];
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _be_ = copy_attributes(ptyp_attributes),
     _bf_ = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _bf_, _be_];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _a6_ = copy_core_type(x2),
        _a7_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a7_, _a6_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a8_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a8_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a9_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a9_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a__ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a__];
      case 6:
       var
        x1$3 = param[2],
        x0$5 = param[1],
        _a$_ = copy_loc(function(x){return x;}, x1$3);
       return [6, copy_core_type(x0$5), _a$_];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _ba_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _bb_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _bb_,
               _ba_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _bc_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _bc_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      case 10:
       var ty = param[2], x0$9 = param[1], _bd_ = copy_core_type(ty);
       return [10, copy_loc(copy_Longident_t, x0$9), _bd_];
      default: var x0$10 = param[1]; return [11, copy_extension(x0$10)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _a4_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _a5_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _a5_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _a4_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _a3_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _a3_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _a2_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _a2_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _a1_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _a1_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _a0_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _a0_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aZ_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aZ_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aV_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aV_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aW_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aW_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aX_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aX_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aY_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aY_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aU_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aU_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aK_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aK_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aL_ = copy_class_expr(x3),
        _aM_ = copy_pattern(x2),
        _aN_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aN_, _aM_, _aL_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aO_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aT_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aT_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aO_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aP_ = copy_class_expr(x2$0),
        _aQ_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aQ_, _aP_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aR_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aR_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aS_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aS_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aJ_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aJ_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aI_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aI_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _aB_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _aC_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _aC_, _aB_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _aD_ = copy_class_field_kind(x2$0),
        _aE_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aE_, _aD_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _aF_ = copy_class_field_kind(x2$1),
        _aG_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _aG_, _aF_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aH_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aH_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _aA_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _aA_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _ay_ = copy_attributes(pmb_attributes),
     _az_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _az_,
            _ay_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _ax_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _ax_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _au_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _au_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _av_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _av_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x1$1 = param[2], x0$4 = param[1], _aw_ = copy_module_type(x1$1);
       return [5, copy_module_expr(x0$4), _aw_];
      case 6:
       var x0$5 = param[1]; return [6, copy_expression(x0$5)];
      default: var x0$6 = param[1]; return [7, copy_extension(x0$6)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _at_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _at_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _as_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _as_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _aq_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _aq_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _ar_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _ar_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ak_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ak_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _al_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _al_];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], _am_ = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _am_];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], _an_ = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _an_];
      case 4:
       var
        x1$3 = param[2],
        x0$3 = param[1],
        _ao_ = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), _ao_];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        _ap_ = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), _ap_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ai_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ai_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, copy_include_infos(copy_module_type, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], _aj_ = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), _aj_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ah_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ah_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _ad_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _ad_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _ae_ = copy_class_type(x2),
        _af_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _af_, _ae_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _ag_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _ag_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _ac_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _ac_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _ab_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _ab_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _W_ = copy_core_type(x3),
        _X_ = copy_virtual_flag(x2),
        _Y_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _Y_, _X_, _W_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _Z_ = copy_core_type(x3$0),
        ___ = copy_virtual_flag(x2$0),
        _$_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _$_, ___, _Z_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _aa_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _aa_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _V_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _V_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _P_ = copy_attributes(pci_attributes),
     _Q_ = caml_call1(f0, pci_expr),
     _R_ = copy_loc(function(x){return x;}, pci_name),
     _S_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _T_ = copy_injectivity(x1$0),
           _U_ = [0, copy_variance(x0$0), _T_];
          return [0, copy_core_type(x0), _U_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _S_, _R_, _Q_, pci_loc, _P_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _O_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _O_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _M_ = copy_attributes(popen_attributes),
     _N_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _N_, popen_loc, _M_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _K_ = copy_attributes(pmtd_attributes),
     _L_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _L_,
            _K_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _I_ = copy_attributes(pms_attributes),
     _J_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _J_, _I_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _G_ = copy_attributes(pmd_attributes),
     _H_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _H_,
            _G_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _F_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _F_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _z_ = copy_attributes(ptyext_attributes),
     _A_ = copy_private_flag(ptyext_private),
     _B_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _C_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _D_ = copy_injectivity(x1$0),
           _E_ = [0, copy_variance(x0$0), _D_];
          return [0, copy_core_type(x0), _E_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _C_,
            _B_,
            _A_,
            ptyext_loc,
            _z_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _x_ = copy_attributes(pext_attributes),
     _y_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _y_,
            pext_loc,
            _x_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _v_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x2),
      _w_ = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){return copy_loc(function(x){return x;}, x);},
               x0),
             _w_,
             _v_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _m_ = copy_attributes(ptype_attributes),
     _n_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _o_ = copy_private_flag(ptype_private),
     _p_ = copy_type_kind(ptype_kind),
     _q_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _u_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _u_, x2];
         },
         ptype_cstrs),
     _r_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _s_ = copy_injectivity(x1$0),
           _t_ = [0, copy_variance(x0$0), _s_];
          return [0, copy_core_type(x0), _t_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _r_,
            _q_,
            _p_,
            _o_,
            _n_,
            _m_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     _i_ = copy_attributes(pcd_attributes),
     _j_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _k_ = copy_constructor_arguments(pcd_args),
     _l_ =
       caml_call2
        (Stdlib_List[20],
         function(x){return copy_loc(function(x){return x;}, x);},
         pcd_vars);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _l_,
            _k_,
            _j_,
            pcd_loc,
            _i_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _f_ = copy_attributes(pld_attributes),
     _g_ = copy_core_type(pld_type),
     _h_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _h_,
            _g_,
            pld_loc,
            _f_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _c_ = copy_attributes(pval_attributes),
     _d_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _e_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _e_,
            _d_,
            _c_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _b_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _b_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    var pconst_desc = param[1];
    switch(pconst_desc[0]){
      case 0:
       var x1 = pconst_desc[2], x0 = pconst_desc[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = pconst_desc[1]; return [1, x0$0];
      case 2:
       var x2 = pconst_desc[3], x1$0 = pconst_desc[2], x0$1 = pconst_desc[1];
       return [2,
               x0$1,
               x1$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
      default:
       var x1$1 = pconst_desc[2], x0$2 = pconst_desc[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], _a_ = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), _a_];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_503_502 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_function_param_desc,
       copy_function_param,
       copy_function_body,
       copy_type_constraint,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_value_constraint,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (3, Astlib_Migrate_503_502, "Astlib__Migrate_503_502");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_502_503
//# unitInfo: Requires: Astlib__Location, Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _cj_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _cj_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _ch_ = copy_attributes(pexp_attributes),
     _ci_ = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _ci_, _ch_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bN_ = copy_expression(x2),
        _bO_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bO_, _bN_];
      case 3:
       var
        fun_body = param[3],
        typ_constraint = param[2],
        params = param[1],
        params$0 = caml_call2(Stdlib_List[20], copy_function_param, params),
        typ_constraint$0 =
          caml_call2
           (Astlib_Stdlib0[2][1], copy_type_constraint, typ_constraint),
        fun_body$0 = copy_function_body(fun_body);
       return [3, params$0, typ_constraint$0, fun_body$0];
      case 4:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _bP_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _cg_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _cg_];
            },
            x1$0);
       return [4, copy_expression(x0$2), _bP_];
      case 5:
       var
        x1$1 = param[2],
        x0$3 = param[1],
        _bQ_ = caml_call2(Stdlib_List[20], copy_case, x1$1);
       return [5, copy_expression(x0$3), _bQ_];
      case 6:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _bR_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$4), _bR_];
      case 7:
       var x0$5 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_expression, x0$5)];
      case 8:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bS_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$3);
       return [8, copy_loc(copy_Longident_t, x0$6), _bS_];
      case 9:
       var x1$4 = param[2], x0$7 = param[1];
       return [9,
               x0$7,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4)];
      case 10:
       var
        x1$5 = param[2],
        x0$8 = param[1],
        _bT_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5);
       return [10,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _cf_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _cf_];
                 },
                 x0$8),
               _bT_];
      case 11:
       var
        x1$6 = param[2],
        x0$9 = param[1],
        _bU_ = copy_loc(copy_Longident_t, x1$6);
       return [11, copy_expression(x0$9), _bU_];
      case 12:
       var
        x2$0 = param[3],
        x1$7 = param[2],
        x0$10 = param[1],
        _bV_ = copy_expression(x2$0),
        _bW_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$10), _bW_, _bV_];
      case 13:
       var x0$11 = param[1];
       return [13, caml_call2(Stdlib_List[20], copy_expression, x0$11)];
      case 14:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bX_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$1),
        _bY_ = copy_expression(x1$8);
       return [14, copy_expression(x0$12), _bY_, _bX_];
      case 15:
       var x1$9 = param[2], x0$13 = param[1], _bZ_ = copy_expression(x1$9);
       return [15, copy_expression(x0$13), _bZ_];
      case 16:
       var x1$10 = param[2], x0$14 = param[1], _b0_ = copy_expression(x1$10);
       return [16, copy_expression(x0$14), _b0_];
      case 17:
       var
        x4 = param[5],
        x3 = param[4],
        x2$2 = param[3],
        x1$11 = param[2],
        x0$15 = param[1],
        _b1_ = copy_expression(x4),
        _b2_ = copy_direction_flag(x3),
        _b3_ = copy_expression(x2$2),
        _b4_ = copy_expression(x1$11);
       return [17, copy_pattern(x0$15), _b4_, _b3_, _b2_, _b1_];
      case 18:
       var x1$12 = param[2], x0$16 = param[1], _b5_ = copy_core_type(x1$12);
       return [18, copy_expression(x0$16), _b5_];
      case 19:
       var
        x2$3 = param[3],
        x1$13 = param[2],
        x0$17 = param[1],
        _b6_ = copy_core_type(x2$3),
        _b7_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$13);
       return [19, copy_expression(x0$17), _b7_, _b6_];
      case 20:
       var
        x1$14 = param[2],
        x0$18 = param[1],
        _b8_ = copy_loc(copy_label, x1$14);
       return [20, copy_expression(x0$18), _b8_];
      case 21:
       var x0$19 = param[1]; return [21, copy_loc(copy_Longident_t, x0$19)];
      case 22:
       var x1$15 = param[2], x0$20 = param[1], _b9_ = copy_expression(x1$15);
       return [22, copy_loc(copy_label, x0$20), _b9_];
      case 23:
       var x0$21 = param[1];
       return [23,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _ce_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _ce_];
                 },
                 x0$21)];
      case 24:
       var
        x2$4 = param[3],
        x1$16 = param[2],
        x0$22 = param[1],
        _b__ = copy_expression(x2$4),
        _b$_ = copy_module_expr(x1$16);
       return [24,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$22),
               _b$_,
               _b__];
      case 25:
       var x1$17 = param[2], x0$23 = param[1], _ca_ = copy_expression(x1$17);
       return [25, copy_extension_constructor(x0$23), _ca_];
      case 26:
       var x0$24 = param[1]; return [26, copy_expression(x0$24)];
      case 27:
       var x0$25 = param[1]; return [27, copy_expression(x0$25)];
      case 28:
       var
        x1$18 = param[2],
        x0$26 = param[1],
        _cb_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$18);
       return [28, copy_expression(x0$26), _cb_];
      case 29:
       var x0$27 = param[1]; return [29, copy_class_structure(x0$27)];
      case 30:
       var x1$19 = param[2], x0$28 = param[1], _cc_ = copy_expression(x1$19);
       return [30, copy_loc(function(x){return x;}, x0$28), _cc_];
      case 31:
       var x0$29 = param[1]; return [31, copy_module_expr(x0$29)];
      case 32:
       var x1$20 = param[2], x0$30 = param[1], _cd_ = copy_expression(x1$20);
       return [32, copy_open_infos(copy_module_expr, x0$30), _cd_];
      case 33:
       var x0$31 = param[1]; return [33, copy_letop(x0$31)];
      default: var x0$32 = param[1]; return [34, copy_extension(x0$32)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bL_ = copy_expression(body),
     _bM_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bM_, _bL_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bJ_ = copy_expression(pbop_exp),
     _bK_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bK_,
            _bJ_,
            pbop_loc];
   }
   function copy_function_param_desc(param){
    if(0 === param[0]){
     var
      p = param[3],
      e = param[2],
      l = param[1],
      _bH_ = copy_pattern(p),
      _bI_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, e);
     return [0, copy_arg_label(l), _bI_, _bH_];
    }
    var x = param[1];
    return [1, copy_loc(function(x){return x;}, x)];
   }
   function copy_function_param(param){
    var pparam_desc = param[2], pparam_loc = param[1];
    return [0, pparam_loc, copy_function_param_desc(pparam_desc)];
   }
   function copy_function_body(param){
    if(0 === param[0]){var e = param[1]; return [0, copy_expression(e)];}
    var
     attributes = param[3],
     loc = param[2],
     cases = param[1],
     _bG_ = copy_attributes(attributes);
    return [1, caml_call2(Stdlib_List[20], copy_case, cases), loc, _bG_];
   }
   function copy_type_constraint(param){
    if(0 === param[0]){var t = param[1]; return [0, copy_core_type(t)];}
    var t2 = param[2], t1 = param[1], _bF_ = copy_core_type(t2);
    return [1, caml_call2(Astlib_Stdlib0[2][1], copy_core_type, t1), _bF_];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bD_ = copy_expression(pc_rhs),
     _bE_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bE_, _bD_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[5],
     pvb_attributes = param[4],
     pvb_constraint = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bA_ = copy_attributes(pvb_attributes),
     _bB_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_value_constraint, pvb_constraint),
     _bC_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bC_, _bB_, _bA_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _by_ = copy_attributes(ppat_attributes),
     _bz_ = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _bz_, _by_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _bk_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _bk_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _bl_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _bl_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bm_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){
             var x1 = x[2], x0 = x[1], _bx_ = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){return copy_loc(function(x){return x;}, x);},
                       x0),
                     _bx_];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bm_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bn_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bw_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bw_];
                 },
                 x0$6),
               _bn_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bo_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bo_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bp_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bp_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1];
       a:
       if(x0$14[1][1] === "ppxlib.migration.ppat_effect"){
        var _bq_ = x0$14[2];
        if(3 === _bq_[0]){
         var _br_ = _bq_[1][1];
         if(typeof _br_ !== "number" && 4 === _br_[0]){
          var _bs_ = _br_[1];
          if(! _bs_) break a;
          var _bt_ = _bs_[2];
          if(! _bt_) break a;
          if(_bt_[2]) break a;
          if(_bq_[2]) break a;
          var c = _bt_[1], e = _bs_[1], _bu_ = copy_pattern(c);
          return [15, copy_pattern(e), _bu_];
         }
        }
       }
       return [16, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bv_ = copy_pattern(x1$6);
       return [17, copy_loc(copy_Longident_t, x0$15), _bv_];
    }
   }
   function copy_value_constraint(param){
    if(0 === param[0]){
     var
      typ = param[2],
      locally_abstract_univars = param[1],
      _bh_ = function(x){return x;},
      _bg_ = copy_core_type(typ);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(_bj_){return copy_loc(_bh_, _bj_);},
               locally_abstract_univars),
             _bg_];
    }
    var
     coercion = param[2],
     ground = param[1],
     _bi_ = copy_core_type(coercion);
    return [1, caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ground), _bi_];
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _be_ = copy_attributes(ptyp_attributes),
     _bf_ = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _bf_, _be_];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _a6_ = copy_core_type(x2),
        _a7_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a7_, _a6_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a8_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a8_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a9_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a9_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a__ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a__];
      case 6:
       var
        x1$3 = param[2],
        x0$5 = param[1],
        _a$_ = copy_loc(function(x){return x;}, x1$3);
       return [6, copy_core_type(x0$5), _a$_];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _ba_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _bb_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _bb_,
               _ba_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _bc_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _bc_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      case 10:
       var ty = param[2], x0$9 = param[1], _bd_ = copy_core_type(ty);
       return [10, copy_loc(copy_Longident_t, x0$9), _bd_];
      default: var x0$10 = param[1]; return [11, copy_extension(x0$10)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _a4_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _a5_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _a5_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _a4_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _a3_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _a3_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _a2_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _a2_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _a1_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _a1_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _a0_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _a0_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aZ_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aZ_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aV_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aV_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aW_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aW_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aX_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aX_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aY_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aY_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aU_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aU_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aK_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aK_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aL_ = copy_class_expr(x3),
        _aM_ = copy_pattern(x2),
        _aN_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aN_, _aM_, _aL_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aO_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aT_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aT_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aO_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aP_ = copy_class_expr(x2$0),
        _aQ_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aQ_, _aP_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aR_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aR_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aS_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aS_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aJ_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aJ_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aI_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aI_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _aB_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _aC_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _aC_, _aB_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _aD_ = copy_class_field_kind(x2$0),
        _aE_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aE_, _aD_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _aF_ = copy_class_field_kind(x2$1),
        _aG_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _aG_, _aF_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aH_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aH_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _aA_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _aA_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _ay_ = copy_attributes(pmb_attributes),
     _az_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _az_,
            _ay_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _ax_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _ax_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _au_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _au_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _av_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _av_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x1$1 = param[2], x0$4 = param[1], _aw_ = copy_module_type(x1$1);
       return [5, copy_module_expr(x0$4), _aw_];
      case 6:
       var x0$5 = param[1]; return [6, copy_expression(x0$5)];
      default: var x0$6 = param[1]; return [7, copy_extension(x0$6)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _at_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _at_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _as_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _as_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _aq_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _aq_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _ar_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _ar_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ak_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ak_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _al_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _al_];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], _am_ = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _am_];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], _an_ = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _an_];
      case 4:
       var
        x1$3 = param[2],
        x0$3 = param[1],
        _ao_ = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), _ao_];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        _ap_ = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), _ap_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ai_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ai_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, copy_include_infos(copy_module_type, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], _aj_ = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), _aj_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ah_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ah_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _ad_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _ad_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _ae_ = copy_class_type(x2),
        _af_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _af_, _ae_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _ag_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _ag_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _ac_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _ac_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _ab_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _ab_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _W_ = copy_core_type(x3),
        _X_ = copy_virtual_flag(x2),
        _Y_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _Y_, _X_, _W_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _Z_ = copy_core_type(x3$0),
        ___ = copy_virtual_flag(x2$0),
        _$_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _$_, ___, _Z_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _aa_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _aa_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _V_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _V_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _P_ = copy_attributes(pci_attributes),
     _Q_ = caml_call1(f0, pci_expr),
     _R_ = copy_loc(function(x){return x;}, pci_name),
     _S_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _T_ = copy_injectivity(x1$0),
           _U_ = [0, copy_variance(x0$0), _T_];
          return [0, copy_core_type(x0), _U_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _S_, _R_, _Q_, pci_loc, _P_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _O_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _O_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _M_ = copy_attributes(popen_attributes),
     _N_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _N_, popen_loc, _M_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _K_ = copy_attributes(pmtd_attributes),
     _L_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _L_,
            _K_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _I_ = copy_attributes(pms_attributes),
     _J_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _J_, _I_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _G_ = copy_attributes(pmd_attributes),
     _H_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _H_,
            _G_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _F_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _F_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _z_ = copy_attributes(ptyext_attributes),
     _A_ = copy_private_flag(ptyext_private),
     _B_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _C_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _D_ = copy_injectivity(x1$0),
           _E_ = [0, copy_variance(x0$0), _D_];
          return [0, copy_core_type(x0), _E_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _C_,
            _B_,
            _A_,
            ptyext_loc,
            _z_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _x_ = copy_attributes(pext_attributes),
     _y_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _y_,
            pext_loc,
            _x_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _v_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x2),
      _w_ = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){return copy_loc(function(x){return x;}, x);},
               x0),
             _w_,
             _v_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _m_ = copy_attributes(ptype_attributes),
     _n_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _o_ = copy_private_flag(ptype_private),
     _p_ = copy_type_kind(ptype_kind),
     _q_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _u_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _u_, x2];
         },
         ptype_cstrs),
     _r_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _s_ = copy_injectivity(x1$0),
           _t_ = [0, copy_variance(x0$0), _s_];
          return [0, copy_core_type(x0), _t_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _r_,
            _q_,
            _p_,
            _o_,
            _n_,
            _m_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     _i_ = copy_attributes(pcd_attributes),
     _j_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _k_ = copy_constructor_arguments(pcd_args),
     _l_ =
       caml_call2
        (Stdlib_List[20],
         function(x){return copy_loc(function(x){return x;}, x);},
         pcd_vars);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _l_,
            _k_,
            _j_,
            pcd_loc,
            _i_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _f_ = copy_attributes(pld_attributes),
     _g_ = copy_core_type(pld_type),
     _h_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _h_,
            _g_,
            pld_loc,
            _f_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _c_ = copy_attributes(pval_attributes),
     _d_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _e_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _e_,
            _d_,
            _c_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _b_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _b_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(c){
    switch(c[0]){
      case 0:
       var
        x1 = c[2],
        x0 = c[1],
        pconst_desc =
          [0,
           x0,
           caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
       break;
      case 1:
       var x0$0 = c[1], pconst_desc = [1, x0$0]; break;
      case 2:
       var
        x2 = c[3],
        x1$0 = c[2],
        x0$1 = c[1],
        pconst_desc =
          [2,
           x0$1,
           x1$0,
           caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
       break;
      default:
       var
        x1$1 = c[2],
        x0$2 = c[1],
        pconst_desc =
          [3,
           x0$2,
           caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
    return [0, pconst_desc, Astlib_Location[4]];
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], _a_ = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), _a_];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_502_503 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_function_param_desc,
       copy_function_param,
       copy_function_body,
       copy_type_constraint,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_value_constraint,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (4, Astlib_Migrate_502_503, "Astlib__Migrate_502_503");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_501
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M033",
    ast_intf_magic_number = "Caml1999N033",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_501 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_501, "Astlib__Ast_501");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_502_501
//# unitInfo: Requires: Astlib__Location, Astlib__Stdlib0, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst = "::", cst$0 = "[]";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location,
    _a_ =
      [0,
       [11,
        "migration error: ",
        [2, 0, [11, " is not supported before OCaml 5.02", 0]]],
       "migration error: %s is not supported before OCaml 5.02"],
    _b_ = [0, 0],
    cst_Invalid_ocaml_ppx_context_ = "Invalid ocaml.ppx.context's load_path",
    _c_ = [0, cst],
    cst_ppxlib_migration_load_path = "ppxlib.migration.load_path",
    cst_ppxlib_migration_stop_taki = "ppxlib.migration.stop_taking",
    cst_module_open_in_types = "module open in types";
   function migration_error(loc, missing_feature){
    return caml_call3(Astlib_Location[7], [0, loc], _a_, missing_feature);
   }
   function mk_ghost_attr(name){
    return [0, [0, name, Astlib_Location[4]], _b_, Astlib_Location[4]];
   }
   function concat_list_lit(left, right){
    var _cs_ = left[1], _ct_ = right[1];
    if(typeof _ct_ !== "number" && 8 === _ct_[0]){
     var _cH_ = _ct_[1][1];
     if(0 === _cH_[0] && _cH_[1] === cst$0) return left;
    }
    a:
    if(typeof _cs_ !== "number" && 8 === _cs_[0]){
     var _cu_ = _cs_[1], _cv_ = _cu_[1];
     if(0 === _cv_[0]){
      var _cw_ = _cv_[1];
      if(_cw_ !== cst){
       if(_cw_ === cst$0) return right;
      }
      else{
       var _cx_ = _cs_[2];
       if(_cx_){
        var arg_expr = _cx_[1], _cy_ = arg_expr[1];
        if(typeof _cy_ !== "number" && 7 === _cy_[0]){
         var _cz_ = _cy_[1];
         if(! _cz_) break a;
         var _cA_ = _cz_[2];
         if(! _cA_) break a;
         if(_cA_[2]) break a;
         var
          tl = _cA_[1],
          hd = _cz_[1],
          loc = _cu_[2],
          _cB_ = left[4],
          _cC_ = left[3],
          _cD_ = left[2],
          _cE_ = arg_expr[4],
          _cF_ = arg_expr[3],
          _cG_ = arg_expr[2];
         return [0,
                 [8,
                  [0, _c_, loc],
                  [0,
                   [0,
                    [7, [0, hd, [0, concat_list_lit(tl, right), 0]]],
                    _cG_,
                    _cF_,
                    _cE_]]],
                 _cD_,
                 _cC_,
                 _cB_];
        }
       }
      }
     }
    }
    return caml_call1(Stdlib[1], cst_Invalid_ocaml_ppx_context_);
   }
   function migrate_ppx_context_load_path(expr){
    var loc = expr[2], _cp_ = expr[1];
    if(typeof _cp_ !== "number" && 7 === _cp_[0]){
     var _cq_ = _cp_[1];
     if(_cq_){
      var _cr_ = _cq_[2];
      if(_cr_ && ! _cr_[2]){
       var
        hidden = _cr_[1],
        visible = _cq_[1],
        migration_attr =
          [0,
           [0, cst_ppxlib_migration_load_path, loc],
           [0, [0, [0, [0, expr, 0], loc], 0]],
           loc],
        expr$0 = concat_list_lit(visible, hidden);
       return [0,
               expr$0[1],
               expr$0[2],
               expr$0[3],
               [0, migration_attr, expr[4]]];
      }
     }
    }
    return expr;
   }
   function migrate_ppx_context_fields(fields){
    return caml_call2
            (Stdlib_List[20],
             function(param){
              var
               expr = param[2],
               lident_loc = param[1],
               _co_ = lident_loc[1];
              if(0 === _co_[0] && _co_[1] === "load_path")
               return [0, lident_loc, migrate_ppx_context_load_path(expr)];
              return [0, lident_loc, expr];
             },
             fields);
   }
   function migrate_ppx_context_payload(payload){
    a:
    if(0 === payload[0]){
     var _cl_ = payload[1];
     if(_cl_){
      var stri = _cl_[1], _cm_ = stri[1];
      if(0 === _cm_[0]){
       var expr = _cm_[1], _cn_ = expr[1];
       if(typeof _cn_ !== "number" && 10 === _cn_[0]){
        if(_cn_[2]) break a;
        if(_cl_[2]) break a;
        var
         attributes = _cm_[2],
         fields = _cn_[1],
         new_fields = migrate_ppx_context_fields(fields),
         new_expr = [0, [10, new_fields, 0], expr[2], expr[3], expr[4]];
        return [0, [0, [0, [0, new_expr, attributes], stri[2]], 0]];
       }
      }
     }
    }
    return payload;
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _ck_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _ck_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _ci_ = copy_attributes(pexp_attributes),
     _cj_ = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _cj_, _ci_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bG_ = copy_expression(x2),
        _bH_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bH_, _bG_];
      case 3:
       var body = param[3], tconstraint = param[2], params = param[1];
       if(0 === body[0]){
        var expr = body[1], _bI_ = expr[1];
        a:
        {
         if(typeof _bI_ !== "number" && 3 === _bI_[0]){
          var
           attr = mk_ghost_attr(cst_ppxlib_migration_stop_taki),
           expr$3 = copy_expression(expr),
           _bJ_ = [0, expr$3[1], expr$3[2], expr$3[3], [0, attr, expr$3[4]]];
          break a;
         }
         var _bJ_ = copy_expression(expr);
        }
        var expr$0 = _bJ_;
       }
       else
        var
         attrs = body[3],
         loc = body[2],
         cases = body[1],
         _bN_ = copy_attributes(attrs),
         expr$0 =
           [0,
            [3, caml_call2(Stdlib_List[20], copy_case, cases)],
            loc,
            0,
            _bN_];
       if(tconstraint){
        var match = tconstraint[1];
        if(0 === match[0])
         var
          c = match[1],
          _bK_ = expr$0[2],
          _bL_ = [0, [19, expr$0, copy_core_type(c)], _bK_, 0, 0];
        else
         var
          c2 = match[2],
          c1 = match[1],
          c1$0 = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, c1),
          _bM_ = expr$0[2],
          _bL_ = [0, [20, expr$0, c1$0, copy_core_type(c2)], _bM_, 0, 0];
        var expr$1 = _bL_;
       }
       else
        var expr$1 = expr$0;
       var
        expr$2 =
          caml_call3
           (Stdlib_List[27],
            function(param, expr){
             var match = param[2];
             if(0 === match[0]){
              var
               p = match[3],
               exp0 = match[2],
               lbl = match[1],
               _cg_ = copy_pattern(p),
               _ch_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, exp0),
               pexp_desc = [4, copy_arg_label(lbl), _ch_, _cg_, expr];
              return [0, pexp_desc, [0, param[1][1], expr[2][2], 1], 0, 0];
             }
             var
              x = match[1],
              pexp_desc$0 = [31, copy_loc(function(x){return x;}, x), expr];
             return [0, pexp_desc$0, [0, param[1][1], expr[2][2], 1], 0, 0];
            },
            params,
            expr$1);
       return expr$2[1];
      case 4:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _bO_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _cf_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _cf_];
            },
            x1$0);
       return [5, copy_expression(x0$2), _bO_];
      case 5:
       var
        x1$1 = param[2],
        x0$3 = param[1],
        _bP_ = caml_call2(Stdlib_List[20], copy_case, x1$1);
       return [6, copy_expression(x0$3), _bP_];
      case 6:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _bQ_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [7, copy_expression(x0$4), _bQ_];
      case 7:
       var x0$5 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$5)];
      case 8:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bR_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$3);
       return [9, copy_loc(copy_Longident_t, x0$6), _bR_];
      case 9:
       var x1$4 = param[2], x0$7 = param[1];
       return [10,
               x0$7,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4)];
      case 10:
       var
        x1$5 = param[2],
        x0$8 = param[1],
        _bS_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _ce_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _ce_];
                 },
                 x0$8),
               _bS_];
      case 11:
       var
        x1$6 = param[2],
        x0$9 = param[1],
        _bT_ = copy_loc(copy_Longident_t, x1$6);
       return [12, copy_expression(x0$9), _bT_];
      case 12:
       var
        x2$0 = param[3],
        x1$7 = param[2],
        x0$10 = param[1],
        _bU_ = copy_expression(x2$0),
        _bV_ = copy_loc(copy_Longident_t, x1$7);
       return [13, copy_expression(x0$10), _bV_, _bU_];
      case 13:
       var x0$11 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$11)];
      case 14:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bW_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$1),
        _bX_ = copy_expression(x1$8);
       return [15, copy_expression(x0$12), _bX_, _bW_];
      case 15:
       var x1$9 = param[2], x0$13 = param[1], _bY_ = copy_expression(x1$9);
       return [16, copy_expression(x0$13), _bY_];
      case 16:
       var x1$10 = param[2], x0$14 = param[1], _bZ_ = copy_expression(x1$10);
       return [17, copy_expression(x0$14), _bZ_];
      case 17:
       var
        x4 = param[5],
        x3 = param[4],
        x2$2 = param[3],
        x1$11 = param[2],
        x0$15 = param[1],
        _b0_ = copy_expression(x4),
        _b1_ = copy_direction_flag(x3),
        _b2_ = copy_expression(x2$2),
        _b3_ = copy_expression(x1$11);
       return [18, copy_pattern(x0$15), _b3_, _b2_, _b1_, _b0_];
      case 18:
       var x1$12 = param[2], x0$16 = param[1], _b4_ = copy_core_type(x1$12);
       return [19, copy_expression(x0$16), _b4_];
      case 19:
       var
        x2$3 = param[3],
        x1$13 = param[2],
        x0$17 = param[1],
        _b5_ = copy_core_type(x2$3),
        _b6_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$13);
       return [20, copy_expression(x0$17), _b6_, _b5_];
      case 20:
       var
        x1$14 = param[2],
        x0$18 = param[1],
        _b7_ = copy_loc(copy_label, x1$14);
       return [21, copy_expression(x0$18), _b7_];
      case 21:
       var x0$19 = param[1]; return [22, copy_loc(copy_Longident_t, x0$19)];
      case 22:
       var x1$15 = param[2], x0$20 = param[1], _b8_ = copy_expression(x1$15);
       return [23, copy_loc(copy_label, x0$20), _b8_];
      case 23:
       var x0$21 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _cd_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _cd_];
                 },
                 x0$21)];
      case 24:
       var
        x2$4 = param[3],
        x1$16 = param[2],
        x0$22 = param[1],
        _b9_ = copy_expression(x2$4),
        _b__ = copy_module_expr(x1$16);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$22),
               _b__,
               _b9_];
      case 25:
       var x1$17 = param[2], x0$23 = param[1], _b$_ = copy_expression(x1$17);
       return [26, copy_extension_constructor(x0$23), _b$_];
      case 26:
       var x0$24 = param[1]; return [27, copy_expression(x0$24)];
      case 27:
       var x0$25 = param[1]; return [28, copy_expression(x0$25)];
      case 28:
       var
        x1$18 = param[2],
        x0$26 = param[1],
        _ca_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$18);
       return [29, copy_expression(x0$26), _ca_];
      case 29:
       var x0$27 = param[1]; return [30, copy_class_structure(x0$27)];
      case 30:
       var x1$19 = param[2], x0$28 = param[1], _cb_ = copy_expression(x1$19);
       return [31, copy_loc(function(x){return x;}, x0$28), _cb_];
      case 31:
       var x0$29 = param[1]; return [32, copy_module_expr(x0$29)];
      case 32:
       var x1$20 = param[2], x0$30 = param[1], _cc_ = copy_expression(x1$20);
       return [33, copy_open_infos(copy_module_expr, x0$30), _cc_];
      case 33:
       var x0$31 = param[1]; return [34, copy_letop(x0$31)];
      default: var x0$32 = param[1]; return [35, copy_extension(x0$32)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bE_ = copy_expression(body),
     _bF_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bF_, _bE_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bC_ = copy_expression(pbop_exp),
     _bD_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bD_,
            _bC_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bA_ = copy_expression(pc_rhs),
     _bB_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bB_, _bA_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[5],
     pvb_attributes = param[4],
     pvb_constraint = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bx_ = copy_attributes(pvb_attributes),
     _by_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_value_constraint, pvb_constraint),
     _bz_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bz_, _by_, _bx_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bv_ = copy_attributes(ppat_attributes),
     _bw_ = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _bw_, _bv_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _bm_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _bm_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _bn_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _bn_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bo_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){
             var x1 = x[2], x0 = x[1], _bu_ = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){return copy_loc(function(x){return x;}, x);},
                       x0),
                     _bu_];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bo_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bp_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bt_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bt_];
                 },
                 x0$6),
               _bp_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bq_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bq_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _br_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _br_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bs_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bs_];
    }
   }
   function copy_value_constraint(param){
    if(0 === param[0]){
     var
      typ = param[2],
      locally_abstract_univars = param[1],
      _bj_ = function(x){return x;},
      _bi_ = copy_core_type(typ);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(_bl_){return copy_loc(_bj_, _bl_);},
               locally_abstract_univars),
             _bi_];
    }
    var
     coercion = param[2],
     ground = param[1],
     _bk_ = copy_core_type(coercion);
    return [1, caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ground), _bk_];
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _bg_ = copy_attributes(ptyp_attributes),
     _bh_ = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_loc, ptyp_desc), ptyp_loc, _bh_, _bg_];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(loc, param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _a9_ = copy_core_type(x2),
        _a__ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a__, _a9_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a$_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a$_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _ba_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _ba_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _bb_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _bb_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1], _bc_ = x1$3[1];
       return [6, copy_core_type(x0$5), _bc_];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _bd_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _be_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _be_,
               _bd_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _bf_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _bf_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      case 10:
       return migration_error(loc, cst_module_open_in_types);
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _a7_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _a8_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _a8_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _a7_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _a6_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _a6_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _a5_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _a5_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _a4_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _a4_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _a3_ =
       attr_name[1] !== "ocaml.ppx.context"
        ? copy_payload(attr_payload)
        : copy_payload(migrate_ppx_context_payload(attr_payload));
    return [0, copy_loc(function(x){return x;}, attr_name), _a3_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _a2_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _a2_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aY_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aY_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aZ_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aZ_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _a0_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _a0_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _a1_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _a1_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aX_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aX_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aN_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aN_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aO_ = copy_class_expr(x3),
        _aP_ = copy_pattern(x2),
        _aQ_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aQ_, _aP_, _aO_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aR_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aW_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aW_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aR_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aS_ = copy_class_expr(x2$0),
        _aT_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aT_, _aS_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aU_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aU_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aV_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aV_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aM_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aM_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aL_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aL_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _aE_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _aF_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _aF_, _aE_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _aG_ = copy_class_field_kind(x2$0),
        _aH_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aH_, _aG_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _aI_ = copy_class_field_kind(x2$1),
        _aJ_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _aJ_, _aI_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aK_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aK_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _aD_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _aD_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _aB_ = copy_attributes(pmb_attributes),
     _aC_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _aC_,
            _aB_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _aA_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _aA_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _ax_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _ax_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _ay_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _ay_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x1$1 = param[2], x0$4 = param[1], _az_ = copy_module_type(x1$1);
       return [5, copy_module_expr(x0$4), _az_];
      case 6:
       var x0$5 = param[1]; return [6, copy_expression(x0$5)];
      default: var x0$6 = param[1]; return [7, copy_extension(x0$6)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _aw_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _aw_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _av_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _av_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _at_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _at_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _au_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _au_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _an_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _an_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _ao_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _ao_];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], _ap_ = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _ap_];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], _aq_ = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _aq_];
      case 4:
       var
        x1$3 = param[2],
        x0$3 = param[1],
        _ar_ = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), _ar_];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        _as_ = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), _as_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _al_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _al_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, copy_include_infos(copy_module_type, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], _am_ = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), _am_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ak_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ak_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _ag_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _ag_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _ah_ = copy_class_type(x2),
        _ai_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _ai_, _ah_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _aj_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _aj_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _af_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _af_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _ae_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _ae_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _Z_ = copy_core_type(x3),
        ___ = copy_virtual_flag(x2),
        _$_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _$_, ___, _Z_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _aa_ = copy_core_type(x3$0),
        _ab_ = copy_virtual_flag(x2$0),
        _ac_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _ac_, _ab_, _aa_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _ad_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _ad_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _Y_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _Y_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _S_ = copy_attributes(pci_attributes),
     _T_ = caml_call1(f0, pci_expr),
     _U_ = copy_loc(function(x){return x;}, pci_name),
     _V_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _W_ = copy_injectivity(x1$0),
           _X_ = [0, copy_variance(x0$0), _W_];
          return [0, copy_core_type(x0), _X_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _V_, _U_, _T_, pci_loc, _S_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _R_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _R_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _P_ = copy_attributes(popen_attributes),
     _Q_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _Q_, popen_loc, _P_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _N_ = copy_attributes(pmtd_attributes),
     _O_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _O_,
            _N_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _L_ = copy_attributes(pms_attributes),
     _M_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _M_, _L_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _J_ = copy_attributes(pmd_attributes),
     _K_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _K_,
            _J_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _I_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _I_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _C_ = copy_attributes(ptyext_attributes),
     _D_ = copy_private_flag(ptyext_private),
     _E_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _F_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _G_ = copy_injectivity(x1$0),
           _H_ = [0, copy_variance(x0$0), _G_];
          return [0, copy_core_type(x0), _H_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _F_,
            _E_,
            _D_,
            ptyext_loc,
            _C_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _A_ = copy_attributes(pext_attributes),
     _B_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _B_,
            pext_loc,
            _A_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _y_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x2),
      _z_ = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){return copy_loc(function(x){return x;}, x);},
               x0),
             _z_,
             _y_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _p_ = copy_attributes(ptype_attributes),
     _q_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _r_ = copy_private_flag(ptype_private),
     _s_ = copy_type_kind(ptype_kind),
     _t_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _x_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _x_, x2];
         },
         ptype_cstrs),
     _u_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _v_ = copy_injectivity(x1$0),
           _w_ = [0, copy_variance(x0$0), _v_];
          return [0, copy_core_type(x0), _w_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _u_,
            _t_,
            _s_,
            _r_,
            _q_,
            _p_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     _l_ = copy_attributes(pcd_attributes),
     _m_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _n_ = copy_constructor_arguments(pcd_args),
     _o_ =
       caml_call2
        (Stdlib_List[20],
         function(x){return copy_loc(function(x){return x;}, x);},
         pcd_vars);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _o_,
            _n_,
            _m_,
            pcd_loc,
            _l_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _i_ = copy_attributes(pld_attributes),
     _j_ = copy_core_type(pld_type),
     _k_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _k_,
            _j_,
            pld_loc,
            _i_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _f_ = copy_attributes(pval_attributes),
     _g_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _h_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _h_,
            _g_,
            _f_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _e_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _e_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], _d_ = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), _d_];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_502_501 =
      [0,
       migration_error,
       mk_ghost_attr,
       concat_list_lit,
       migrate_ppx_context_load_path,
       migrate_ppx_context_fields,
       migrate_ppx_context_payload,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_value_constraint,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (16, Astlib_Migrate_502_501, "Astlib__Migrate_502_501");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_501_502
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    cst_ppxlib_migration_load_path = "ppxlib.migration.load_path",
    cst_Invalid_ppxlib_migration_l =
      "Invalid ppxlib.migration.load_path payload",
    _a_ = [0, "[]"],
    cst_ppxlib_migration_stop_taki = "ppxlib.migration.stop_taking";
   function extract_attr(name, attrs){
    var acc = 0, param = attrs;
    for(;;){
     if(! param) return [0, 0, caml_call1(Stdlib_List[10], acc)];
     var hd = param[1], q = param[2], attr_payload = hd[2], txt = hd[1][1];
     if(txt === name)
      return [0, [0, attr_payload], caml_call2(Stdlib_List[13], acc, q)];
     var tl = param[2], acc$0 = [0, hd, acc];
     acc = acc$0;
     param = tl;
    }
   }
   function migrate_ppx_context_load_path(expr){
    var
     match = extract_attr(cst_ppxlib_migration_load_path, expr[4]),
     other_attrs = match[2],
     payload = match[1];
    if(! payload){
     var
      pexp_desc = [9, [0, _a_, expr[2]], 0],
      hidden = [0, pexp_desc, expr[2], expr[3], 0];
     return [0, [8, [0, expr, [0, hidden, 0]]], expr[2], expr[3], other_attrs];
    }
    var _cj_ = payload[1];
    if(0 === _cj_[0]){
     var _ck_ = _cj_[1];
     if(_ck_){
      var _cl_ = _ck_[1][1];
      if(0 === _cl_[0] && ! _cl_[2] && ! _ck_[2]){var expr$0 = _cl_[1]; return expr$0;}
     }
    }
    return caml_call1(Stdlib[1], cst_Invalid_ppxlib_migration_l);
   }
   function migrate_ppx_context_fields(fields){
    return caml_call2
            (Stdlib_List[20],
             function(param){
              var
               expr = param[2],
               lident_loc = param[1],
               _ci_ = lident_loc[1];
              if(0 === _ci_[0] && _ci_[1] === "load_path")
               return [0, lident_loc, migrate_ppx_context_load_path(expr)];
              return [0, lident_loc, expr];
             },
             fields);
   }
   function migrate_ppx_context_payload(payload){
    a:
    if(0 === payload[0]){
     var _cf_ = payload[1];
     if(_cf_){
      var stri = _cf_[1], _cg_ = stri[1];
      if(0 === _cg_[0]){
       var expr = _cg_[1], _ch_ = expr[1];
       if(typeof _ch_ !== "number" && 11 === _ch_[0]){
        if(_ch_[2]) break a;
        if(_cf_[2]) break a;
        var
         attributes = _cg_[2],
         fields = _ch_[1],
         new_fields = migrate_ppx_context_fields(fields),
         new_expr = [0, [11, new_fields, 0], expr[2], expr[3], expr[4]];
        return [0, [0, [0, [0, new_expr, attributes], stri[2]], 0]];
       }
      }
     }
    }
    return payload;
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _ce_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _ce_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _cc_ = copy_attributes(pexp_attributes),
     _cd_ = copy_location_stack(pexp_loc_stack);
    return [0,
            copy_expression_desc(pexp_loc, pexp_desc),
            pexp_loc,
            _cd_,
            _cc_];
   }
   function copy_expression_desc(loc, param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bE_ = copy_expression(x2),
        _bF_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bF_, _bE_];
      case 3:
       var x0$2 = param[1];
       return [3,
               0,
               0,
               [1, caml_call2(Stdlib_List[20], copy_case, x0$2), loc, 0]];
      case 4:
       var
        expr = param[4],
        pat = param[3],
        opt_default = param[2],
        arg_label = param[1],
        take_body =
          function(e){
           var match = e[1];
           if(typeof match !== "number" && 3 === match[0]){
            var
             case_list = match[1],
             _ca_ = copy_attributes(e[4]),
             _cb_ = e[2];
            return [1,
                    caml_call2(Stdlib_List[20], copy_case, case_list),
                    _cb_,
                    _ca_];
           }
           return [0, copy_expression(e)];
          },
        acc$0 = 0,
        arg_label$1 = arg_label,
        opt_default$1 = opt_default,
        pat$1 = pat,
        expr$2 = expr;
       for(;;){
        var
         _bG_ = copy_pattern(pat$1),
         _bH_ =
           caml_call2(Astlib_Stdlib0[2][1], copy_expression, opt_default$1),
         pparam_desc = [0, copy_arg_label(arg_label$1), _bH_, _bG_],
         acc$1 = [0, [0, pat$1[2], pparam_desc], acc$0],
         arg_list = acc$1,
         e = expr$2;
        a:
        for(;;){
         b:
         if(0 === e[4]){
          var match = e[1];
          if(typeof match !== "number")
           switch(match[0]){
             case 4:
              break a;
             case 19:
              var
               ct = match[2],
               exp = match[1],
               ct$0 = [0, [0, copy_core_type(ct)]],
               match$0 = [0, , ct$0, take_body(exp)];
              break b;
             case 20:
              var
               c2 = match[3],
               c1 = match[2],
               exp$0 = match[1],
               c1$0 = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, c1),
               c2$0 = copy_core_type(c2),
               match$0 = [0, , [0, [1, c1$0, c2$0]], take_body(exp$0)];
              break b;
             case 31:
              var
               expr$1 = match[2],
               t = match[1],
               acc = [0, [0, t[2], [1, t]], arg_list];
              arg_list = acc;
              e = expr$1;
              continue;
           }
          var match$0 = [0, , 0, take_body(e)];
         }
         else
          var
           attrs = extract_attr(cst_ppxlib_migration_stop_taki, e[4])[2],
           match$0 =
             [0, , 0, [0, copy_expression([0, e[1], e[2], e[3], attrs])]];
         var body = match$0[3], type_constraint = match$0[2];
         return [3,
                 caml_call1(Stdlib_List[10], arg_list),
                 type_constraint,
                 body];
        }
        var
         expr$0 = match[4],
         pat$0 = match[3],
         opt_default$0 = match[2],
         arg_label$0 = match[1];
        acc$0 = arg_list;
        arg_label$1 = arg_label$0;
        opt_default$1 = opt_default$0;
        pat$1 = pat$0;
        expr$2 = expr$0;
       }
       break;
      case 5:
       var
        x1$0 = param[2],
        x0$3 = param[1],
        _bI_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _b$_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _b$_];
            },
            x1$0);
       return [4, copy_expression(x0$3), _bI_];
      case 6:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bJ_ = caml_call2(Stdlib_List[20], copy_case, x1$1);
       return [5, copy_expression(x0$4), _bJ_];
      case 7:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _bK_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _bK_];
      case 8:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_expression, x0$6)];
      case 9:
       var
        x1$3 = param[2],
        x0$7 = param[1],
        _bL_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$3);
       return [8, copy_loc(copy_Longident_t, x0$7), _bL_];
      case 10:
       var x1$4 = param[2], x0$8 = param[1];
       return [9,
               x0$8,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4)];
      case 11:
       var
        x1$5 = param[2],
        x0$9 = param[1],
        _bM_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5);
       return [10,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _b__ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _b__];
                 },
                 x0$9),
               _bM_];
      case 12:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _bN_ = copy_loc(copy_Longident_t, x1$6);
       return [11, copy_expression(x0$10), _bN_];
      case 13:
       var
        x2$0 = param[3],
        x1$7 = param[2],
        x0$11 = param[1],
        _bO_ = copy_expression(x2$0),
        _bP_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bP_, _bO_];
      case 14:
       var x0$12 = param[1];
       return [13, caml_call2(Stdlib_List[20], copy_expression, x0$12)];
      case 15:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$13 = param[1],
        _bQ_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$1),
        _bR_ = copy_expression(x1$8);
       return [14, copy_expression(x0$13), _bR_, _bQ_];
      case 16:
       var x1$9 = param[2], x0$14 = param[1], _bS_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bS_];
      case 17:
       var x1$10 = param[2], x0$15 = param[1], _bT_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bT_];
      case 18:
       var
        x4 = param[5],
        x3 = param[4],
        x2$2 = param[3],
        x1$11 = param[2],
        x0$16 = param[1],
        _bU_ = copy_expression(x4),
        _bV_ = copy_direction_flag(x3),
        _bW_ = copy_expression(x2$2),
        _bX_ = copy_expression(x1$11);
       return [17, copy_pattern(x0$16), _bX_, _bW_, _bV_, _bU_];
      case 19:
       var x1$12 = param[2], x0$17 = param[1], _bY_ = copy_core_type(x1$12);
       return [18, copy_expression(x0$17), _bY_];
      case 20:
       var
        x2$3 = param[3],
        x1$13 = param[2],
        x0$18 = param[1],
        _bZ_ = copy_core_type(x2$3),
        _b0_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$13);
       return [19, copy_expression(x0$18), _b0_, _bZ_];
      case 21:
       var
        x1$14 = param[2],
        x0$19 = param[1],
        _b1_ = copy_loc(copy_label, x1$14);
       return [20, copy_expression(x0$19), _b1_];
      case 22:
       var x0$20 = param[1]; return [21, copy_loc(copy_Longident_t, x0$20)];
      case 23:
       var x1$15 = param[2], x0$21 = param[1], _b2_ = copy_expression(x1$15);
       return [22, copy_loc(copy_label, x0$21), _b2_];
      case 24:
       var x0$22 = param[1];
       return [23,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _b9_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _b9_];
                 },
                 x0$22)];
      case 25:
       var
        x2$4 = param[3],
        x1$16 = param[2],
        x0$23 = param[1],
        _b3_ = copy_expression(x2$4),
        _b4_ = copy_module_expr(x1$16);
       return [24,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$23),
               _b4_,
               _b3_];
      case 26:
       var x1$17 = param[2], x0$24 = param[1], _b5_ = copy_expression(x1$17);
       return [25, copy_extension_constructor(x0$24), _b5_];
      case 27:
       var x0$25 = param[1]; return [26, copy_expression(x0$25)];
      case 28:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 29:
       var
        x1$18 = param[2],
        x0$27 = param[1],
        _b6_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$18);
       return [28, copy_expression(x0$27), _b6_];
      case 30:
       var x0$28 = param[1]; return [29, copy_class_structure(x0$28)];
      case 31:
       var x1$19 = param[2], x0$29 = param[1], _b7_ = copy_expression(x1$19);
       return [30, copy_loc(function(x){return x;}, x0$29), _b7_];
      case 32:
       var x0$30 = param[1]; return [31, copy_module_expr(x0$30)];
      case 33:
       var x1$20 = param[2], x0$31 = param[1], _b8_ = copy_expression(x1$20);
       return [32, copy_open_infos(copy_module_expr, x0$31), _b8_];
      case 34:
       var x0$32 = param[1]; return [33, copy_letop(x0$32)];
      default: var x0$33 = param[1]; return [34, copy_extension(x0$33)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bC_ = copy_expression(body),
     _bD_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bD_, _bC_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bA_ = copy_expression(pbop_exp),
     _bB_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bB_,
            _bA_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _by_ = copy_expression(pc_rhs),
     _bz_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bz_, _by_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[5],
     pvb_attributes = param[4],
     pvb_constraint = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bv_ = copy_attributes(pvb_attributes),
     _bw_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_value_constraint, pvb_constraint),
     _bx_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bx_, _bw_, _bv_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bt_ = copy_attributes(ppat_attributes),
     _bu_ = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _bu_, _bt_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _bk_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _bk_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _bl_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _bl_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bm_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){
             var x1 = x[2], x0 = x[1], _bs_ = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){return copy_loc(function(x){return x;}, x);},
                       x0),
                     _bs_];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bm_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bn_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _br_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _br_];
                 },
                 x0$6),
               _bn_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bo_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bo_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bp_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bp_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bq_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bq_];
    }
   }
   function copy_value_constraint(param){
    if(0 === param[0]){
     var
      typ = param[2],
      locally_abstract_univars = param[1],
      _bh_ = function(x){return x;},
      _bg_ = copy_core_type(typ);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(_bj_){return copy_loc(_bh_, _bj_);},
               locally_abstract_univars),
             _bg_];
    }
    var
     coercion = param[2],
     ground = param[1],
     _bi_ = copy_core_type(coercion);
    return [1, caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ground), _bi_];
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _be_ = copy_attributes(ptyp_attributes),
     _bf_ = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _bf_, _be_];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _a7_ = copy_core_type(x2),
        _a8_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a8_, _a7_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a9_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a9_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a__ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a__];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a$_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a$_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1], _ba_ = [0, x1$3, x0$5[2]];
       return [6, copy_core_type(x0$5), _ba_];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _bb_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _bc_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _bc_,
               _bb_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _bd_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _bd_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [11, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _a5_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _a6_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _a6_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _a5_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _a4_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _a4_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _a3_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _a3_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _a2_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _a2_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _a1_ =
       attr_name[1] !== "ocaml.ppx.context"
        ? copy_payload(attr_payload)
        : copy_payload(migrate_ppx_context_payload(attr_payload));
    return [0, copy_loc(function(x){return x;}, attr_name), _a1_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _a0_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _a0_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aW_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aW_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aX_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aX_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aY_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aY_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aZ_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aZ_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aV_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aV_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aL_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aL_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aM_ = copy_class_expr(x3),
        _aN_ = copy_pattern(x2),
        _aO_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aO_, _aN_, _aM_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aP_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aU_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aU_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aP_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aQ_ = copy_class_expr(x2$0),
        _aR_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aR_, _aQ_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aS_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aS_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aT_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aT_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aK_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aK_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aJ_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aJ_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _aC_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _aD_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _aD_, _aC_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _aE_ = copy_class_field_kind(x2$0),
        _aF_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aF_, _aE_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _aG_ = copy_class_field_kind(x2$1),
        _aH_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _aH_, _aG_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aI_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aI_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _aB_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _aB_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _az_ = copy_attributes(pmb_attributes),
     _aA_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _aA_,
            _az_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _ay_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _ay_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _av_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _av_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _aw_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _aw_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x1$1 = param[2], x0$4 = param[1], _ax_ = copy_module_type(x1$1);
       return [5, copy_module_expr(x0$4), _ax_];
      case 6:
       var x0$5 = param[1]; return [6, copy_expression(x0$5)];
      default: var x0$6 = param[1]; return [7, copy_extension(x0$6)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _au_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _au_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _at_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _at_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _ar_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _ar_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _as_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _as_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _al_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _al_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _am_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _am_];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], _an_ = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _an_];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], _ao_ = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _ao_];
      case 4:
       var
        x1$3 = param[2],
        x0$3 = param[1],
        _ap_ = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), _ap_];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        _aq_ = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), _aq_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _aj_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _aj_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, copy_include_infos(copy_module_type, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], _ak_ = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), _ak_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ai_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ai_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _ae_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _ae_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _af_ = copy_class_type(x2),
        _ag_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _ag_, _af_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _ah_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _ah_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _ad_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _ad_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _ac_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _ac_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _X_ = copy_core_type(x3),
        _Y_ = copy_virtual_flag(x2),
        _Z_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _Z_, _Y_, _X_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        ___ = copy_core_type(x3$0),
        _$_ = copy_virtual_flag(x2$0),
        _aa_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _aa_, _$_, ___]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _ab_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _ab_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _W_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _W_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _Q_ = copy_attributes(pci_attributes),
     _R_ = caml_call1(f0, pci_expr),
     _S_ = copy_loc(function(x){return x;}, pci_name),
     _T_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _U_ = copy_injectivity(x1$0),
           _V_ = [0, copy_variance(x0$0), _U_];
          return [0, copy_core_type(x0), _V_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _T_, _S_, _R_, pci_loc, _Q_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _P_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _P_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _N_ = copy_attributes(popen_attributes),
     _O_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _O_, popen_loc, _N_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _L_ = copy_attributes(pmtd_attributes),
     _M_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _M_,
            _L_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _J_ = copy_attributes(pms_attributes),
     _K_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _K_, _J_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _H_ = copy_attributes(pmd_attributes),
     _I_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _I_,
            _H_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _G_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _G_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _A_ = copy_attributes(ptyext_attributes),
     _B_ = copy_private_flag(ptyext_private),
     _C_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _D_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _E_ = copy_injectivity(x1$0),
           _F_ = [0, copy_variance(x0$0), _E_];
          return [0, copy_core_type(x0), _F_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _D_,
            _C_,
            _B_,
            ptyext_loc,
            _A_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _y_ = copy_attributes(pext_attributes),
     _z_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _z_,
            pext_loc,
            _y_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _w_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x2),
      _x_ = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){return copy_loc(function(x){return x;}, x);},
               x0),
             _x_,
             _w_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _n_ = copy_attributes(ptype_attributes),
     _o_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _p_ = copy_private_flag(ptype_private),
     _q_ = copy_type_kind(ptype_kind),
     _r_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _v_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _v_, x2];
         },
         ptype_cstrs),
     _s_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _t_ = copy_injectivity(x1$0),
           _u_ = [0, copy_variance(x0$0), _t_];
          return [0, copy_core_type(x0), _u_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _s_,
            _r_,
            _q_,
            _p_,
            _o_,
            _n_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     _j_ = copy_attributes(pcd_attributes),
     _k_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _l_ = copy_constructor_arguments(pcd_args),
     _m_ =
       caml_call2
        (Stdlib_List[20],
         function(x){return copy_loc(function(x){return x;}, x);},
         pcd_vars);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _m_,
            _l_,
            _k_,
            pcd_loc,
            _j_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _g_ = copy_attributes(pld_attributes),
     _h_ = copy_core_type(pld_type),
     _i_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _i_,
            _h_,
            pld_loc,
            _g_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _d_ = copy_attributes(pval_attributes),
     _e_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _f_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _f_,
            _e_,
            _d_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _c_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _c_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], _b_ = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), _b_];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_501_502 =
      [0,
       extract_attr,
       migrate_ppx_context_load_path,
       migrate_ppx_context_fields,
       migrate_ppx_context_payload,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_value_constraint,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (9, Astlib_Migrate_501_502, "Astlib__Migrate_501_502");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_500
//# unitInfo: Requires: Astlib__Ast_414
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M032",
    ast_intf_magic_number = "Caml1999N032",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_500 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_500, "Astlib__Ast_500");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_501_500
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    _a_ = [0, 0],
    cst_ppxlib_migration_keep_stru = "ppxlib.migration.keep_structure",
    _b_ = [1, 0];
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _cQ_ = copy_location(pdir_loc),
     _cR_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _cR_, _cQ_];
   }
   function copy_directive_argument(param){
    var
     pdira_loc = param[2],
     pdira_desc = param[1],
     _cP_ = copy_location(pdira_loc);
    return [0, copy_directive_argument_desc(pdira_desc), _cP_];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _cM_ = copy_attributes(pexp_attributes),
     _cN_ = copy_location_stack(pexp_loc_stack),
     _cO_ = copy_location(pexp_loc);
    return [0, copy_expression_desc(pexp_desc), _cO_, _cN_, _cM_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _cd_ = copy_expression(x2),
        _ce_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _ce_, _cd_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _cf_ = copy_expression(x3),
        _cg_ = copy_pattern(x2$0),
        _ch_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _ch_, _cg_, _cf_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _ci_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _cL_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _cL_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _ci_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _cj_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _cj_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _ck_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _ck_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _cl_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _cl_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _cm_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _cK_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _cK_];
                 },
                 x0$10),
               _cm_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _cn_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _cn_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _co_ = copy_expression(x2$1),
        _cp_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _cp_, _co_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _cq_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _cr_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _cr_, _cq_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _cs_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _cs_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _ct_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _ct_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _cu_ = copy_expression(x4),
        _cv_ = copy_direction_flag(x3$0),
        _cw_ = copy_expression(x2$3),
        _cx_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _cx_, _cw_, _cv_, _cu_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _cy_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _cy_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _cz_ = copy_core_type(x2$4),
        _cA_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _cA_, _cz_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _cB_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _cB_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _cC_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _cC_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _cJ_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _cJ_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _cD_ = copy_expression(x2$5),
        _cE_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$24),
               _cE_,
               _cD_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _cF_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _cF_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _cG_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _cG_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _cH_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _cH_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _cI_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _cI_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _cb_ = copy_expression(body),
     _cc_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _cc_, _cb_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _b__ = copy_location(pbop_loc),
     _b$_ = copy_expression(pbop_exp),
     _ca_ = copy_pattern(pbop_pat);
    return [0, copy_loc(function(x){return x;}, pbop_op), _ca_, _b$_, _b__];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _b8_ = copy_expression(pc_rhs),
     _b9_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _b9_, _b8_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[5],
     pvb_attributes = param[4],
     pvb_constraint = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1];
    function merge_loc(left, right){return [0, left[1], right[2], 0];}
    function ghost_loc(loc){return [0, loc[1], loc[2], 1];}
    function ghost_constraint(pat, typ){
     var ppat_loc = ghost_loc(merge_loc(pat[2], typ[2]));
     return [0, [10, pat, typ], ppat_loc, 0, 0];
    }
    var
     pvb_pat$0 = copy_pattern(pvb_pat),
     pvb_expr$0 = copy_expression(pvb_expr);
    function constrain_pat(pat, typ, expr){
     var typ$0 = copy_core_type(typ), pvb_pat = ghost_constraint(pat, typ$0);
     return [0, pvb_pat, pvb_expr$0];
    }
    a:
    {
     if(pvb_constraint){
      var match = pvb_constraint[1];
      if(0 !== match[0]){
       var
        coercion = match[2],
        ground = match[1],
        coercion$0 = copy_core_type(coercion),
        ptyp_loc$0 = ghost_loc(coercion$0[2]),
        typ$3 = [0, [8, 0, coercion$0], ptyp_loc$0, coercion$0[3], 0],
        pvb_pat$3 = ghost_constraint(pvb_pat$0, typ$3),
        ground$0 = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ground),
        pexp_loc$0 = merge_loc(pvb_pat$3[2], pvb_expr$0[2]),
        pvb_expr$3 =
          [0,
           [20, pvb_expr$0, ground$0, coercion$0],
           pexp_loc$0,
           pvb_expr$0[3],
           0],
        pvb_expr$1 = pvb_expr$3,
        pvb_pat$1 = pvb_pat$3;
       break a;
      }
      var locally_abstract_univars = match[1];
      b:
      {
       if(! locally_abstract_univars){
        var typ$2 = match[2], _b2_ = typ$2[1];
        if(typeof _b2_ !== "number" && 8 === _b2_[0]){
         var _b3_ = pvb_pat$0[1];
         if(typeof _b3_ !== "number" && 0 === _b3_[0]){
          if(pvb_pat$0[4]) break b;
          var
           _b4_ = constrain_pat(pvb_pat$0, typ$2, pvb_expr$0),
           pvb_expr$1 = _b4_[2],
           pvb_pat$1 = _b4_[1];
          break a;
         }
         break b;
        }
       }
       var _bW_ = pvb_pat$0[1];
       if(typeof _bW_ !== "number" && 0 === _bW_[0]){
        if(pvb_pat$0[4]) break b;
        var
         typ$0 = match[2],
         typ$1 = copy_core_type(typ$0),
         pexp_loc = merge_loc(pvb_pat$0[2], pvb_expr$0[2]),
         ptyp_loc =
           locally_abstract_univars
            ? ghost_loc(pexp_loc)
            : ghost_loc(typ$1[2]),
         _bZ_ = typ$1[3],
         var_names =
           caml_call2
            (Stdlib_List[20],
             function(v){return v[1];},
             locally_abstract_univars),
         loop =
           function(t){
            var match = t[1];
            if(typeof match === "number")
             var desc = 0;
            else
             switch(match[0]){
               case 0:
                var x = match[1], desc = [0, x]; break;
               case 1:
                var
                 core_type = match[3],
                 core_type$0 = match[2],
                 label = match[1],
                 _b5_ = loop(core_type),
                 desc = [1, label, loop(core_type$0), _b5_];
                break;
               case 2:
                var
                 lst = match[1],
                 desc = [2, caml_call2(Stdlib_List[20], loop, lst)];
                break;
               case 3:
                var longident = match[1], _b6_ = longident[1];
                a:
                {
                 if(0 === _b6_[0] && ! match[2]){
                  var s = _b6_[1];
                  if(caml_call2(Stdlib_List[37], s, var_names)){var _b7_ = [0, s]; break a;}
                 }
                 var
                  lst$0 = match[2],
                  _b7_ =
                    [3, longident, caml_call2(Stdlib_List[20], loop, lst$0)];
                }
                var desc = _b7_;
                break;
               case 4:
                var
                 o = match[2],
                 lst$1 = match[1],
                 desc =
                   [4,
                    caml_call2(Stdlib_List[20], loop_object_field, lst$1),
                    o];
                break;
               case 5:
                var
                 lst$2 = match[2],
                 longident$0 = match[1],
                 desc =
                   [5, longident$0, caml_call2(Stdlib_List[20], loop, lst$2)];
                break;
               case 6:
                var
                 string = match[2],
                 core_type$1 = match[1],
                 desc = [6, loop(core_type$1), string];
                break;
               case 7:
                var
                 lbl_lst_option = match[3],
                 flag = match[2],
                 row_field_list = match[1],
                 desc =
                   [7,
                    caml_call2(Stdlib_List[20], loop_row_field, row_field_list),
                    flag,
                    lbl_lst_option];
                break;
               case 8:
                var
                 core_type$2 = match[2],
                 string_lst = match[1],
                 desc = [8, string_lst, loop(core_type$2)];
                break;
               case 9:
                var
                 match$0 = match[1],
                 lst$3 = match$0[2],
                 longident$1 = match$0[1],
                 desc =
                   [9,
                    [0,
                     longident$1,
                     caml_call2
                      (Stdlib_List[20],
                       function(param){
                        var typ = param[2], n = param[1];
                        return [0, n, loop(typ)];
                       },
                       lst$3)]];
                break;
               default:
                var
                 match$1 = match[1],
                 arg = match$1[2],
                 s$0 = match$1[1],
                 desc = [10, [0, s$0, arg]];
             }
            return [0, desc, t[2], t[3], t[4]];
           },
         loop_row_field =
           function(field){
            var match = field[1];
            if(0 === match[0])
             var
              lst = match[3],
              flag = match[2],
              label = match[1],
              prf_desc =
                [0, label, flag, caml_call2(Stdlib_List[20], loop, lst)];
            else
             var t = match[1], prf_desc = [1, loop(t)];
            return [0, prf_desc, field[2], field[3]];
           },
         loop_object_field =
           function(field){
            var match = field[1];
            if(0 === match[0])
             var
              t = match[2],
              label = match[1],
              pof_desc = [0, label, loop(t)];
            else
             var t$0 = match[1], pof_desc = [1, loop(t$0)];
            return [0, pof_desc, field[2], field[3]];
           },
         typ_poly =
           [0, [8, locally_abstract_univars, loop(typ$1)], ptyp_loc, _bZ_, 0],
         ppat_loc = ghost_loc(merge_loc(pvb_pat$0[2], typ$1[2])),
         _b0_ = ghost_constraint(pvb_pat$0, typ_poly),
         pvb_pat$2 = [0, _b0_[1], ppat_loc, _b0_[3], _b0_[4]],
         _b1_ = caml_call1(Stdlib_List[10], locally_abstract_univars),
         pvb_expr$2 =
           caml_call3
            (Stdlib_List[26],
             function(expr, var$0){
              return [0, [31, var$0, expr], pexp_loc, expr[3], 0];
             },
             [0, [19, pvb_expr$0, typ$1], pexp_loc, pvb_expr$0[3], 0],
             _b1_),
         pvb_expr$1 = pvb_expr$2,
         pvb_pat$1 = pvb_pat$2;
        break a;
       }
      }
      if(! locally_abstract_univars){
       var
        typ = match[2],
        _bY_ = constrain_pat(pvb_pat$0, typ, pvb_expr$0),
        pvb_expr$1 = _bY_[2],
        pvb_pat$1 = _bY_[1];
       break a;
      }
     }
     var pvb_expr$1 = pvb_expr$0, pvb_pat$1 = pvb_pat$0;
    }
    var _bX_ = copy_location(pvb_loc);
    return [0, pvb_pat$1, pvb_expr$1, copy_attributes(pvb_attributes), _bX_];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bT_ = copy_attributes(ppat_attributes),
     _bU_ = copy_location_stack(ppat_loc_stack),
     _bV_ = copy_location(ppat_loc);
    return [0, copy_pattern_desc(ppat_desc), _bV_, _bU_, _bT_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _bK_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _bK_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _bL_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _bL_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bM_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){
             var x1 = x[2], x0 = x[1], _bS_ = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){return copy_loc(function(x){return x;}, x);},
                       x0),
                     _bS_];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bM_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bN_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bR_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bR_];
                 },
                 x0$6),
               _bN_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bO_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bO_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bP_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bP_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bQ_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bQ_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _bH_ = copy_attributes(ptyp_attributes),
     _bI_ = copy_location_stack(ptyp_loc_stack),
     _bJ_ = copy_location(ptyp_loc);
    return [0, copy_core_type_desc(ptyp_desc), _bJ_, _bI_, _bH_];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _bz_ = copy_core_type(x2),
        _bA_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _bA_, _bz_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _bB_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _bB_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _bC_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _bC_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _bD_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _bD_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _bE_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _bF_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _bF_,
               _bE_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _bG_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _bG_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _bx_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _by_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _by_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _bx_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _bv_ = copy_attributes(prf_attributes),
     _bw_ = copy_location(prf_loc);
    return [0, copy_row_field_desc(prf_desc), _bw_, _bv_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _bu_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _bu_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _bs_ = copy_attributes(pof_attributes),
     _bt_ = copy_location(pof_loc);
    return [0, copy_object_field_desc(pof_desc), _bt_, _bs_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _bq_ = copy_location(attr_loc),
     _br_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _br_, _bq_];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _bp_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _bp_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var
     pstr_loc = param[2],
     pstr_desc = param[1],
     _bo_ = copy_location(pstr_loc);
    return [0, copy_structure_item_desc(pstr_desc), _bo_];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _bk_ = copy_attributes(x1);
       return [0, copy_expression(x0), _bk_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _bl_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _bl_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _bm_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _bm_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _bn_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _bn_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _bi_ = copy_attributes(pcl_attributes),
     _bj_ = copy_location(pcl_loc);
    return [0, copy_class_expr_desc(pcl_desc), _bj_, _bi_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _a__ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _a__];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _a$_ = copy_class_expr(x3),
        _ba_ = copy_pattern(x2),
        _bb_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _bb_, _ba_, _a$_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _bc_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _bh_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _bh_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _bc_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _bd_ = copy_class_expr(x2$0),
        _be_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _be_, _bd_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _bf_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _bf_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _bg_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _bg_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _a9_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _a9_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _a7_ = copy_attributes(pcf_attributes),
     _a8_ = copy_location(pcf_loc);
    return [0, copy_class_field_desc(pcf_desc), _a8_, _a7_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _a0_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _a1_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _a1_, _a0_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _a2_ = copy_class_field_kind(x2$0),
        _a3_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _a3_, _a2_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _a4_ = copy_class_field_kind(x2$1),
        _a5_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _a5_, _a4_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _a6_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _a6_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _aZ_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _aZ_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _aW_ = copy_location(pmb_loc),
     _aX_ = copy_attributes(pmb_attributes),
     _aY_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _aY_,
            _aX_,
            _aW_];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     loc = copy_location(pmod_loc),
     _aV_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(loc, pmod_desc), loc, _aV_];
   }
   function copy_module_expr_desc(loc, param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _aR_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _aR_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        x1$1 = copy_module_expr(x1$0),
        _aS_ = x1$1[1];
       a:
       {
        if(1 === _aS_[0] && ! _aS_[1]){
         var
          _aT_ = x1$1[2],
          loc$0 = [0, _aT_[1], _aT_[2], 1],
          pmod_attributes =
            [0,
             [0, [0, cst_ppxlib_migration_keep_stru, loc$0], _a_, loc$0],
             x1$1[3]],
          x1$2 = [0, x1$1[1], x1$1[2], pmod_attributes];
         break a;
        }
        var x1$2 = x1$1;
       }
       return [3, copy_module_expr(x0$2), x1$2];
      case 4:
       var x0$3 = param[1], empty_struct = [0, _b_, loc, 0];
       return [3, copy_module_expr(x0$3), empty_struct];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aU_ = copy_module_type(x1$3);
       return [4, copy_module_expr(x0$4), _aU_];
      case 6:
       var x0$5 = param[1]; return [5, copy_expression(x0$5)];
      default: var x0$6 = param[1]; return [6, copy_extension(x0$6)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _aQ_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _aQ_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _aO_ = copy_attributes(pmty_attributes),
     _aP_ = copy_location(pmty_loc);
    return [0, copy_module_type_desc(pmty_desc), _aP_, _aO_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _aM_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _aM_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _aN_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _aN_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aG_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _aG_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aH_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _aH_];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], _aI_ = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _aI_];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], _aJ_ = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _aJ_];
      case 4:
       var
        x1$3 = param[2],
        x0$3 = param[1],
        _aK_ = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), _aK_];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        _aL_ = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), _aL_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var
     psig_loc = param[2],
     psig_desc = param[1],
     _aF_ = copy_location(psig_loc);
    return [0, copy_signature_item_desc(psig_desc), _aF_];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _aD_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _aD_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, copy_include_infos(copy_module_type, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], _aE_ = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), _aE_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _aB_ = copy_attributes(pcty_attributes),
     _aC_ = copy_location(pcty_loc);
    return [0, copy_class_type_desc(pcty_desc), _aC_, _aB_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _ax_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _ax_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _ay_ = copy_class_type(x2),
        _az_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _az_, _ay_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _aA_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _aA_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _aw_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _aw_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _au_ = copy_attributes(pctf_attributes),
     _av_ = copy_location(pctf_loc);
    return [0, copy_class_type_field_desc(pctf_desc), _av_, _au_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _an_ = copy_core_type(x3),
        _ao_ = copy_virtual_flag(x2),
        _ap_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _ap_, _ao_, _an_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _aq_ = copy_core_type(x3$0),
        _ar_ = copy_virtual_flag(x2$0),
        _as_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _as_, _ar_, _aq_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _at_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _at_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _am_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _am_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _af_ = copy_attributes(pci_attributes),
     _ag_ = copy_location(pci_loc),
     _ah_ = caml_call1(f0, pci_expr),
     _ai_ = copy_loc(function(x){return x;}, pci_name),
     _aj_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _ak_ = copy_injectivity(x1$0),
           _al_ = [0, copy_variance(x0$0), _ak_];
          return [0, copy_core_type(x0), _al_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _aj_, _ai_, _ah_, _ag_, _af_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _ad_ = copy_attributes(pincl_attributes),
     _ae_ = copy_location(pincl_loc);
    return [0, caml_call1(f0, pincl_mod), _ae_, _ad_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _aa_ = copy_attributes(popen_attributes),
     _ab_ = copy_location(popen_loc),
     _ac_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _ac_, _ab_, _aa_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _Z_ = copy_location(pmtd_loc),
     ___ = copy_attributes(pmtd_attributes),
     _$_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0, copy_loc(function(x){return x;}, pmtd_name), _$_, ___, _Z_];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _W_ = copy_location(pms_loc),
     _X_ = copy_attributes(pms_attributes),
     _Y_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _Y_, _X_, _W_];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _T_ = copy_location(pmd_loc),
     _U_ = copy_attributes(pmd_attributes),
     _V_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _V_,
            _U_,
            _T_];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _R_ = copy_attributes(ptyexn_attributes),
     _S_ = copy_location(ptyexn_loc);
    return [0, copy_extension_constructor(ptyexn_constructor), _S_, _R_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _K_ = copy_attributes(ptyext_attributes),
     _L_ = copy_location(ptyext_loc),
     _M_ = copy_private_flag(ptyext_private),
     _N_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _O_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _P_ = copy_injectivity(x1$0),
           _Q_ = [0, copy_variance(x0$0), _P_];
          return [0, copy_core_type(x0), _Q_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _O_,
            _N_,
            _M_,
            _L_,
            _K_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _H_ = copy_attributes(pext_attributes),
     _I_ = copy_location(pext_loc),
     _J_ = copy_extension_constructor_kin(pext_kind);
    return [0, copy_loc(function(x){return x;}, pext_name), _J_, _I_, _H_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _F_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x2),
      _G_ = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){return copy_loc(function(x){return x;}, x);},
               x0),
             _G_,
             _F_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _u_ = copy_location(ptype_loc),
     _v_ = copy_attributes(ptype_attributes),
     _w_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _x_ = copy_private_flag(ptype_private),
     _y_ = copy_type_kind(ptype_kind),
     _z_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x2 = x[3],
           x1 = x[2],
           x0 = x[1],
           _D_ = copy_location(x2),
           _E_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _E_, _D_];
         },
         ptype_cstrs),
     _A_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _B_ = copy_injectivity(x1$0),
           _C_ = [0, copy_variance(x0$0), _B_];
          return [0, copy_core_type(x0), _C_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _A_,
            _z_,
            _y_,
            _x_,
            _w_,
            _v_,
            _u_];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     _p_ = copy_attributes(pcd_attributes),
     _q_ = copy_location(pcd_loc),
     _r_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _s_ = copy_constructor_arguments(pcd_args),
     _t_ =
       caml_call2
        (Stdlib_List[20],
         function(x){return copy_loc(function(x){return x;}, x);},
         pcd_vars);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _t_,
            _s_,
            _r_,
            _q_,
            _p_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _l_ = copy_attributes(pld_attributes),
     _m_ = copy_location(pld_loc),
     _n_ = copy_core_type(pld_type),
     _o_ = copy_mutable_flag(pld_mutable);
    return [0, copy_loc(function(x){return x;}, pld_name), _o_, _n_, _m_, _l_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _h_ = copy_location(pval_loc),
     _i_ = copy_attributes(pval_attributes),
     _j_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _k_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _k_,
            _j_,
            _i_,
            _h_];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _g_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _g_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _f_ = caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2);
       return [2, x0$1, copy_location(x1$0), _f_];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], _e_ = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), _e_];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1], _d_ = copy_location(loc);
    return [0, caml_call1(f0, txt), _d_];
   }
   function copy_location(param){
    var
     loc_ghost = param[3],
     loc_end = param[2],
     loc_start = param[1],
     _c_ = copy_position(loc_end);
    return [0, copy_position(loc_start), _c_, loc_ghost];
   }
   function copy_position(param){
    var
     pos_cnum = param[4],
     pos_bol = param[3],
     pos_lnum = param[2],
     pos_fname = param[1];
    return [0, pos_fname, pos_lnum, pos_bol, pos_cnum];
   }
   var
    Astlib_Migrate_501_500 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location,
       copy_position];
   runtime.caml_register_global
    (5, Astlib_Migrate_501_500, "Astlib__Migrate_501_500");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_500_501
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, "astlib/migrate_500_501.ml", 290, 10];
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _cW_ = copy_location(pdir_loc),
     _cX_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _cX_, _cW_];
   }
   function copy_directive_argument(param){
    var
     pdira_loc = param[2],
     pdira_desc = param[1],
     _cV_ = copy_location(pdira_loc);
    return [0, copy_directive_argument_desc(pdira_desc), _cV_];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, copy_Longident_t(x0$1)];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _cS_ = copy_attributes(pexp_attributes),
     _cT_ = copy_location_stack(pexp_loc_stack),
     _cU_ = copy_location(pexp_loc);
    return [0, copy_expression_desc(pexp_desc), _cU_, _cT_, _cS_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _cj_ = copy_expression(x2),
        _ck_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _ck_, _cj_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _cl_ = copy_expression(x3),
        _cm_ = copy_pattern(x2$0),
        _cn_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _cn_, _cm_, _cl_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _co_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _cR_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _cR_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _co_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _cp_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _cp_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _cq_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _cq_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _cr_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _cr_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _cs_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _cQ_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _cQ_];
                 },
                 x0$10),
               _cs_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _ct_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _ct_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _cu_ = copy_expression(x2$1),
        _cv_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _cv_, _cu_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _cw_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _cx_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _cx_, _cw_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _cy_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _cy_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _cz_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _cz_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _cA_ = copy_expression(x4),
        _cB_ = copy_direction_flag(x3$0),
        _cC_ = copy_expression(x2$3),
        _cD_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _cD_, _cC_, _cB_, _cA_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _cE_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _cE_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _cF_ = copy_core_type(x2$4),
        _cG_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _cG_, _cF_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _cH_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _cH_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _cI_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _cI_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _cP_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _cP_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _cJ_ = copy_expression(x2$5),
        _cK_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$24),
               _cK_,
               _cJ_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _cL_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _cL_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _cM_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _cM_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _cN_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _cN_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _cO_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _cO_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _ch_ = copy_expression(body),
     _ci_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _ci_, _ch_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _ce_ = copy_location(pbop_loc),
     _cf_ = copy_expression(pbop_exp),
     _cg_ = copy_pattern(pbop_pat);
    return [0, copy_loc(function(x){return x;}, pbop_op), _cg_, _cf_, _ce_];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _cc_ = copy_expression(pc_rhs),
     _cd_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _cd_, _cc_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1];
    function tyvars_str(tyvars){
     return caml_call2(Stdlib_List[20], function(v){return v[1];}, tyvars);
    }
    function resugarable_value_binding(p, e){
     var _b2_ = p[1];
     a:
     {
      b:
      if(typeof _b2_ !== "number" && 10 === _b2_[0]){
       var pat$0 = _b2_[1], _b6_ = pat$0[1];
       c:
       {
        if(typeof _b6_ !== "number" && 0 === _b6_[0]){
         var ty_ext = _b2_[2], _b8_ = ty_ext[1];
         if(typeof _b8_ !== "number" && 8 === _b8_[0]){
          if(p[4]) break b;
          var rt$0 = _b8_[2], args_tyvars = _b8_[1], _b9_ = rt$0[1];
          d:
          {
           if(typeof _b9_ !== "number" && 8 === _b9_[0]){var _b__ = 0; break d;}
           var _b__ = 1;
          }
          if(! _b__)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
          var
           ty = args_tyvars ? ty_ext : rt$0,
           _b7_ = [0, 4298439, [0, pat$0, args_tyvars, rt$0, ty]];
          break c;
         }
        }
        if(p[4]) break b;
        var rt = _b2_[2], _b7_ = [0, -498624518, [0, pat$0, rt]];
       }
       var value_pattern = _b7_;
       break a;
      }
      var value_pattern = 870530776;
     }
     a:
     {
      b:
      c:
      d:
      {
       e:
       {
        var tyvars = 0, e$0 = e;
        f:
        for(;;){
         var _b3_ = e$0[1];
         if(typeof _b3_ === "number") break d;
         switch(_b3_[0]){
           case 19:
            break e;
           case 31:
            if(e$0[4]) break f;
            var e$2 = _b3_[2], tyvar = _b3_[1], tyvars$0 = [0, tyvar, tyvars];
            tyvars = tyvars$0;
            e$0 = e$2;
            break;
           default: break c;
         }
        }
        break b;
       }
       if(e$0[4]) break b;
       var
        ct = _b3_[2],
        e$1 = _b3_[1],
        value_exp = [0, [0, caml_call1(Stdlib_List[10], tyvars), e$1, ct]];
       break a;
      }
      var value_exp = 0;
     }
     if(typeof value_pattern !== "number"){
      var _b4_ = value_pattern[1];
      if(-498624518 === _b4_){
       var match = value_pattern[2], ct$0 = match[2], pat = match[1];
       return [0, -498624518, [0, pat, ct$0, e]];
      }
      if(4298439 === _b4_){
       var match$0 = value_pattern[2], p$0 = match$0[1];
       if(value_exp){
        var
         match$1 = value_exp[1],
         e_ct = match$1[3],
         inner_e = match$1[2],
         var_names$0 = match$1[1],
         extern_ct = match$0[4],
         pt_ct = match$0[3],
         pt_tyvars = match$0[2],
         _b5_ = tyvars_str(var_names$0);
        if(caml_equal(tyvars_str(pt_tyvars), _b5_)){
         var
          var_names =
            caml_call2
             (Stdlib_List[20], function(v){return v[1];}, var_names$0),
          loop =
            function(t){
             var match = t[1];
             if(typeof match === "number")
              var desc = 0;
             else
              switch(match[0]){
                case 0:
                 var x = match[1], desc = [0, x]; break;
                case 1:
                 var
                  core_type = match[3],
                  core_type$0 = match[2],
                  label = match[1],
                  _b$_ = loop(core_type),
                  desc = [1, label, loop(core_type$0), _b$_];
                 break;
                case 2:
                 var
                  lst = match[1],
                  desc = [2, caml_call2(Stdlib_List[20], loop, lst)];
                 break;
                case 3:
                 var longident = match[1], _ca_ = longident[1];
                 a:
                 {
                  if(0 === _ca_[0] && ! match[2]){
                   var s = _ca_[1];
                   if(caml_call2(Stdlib_List[37], s, var_names)){var _cb_ = [0, s]; break a;}
                  }
                  var
                   lst$0 = match[2],
                   _cb_ =
                     [3, longident, caml_call2(Stdlib_List[20], loop, lst$0)];
                 }
                 var desc = _cb_;
                 break;
                case 4:
                 var
                  o = match[2],
                  lst$1 = match[1],
                  desc =
                    [4,
                     caml_call2(Stdlib_List[20], loop_object_field, lst$1),
                     o];
                 break;
                case 5:
                 var
                  lst$2 = match[2],
                  longident$0 = match[1],
                  desc =
                    [5, longident$0, caml_call2(Stdlib_List[20], loop, lst$2)];
                 break;
                case 6:
                 var
                  string = match[2],
                  core_type$1 = match[1],
                  desc = [6, loop(core_type$1), string];
                 break;
                case 7:
                 var
                  lbl_lst_option = match[3],
                  flag = match[2],
                  row_field_list = match[1],
                  desc =
                    [7,
                     caml_call2(Stdlib_List[20], loop_row_field, row_field_list),
                     flag,
                     lbl_lst_option];
                 break;
                case 8:
                 var
                  core_type$2 = match[2],
                  string_lst = match[1],
                  desc = [8, string_lst, loop(core_type$2)];
                 break;
                case 9:
                 var
                  match$0 = match[1],
                  lst$3 = match$0[2],
                  longident$1 = match$0[1],
                  desc =
                    [9,
                     [0,
                      longident$1,
                      caml_call2
                       (Stdlib_List[20],
                        function(param){
                         var typ = param[2], n = param[1];
                         return [0, n, loop(typ)];
                        },
                        lst$3)]];
                 break;
                default:
                 var
                  match$1 = match[1],
                  arg = match$1[2],
                  s$0 = match$1[1],
                  desc = [10, [0, s$0, arg]];
              }
             return [0, desc, t[2], t[3], t[4]];
            },
          loop_row_field =
            function(field){
             var match = field[1];
             if(0 === match[0])
              var
               lst = match[3],
               flag = match[2],
               label = match[1],
               prf_desc =
                 [0, label, flag, caml_call2(Stdlib_List[20], loop, lst)];
             else
              var t = match[1], prf_desc = [1, loop(t)];
             return [0, prf_desc, field[2], field[3]];
            },
          loop_object_field =
            function(field){
             var match = field[1];
             if(0 === match[0])
              var
               t = match[2],
               label = match[1],
               pof_desc = [0, label, loop(t)];
             else
              var t$0 = match[1], pof_desc = [1, loop(t$0)];
             return [0, pof_desc, field[2], field[3]];
            },
          ety = loop(e_ct);
         return caml_equal(ety, pt_ct)
                 ? [0, -1058710956, [0, p$0, pt_tyvars, e_ct, inner_e]]
                 : [0, 222180220, [0, p$0, pt_tyvars, extern_ct, e]];
        }
       }
       var extern_ct$0 = match$0[4], pt_tyvars$0 = match$0[2];
       return [0, 222180220, [0, p$0, pt_tyvars$0, extern_ct$0, e]];
      }
     }
     return 870530776;
    }
    function with_constraint(ty_vars, typ){
     var typ$0 = copy_core_type(typ);
     return [0, [0, ty_vars, typ$0]];
    }
    var match = resugarable_value_binding(pvb_pat, pvb_expr);
    a:
    if(typeof match === "number")
     var pvb_constraint = 0, pvb_expr$0 = pvb_expr, pvb_pat$0 = pvb_pat;
    else{
     var _bZ_ = match[1];
     if(-498624518 === _bZ_)
      var
       match$0 = match[2],
       pvb_expr$1 = match$0[3],
       typ = match$0[2],
       pvb_pat$1 = match$0[1],
       pvb_constraint$0 = with_constraint(0, typ),
       pvb_constraint = pvb_constraint$0,
       pvb_expr$0 = pvb_expr$1,
       pvb_pat$0 = pvb_pat$1;
     else if(222180220 <= _bZ_){
      var _b0_ = match[2], pat = _b0_[1];
      if(_b0_[2])
       var
        expr = _b0_[4],
        ct = _b0_[3],
        pvb_constraint = with_constraint(0, ct),
        pvb_expr$0 = expr,
        pvb_pat$0 = pat;
      else{
       var expr$0 = _b0_[4], ct$0 = _b0_[3], _b1_ = expr$0[1];
       b:
       if(typeof _b1_ !== "number" && 20 === _b1_[0]){
        if(expr$0[4]) break b;
        var
         coerce = _b1_[3],
         gr = _b1_[2],
         expr$1 = _b1_[1],
         ground = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, gr),
         coercion = copy_core_type(coerce),
         pvb_constraint$1 = [0, [1, ground, coercion]],
         pvb_constraint = pvb_constraint$1,
         pvb_expr$0 = expr$1,
         pvb_pat$0 = pat;
        break a;
       }
       var
        pvb_constraint = with_constraint(0, ct$0),
        pvb_expr$0 = expr$0,
        pvb_pat$0 = pat;
      }
     }
     else
      var
       match$1 = match[2],
       e = match$1[4],
       typ$0 = match$1[3],
       ty_vars = match$1[2],
       p = match$1[1],
       pvb_constraint = with_constraint(ty_vars, typ$0),
       pvb_expr$0 = e,
       pvb_pat$0 = p;
    }
    var
     _bW_ = copy_location(pvb_loc),
     _bX_ = copy_attributes(pvb_attributes),
     _bY_ = copy_expression(pvb_expr$0);
    return [0, copy_pattern(pvb_pat$0), _bY_, pvb_constraint, _bX_, _bW_];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bT_ = copy_attributes(ppat_attributes),
     _bU_ = copy_location_stack(ppat_loc_stack),
     _bV_ = copy_location(ppat_loc);
    return [0, copy_pattern_desc(ppat_desc), _bV_, _bU_, _bT_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _bK_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _bK_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _bL_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _bL_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bM_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){
             var x1 = x[2], x0 = x[1], _bS_ = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){return copy_loc(function(x){return x;}, x);},
                       x0),
                     _bS_];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bM_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bN_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bR_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bR_];
                 },
                 x0$6),
               _bN_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bO_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bO_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bP_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bP_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bQ_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bQ_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _bH_ = copy_attributes(ptyp_attributes),
     _bI_ = copy_location_stack(ptyp_loc_stack),
     _bJ_ = copy_location(ptyp_loc);
    return [0, copy_core_type_desc(ptyp_desc), _bJ_, _bI_, _bH_];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _bz_ = copy_core_type(x2),
        _bA_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _bA_, _bz_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _bB_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _bB_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _bC_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _bC_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _bD_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _bD_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _bE_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _bF_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _bF_,
               _bE_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _bG_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _bG_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _bx_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _by_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _by_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _bx_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _bv_ = copy_attributes(prf_attributes),
     _bw_ = copy_location(prf_loc);
    return [0, copy_row_field_desc(prf_desc), _bw_, _bv_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _bu_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _bu_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _bs_ = copy_attributes(pof_attributes),
     _bt_ = copy_location(pof_loc);
    return [0, copy_object_field_desc(pof_desc), _bt_, _bs_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _bq_ = copy_location(attr_loc),
     _br_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _br_, _bq_];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _bp_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _bp_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var
     pstr_loc = param[2],
     pstr_desc = param[1],
     _bo_ = copy_location(pstr_loc);
    return [0, copy_structure_item_desc(pstr_desc), _bo_];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _bk_ = copy_attributes(x1);
       return [0, copy_expression(x0), _bk_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _bl_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _bl_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _bm_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _bm_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _bn_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _bn_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _bi_ = copy_attributes(pcl_attributes),
     _bj_ = copy_location(pcl_loc);
    return [0, copy_class_expr_desc(pcl_desc), _bj_, _bi_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _a__ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _a__];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _a$_ = copy_class_expr(x3),
        _ba_ = copy_pattern(x2),
        _bb_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _bb_, _ba_, _a$_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _bc_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _bh_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _bh_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _bc_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _bd_ = copy_class_expr(x2$0),
        _be_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _be_, _bd_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _bf_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _bf_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _bg_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _bg_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _a9_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _a9_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _a7_ = copy_attributes(pcf_attributes),
     _a8_ = copy_location(pcf_loc);
    return [0, copy_class_field_desc(pcf_desc), _a8_, _a7_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _a0_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _a1_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _a1_, _a0_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _a2_ = copy_class_field_kind(x2$0),
        _a3_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _a3_, _a2_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _a4_ = copy_class_field_kind(x2$1),
        _a5_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _a5_, _a4_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _a6_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _a6_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _aZ_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _aZ_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _aW_ = copy_location(pmb_loc),
     _aX_ = copy_attributes(pmb_attributes),
     _aY_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _aY_,
            _aX_,
            _aW_];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _aU_ = copy_attributes(pmod_attributes),
     _aV_ = copy_location(pmod_loc);
    return [0, copy_module_expr_desc(pmod_desc), _aV_, _aU_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _aQ_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _aQ_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _aR_ = x1$0[1];
       a:
       {
        if(1 === _aR_[0] && ! _aR_[1]){
         var acc = 0, param$0 = x1$0[3];
         for(;;){
          if(param$0){
           var hd = param$0[1];
           if(hd[1][1] !== "ppxlib.migration.keep_structure"){
            var tl = param$0[2], acc$0 = [0, hd, acc];
            acc = acc$0;
            param$0 = tl;
            continue;
           }
           var
            q = param$0[2],
            match = [0, caml_call2(Stdlib_List[13], acc, q), 0];
          }
          else
           var match = [0, caml_call1(Stdlib_List[10], acc), 1];
          var
           b = match[2],
           pmod_attributes = match[1],
           is_unit = b,
           x1$1 = [0, x1$0[1], x1$0[2], pmod_attributes];
          break a;
         }
        }
        var is_unit = 0, x1$1 = x1$0;
       }
       if(is_unit) return [4, copy_module_expr(x0$2)];
       var _aS_ = copy_module_expr(x1$1);
       return [3, copy_module_expr(x0$2), _aS_];
      case 4:
       var x1$2 = param[2], x0$3 = param[1], _aT_ = copy_module_type(x1$2);
       return [5, copy_module_expr(x0$3), _aT_];
      case 5:
       var x0$4 = param[1]; return [6, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [7, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _aP_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _aP_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _aN_ = copy_attributes(pmty_attributes),
     _aO_ = copy_location(pmty_loc);
    return [0, copy_module_type_desc(pmty_desc), _aO_, _aN_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _aL_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _aL_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _aM_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _aM_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aF_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _aF_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aG_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _aG_];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], _aH_ = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _aH_];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], _aI_ = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _aI_];
      case 4:
       var
        x1$3 = param[2],
        x0$3 = param[1],
        _aJ_ = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), _aJ_];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        _aK_ = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), _aK_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var
     psig_loc = param[2],
     psig_desc = param[1],
     _aE_ = copy_location(psig_loc);
    return [0, copy_signature_item_desc(psig_desc), _aE_];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _aC_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _aC_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, copy_include_infos(copy_module_type, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], _aD_ = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), _aD_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _aA_ = copy_attributes(pcty_attributes),
     _aB_ = copy_location(pcty_loc);
    return [0, copy_class_type_desc(pcty_desc), _aB_, _aA_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aw_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aw_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _ax_ = copy_class_type(x2),
        _ay_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _ay_, _ax_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _az_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _az_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _av_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _av_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _at_ = copy_attributes(pctf_attributes),
     _au_ = copy_location(pctf_loc);
    return [0, copy_class_type_field_desc(pctf_desc), _au_, _at_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _am_ = copy_core_type(x3),
        _an_ = copy_virtual_flag(x2),
        _ao_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _ao_, _an_, _am_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _ap_ = copy_core_type(x3$0),
        _aq_ = copy_virtual_flag(x2$0),
        _ar_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _ar_, _aq_, _ap_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _as_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _as_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _al_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _al_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _ae_ = copy_attributes(pci_attributes),
     _af_ = copy_location(pci_loc),
     _ag_ = caml_call1(f0, pci_expr),
     _ah_ = copy_loc(function(x){return x;}, pci_name),
     _ai_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _aj_ = copy_injectivity(x1$0),
           _ak_ = [0, copy_variance(x0$0), _aj_];
          return [0, copy_core_type(x0), _ak_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _ai_, _ah_, _ag_, _af_, _ae_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _ac_ = copy_attributes(pincl_attributes),
     _ad_ = copy_location(pincl_loc);
    return [0, caml_call1(f0, pincl_mod), _ad_, _ac_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _$_ = copy_attributes(popen_attributes),
     _aa_ = copy_location(popen_loc),
     _ab_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _ab_, _aa_, _$_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _Y_ = copy_location(pmtd_loc),
     _Z_ = copy_attributes(pmtd_attributes),
     ___ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0, copy_loc(function(x){return x;}, pmtd_name), ___, _Z_, _Y_];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _V_ = copy_location(pms_loc),
     _W_ = copy_attributes(pms_attributes),
     _X_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _X_, _W_, _V_];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _S_ = copy_location(pmd_loc),
     _T_ = copy_attributes(pmd_attributes),
     _U_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _U_,
            _T_,
            _S_];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _Q_ = copy_attributes(ptyexn_attributes),
     _R_ = copy_location(ptyexn_loc);
    return [0, copy_extension_constructor(ptyexn_constructor), _R_, _Q_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _J_ = copy_attributes(ptyext_attributes),
     _K_ = copy_location(ptyext_loc),
     _L_ = copy_private_flag(ptyext_private),
     _M_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _N_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _O_ = copy_injectivity(x1$0),
           _P_ = [0, copy_variance(x0$0), _O_];
          return [0, copy_core_type(x0), _P_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _N_,
            _M_,
            _L_,
            _K_,
            _J_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _G_ = copy_attributes(pext_attributes),
     _H_ = copy_location(pext_loc),
     _I_ = copy_extension_constructor_kin(pext_kind);
    return [0, copy_loc(function(x){return x;}, pext_name), _I_, _H_, _G_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _E_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x2),
      _F_ = copy_constructor_arguments(x1);
     return [0,
             caml_call2
              (Stdlib_List[20],
               function(x){return copy_loc(function(x){return x;}, x);},
               x0),
             _F_,
             _E_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _t_ = copy_location(ptype_loc),
     _u_ = copy_attributes(ptype_attributes),
     _v_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _w_ = copy_private_flag(ptype_private),
     _x_ = copy_type_kind(ptype_kind),
     _y_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x2 = x[3],
           x1 = x[2],
           x0 = x[1],
           _C_ = copy_location(x2),
           _D_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _D_, _C_];
         },
         ptype_cstrs),
     _z_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _A_ = copy_injectivity(x1$0),
           _B_ = [0, copy_variance(x0$0), _A_];
          return [0, copy_core_type(x0), _B_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _z_,
            _y_,
            _x_,
            _w_,
            _v_,
            _u_,
            _t_];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1],
     _o_ = copy_attributes(pcd_attributes),
     _p_ = copy_location(pcd_loc),
     _q_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _r_ = copy_constructor_arguments(pcd_args),
     _s_ =
       caml_call2
        (Stdlib_List[20],
         function(x){return copy_loc(function(x){return x;}, x);},
         pcd_vars);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _s_,
            _r_,
            _q_,
            _p_,
            _o_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _k_ = copy_attributes(pld_attributes),
     _l_ = copy_location(pld_loc),
     _m_ = copy_core_type(pld_type),
     _n_ = copy_mutable_flag(pld_mutable);
    return [0, copy_loc(function(x){return x;}, pld_name), _n_, _m_, _l_, _k_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _g_ = copy_location(pval_loc),
     _h_ = copy_attributes(pval_attributes),
     _i_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _j_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _j_,
            _i_,
            _h_,
            _g_];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _f_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _f_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _e_ = caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2);
       return [2, x0$1, copy_location(x1$0), _e_];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, copy_Longident_t(x0$0), x1];
      default:
       var x1$0 = param[2], x0$1 = param[1], _d_ = copy_Longident_t(x1$0);
       return [2, copy_Longident_t(x0$1), _d_];
    }
   }
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1], _c_ = copy_location(loc);
    return [0, caml_call1(f0, txt), _c_];
   }
   function copy_location(param){
    var
     loc_ghost = param[3],
     loc_end = param[2],
     loc_start = param[1],
     _b_ = copy_position(loc_end);
    return [0, copy_position(loc_start), _b_, loc_ghost];
   }
   function copy_position(param){
    var
     pos_cnum = param[4],
     pos_bol = param[3],
     pos_lnum = param[2],
     pos_fname = param[1];
    return [0, pos_fname, pos_lnum, pos_bol, pos_cnum];
   }
   var
    Astlib_Migrate_500_501 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location,
       copy_position];
   runtime.caml_register_global
    (5, Astlib_Migrate_500_501, "Astlib__Migrate_500_501");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_500_414
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function copy_structure(x){return x;}
   function copy_signature(x){return x;}
   function copy_toplevel_phrase(x){return x;}
   function copy_core_type(x){return x;}
   function copy_expression(x){return x;}
   function copy_pattern(x){return x;}
   function copy_case(x){return x;}
   function copy_type_declaration(x){return x;}
   function copy_type_extension(x){return x;}
   function copy_extension_constructor(x){return x;}
   function copy_class_expr(x){return x;}
   function copy_class_field(x){return x;}
   function copy_class_type(x){return x;}
   function copy_class_signature(x){return x;}
   function copy_class_type_field(x){return x;}
   function copy_module_expr(x){return x;}
   function copy_module_type(x){return x;}
   function copy_signature_item(x){return x;}
   function copy_structure_item(x){return x;}
   var
    Astlib_Migrate_500_414 =
      [0,
       copy_structure,
       copy_signature,
       copy_toplevel_phrase,
       copy_core_type,
       copy_expression,
       copy_pattern,
       copy_case,
       copy_type_declaration,
       copy_type_extension,
       copy_extension_constructor,
       copy_class_expr,
       copy_class_field,
       copy_class_type,
       copy_class_signature,
       copy_class_type_field,
       copy_module_expr,
       copy_module_type,
       copy_signature_item,
       copy_structure_item];
   runtime.caml_register_global
    (0, Astlib_Migrate_500_414, "Astlib__Migrate_500_414");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_414_500
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function copy_structure(x){return x;}
   function copy_signature(x){return x;}
   function copy_toplevel_phrase(x){return x;}
   function copy_core_type(x){return x;}
   function copy_expression(x){return x;}
   function copy_pattern(x){return x;}
   function copy_case(x){return x;}
   function copy_type_declaration(x){return x;}
   function copy_type_extension(x){return x;}
   function copy_extension_constructor(x){return x;}
   function copy_class_expr(x){return x;}
   function copy_class_field(x){return x;}
   function copy_class_type(x){return x;}
   function copy_class_signature(x){return x;}
   function copy_class_type_field(x){return x;}
   function copy_module_expr(x){return x;}
   function copy_module_type(x){return x;}
   function copy_signature_item(x){return x;}
   function copy_structure_item(x){return x;}
   var
    Astlib_Migrate_414_500 =
      [0,
       copy_structure,
       copy_signature,
       copy_toplevel_phrase,
       copy_core_type,
       copy_expression,
       copy_pattern,
       copy_case,
       copy_type_declaration,
       copy_type_extension,
       copy_extension_constructor,
       copy_class_expr,
       copy_class_field,
       copy_class_type,
       copy_class_signature,
       copy_class_type_field,
       copy_module_expr,
       copy_module_type,
       copy_signature_item,
       copy_structure_item];
   runtime.caml_register_global
    (0, Astlib_Migrate_414_500, "Astlib__Migrate_414_500");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_413
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M030",
    ast_intf_magic_number = "Caml1999N030",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_413 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_413, "Astlib__Ast_413");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_414_413
//# unitInfo: Requires: Astlib__Location, Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location,
    _a_ =
      [0,
       [11,
        "migration error: ",
        [2, 0, [11, " is not supported before OCaml 4.13", 0]]],
       "migration error: %s is not supported before OCaml 4.13"],
    cst_type_parameters_in_extensi =
      "type parameters in extension constructors",
    cst_pcd_vars_in_constructor_de = "pcd_vars in constructor declarations";
   function migration_error(loc, missing_feature){
    return caml_call3(Astlib_Location[7], [0, loc], _a_, missing_feature);
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _b3_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _b3_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _b2_ = copy_attributes(pexp_attributes);
    return [0,
            copy_expression_desc(pexp_desc),
            pexp_loc,
            pexp_loc_stack,
            _b2_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bt_ = copy_expression(x2),
        _bu_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bu_, _bt_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _bv_ = copy_expression(x3),
        _bw_ = copy_pattern(x2$0),
        _bx_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bx_, _bw_, _bv_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _by_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _b1_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _b1_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _by_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _bz_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _bz_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bA_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _bA_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bB_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bB_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _bC_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _b0_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _b0_];
                 },
                 x0$10),
               _bC_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bD_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bD_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bE_ = copy_expression(x2$1),
        _bF_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _bF_, _bE_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bG_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _bH_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bH_, _bG_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bI_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bI_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bJ_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bJ_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bK_ = copy_expression(x4),
        _bL_ = copy_direction_flag(x3$0),
        _bM_ = copy_expression(x2$3),
        _bN_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bN_, _bM_, _bL_, _bK_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bO_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bO_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bP_ = copy_core_type(x2$4),
        _bQ_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bQ_, _bP_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bR_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bR_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bS_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bS_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bZ_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bZ_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bT_ = copy_expression(x2$5),
        _bU_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$24),
               _bU_,
               _bT_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bV_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bV_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bW_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bW_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bX_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bX_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bY_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bY_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _br_ = copy_expression(body),
     _bs_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bs_, _br_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bp_ = copy_expression(pbop_exp),
     _bq_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bq_,
            _bp_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bn_ = copy_expression(pc_rhs),
     _bo_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bo_, _bn_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bl_ = copy_attributes(pvb_attributes),
     _bm_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bm_, _bl_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bk_ = copy_attributes(ppat_attributes);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, ppat_loc_stack, _bk_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _bb_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _bb_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _bc_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _bc_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bd_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){
             var x1 = x[2], x0 = x[1], _bj_ = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){return copy_loc(function(x){return x;}, x);},
                       x0),
                     _bj_];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bd_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _be_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bi_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bi_];
                 },
                 x0$6),
               _be_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bf_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bf_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bg_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bg_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bh_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bh_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _ba_ = copy_attributes(ptyp_attributes);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, ptyp_loc_stack, _ba_];
   }
   function copy_location_stack(x){return x;}
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _a4_ = copy_core_type(x2),
        _a5_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a5_, _a4_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a6_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a6_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a7_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a7_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a8_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a8_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a9_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a__ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a__,
               _a9_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a$_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a$_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _a2_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _a3_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _a3_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _a2_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _a1_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _a1_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _a0_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _a0_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aZ_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aZ_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aY_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aY_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aX_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aX_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aT_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aT_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aU_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aU_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aV_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aV_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aW_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aW_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aS_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aS_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aI_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aI_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aJ_ = copy_class_expr(x3),
        _aK_ = copy_pattern(x2),
        _aL_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aL_, _aK_, _aJ_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aM_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aR_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aR_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aM_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aN_ = copy_class_expr(x2$0),
        _aO_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aO_, _aN_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aP_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aP_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aQ_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aQ_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aH_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aH_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aG_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aG_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _az_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _aA_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _aA_, _az_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _aB_ = copy_class_field_kind(x2$0),
        _aC_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aC_, _aB_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _aD_ = copy_class_field_kind(x2$1),
        _aE_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _aE_, _aD_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aF_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aF_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _ay_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _ay_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _aw_ = copy_attributes(pmb_attributes),
     _ax_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _ax_,
            _aw_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _av_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _av_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _as_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _as_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _at_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _at_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _au_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _au_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _ar_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _ar_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _aq_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _aq_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _ao_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _ao_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _ap_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _ap_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ai_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ai_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aj_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _aj_];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], _ak_ = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _ak_];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], _al_ = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _al_];
      case 4:
       var
        x1$3 = param[2],
        x0$3 = param[1],
        _am_ = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), _am_];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        _an_ = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), _an_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ag_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ag_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, copy_include_infos(copy_module_type, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], _ah_ = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), _ah_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _af_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _af_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _ab_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _ab_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _ac_ = copy_class_type(x2),
        _ad_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _ad_, _ac_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _ae_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _ae_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _aa_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _aa_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _$_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _$_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _U_ = copy_core_type(x3),
        _V_ = copy_virtual_flag(x2),
        _W_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _W_, _V_, _U_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _X_ = copy_core_type(x3$0),
        _Y_ = copy_virtual_flag(x2$0),
        _Z_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _Z_, _Y_, _X_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        ___ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), ___]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _T_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _T_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _N_ = copy_attributes(pci_attributes),
     _O_ = caml_call1(f0, pci_expr),
     _P_ = copy_loc(function(x){return x;}, pci_name),
     _Q_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _R_ = copy_injectivity(x1$0),
           _S_ = [0, copy_variance(x0$0), _R_];
          return [0, copy_core_type(x0), _S_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _Q_, _P_, _O_, pci_loc, _N_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _M_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _M_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _K_ = copy_attributes(popen_attributes),
     _L_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _L_, popen_loc, _K_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _I_ = copy_attributes(pmtd_attributes),
     _J_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _J_,
            _I_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _G_ = copy_attributes(pms_attributes),
     _H_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _H_, _G_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _E_ = copy_attributes(pmd_attributes),
     _F_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _F_,
            _E_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _D_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _D_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _x_ = copy_attributes(ptyext_attributes),
     _y_ = copy_private_flag(ptyext_private),
     _z_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _A_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _B_ = copy_injectivity(x1$0),
           _C_ = [0, copy_variance(x0$0), _B_];
          return [0, copy_core_type(x0), _C_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _A_,
            _z_,
            _y_,
            ptyext_loc,
            _x_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _v_ = copy_attributes(pext_attributes),
     _w_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _w_,
            pext_loc,
            _v_];
   }
   function copy_extension_constructor_kin(param){
    if(0 !== param[0]){
     var x0$0 = param[1];
     return [1, copy_loc(copy_Longident_t, x0$0)];
    }
    var x2 = param[3], x1 = param[2], x0 = param[1];
    if(x0){
     var hd = x0[1];
     return migration_error(hd[2], cst_type_parameters_in_extensi);
    }
    var _u_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x2);
    return [0, copy_constructor_arguments(x1), _u_];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _l_ = copy_attributes(ptype_attributes),
     _m_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _n_ = copy_private_flag(ptype_private),
     _o_ = copy_type_kind(ptype_kind),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _t_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _t_, x2];
         },
         ptype_cstrs),
     _q_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _r_ = copy_injectivity(x1$0),
           _s_ = [0, copy_variance(x0$0), _r_];
          return [0, copy_core_type(x0), _s_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _q_,
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[6],
     pcd_loc = param[5],
     pcd_res = param[4],
     pcd_args = param[3],
     pcd_vars = param[2],
     pcd_name = param[1];
    if(pcd_vars){
     var hd = pcd_vars[1];
     return migration_error(hd[2], cst_pcd_vars_in_constructor_de);
    }
    var
     _i_ = copy_attributes(pcd_attributes),
     _j_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _k_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _k_,
            _j_,
            pcd_loc,
            _i_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _f_ = copy_attributes(pld_attributes),
     _g_ = copy_core_type(pld_type),
     _h_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _h_,
            _g_,
            pld_loc,
            _f_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _c_ = copy_attributes(pval_attributes),
     _d_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _e_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _e_,
            _d_,
            _c_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _b_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _b_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_414_413 =
      [0,
       migration_error,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (6, Astlib_Migrate_414_413, "Astlib__Migrate_414_413");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_413_414
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _b2_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _b2_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _b1_ = copy_attributes(pexp_attributes);
    return [0,
            copy_expression_desc(pexp_desc),
            pexp_loc,
            pexp_loc_stack,
            _b1_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bs_ = copy_expression(x2),
        _bt_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bt_, _bs_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _bu_ = copy_expression(x3),
        _bv_ = copy_pattern(x2$0),
        _bw_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bw_, _bv_, _bu_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bx_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _b0_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _b0_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _bx_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _by_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _by_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bz_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _bz_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bA_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bA_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _bB_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bZ_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bZ_];
                 },
                 x0$10),
               _bB_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bC_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bC_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bD_ = copy_expression(x2$1),
        _bE_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _bE_, _bD_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bF_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _bG_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bG_, _bF_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bH_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bH_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bI_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bI_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bJ_ = copy_expression(x4),
        _bK_ = copy_direction_flag(x3$0),
        _bL_ = copy_expression(x2$3),
        _bM_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bM_, _bL_, _bK_, _bJ_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bN_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bN_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bO_ = copy_core_type(x2$4),
        _bP_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bP_, _bO_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bQ_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bQ_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bR_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bR_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bY_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bY_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bS_ = copy_expression(x2$5),
        _bT_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$24),
               _bT_,
               _bS_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bU_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bU_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bV_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bV_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bW_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bW_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bX_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bX_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bq_ = copy_expression(body),
     _br_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _br_, _bq_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bo_ = copy_expression(pbop_exp),
     _bp_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bp_,
            _bo_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bm_ = copy_expression(pc_rhs),
     _bn_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bn_, _bm_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bk_ = copy_attributes(pvb_attributes),
     _bl_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bl_, _bk_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bj_ = copy_attributes(ppat_attributes);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, ppat_loc_stack, _bj_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ba_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _ba_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _bb_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _bb_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bc_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){
             var x1 = x[2], x0 = x[1], _bi_ = copy_pattern(x1);
             return [0,
                     caml_call2
                      (Stdlib_List[20],
                       function(x){return copy_loc(function(x){return x;}, x);},
                       x0),
                     _bi_];
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bc_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bd_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bh_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bh_];
                 },
                 x0$6),
               _bd_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _be_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _be_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bf_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bf_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bg_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bg_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _a$_ = copy_attributes(ptyp_attributes);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, ptyp_loc_stack, _a$_];
   }
   function copy_location_stack(x){return x;}
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _a3_ = copy_core_type(x2),
        _a4_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a4_, _a3_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a5_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a5_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a6_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a6_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a7_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a7_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a8_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a9_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a9_,
               _a8_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a__ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a__];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _a1_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _a2_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _a2_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _a1_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _a0_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _a0_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _aZ_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _aZ_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aY_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aY_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aX_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aX_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aW_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aW_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aS_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aS_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aT_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aT_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aU_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aU_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aV_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aV_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aR_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aR_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aH_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aH_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aI_ = copy_class_expr(x3),
        _aJ_ = copy_pattern(x2),
        _aK_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aK_, _aJ_, _aI_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aL_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aQ_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aQ_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aL_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aM_ = copy_class_expr(x2$0),
        _aN_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aN_, _aM_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aO_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aO_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aP_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aP_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aG_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aG_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aF_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aF_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _ay_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _az_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _az_, _ay_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _aA_ = copy_class_field_kind(x2$0),
        _aB_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aB_, _aA_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _aC_ = copy_class_field_kind(x2$1),
        _aD_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _aD_, _aC_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aE_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aE_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _ax_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _ax_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _av_ = copy_attributes(pmb_attributes),
     _aw_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _aw_,
            _av_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _au_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _au_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _ar_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _ar_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _as_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _as_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _at_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _at_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _aq_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _aq_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _ap_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _ap_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _an_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _an_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _ao_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _ao_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ah_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ah_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _ai_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _ai_];
      case 2:
       var x1$1 = param[2], x0$1 = param[1], _aj_ = copy_module_type(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _aj_];
      case 3:
       var x1$2 = param[2], x0$2 = param[1], _ak_ = copy_module_type(x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _ak_];
      case 4:
       var
        x1$3 = param[2],
        x0$3 = param[1],
        _al_ = copy_type_declaration(x1$3);
       return [4, copy_loc(copy_Longident_t, x0$3), _al_];
      default:
       var
        x1$4 = param[2],
        x0$4 = param[1],
        _am_ = copy_loc(copy_Longident_t, x1$4);
       return [5, copy_loc(copy_Longident_t, x0$4), _am_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _af_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _af_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_module_type_declaration(x0$8)];
      case 10:
       var x0$9 = param[1]; return [10, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, copy_include_infos(copy_module_type, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], _ag_ = copy_attributes(x1$0);
       return [15, copy_extension(x0$14), _ag_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ae_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ae_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aa_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aa_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _ab_ = copy_class_type(x2),
        _ac_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _ac_, _ab_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _ad_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _ad_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _$_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _$_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     ___ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, ___];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _T_ = copy_core_type(x3),
        _U_ = copy_virtual_flag(x2),
        _V_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _V_, _U_, _T_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _W_ = copy_core_type(x3$0),
        _X_ = copy_virtual_flag(x2$0),
        _Y_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _Y_, _X_, _W_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _Z_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _Z_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _S_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _S_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _M_ = copy_attributes(pci_attributes),
     _N_ = caml_call1(f0, pci_expr),
     _O_ = copy_loc(function(x){return x;}, pci_name),
     _P_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _Q_ = copy_injectivity(x1$0),
           _R_ = [0, copy_variance(x0$0), _Q_];
          return [0, copy_core_type(x0), _R_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _P_, _O_, _N_, pci_loc, _M_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _L_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _L_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _J_ = copy_attributes(popen_attributes),
     _K_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _K_, popen_loc, _J_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _H_ = copy_attributes(pmtd_attributes),
     _I_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _I_,
            _H_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _F_ = copy_attributes(pms_attributes),
     _G_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _G_, _F_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _D_ = copy_attributes(pmd_attributes),
     _E_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _E_,
            _D_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _C_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _C_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _w_ = copy_attributes(ptyext_attributes),
     _x_ = copy_private_flag(ptyext_private),
     _y_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _z_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _A_ = copy_injectivity(x1$0),
           _B_ = [0, copy_variance(x0$0), _A_];
          return [0, copy_core_type(x0), _B_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _z_,
            _y_,
            _x_,
            ptyext_loc,
            _w_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _u_ = copy_attributes(pext_attributes),
     _v_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _v_,
            pext_loc,
            _u_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      _t_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1);
     return [0, 0, copy_constructor_arguments(x0), _t_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _k_ = copy_attributes(ptype_attributes),
     _l_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _m_ = copy_private_flag(ptype_private),
     _n_ = copy_type_kind(ptype_kind),
     _o_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _s_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _s_, x2];
         },
         ptype_cstrs),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _q_ = copy_injectivity(x1$0),
           _r_ = [0, copy_variance(x0$0), _q_];
          return [0, copy_core_type(x0), _r_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            _k_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _h_ = copy_attributes(pcd_attributes),
     _i_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _j_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            0,
            _j_,
            _i_,
            pcd_loc,
            _h_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _e_ = copy_attributes(pld_attributes),
     _f_ = copy_core_type(pld_type),
     _g_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _g_,
            _f_,
            pld_loc,
            _e_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _b_ = copy_attributes(pval_attributes),
     _c_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _d_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _d_,
            _c_,
            _b_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _a_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _a_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_413_414 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_413_414, "Astlib__Migrate_413_414");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_412
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M029",
    ast_intf_magic_number = "Caml1999N029",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_412 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_412, "Astlib__Ast_412");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_413_412
//# unitInfo: Requires: Astlib__Location, Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location,
    _a_ =
      [0,
       [11,
        "migration error: ",
        [2, 0, [11, " is not supported before OCaml 4.13", 0]]],
       "migration error: %s is not supported before OCaml 4.13"],
    cst_existentials_in_pattern_ma = "existentials in pattern-matching",
    cst_module_type_substitution = "module type substitution",
    cst_destructive_module_type_su = "destructive module type substitution",
    cst_local_module_type_substitu = "local module type substitution";
   function migration_error(loc, missing_feature){
    return caml_call3(Astlib_Location[7], [0, loc], _a_, missing_feature);
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _b3_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _b3_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _b1_ = copy_attributes(pexp_attributes),
     _b2_ = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _b2_, _b1_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bs_ = copy_expression(x2),
        _bt_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bt_, _bs_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _bu_ = copy_expression(x3),
        _bv_ = copy_pattern(x2$0),
        _bw_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bw_, _bv_, _bu_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bx_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _b0_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _b0_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _bx_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _by_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _by_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bz_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _bz_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bA_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bA_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _bB_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bZ_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bZ_];
                 },
                 x0$10),
               _bB_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bC_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bC_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bD_ = copy_expression(x2$1),
        _bE_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _bE_, _bD_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bF_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _bG_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bG_, _bF_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bH_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bH_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bI_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bI_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bJ_ = copy_expression(x4),
        _bK_ = copy_direction_flag(x3$0),
        _bL_ = copy_expression(x2$3),
        _bM_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bM_, _bL_, _bK_, _bJ_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bN_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bN_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bO_ = copy_core_type(x2$4),
        _bP_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bP_, _bO_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bQ_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bQ_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bR_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bR_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bY_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bY_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bS_ = copy_expression(x2$5),
        _bT_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$24),
               _bT_,
               _bS_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bU_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bU_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bV_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bV_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bW_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bW_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bX_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bX_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bq_ = copy_expression(body),
     _br_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _br_, _bq_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bo_ = copy_expression(pbop_exp),
     _bp_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bp_,
            _bo_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bm_ = copy_expression(pc_rhs),
     _bn_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bn_, _bm_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bk_ = copy_attributes(pvb_attributes),
     _bl_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bl_, _bk_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bi_ = copy_attributes(ppat_attributes),
     _bj_ = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _bj_, _bi_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ba_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _ba_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _bb_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _bb_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bc_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){
             var x1 = x[2], x0 = x[1];
             if(x0){
              var ty = x0[1];
              migration_error(ty[2], cst_existentials_in_pattern_ma);
             }
             return copy_pattern(x1);
            },
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bc_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bd_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bh_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bh_];
                 },
                 x0$6),
               _bd_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _be_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _be_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bf_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bf_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bg_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bg_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _a__ = copy_attributes(ptyp_attributes),
     _a$_ = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _a$_, _a__];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _a2_ = copy_core_type(x2),
        _a3_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a3_, _a2_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a4_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a4_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a5_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a5_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a6_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a6_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a7_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a8_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a8_,
               _a7_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a9_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a9_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _a0_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _a1_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _a1_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _a0_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _aZ_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _aZ_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _aY_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _aY_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aX_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aX_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aW_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aW_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aV_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aV_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aR_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aR_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aS_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aS_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aT_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aT_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aU_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aU_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aQ_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aQ_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aG_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aG_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aH_ = copy_class_expr(x3),
        _aI_ = copy_pattern(x2),
        _aJ_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aJ_, _aI_, _aH_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aK_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aP_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aP_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aK_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aL_ = copy_class_expr(x2$0),
        _aM_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aM_, _aL_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aN_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aN_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aO_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aO_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aF_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aF_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aE_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aE_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _ax_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _ay_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _ay_, _ax_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _az_ = copy_class_field_kind(x2$0),
        _aA_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aA_, _az_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _aB_ = copy_class_field_kind(x2$1),
        _aC_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _aC_, _aB_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aD_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aD_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _aw_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _aw_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _au_ = copy_attributes(pmb_attributes),
     _av_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _av_,
            _au_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _at_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _at_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _aq_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _aq_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _ar_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _ar_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _as_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _as_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _ap_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _ap_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _ao_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _ao_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _am_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _am_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _an_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _an_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ai_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ai_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aj_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _aj_];
      case 2:
       var x1$1 = param[2];
       return migration_error(x1$1[2], cst_module_type_substitution);
      case 3:
       var x1$2 = param[2];
       return migration_error(x1$2[2], cst_destructive_module_type_su);
      case 4:
       var
        x1$3 = param[2],
        x0$1 = param[1],
        _ak_ = copy_type_declaration(x1$3);
       return [2, copy_loc(copy_Longident_t, x0$1), _ak_];
      default:
       var
        x1$4 = param[2],
        x0$2 = param[1],
        _al_ = copy_loc(copy_Longident_t, x1$4);
       return [3, copy_loc(copy_Longident_t, x0$2), _al_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ag_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ag_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return migration_error(x0$8[4], cst_local_module_type_substitu);
      case 10:
       var x0$9 = param[1]; return [9, copy_open_description(x0$9)];
      case 11:
       var x0$10 = param[1];
       return [10, copy_include_infos(copy_module_type, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$11)];
      case 13:
       var x0$12 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$12)];
      case 14:
       var x0$13 = param[1]; return [13, copy_attribute(x0$13)];
      default:
       var x1$0 = param[2], x0$14 = param[1], _ah_ = copy_attributes(x1$0);
       return [14, copy_extension(x0$14), _ah_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _af_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _af_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _ab_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _ab_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _ac_ = copy_class_type(x2),
        _ad_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _ad_, _ac_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _ae_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _ae_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _aa_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _aa_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _$_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _$_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _U_ = copy_core_type(x3),
        _V_ = copy_virtual_flag(x2),
        _W_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _W_, _V_, _U_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _X_ = copy_core_type(x3$0),
        _Y_ = copy_virtual_flag(x2$0),
        _Z_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _Z_, _Y_, _X_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        ___ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), ___]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _T_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _T_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _N_ = copy_attributes(pci_attributes),
     _O_ = caml_call1(f0, pci_expr),
     _P_ = copy_loc(function(x){return x;}, pci_name),
     _Q_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _R_ = copy_injectivity(x1$0),
           _S_ = [0, copy_variance(x0$0), _R_];
          return [0, copy_core_type(x0), _S_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _Q_, _P_, _O_, pci_loc, _N_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _M_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _M_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _K_ = copy_attributes(popen_attributes),
     _L_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _L_, popen_loc, _K_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _I_ = copy_attributes(pmtd_attributes),
     _J_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _J_,
            _I_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _G_ = copy_attributes(pms_attributes),
     _H_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _H_, _G_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _E_ = copy_attributes(pmd_attributes),
     _F_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _F_,
            _E_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _D_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _D_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _x_ = copy_attributes(ptyext_attributes),
     _y_ = copy_private_flag(ptyext_private),
     _z_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _A_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _B_ = copy_injectivity(x1$0),
           _C_ = [0, copy_variance(x0$0), _B_];
          return [0, copy_core_type(x0), _C_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _A_,
            _z_,
            _y_,
            ptyext_loc,
            _x_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _v_ = copy_attributes(pext_attributes),
     _w_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _w_,
            pext_loc,
            _v_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      _u_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), _u_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _l_ = copy_attributes(ptype_attributes),
     _m_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _n_ = copy_private_flag(ptype_private),
     _o_ = copy_type_kind(ptype_kind),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _t_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _t_, x2];
         },
         ptype_cstrs),
     _q_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _r_ = copy_injectivity(x1$0),
           _s_ = [0, copy_variance(x0$0), _r_];
          return [0, copy_core_type(x0), _s_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _q_,
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _i_ = copy_attributes(pcd_attributes),
     _j_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _k_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _k_,
            _j_,
            pcd_loc,
            _i_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _f_ = copy_attributes(pld_attributes),
     _g_ = copy_core_type(pld_type),
     _h_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _h_,
            _g_,
            pld_loc,
            _f_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _c_ = copy_attributes(pval_attributes),
     _d_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _e_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _e_,
            _d_,
            _c_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _b_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _b_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_413_412 =
      [0,
       migration_error,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (8, Astlib_Migrate_413_412, "Astlib__Migrate_413_412");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_412_413
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _b2_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _b2_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _b0_ = copy_attributes(pexp_attributes),
     _b1_ = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _b1_, _b0_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _br_ = copy_expression(x2),
        _bs_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bs_, _br_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _bt_ = copy_expression(x3),
        _bu_ = copy_pattern(x2$0),
        _bv_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bv_, _bu_, _bt_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bw_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _bZ_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _bZ_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _bw_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _bx_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _bx_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _by_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _by_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bz_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bz_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _bA_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bY_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bY_];
                 },
                 x0$10),
               _bA_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bB_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bB_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bC_ = copy_expression(x2$1),
        _bD_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _bD_, _bC_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bE_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _bF_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bF_, _bE_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bG_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bG_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bH_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bH_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bI_ = copy_expression(x4),
        _bJ_ = copy_direction_flag(x3$0),
        _bK_ = copy_expression(x2$3),
        _bL_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bL_, _bK_, _bJ_, _bI_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bM_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bM_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bN_ = copy_core_type(x2$4),
        _bO_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bO_, _bN_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bP_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bP_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bQ_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bQ_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bX_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bX_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bR_ = copy_expression(x2$5),
        _bS_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$24),
               _bS_,
               _bR_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bT_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bT_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bU_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bU_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bV_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bV_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bW_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bW_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bp_ = copy_expression(body),
     _bq_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bq_, _bp_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bn_ = copy_expression(pbop_exp),
     _bo_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bo_,
            _bn_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bl_ = copy_expression(pc_rhs),
     _bm_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bm_, _bl_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bj_ = copy_attributes(pvb_attributes),
     _bk_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bk_, _bj_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bh_ = copy_attributes(ppat_attributes),
     _bi_ = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _bi_, _bh_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _a$_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _a$_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _ba_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _ba_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bb_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return [0, 0, copy_pattern(x)];},
            x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bb_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bc_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bg_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bg_];
                 },
                 x0$6),
               _bc_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bd_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bd_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _be_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _be_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bf_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bf_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _a9_ = copy_attributes(ptyp_attributes),
     _a__ = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _a__, _a9_];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _a1_ = copy_core_type(x2),
        _a2_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a2_, _a1_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a3_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a3_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a4_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a4_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a5_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a5_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a6_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a7_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a7_,
               _a6_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a8_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a8_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _aZ_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _a0_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _a0_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _aZ_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _aY_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _aY_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _aX_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _aX_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aW_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aW_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aV_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aV_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aU_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aU_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aQ_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aQ_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aR_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aR_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aS_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aS_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aT_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aT_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aP_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aP_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aF_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aF_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aG_ = copy_class_expr(x3),
        _aH_ = copy_pattern(x2),
        _aI_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aI_, _aH_, _aG_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aJ_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aO_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aO_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aJ_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aK_ = copy_class_expr(x2$0),
        _aL_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aL_, _aK_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aM_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aM_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aN_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aN_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aE_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aE_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aD_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aD_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _aw_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _ax_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _ax_, _aw_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _ay_ = copy_class_field_kind(x2$0),
        _az_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _az_, _ay_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _aA_ = copy_class_field_kind(x2$1),
        _aB_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _aB_, _aA_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aC_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aC_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _av_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _av_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _at_ = copy_attributes(pmb_attributes),
     _au_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _au_,
            _at_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _as_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _as_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _ap_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _ap_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _aq_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _aq_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _ar_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _ar_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _ao_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _ao_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _an_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _an_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _al_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _al_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _am_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _am_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ah_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ah_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _ai_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _ai_];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        _aj_ = copy_type_declaration(x1$1);
       return [4, copy_loc(copy_Longident_t, x0$1), _aj_];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        _ak_ = copy_loc(copy_Longident_t, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$2), _ak_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _af_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _af_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [10, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [11, copy_include_infos(copy_module_type, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [12, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [13,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [14, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], _ag_ = copy_attributes(x1$0);
       return [15, copy_extension(x0$13), _ag_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ae_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ae_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aa_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aa_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _ab_ = copy_class_type(x2),
        _ac_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _ac_, _ab_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _ad_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _ad_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _$_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _$_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     ___ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, ___];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _T_ = copy_core_type(x3),
        _U_ = copy_virtual_flag(x2),
        _V_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _V_, _U_, _T_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _W_ = copy_core_type(x3$0),
        _X_ = copy_virtual_flag(x2$0),
        _Y_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _Y_, _X_, _W_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _Z_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _Z_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _S_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _S_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _M_ = copy_attributes(pci_attributes),
     _N_ = caml_call1(f0, pci_expr),
     _O_ = copy_loc(function(x){return x;}, pci_name),
     _P_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _Q_ = copy_injectivity(x1$0),
           _R_ = [0, copy_variance(x0$0), _Q_];
          return [0, copy_core_type(x0), _R_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _P_, _O_, _N_, pci_loc, _M_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _L_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _L_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _J_ = copy_attributes(popen_attributes),
     _K_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _K_, popen_loc, _J_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _H_ = copy_attributes(pmtd_attributes),
     _I_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _I_,
            _H_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _F_ = copy_attributes(pms_attributes),
     _G_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _G_, _F_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _D_ = copy_attributes(pmd_attributes),
     _E_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _E_,
            _D_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _C_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _C_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _w_ = copy_attributes(ptyext_attributes),
     _x_ = copy_private_flag(ptyext_private),
     _y_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _z_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _A_ = copy_injectivity(x1$0),
           _B_ = [0, copy_variance(x0$0), _A_];
          return [0, copy_core_type(x0), _B_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _z_,
            _y_,
            _x_,
            ptyext_loc,
            _w_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _u_ = copy_attributes(pext_attributes),
     _v_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _v_,
            pext_loc,
            _u_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      _t_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), _t_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _k_ = copy_attributes(ptype_attributes),
     _l_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _m_ = copy_private_flag(ptype_private),
     _n_ = copy_type_kind(ptype_kind),
     _o_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _s_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _s_, x2];
         },
         ptype_cstrs),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var
           x1 = x[2],
           x0 = x[1],
           x1$0 = x1[2],
           x0$0 = x1[1],
           _q_ = copy_injectivity(x1$0),
           _r_ = [0, copy_variance(x0$0), _q_];
          return [0, copy_core_type(x0), _r_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            _k_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _h_ = copy_attributes(pcd_attributes),
     _i_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _j_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _j_,
            _i_,
            pcd_loc,
            _h_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _e_ = copy_attributes(pld_attributes),
     _f_ = copy_core_type(pld_type),
     _g_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _g_,
            _f_,
            pld_loc,
            _e_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_injectivity(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _b_ = copy_attributes(pval_attributes),
     _c_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _d_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _d_,
            _c_,
            _b_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _a_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _a_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_412_413 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_injectivity,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_412_413, "Astlib__Migrate_412_413");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_411
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M028",
    ast_intf_magic_number = "Caml1999N028",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_411 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_411, "Astlib__Ast_411");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_412_411
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _bW_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _bW_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _bV_ = copy_attributes(pexp_attributes);
    return [0,
            copy_expression_desc(pexp_desc),
            pexp_loc,
            pexp_loc_stack,
            _bV_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bm_ = copy_expression(x2),
        _bn_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bn_, _bm_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _bo_ = copy_expression(x3),
        _bp_ = copy_pattern(x2$0),
        _bq_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bq_, _bp_, _bo_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _br_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _bU_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _bU_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _br_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _bs_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _bs_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bt_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _bt_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bu_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bu_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _bv_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bT_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bT_];
                 },
                 x0$10),
               _bv_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bw_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bw_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bx_ = copy_expression(x2$1),
        _by_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _by_, _bx_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bz_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _bA_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bA_, _bz_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bB_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bB_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bC_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bC_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bD_ = copy_expression(x4),
        _bE_ = copy_direction_flag(x3$0),
        _bF_ = copy_expression(x2$3),
        _bG_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bG_, _bF_, _bE_, _bD_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bH_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bH_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bI_ = copy_core_type(x2$4),
        _bJ_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bJ_, _bI_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bK_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bK_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bL_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bL_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bS_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bS_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bM_ = copy_expression(x2$5),
        _bN_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$24),
               _bN_,
               _bM_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bO_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bO_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bP_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bP_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bQ_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bQ_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bR_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bR_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bk_ = copy_expression(body),
     _bl_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bl_, _bk_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bi_ = copy_expression(pbop_exp),
     _bj_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bj_,
            _bi_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bg_ = copy_expression(pc_rhs),
     _bh_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bh_, _bg_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _be_ = copy_attributes(pvb_attributes),
     _bf_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bf_, _be_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bd_ = copy_attributes(ppat_attributes);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, ppat_loc_stack, _bd_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _a7_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _a7_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _a8_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _a8_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _a9_ = caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _a9_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _a__ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bc_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bc_];
                 },
                 x0$6),
               _a__];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _a$_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _a$_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _ba_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _ba_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bb_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bb_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _a6_ = copy_attributes(ptyp_attributes);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, ptyp_loc_stack, _a6_];
   }
   function copy_location_stack(x){return x;}
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _aY_ = copy_core_type(x2),
        _aZ_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _aZ_, _aY_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a0_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a0_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a1_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a1_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a2_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a2_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a3_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a4_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a4_,
               _a3_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a5_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a5_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _aW_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _aX_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _aX_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _aW_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _aV_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _aV_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _aU_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _aU_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aT_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aT_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aS_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aS_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aR_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aR_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aN_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aN_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aO_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aO_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aP_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aP_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aQ_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aQ_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aM_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aM_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aC_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aC_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aD_ = copy_class_expr(x3),
        _aE_ = copy_pattern(x2),
        _aF_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aF_, _aE_, _aD_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aG_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aL_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aL_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aG_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aH_ = copy_class_expr(x2$0),
        _aI_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aI_, _aH_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aJ_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aJ_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aK_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aK_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aB_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aB_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aA_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aA_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _at_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _au_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _au_, _at_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _av_ = copy_class_field_kind(x2$0),
        _aw_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aw_, _av_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _ax_ = copy_class_field_kind(x2$1),
        _ay_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _ay_, _ax_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _az_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _az_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _as_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _as_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _aq_ = copy_attributes(pmb_attributes),
     _ar_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _ar_,
            _aq_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _ap_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _ap_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _am_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _am_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _an_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _an_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _ao_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _ao_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _al_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _al_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _ak_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _ak_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _ai_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _ai_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _aj_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _aj_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ae_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ae_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _af_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _af_];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        _ag_ = copy_type_declaration(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _ag_];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        _ah_ = copy_loc(copy_Longident_t, x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _ah_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ac_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ac_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, copy_include_infos(copy_module_type, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], _ad_ = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), _ad_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ab_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ab_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _Z_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _Z_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        ___ = copy_class_type(x2),
        _$_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _$_, ___];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _aa_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _aa_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _Y_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _Y_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _X_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _X_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _Q_ = copy_core_type(x3),
        _R_ = copy_virtual_flag(x2),
        _S_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _S_, _R_, _Q_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _T_ = copy_core_type(x3$0),
        _U_ = copy_virtual_flag(x2$0),
        _V_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _V_, _U_, _T_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _W_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _W_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _P_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _P_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _K_ = copy_attributes(pci_attributes),
     _L_ = caml_call1(f0, pci_expr),
     _M_ = copy_loc(function(x){return x;}, pci_name),
     _N_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], x0$0 = x1[1], _O_ = copy_variance(x0$0);
          return [0, copy_core_type(x0), _O_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _N_, _M_, _L_, pci_loc, _K_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _J_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _J_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _H_ = copy_attributes(popen_attributes),
     _I_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _I_, popen_loc, _H_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _F_ = copy_attributes(pmtd_attributes),
     _G_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _G_,
            _F_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _D_ = copy_attributes(pms_attributes),
     _E_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _E_, _D_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _B_ = copy_attributes(pmd_attributes),
     _C_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _C_,
            _B_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _A_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _A_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _v_ = copy_attributes(ptyext_attributes),
     _w_ = copy_private_flag(ptyext_private),
     _x_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _y_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], x0$0 = x1[1], _z_ = copy_variance(x0$0);
          return [0, copy_core_type(x0), _z_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _y_,
            _x_,
            _w_,
            ptyext_loc,
            _v_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _t_ = copy_attributes(pext_attributes),
     _u_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _u_,
            pext_loc,
            _t_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      _s_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), _s_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _k_ = copy_attributes(ptype_attributes),
     _l_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _m_ = copy_private_flag(ptype_private),
     _n_ = copy_type_kind(ptype_kind),
     _o_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _r_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _r_, x2];
         },
         ptype_cstrs),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], x0$0 = x1[1], _q_ = copy_variance(x0$0);
          return [0, copy_core_type(x0), _q_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            _k_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _h_ = copy_attributes(pcd_attributes),
     _i_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _j_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _j_,
            _i_,
            pcd_loc,
            _h_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _e_ = copy_attributes(pld_attributes),
     _f_ = copy_core_type(pld_type),
     _g_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _g_,
            _f_,
            pld_loc,
            _e_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _b_ = copy_attributes(pval_attributes),
     _c_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _d_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _d_,
            _c_,
            _b_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _a_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _a_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_412_411 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_412_411, "Astlib__Migrate_412_411");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_411_412
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _bW_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _bW_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _bV_ = copy_attributes(pexp_attributes);
    return [0,
            copy_expression_desc(pexp_desc),
            pexp_loc,
            pexp_loc_stack,
            _bV_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bm_ = copy_expression(x2),
        _bn_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bn_, _bm_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _bo_ = copy_expression(x3),
        _bp_ = copy_pattern(x2$0),
        _bq_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bq_, _bp_, _bo_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _br_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _bU_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _bU_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _br_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _bs_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _bs_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bt_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _bt_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bu_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bu_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _bv_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bT_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bT_];
                 },
                 x0$10),
               _bv_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bw_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bw_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bx_ = copy_expression(x2$1),
        _by_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _by_, _bx_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bz_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _bA_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bA_, _bz_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bB_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bB_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bC_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bC_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bD_ = copy_expression(x4),
        _bE_ = copy_direction_flag(x3$0),
        _bF_ = copy_expression(x2$3),
        _bG_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bG_, _bF_, _bE_, _bD_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bH_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bH_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bI_ = copy_core_type(x2$4),
        _bJ_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bJ_, _bI_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bK_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bK_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bL_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bL_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bS_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bS_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bM_ = copy_expression(x2$5),
        _bN_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$24),
               _bN_,
               _bM_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bO_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bO_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bP_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bP_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bQ_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bQ_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bR_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bR_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bk_ = copy_expression(body),
     _bl_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bl_, _bk_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bi_ = copy_expression(pbop_exp),
     _bj_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bj_,
            _bi_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bg_ = copy_expression(pc_rhs),
     _bh_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bh_, _bg_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _be_ = copy_attributes(pvb_attributes),
     _bf_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bf_, _be_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bd_ = copy_attributes(ppat_attributes);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, ppat_loc_stack, _bd_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _a7_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _a7_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _a8_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _a8_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _a9_ = caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _a9_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _a__ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bc_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bc_];
                 },
                 x0$6),
               _a__];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _a$_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _a$_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _ba_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _ba_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bb_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bb_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _a6_ = copy_attributes(ptyp_attributes);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, ptyp_loc_stack, _a6_];
   }
   function copy_location_stack(x){return x;}
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _aY_ = copy_core_type(x2),
        _aZ_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _aZ_, _aY_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a0_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a0_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a1_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a1_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a2_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a2_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a3_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a4_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a4_,
               _a3_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a5_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a5_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _aW_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _aX_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _aX_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _aW_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _aV_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _aV_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _aU_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _aU_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aT_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aT_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aS_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aS_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aR_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aR_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aN_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aN_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aO_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aO_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aP_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aP_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aQ_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aQ_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aM_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aM_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aC_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aC_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aD_ = copy_class_expr(x3),
        _aE_ = copy_pattern(x2),
        _aF_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aF_, _aE_, _aD_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aG_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aL_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aL_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aG_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aH_ = copy_class_expr(x2$0),
        _aI_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aI_, _aH_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aJ_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aJ_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aK_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aK_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aB_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aB_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aA_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aA_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _at_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _au_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _au_, _at_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _av_ = copy_class_field_kind(x2$0),
        _aw_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aw_, _av_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _ax_ = copy_class_field_kind(x2$1),
        _ay_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _ay_, _ax_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _az_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _az_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _as_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _as_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _aq_ = copy_attributes(pmb_attributes),
     _ar_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _ar_,
            _aq_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _ap_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _ap_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _am_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _am_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _an_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _an_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _ao_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _ao_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _al_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _al_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _ak_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _ak_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _ai_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _ai_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _aj_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _aj_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ae_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ae_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _af_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _af_];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        _ag_ = copy_type_declaration(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _ag_];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        _ah_ = copy_loc(copy_Longident_t, x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _ah_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ac_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ac_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, copy_include_infos(copy_module_type, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], _ad_ = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), _ad_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ab_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ab_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _Z_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _Z_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        ___ = copy_class_type(x2),
        _$_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _$_, ___];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _aa_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _aa_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _Y_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _Y_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _X_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _X_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _Q_ = copy_core_type(x3),
        _R_ = copy_virtual_flag(x2),
        _S_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _S_, _R_, _Q_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _T_ = copy_core_type(x3$0),
        _U_ = copy_virtual_flag(x2$0),
        _V_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _V_, _U_, _T_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _W_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _W_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _P_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _P_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _K_ = copy_attributes(pci_attributes),
     _L_ = caml_call1(f0, pci_expr),
     _M_ = copy_loc(function(x){return x;}, pci_name),
     _N_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _O_ = [0, copy_variance(x1), 1];
          return [0, copy_core_type(x0), _O_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _N_, _M_, _L_, pci_loc, _K_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _J_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _J_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _H_ = copy_attributes(popen_attributes),
     _I_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _I_, popen_loc, _H_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _F_ = copy_attributes(pmtd_attributes),
     _G_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _G_,
            _F_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _D_ = copy_attributes(pms_attributes),
     _E_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _E_, _D_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _B_ = copy_attributes(pmd_attributes),
     _C_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _C_,
            _B_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _A_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _A_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _v_ = copy_attributes(ptyext_attributes),
     _w_ = copy_private_flag(ptyext_private),
     _x_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _y_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _z_ = [0, copy_variance(x1), 1];
          return [0, copy_core_type(x0), _z_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _y_,
            _x_,
            _w_,
            ptyext_loc,
            _v_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _t_ = copy_attributes(pext_attributes),
     _u_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _u_,
            pext_loc,
            _t_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      _s_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), _s_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _k_ = copy_attributes(ptype_attributes),
     _l_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _m_ = copy_private_flag(ptype_private),
     _n_ = copy_type_kind(ptype_kind),
     _o_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _r_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _r_, x2];
         },
         ptype_cstrs),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _q_ = [0, copy_variance(x1), 1];
          return [0, copy_core_type(x0), _q_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            _k_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _h_ = copy_attributes(pcd_attributes),
     _i_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _j_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _j_,
            _i_,
            pcd_loc,
            _h_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _e_ = copy_attributes(pld_attributes),
     _f_ = copy_core_type(pld_type),
     _g_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _g_,
            _f_,
            pld_loc,
            _e_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _b_ = copy_attributes(pval_attributes),
     _c_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _d_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _d_,
            _c_,
            _b_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _a_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _a_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               x1$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_411_412 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_411_412, "Astlib__Migrate_411_412");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_410
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M027",
    ast_intf_magic_number = "Caml1999N027",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_410 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_410, "Astlib__Ast_410");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_411_410
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _bZ_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _bZ_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _bX_ = copy_attributes(pexp_attributes),
     _bY_ = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _bY_, _bX_];
   }
   function copy_expr(x){return copy_expression(x);}
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bo_ = copy_expression(x2),
        _bp_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bp_, _bo_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _bq_ = copy_expression(x3),
        _br_ = copy_pattern(x2$0),
        _bs_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bs_, _br_, _bq_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bt_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _bW_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _bW_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _bt_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _bu_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _bu_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bv_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _bv_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bw_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bw_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _bx_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bV_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bV_];
                 },
                 x0$10),
               _bx_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _by_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _by_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bz_ = copy_expression(x2$1),
        _bA_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _bA_, _bz_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bB_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _bC_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bC_, _bB_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bD_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bD_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bE_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bE_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bF_ = copy_expression(x4),
        _bG_ = copy_direction_flag(x3$0),
        _bH_ = copy_expression(x2$3),
        _bI_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bI_, _bH_, _bG_, _bF_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bJ_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bJ_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bK_ = copy_core_type(x2$4),
        _bL_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bL_, _bK_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bM_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bM_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bN_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bN_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bU_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bU_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bO_ = copy_expression(x2$5),
        _bP_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$24),
               _bP_,
               _bO_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bQ_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bQ_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bR_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bR_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bS_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bS_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bT_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bT_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bm_ = copy_expression(body),
     _bn_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bn_, _bm_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bk_ = copy_expression(pbop_exp),
     _bl_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bl_,
            _bk_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bi_ = copy_expression(pc_rhs),
     _bj_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bj_, _bi_];
   }
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bg_ = copy_attributes(pvb_attributes),
     _bh_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bh_, _bg_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _be_ = copy_attributes(ppat_attributes),
     _bf_ = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _bf_, _be_];
   }
   function copy_pat(x){return copy_pattern(x);}
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _a8_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _a8_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _a9_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _a9_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _a__ = caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _a__];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _a$_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bd_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bd_];
                 },
                 x0$6),
               _a$_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _ba_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _ba_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bb_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bb_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bc_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bc_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _a6_ = copy_attributes(ptyp_attributes),
     _a7_ = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _a7_, _a6_];
   }
   function copy_typ(x){return copy_core_type(x);}
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _aY_ = copy_core_type(x2),
        _aZ_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _aZ_, _aY_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a0_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a0_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a1_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a1_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a2_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a2_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a3_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a4_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a4_,
               _a3_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a5_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a5_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _aW_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _aX_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _aX_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _aW_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _aV_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _aV_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _aU_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _aU_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aT_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aT_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aS_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aS_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aR_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aR_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aN_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aN_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aO_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aO_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aP_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aP_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aQ_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aQ_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aM_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aM_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aC_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aC_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aD_ = copy_class_expr(x3),
        _aE_ = copy_pattern(x2),
        _aF_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aF_, _aE_, _aD_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aG_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aL_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aL_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aG_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aH_ = copy_class_expr(x2$0),
        _aI_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aI_, _aH_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aJ_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aJ_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aK_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aK_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aB_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aB_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aA_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aA_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _at_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _au_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _au_, _at_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _av_ = copy_class_field_kind(x2$0),
        _aw_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aw_, _av_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _ax_ = copy_class_field_kind(x2$1),
        _ay_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _ay_, _ax_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _az_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _az_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _as_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _as_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _aq_ = copy_attributes(pmb_attributes),
     _ar_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _ar_,
            _aq_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _ap_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _ap_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _am_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _am_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _an_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _an_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _ao_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _ao_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _al_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _al_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _ak_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _ak_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _ai_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _ai_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _aj_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _aj_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ae_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ae_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _af_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _af_];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        _ag_ = copy_type_declaration(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _ag_];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        _ah_ = copy_loc(copy_Longident_t, x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _ah_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ac_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ac_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, copy_include_infos(copy_module_type, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], _ad_ = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), _ad_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ab_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ab_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _Z_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _Z_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        ___ = copy_class_type(x2),
        _$_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _$_, ___];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _aa_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _aa_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _Y_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _Y_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _X_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _X_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _Q_ = copy_core_type(x3),
        _R_ = copy_virtual_flag(x2),
        _S_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _S_, _R_, _Q_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _T_ = copy_core_type(x3$0),
        _U_ = copy_virtual_flag(x2$0),
        _V_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _V_, _U_, _T_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _W_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _W_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _P_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _P_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _K_ = copy_attributes(pci_attributes),
     _L_ = caml_call1(f0, pci_expr),
     _M_ = copy_loc(function(x){return x;}, pci_name),
     _N_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _O_ = copy_variance(x1);
          return [0, copy_core_type(x0), _O_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _N_, _M_, _L_, pci_loc, _K_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _J_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _J_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _H_ = copy_attributes(popen_attributes),
     _I_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _I_, popen_loc, _H_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _F_ = copy_attributes(pmtd_attributes),
     _G_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _G_,
            _F_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _D_ = copy_attributes(pms_attributes),
     _E_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _E_, _D_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _B_ = copy_attributes(pmd_attributes),
     _C_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _C_,
            _B_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _A_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _A_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _v_ = copy_attributes(ptyext_attributes),
     _w_ = copy_private_flag(ptyext_private),
     _x_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _y_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _z_ = copy_variance(x1);
          return [0, copy_core_type(x0), _z_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _y_,
            _x_,
            _w_,
            ptyext_loc,
            _v_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _t_ = copy_attributes(pext_attributes),
     _u_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _u_,
            pext_loc,
            _t_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      _s_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), _s_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _k_ = copy_attributes(ptype_attributes),
     _l_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _m_ = copy_private_flag(ptype_private),
     _n_ = copy_type_kind(ptype_kind),
     _o_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _r_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _r_, x2];
         },
         ptype_cstrs),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _q_ = copy_variance(x1);
          return [0, copy_core_type(x0), _q_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            _k_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _h_ = copy_attributes(pcd_attributes),
     _i_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _j_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _j_,
            _i_,
            pcd_loc,
            _h_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _e_ = copy_attributes(pld_attributes),
     _f_ = copy_core_type(pld_type),
     _g_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _g_,
            _f_,
            pld_loc,
            _e_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _b_ = copy_attributes(pval_attributes),
     _c_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _d_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _d_,
            _c_,
            _b_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _a_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _a_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x2 = param[3], x0$1 = param[1];
       return [2,
               x0$1,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x2)];
      default:
       var x1$0 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$0)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_411_410 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expr,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_cases,
       copy_value_binding,
       copy_pattern,
       copy_pat,
       copy_pattern_desc,
       copy_core_type,
       copy_typ,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_411_410, "Astlib__Migrate_411_410");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_410_411
//# unitInfo: Requires: Astlib__Location, Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _b0_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _b0_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _bY_ = copy_attributes(pexp_attributes),
     _bZ_ = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _bZ_, _bY_];
   }
   function copy_expr(x){return copy_expression(x);}
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bp_ = copy_expression(x2),
        _bq_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bq_, _bp_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _br_ = copy_expression(x3),
        _bs_ = copy_pattern(x2$0),
        _bt_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bt_, _bs_, _br_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bu_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _bX_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _bX_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _bu_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _bv_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _bv_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bw_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _bw_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bx_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bx_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _by_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bW_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bW_];
                 },
                 x0$10),
               _by_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bz_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bz_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bA_ = copy_expression(x2$1),
        _bB_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _bB_, _bA_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bC_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _bD_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bD_, _bC_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bE_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bE_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bF_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bF_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bG_ = copy_expression(x4),
        _bH_ = copy_direction_flag(x3$0),
        _bI_ = copy_expression(x2$3),
        _bJ_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bJ_, _bI_, _bH_, _bG_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bK_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bK_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bL_ = copy_core_type(x2$4),
        _bM_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bM_, _bL_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bN_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bN_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bO_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bO_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bV_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bV_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bP_ = copy_expression(x2$5),
        _bQ_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$24),
               _bQ_,
               _bP_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bR_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bR_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bS_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bS_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bT_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bT_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bU_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bU_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bn_ = copy_expression(body),
     _bo_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bo_, _bn_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bl_ = copy_expression(pbop_exp),
     _bm_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bm_,
            _bl_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bj_ = copy_expression(pc_rhs),
     _bk_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bk_, _bj_];
   }
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bh_ = copy_attributes(pvb_attributes),
     _bi_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bi_, _bh_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bf_ = copy_attributes(ppat_attributes),
     _bg_ = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _bg_, _bf_];
   }
   function copy_pat(x){return copy_pattern(x);}
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _a9_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _a9_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _a__ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _a__];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _a$_ = caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _a$_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _ba_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _be_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _be_];
                 },
                 x0$6),
               _ba_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bb_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bb_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bc_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bc_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(x){
                  return caml_call2
                          (Astlib_Stdlib0[2][1], function(x){return x;}, x);
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bd_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bd_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _a7_ = copy_attributes(ptyp_attributes),
     _a8_ = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _a8_, _a7_];
   }
   function copy_typ(x){return copy_core_type(x);}
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _aZ_ = copy_core_type(x2),
        _a0_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a0_, _aZ_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a1_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a1_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a2_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a2_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a3_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a3_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a4_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a5_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a5_,
               _a4_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a6_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a6_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _aX_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _aY_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _aY_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _aX_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _aW_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _aW_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _aV_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _aV_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aU_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aU_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aT_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aT_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aS_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aS_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aO_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aO_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aP_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aP_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aQ_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aQ_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aR_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aR_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aN_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aN_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aD_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aD_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aE_ = copy_class_expr(x3),
        _aF_ = copy_pattern(x2),
        _aG_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aG_, _aF_, _aE_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aH_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aM_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aM_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aH_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aI_ = copy_class_expr(x2$0),
        _aJ_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aJ_, _aI_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aK_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aK_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aL_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aL_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aC_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aC_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aB_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aB_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _au_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _av_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _av_, _au_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _aw_ = copy_class_field_kind(x2$0),
        _ax_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _ax_, _aw_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _ay_ = copy_class_field_kind(x2$1),
        _az_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _az_, _ay_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aA_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aA_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _at_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _at_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _ar_ = copy_attributes(pmb_attributes),
     _as_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmb_name),
            _as_,
            _ar_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _aq_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _aq_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _an_ = copy_module_expr(x1);
       return [2, copy_functor_parameter(x0$1), _an_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _ao_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _ao_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _ap_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _ap_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return 0;
    var x1 = param[2], x0 = param[1], _am_ = copy_module_type(x1);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              x0),
            _am_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _al_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _al_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x1 = param[2], x0$1 = param[1], _aj_ = copy_module_type(x1);
       return [2, copy_functor_parameter(x0$1), _aj_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _ak_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _ak_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _af_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _af_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _ag_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _ag_];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        _ah_ = copy_type_declaration(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _ah_];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        _ai_ = copy_loc(copy_Longident_t, x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _ai_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ad_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ad_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, copy_include_infos(copy_module_type, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], _ae_ = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), _ae_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ac_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ac_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        ___ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), ___];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _$_ = copy_class_type(x2),
        _aa_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _aa_, _$_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _ab_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _ab_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _Z_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _Z_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _Y_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _Y_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _R_ = copy_core_type(x3),
        _S_ = copy_virtual_flag(x2),
        _T_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _T_, _S_, _R_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _U_ = copy_core_type(x3$0),
        _V_ = copy_virtual_flag(x2$0),
        _W_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _W_, _V_, _U_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _X_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _X_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _Q_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _Q_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _L_ = copy_attributes(pci_attributes),
     _M_ = caml_call1(f0, pci_expr),
     _N_ = copy_loc(function(x){return x;}, pci_name),
     _O_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _P_ = copy_variance(x1);
          return [0, copy_core_type(x0), _P_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _O_, _N_, _M_, pci_loc, _L_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _K_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _K_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _I_ = copy_attributes(popen_attributes),
     _J_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _J_, popen_loc, _I_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _G_ = copy_attributes(pmtd_attributes),
     _H_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _H_,
            _G_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _E_ = copy_attributes(pms_attributes),
     _F_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _F_, _E_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _C_ = copy_attributes(pmd_attributes),
     _D_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(x){
               return caml_call2
                       (Astlib_Stdlib0[2][1], function(x){return x;}, x);
              },
              pmd_name),
            _D_,
            _C_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _B_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _B_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _w_ = copy_attributes(ptyext_attributes),
     _x_ = copy_private_flag(ptyext_private),
     _y_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _z_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _A_ = copy_variance(x1);
          return [0, copy_core_type(x0), _A_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _z_,
            _y_,
            _x_,
            ptyext_loc,
            _w_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _u_ = copy_attributes(pext_attributes),
     _v_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _v_,
            pext_loc,
            _u_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      _t_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), _t_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _l_ = copy_attributes(ptype_attributes),
     _m_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _n_ = copy_private_flag(ptype_private),
     _o_ = copy_type_kind(ptype_kind),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _s_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _s_, x2];
         },
         ptype_cstrs),
     _q_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _r_ = copy_variance(x1);
          return [0, copy_core_type(x0), _r_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _q_,
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _i_ = copy_attributes(pcd_attributes),
     _j_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _k_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _k_,
            _j_,
            pcd_loc,
            _i_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _f_ = copy_attributes(pld_attributes),
     _g_ = copy_core_type(pld_type),
     _h_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _h_,
            _g_,
            pld_loc,
            _f_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _c_ = copy_attributes(pval_attributes),
     _d_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _e_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _e_,
            _d_,
            _c_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _b_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _b_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var
        x1$0 = param[2],
        x0$1 = param[1],
        _a_ = caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$0);
       return [2, x0$1, Astlib_Location[4], _a_];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_410_411 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expr,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_cases,
       copy_value_binding,
       copy_pattern,
       copy_pat,
       copy_pattern_desc,
       copy_core_type,
       copy_typ,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (3, Astlib_Migrate_410_411, "Astlib__Migrate_410_411");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_409
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M026",
    ast_intf_magic_number = "Caml1999N026",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_409 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_409, "Astlib__Ast_409");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_410_409
//# unitInfo: Requires: Astlib__Location, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "_",
    cst$0 = "*",
    Stdlib_List = global_data.Stdlib__List,
    Astlib_Location = global_data.Astlib__Location,
    _a_ =
      [0,
       [11,
        "migration error: ",
        [2, 0, [11, " is not supported before OCaml 4.10", 0]]],
       "migration error: %s is not supported before OCaml 4.10"],
    cst_anonymous_let_module = "anonymous let module",
    cst_anynymous_unpack = "anynymous unpack",
    cst_anonymous_module_binding = "anonymous module binding",
    cst_anonymous_module_declarati = "anonymous module declaration";
   function migration_error(loc, missing_feature){
    return caml_call3(Astlib_Location[7], [0, loc], _a_, missing_feature);
   }
   function map_option(f, x){
    if(! x) return 0;
    var x$0 = x[1];
    return [0, caml_call1(f, x$0)];
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _bY_ = map_option(copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _bY_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, x0$0, map_option(function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _bW_ = copy_attributes(pexp_attributes),
     _bX_ = copy_location_stack(pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _bX_, _bW_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bn_ = copy_expression(x2),
        _bo_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bo_, _bn_];
      case 3:
       var x0$2 = param[1];
       return [3, caml_call2(Stdlib_List[20], copy_case, x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _bp_ = copy_expression(x3),
        _bq_ = copy_pattern(x2$0),
        _br_ = map_option(copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _br_, _bq_, _bp_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bs_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _bV_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _bV_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _bs_];
      case 6:
       var
        x1$2 = param[2],
        x0$5 = param[1],
        _bt_ = caml_call2(Stdlib_List[20], copy_case, x1$2);
       return [6, copy_expression(x0$5), _bt_];
      case 7:
       var
        x1$3 = param[2],
        x0$6 = param[1],
        _bu_ = caml_call2(Stdlib_List[20], copy_case, x1$3);
       return [7, copy_expression(x0$6), _bu_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bv_ = map_option(copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bv_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10, x0$9, map_option(copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _bw_ = map_option(copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bU_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bU_];
                 },
                 x0$10),
               _bw_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bx_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bx_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _by_ = copy_expression(x2$1),
        _bz_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _bz_, _by_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bA_ = map_option(copy_expression, x2$2),
        _bB_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bB_, _bA_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bC_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bC_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bD_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bD_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bE_ = copy_expression(x4),
        _bF_ = copy_direction_flag(x3$0),
        _bG_ = copy_expression(x2$3),
        _bH_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bH_, _bG_, _bF_, _bE_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bI_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bI_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bJ_ = copy_core_type(x2$4),
        _bK_ = map_option(copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bK_, _bJ_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bL_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bL_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bM_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bM_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bT_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bT_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bN_ = copy_expression(x2$5),
        _bO_ = copy_module_expr(x1$17);
       return [25,
               copy_loc
                (function(param){
                  if(! param)
                   return migration_error(x0$24[2], cst_anonymous_let_module);
                  var x = param[1];
                  return x;
                 },
                 x0$24),
               _bO_,
               _bN_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bP_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bP_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bQ_ = map_option(copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bQ_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bR_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bR_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bS_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bS_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bl_ = copy_expression(body),
     _bm_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bm_, _bl_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bj_ = copy_expression(pbop_exp),
     _bk_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bk_,
            _bj_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bh_ = copy_expression(pc_rhs),
     _bi_ = map_option(copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bi_, _bh_];
   }
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bf_ = copy_attributes(pvb_attributes),
     _bg_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bg_, _bf_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bd_ = copy_attributes(ppat_attributes),
     _be_ = copy_location_stack(ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _be_, _bd_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _a7_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _a7_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _a8_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _a8_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _a9_ = map_option(copy_pattern, x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _a9_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, map_option(copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _a__ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bc_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bc_];
                 },
                 x0$6),
               _a__];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _a$_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _a$_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _ba_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _ba_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13,
               copy_loc
                (function(param){
                  if(! param)
                   return migration_error(x0$12[2], cst_anynymous_unpack);
                  var x = param[1];
                  return x;
                 },
                 x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bb_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bb_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _a5_ = copy_attributes(ptyp_attributes),
     _a6_ = copy_location_stack(ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _a6_, _a5_];
   }
   function copy_location_stack(x){
    return caml_call2(Stdlib_List[20], copy_location, x);
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _aX_ = copy_core_type(x2),
        _aY_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _aY_, _aX_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _aZ_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _aZ_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a0_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a0_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a1_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a1_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a2_ =
          map_option
           (function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a3_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a3_,
               _a2_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a4_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a4_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _aV_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _aW_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _aW_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _aV_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _aU_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _aU_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _aT_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _aT_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aS_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aS_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aR_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aR_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aQ_ = map_option(copy_expression, x1);
       return [3, copy_pattern(x0$2), _aQ_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aM_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aM_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aN_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aN_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aO_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aO_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aP_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aP_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aL_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aL_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aB_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aB_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aC_ = copy_class_expr(x3),
        _aD_ = copy_pattern(x2),
        _aE_ = map_option(copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aE_, _aD_, _aC_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aF_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aK_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aK_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aF_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aG_ = copy_class_expr(x2$0),
        _aH_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aH_, _aG_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aI_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aI_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aJ_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aJ_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aA_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aA_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _az_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _az_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _as_ =
          map_option
           (function(x){return copy_loc(function(x){return x;}, x);}, x2),
        _at_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _at_, _as_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _au_ = copy_class_field_kind(x2$0),
        _av_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _av_, _au_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _aw_ = copy_class_field_kind(x2$1),
        _ax_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _ax_, _aw_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _ay_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _ay_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _ar_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _ar_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _ap_ = copy_attributes(pmb_attributes),
     _aq_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc
             (function(param){
               if(! param)
                return migration_error
                        (pmb_name[2], cst_anonymous_module_binding);
               var x = param[1];
               return x;
              },
              pmb_name),
            _aq_,
            _ap_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _ao_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _ao_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var
        x1 = param[2],
        x0$1 = param[1],
        match = copy_functor_parameter(x0$1),
        y = match[2],
        x = match[1];
       return [2, x, y, copy_module_expr(x1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _am_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _am_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _an_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _an_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_functor_parameter(param){
    if(! param) return [0, [0, cst$0, Astlib_Location[4]], 0];
    var x1 = param[2], x0 = param[1], _al_ = [0, copy_module_type(x1)];
    return [0,
            copy_loc
             (function(param){
               if(! param) return cst;
               var x = param[1];
               return x;
              },
              x0),
            _al_];
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _ak_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _ak_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var
        x1 = param[2],
        x0$1 = param[1],
        match = copy_functor_parameter(x0$1),
        y = match[2],
        x = match[1];
       return [2, x, y, copy_module_type(x1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _aj_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _aj_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _af_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _af_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _ag_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _ag_];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        _ah_ = copy_type_declaration(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _ah_];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        _ai_ = copy_loc(copy_Longident_t, x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _ai_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ad_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ad_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, copy_include_infos(copy_module_type, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], _ae_ = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), _ae_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ac_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ac_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        ___ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), ___];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _$_ = copy_class_type(x2),
        _aa_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _aa_, _$_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _ab_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _ab_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _Z_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _Z_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _Y_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _Y_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _R_ = copy_core_type(x3),
        _S_ = copy_virtual_flag(x2),
        _T_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _T_, _S_, _R_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _U_ = copy_core_type(x3$0),
        _V_ = copy_virtual_flag(x2$0),
        _W_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _W_, _V_, _U_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _X_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _X_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _Q_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _Q_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _L_ = copy_attributes(pci_attributes),
     _M_ = caml_call1(f0, pci_expr),
     _N_ = copy_loc(function(x){return x;}, pci_name),
     _O_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _P_ = copy_variance(x1);
          return [0, copy_core_type(x0), _P_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _O_, _N_, _M_, pci_loc, _L_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _K_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _K_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _I_ = copy_attributes(popen_attributes),
     _J_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _J_, popen_loc, _I_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _G_ = copy_attributes(pmtd_attributes),
     _H_ = map_option(copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _H_,
            _G_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _E_ = copy_attributes(pms_attributes),
     _F_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _F_, _E_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _C_ = copy_attributes(pmd_attributes),
     _D_ = copy_module_type(pmd_type);
    return [0,
            copy_loc
             (function(param){
               if(! param)
                return migration_error
                        (pmd_name[2], cst_anonymous_module_declarati);
               var x = param[1];
               return x;
              },
              pmd_name),
            _D_,
            _C_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _B_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _B_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _w_ = copy_attributes(ptyext_attributes),
     _x_ = copy_private_flag(ptyext_private),
     _y_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _z_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _A_ = copy_variance(x1);
          return [0, copy_core_type(x0), _A_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _z_,
            _y_,
            _x_,
            ptyext_loc,
            _w_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _u_ = copy_attributes(pext_attributes),
     _v_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _v_,
            pext_loc,
            _u_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _t_ = map_option(copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), _t_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _l_ = copy_attributes(ptype_attributes),
     _m_ = map_option(copy_core_type, ptype_manifest),
     _n_ = copy_private_flag(ptype_private),
     _o_ = copy_type_kind(ptype_kind),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _s_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _s_, x2];
         },
         ptype_cstrs),
     _q_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _r_ = copy_variance(x1);
          return [0, copy_core_type(x0), _r_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _q_,
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _i_ = copy_attributes(pcd_attributes),
     _j_ = map_option(copy_core_type, pcd_res),
     _k_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _k_,
            _j_,
            pcd_loc,
            _i_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _f_ = copy_attributes(pld_attributes),
     _g_ = copy_core_type(pld_type),
     _h_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _h_,
            _g_,
            pld_loc,
            _f_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _c_ = copy_attributes(pval_attributes),
     _d_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _e_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _e_,
            _d_,
            _c_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _b_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _b_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0, x0, map_option(function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x1$0 = param[2], x0$1 = param[1];
       return [2, x0$1, map_option(function(x){return x;}, x1$0)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3, x0$2, map_option(function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_410_409 =
      [0,
       migration_error,
       map_option,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_case,
       copy_cases,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_location_stack,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_functor_parameter,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location,
       copy_expression,
       copy_pattern,
       copy_core_type];
   runtime.caml_register_global
    (9, Astlib_Migrate_410_409, "Astlib__Migrate_410_409");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_409_410
//# unitInfo: Requires: Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "*",
    cst$0 = "_",
    cst_astlib_migrate_409_410_ml = "astlib/migrate_409_410.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, cst_astlib_migrate_409_410_ml, 621, 17],
    _b_ = [0, cst_astlib_migrate_409_410_ml, 661, 17];
   function map_option(f, x){
    if(! x) return 0;
    var x$0 = x[1];
    return [0, caml_call1(f, x$0)];
   }
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _b8_ = map_option(copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _b8_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1, x0$0, map_option(function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _b6_ = copy_attributes(pexp_attributes),
     _b7_ = caml_call2(Stdlib_List[20], copy_location, pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _b7_, _b6_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bx_ = copy_expression(x2),
        _by_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _by_, _bx_];
      case 3:
       var x0$2 = param[1]; return [3, copy_cases(x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _bz_ = copy_expression(x3),
        _bA_ = copy_pattern(x2$0),
        _bB_ = map_option(copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bB_, _bA_, _bz_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bC_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _b5_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _b5_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _bC_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1], _bD_ = copy_cases(x1$2);
       return [6, copy_expression(x0$5), _bD_];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bE_ = copy_cases(x1$3);
       return [7, copy_expression(x0$6), _bE_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bF_ = map_option(copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bF_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10, x0$9, map_option(copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _bG_ = map_option(copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _b4_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _b4_];
                 },
                 x0$10),
               _bG_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bH_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bH_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bI_ = copy_expression(x2$1),
        _bJ_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _bJ_, _bI_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bK_ = map_option(copy_expression, x2$2),
        _bL_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bL_, _bK_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bM_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bM_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bN_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bN_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bO_ = copy_expression(x4),
        _bP_ = copy_direction_flag(x3$0),
        _bQ_ = copy_expression(x2$3),
        _bR_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bR_, _bQ_, _bP_, _bO_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bS_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bS_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bT_ = copy_core_type(x2$4),
        _bU_ = map_option(copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bU_, _bT_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bV_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bV_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bW_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bW_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _b3_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _b3_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bX_ = copy_expression(x2$5),
        _bY_ = copy_module_expr(x1$17);
       return [25, copy_loc(function(x){return [0, x];}, x0$24), _bY_, _bX_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bZ_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bZ_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _b0_ = map_option(copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _b0_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _b1_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _b1_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _b2_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _b2_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bv_ = copy_expression(body),
     _bw_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bw_, _bv_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bt_ = copy_expression(pbop_exp),
     _bu_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bu_,
            _bt_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _br_ = copy_expression(pc_rhs),
     _bs_ = map_option(copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bs_, _br_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bp_ = copy_attributes(pvb_attributes),
     _bq_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bq_, _bp_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bn_ = copy_attributes(ppat_attributes),
     _bo_ = caml_call2(Stdlib_List[20], copy_location, ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _bo_, _bn_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _bf_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _bf_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _bg_ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _bg_];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bh_ = map_option(copy_pattern, x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _bh_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, map_option(copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bi_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bm_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bm_];
                 },
                 x0$6),
               _bi_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bj_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bj_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bk_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bk_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13, copy_loc(function(x){return [0, x];}, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bl_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bl_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _bd_ = copy_attributes(ptyp_attributes),
     _be_ = caml_call2(Stdlib_List[20], copy_location, ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _be_, _bd_];
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _a7_ = copy_core_type(x2),
        _a8_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a8_, _a7_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a9_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a9_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a__ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a__];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a$_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a$_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _ba_ =
          map_option
           (function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _bb_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _bb_,
               _ba_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _bc_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _bc_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _a5_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _a6_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _a6_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _a5_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _a4_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _a4_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _a3_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _a3_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _a2_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _a2_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _a1_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _a1_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _a0_ = map_option(copy_expression, x1);
       return [3, copy_pattern(x0$2), _a0_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aW_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aW_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aX_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aX_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aY_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aY_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aZ_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aZ_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aV_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aV_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aL_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aL_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aM_ = copy_class_expr(x3),
        _aN_ = copy_pattern(x2),
        _aO_ = map_option(copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aO_, _aN_, _aM_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aP_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aU_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aU_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aP_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aQ_ = copy_class_expr(x2$0),
        _aR_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aR_, _aQ_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aS_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aS_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aT_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aT_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aK_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aK_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aJ_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aJ_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _aC_ =
          map_option
           (function(x){return copy_loc(function(x){return x;}, x);}, x2),
        _aD_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _aD_, _aC_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _aE_ = copy_class_field_kind(x2$0),
        _aF_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _aF_, _aE_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _aG_ = copy_class_field_kind(x2$1),
        _aH_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _aH_, _aG_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aI_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aI_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _aB_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _aB_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _az_ = copy_attributes(pmb_attributes),
     _aA_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc(function(x){return [0, x];}, pmb_name),
            _aA_,
            _az_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _ay_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _ay_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _ar_ = copy_module_expr(x2),
        _as_ = x0$1[1];
       a:
       {
        b:
        {
         if(_as_ !== cst){
          if(_as_ === cst$0){
           if(! x1) break b;
           var
            mt$0 = x1[1],
            _av_ = copy_module_type(mt$0),
            _au_ = [0, copy_loc(function(param){return 0;}, x0$1), _av_];
           break a;
          }
         }
         else if(! x1){var _au_ = 0; break a;}
         if(x1){
          var
           mt = x1[1],
           _at_ = copy_module_type(mt),
           _au_ = [0, copy_loc(function(x){return [0, x];}, x0$1), _at_];
          break a;
         }
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
       }
       return [2, _au_, _ar_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _aw_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _aw_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _ax_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _ax_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _aq_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _aq_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _ak_ = copy_module_type(x2),
        _al_ = x0$1[1];
       a:
       {
        b:
        {
         if(_al_ !== cst){
          if(_al_ === cst$0){
           if(! x1) break b;
           var
            mt$0 = x1[1],
            _ao_ = copy_module_type(mt$0),
            _an_ = [0, copy_loc(function(param){return 0;}, x0$1), _ao_];
           break a;
          }
         }
         else if(! x1){var _an_ = 0; break a;}
         if(x1){
          var
           mt = x1[1],
           _am_ = copy_module_type(mt),
           _an_ = [0, copy_loc(function(x){return [0, x];}, x0$1), _am_];
          break a;
         }
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
       }
       return [2, _an_, _ak_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _ap_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _ap_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ag_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ag_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _ah_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _ah_];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        _ai_ = copy_type_declaration(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _ai_];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        _aj_ = copy_loc(copy_Longident_t, x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _aj_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ae_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ae_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, copy_include_infos(copy_module_type, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], _af_ = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), _af_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ad_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ad_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _$_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _$_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aa_ = copy_class_type(x2),
        _ab_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _ab_, _aa_];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _ac_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _ac_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     ___ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), ___];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _Z_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _Z_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _S_ = copy_core_type(x3),
        _T_ = copy_virtual_flag(x2),
        _U_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _U_, _T_, _S_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _V_ = copy_core_type(x3$0),
        _W_ = copy_virtual_flag(x2$0),
        _X_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _X_, _W_, _V_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _Y_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _Y_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _R_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _R_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _M_ = copy_attributes(pci_attributes),
     _N_ = caml_call1(f0, pci_expr),
     _O_ = copy_loc(function(x){return x;}, pci_name),
     _P_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _Q_ = copy_variance(x1);
          return [0, copy_core_type(x0), _Q_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _P_, _O_, _N_, pci_loc, _M_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _L_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _L_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _J_ = copy_attributes(popen_attributes),
     _K_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _K_, popen_loc, _J_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _H_ = copy_attributes(pmtd_attributes),
     _I_ = map_option(copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _I_,
            _H_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _F_ = copy_attributes(pms_attributes),
     _G_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _G_, _F_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _D_ = copy_attributes(pmd_attributes),
     _E_ = copy_module_type(pmd_type);
    return [0,
            copy_loc(function(x){return [0, x];}, pmd_name),
            _E_,
            _D_,
            pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _C_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _C_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _x_ = copy_attributes(ptyext_attributes),
     _y_ = copy_private_flag(ptyext_private),
     _z_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _A_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _B_ = copy_variance(x1);
          return [0, copy_core_type(x0), _B_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _A_,
            _z_,
            _y_,
            ptyext_loc,
            _x_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _v_ = copy_attributes(pext_attributes),
     _w_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _w_,
            pext_loc,
            _v_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _u_ = map_option(copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), _u_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _m_ = copy_attributes(ptype_attributes),
     _n_ = map_option(copy_core_type, ptype_manifest),
     _o_ = copy_private_flag(ptype_private),
     _p_ = copy_type_kind(ptype_kind),
     _q_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _t_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _t_, x2];
         },
         ptype_cstrs),
     _r_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _s_ = copy_variance(x1);
          return [0, copy_core_type(x0), _s_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _r_,
            _q_,
            _p_,
            _o_,
            _n_,
            _m_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _j_ = copy_attributes(pcd_attributes),
     _k_ = map_option(copy_core_type, pcd_res),
     _l_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _l_,
            _k_,
            pcd_loc,
            _j_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _g_ = copy_attributes(pld_attributes),
     _h_ = copy_core_type(pld_type),
     _i_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _i_,
            _h_,
            pld_loc,
            _g_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _d_ = copy_attributes(pval_attributes),
     _e_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _f_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _f_,
            _e_,
            _d_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _c_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _c_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0, x0, map_option(function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x1$0 = param[2], x0$1 = param[1];
       return [2, x0$1, map_option(function(x){return x;}, x1$0)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3, x0$2, map_option(function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_409_410 =
      [0,
       map_option,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_cases,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location,
       copy_expression,
       copy_pattern,
       copy_core_type];
   runtime.caml_register_global
    (8, Astlib_Migrate_409_410, "Astlib__Migrate_409_410");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_408
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M025",
    ast_intf_magic_number = "Caml1999N025",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_408 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_408, "Astlib__Ast_408");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_409_408
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _b0_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _b0_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_typ(x){return copy_core_type(x);}
   function copy_pat(x){return copy_pattern(x);}
   function copy_expr(x){return copy_expression(x);}
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _bY_ = copy_attributes(pexp_attributes),
     _bZ_ = caml_call2(Stdlib_List[20], copy_location, pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _bZ_, _bY_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bp_ = copy_expression(x2),
        _bq_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bq_, _bp_];
      case 3:
       var x0$2 = param[1]; return [3, copy_cases(x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _br_ = copy_expression(x3),
        _bs_ = copy_pattern(x2$0),
        _bt_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bt_, _bs_, _br_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bu_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _bX_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _bX_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _bu_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1], _bv_ = copy_cases(x1$2);
       return [6, copy_expression(x0$5), _bv_];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bw_ = copy_cases(x1$3);
       return [7, copy_expression(x0$6), _bw_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bx_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bx_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _by_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bW_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bW_];
                 },
                 x0$10),
               _by_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bz_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bz_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bA_ = copy_expression(x2$1),
        _bB_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _bB_, _bA_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bC_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _bD_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bD_, _bC_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bE_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bE_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bF_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bF_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bG_ = copy_expression(x4),
        _bH_ = copy_direction_flag(x3$0),
        _bI_ = copy_expression(x2$3),
        _bJ_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bJ_, _bI_, _bH_, _bG_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bK_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bK_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bL_ = copy_core_type(x2$4),
        _bM_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bM_, _bL_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bN_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bN_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bO_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bO_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bV_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bV_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bP_ = copy_expression(x2$5),
        _bQ_ = copy_module_expr(x1$17);
       return [25, copy_loc(function(x){return x;}, x0$24), _bQ_, _bP_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bR_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bR_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bS_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bS_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bT_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bT_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bU_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bU_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bn_ = copy_expression(body),
     _bo_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bo_, _bn_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bl_ = copy_expression(pbop_exp),
     _bm_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bm_,
            _bl_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bj_ = copy_expression(pc_rhs),
     _bk_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bk_, _bj_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bh_ = copy_attributes(pvb_attributes),
     _bi_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bi_, _bh_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bf_ = copy_attributes(ppat_attributes),
     _bg_ = caml_call2(Stdlib_List[20], copy_location, ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _bg_, _bf_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _a9_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _a9_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _a__ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _a__];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _a$_ = caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _a$_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _ba_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _be_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _be_];
                 },
                 x0$6),
               _ba_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bb_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bb_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bc_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bc_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13, copy_loc(function(x){return x;}, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bd_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bd_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _a7_ = copy_attributes(ptyp_attributes),
     _a8_ = caml_call2(Stdlib_List[20], copy_location, ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _a8_, _a7_];
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _aZ_ = copy_core_type(x2),
        _a0_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a0_, _aZ_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a1_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a1_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a2_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a2_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a3_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a3_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a4_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a5_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a5_,
               _a4_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a6_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a6_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _aX_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _aY_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _aY_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _aX_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _aW_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _aW_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _aV_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _aV_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aU_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aU_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aT_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aT_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aS_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aS_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aO_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aO_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aP_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aP_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aQ_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aQ_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aR_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aR_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aN_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aN_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aD_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aD_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aE_ = copy_class_expr(x3),
        _aF_ = copy_pattern(x2),
        _aG_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aG_, _aF_, _aE_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aH_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aM_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aM_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aH_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aI_ = copy_class_expr(x2$0),
        _aJ_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aJ_, _aI_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aK_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aK_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aL_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aL_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aC_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aC_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aB_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aB_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _au_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _av_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _av_, _au_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _aw_ = copy_class_field_kind(x2$0),
        _ax_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _ax_, _aw_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _ay_ = copy_class_field_kind(x2$1),
        _az_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _az_, _ay_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aA_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aA_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _at_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _at_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _ar_ = copy_attributes(pmb_attributes),
     _as_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc(function(x){return x;}, pmb_name),
            _as_,
            _ar_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _aq_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _aq_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _am_ = copy_module_expr(x2),
        _an_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, x1);
       return [2, copy_loc(function(x){return x;}, x0$1), _an_, _am_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _ao_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _ao_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _ap_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _ap_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _al_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _al_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _ai_ = copy_module_type(x2),
        _aj_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, x1);
       return [2, copy_loc(function(x){return x;}, x0$1), _aj_, _ai_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _ak_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _ak_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ae_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ae_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _af_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _af_];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        _ag_ = copy_type_declaration(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _ag_];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        _ah_ = copy_loc(copy_Longident_t, x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _ah_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ac_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ac_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, copy_include_infos(copy_module_type, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], _ad_ = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), _ad_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ab_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ab_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _Z_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _Z_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        ___ = copy_class_type(x2),
        _$_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _$_, ___];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _aa_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _aa_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _Y_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _Y_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _X_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _X_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _Q_ = copy_core_type(x3),
        _R_ = copy_virtual_flag(x2),
        _S_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _S_, _R_, _Q_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _T_ = copy_core_type(x3$0),
        _U_ = copy_virtual_flag(x2$0),
        _V_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _V_, _U_, _T_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _W_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _W_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _P_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _P_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _K_ = copy_attributes(pci_attributes),
     _L_ = caml_call1(f0, pci_expr),
     _M_ = copy_loc(function(x){return x;}, pci_name),
     _N_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _O_ = copy_variance(x1);
          return [0, copy_core_type(x0), _O_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _N_, _M_, _L_, pci_loc, _K_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _J_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _J_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _H_ = copy_attributes(popen_attributes),
     _I_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _I_, popen_loc, _H_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _F_ = copy_attributes(pmtd_attributes),
     _G_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _G_,
            _F_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _D_ = copy_attributes(pms_attributes),
     _E_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _E_, _D_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _B_ = copy_attributes(pmd_attributes),
     _C_ = copy_module_type(pmd_type);
    return [0, copy_loc(function(x){return x;}, pmd_name), _C_, _B_, pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _A_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _A_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _v_ = copy_attributes(ptyext_attributes),
     _w_ = copy_private_flag(ptyext_private),
     _x_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _y_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _z_ = copy_variance(x1);
          return [0, copy_core_type(x0), _z_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _y_,
            _x_,
            _w_,
            ptyext_loc,
            _v_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _t_ = copy_attributes(pext_attributes),
     _u_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _u_,
            pext_loc,
            _t_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      _s_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), _s_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _k_ = copy_attributes(ptype_attributes),
     _l_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _m_ = copy_private_flag(ptype_private),
     _n_ = copy_type_kind(ptype_kind),
     _o_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _r_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _r_, x2];
         },
         ptype_cstrs),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _q_ = copy_variance(x1);
          return [0, copy_core_type(x0), _q_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            _k_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _h_ = copy_attributes(pcd_attributes),
     _i_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _j_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _j_,
            _i_,
            pcd_loc,
            _h_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _e_ = copy_attributes(pld_attributes),
     _f_ = copy_core_type(pld_type),
     _g_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _g_,
            _f_,
            pld_loc,
            _e_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _b_ = copy_attributes(pval_attributes),
     _c_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _d_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _d_,
            _c_,
            _b_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _a_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _a_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$0)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_409_408 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_typ,
       copy_pat,
       copy_expr,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_cases,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_409_408, "Astlib__Migrate_409_408");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Migrate_408_409
//# unitInfo: Requires: Astlib__Stdlib0, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Astlib_Stdlib0 = global_data.Astlib__Stdlib0,
    Stdlib_List = global_data.Stdlib__List;
   function copy_toplevel_phrase(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_structure(x0)];}
    var x0$0 = param[1];
    return [1, copy_toplevel_directive(x0$0)];
   }
   function copy_toplevel_directive(param){
    var
     pdir_loc = param[3],
     pdir_arg = param[2],
     pdir_name = param[1],
     _b0_ =
       caml_call2(Astlib_Stdlib0[2][1], copy_directive_argument, pdir_arg);
    return [0, copy_loc(function(x){return x;}, pdir_name), _b0_, pdir_loc];
   }
   function copy_directive_argument(param){
    var pdira_loc = param[2], pdira_desc = param[1];
    return [0, copy_directive_argument_desc(pdira_desc), pdira_loc];
   }
   function copy_directive_argument_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var x1 = param[2], x0$0 = param[1];
       return [1,
               x0$0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 2:
       var x0$1 = param[1]; return [2, x0$1];
      default: var x0$2 = param[1]; return [3, x0$2];
    }
   }
   function copy_typ(x){return copy_core_type(x);}
   function copy_pat(x){return copy_pattern(x);}
   function copy_expr(x){return copy_expression(x);}
   function copy_expression(param){
    var
     pexp_attributes = param[4],
     pexp_loc_stack = param[3],
     pexp_loc = param[2],
     pexp_desc = param[1],
     _bY_ = copy_attributes(pexp_attributes),
     _bZ_ = caml_call2(Stdlib_List[20], copy_location, pexp_loc_stack);
    return [0, copy_expression_desc(pexp_desc), pexp_loc, _bZ_, _bY_];
   }
   function copy_expression_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_constant(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _bp_ = copy_expression(x2),
        _bq_ = caml_call2(Stdlib_List[20], copy_value_binding, x1);
       return [2, copy_rec_flag(x0$1), _bq_, _bp_];
      case 3:
       var x0$2 = param[1]; return [3, copy_cases(x0$2)];
      case 4:
       var
        x3 = param[4],
        x2$0 = param[3],
        x1$0 = param[2],
        x0$3 = param[1],
        _br_ = copy_expression(x3),
        _bs_ = copy_pattern(x2$0),
        _bt_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [4, copy_arg_label(x0$3), _bt_, _bs_, _br_];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _bu_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _bX_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _bX_];
            },
            x1$1);
       return [5, copy_expression(x0$4), _bu_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1], _bv_ = copy_cases(x1$2);
       return [6, copy_expression(x0$5), _bv_];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _bw_ = copy_cases(x1$3);
       return [7, copy_expression(x0$6), _bw_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_expression, x0$7)];
      case 9:
       var
        x1$4 = param[2],
        x0$8 = param[1],
        _bx_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$4);
       return [9, copy_loc(copy_Longident_t, x0$8), _bx_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1];
       return [10,
               x0$9,
               caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$5)];
      case 11:
       var
        x1$6 = param[2],
        x0$10 = param[1],
        _by_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$6);
       return [11,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bW_ = copy_expression(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _bW_];
                 },
                 x0$10),
               _by_];
      case 12:
       var
        x1$7 = param[2],
        x0$11 = param[1],
        _bz_ = copy_loc(copy_Longident_t, x1$7);
       return [12, copy_expression(x0$11), _bz_];
      case 13:
       var
        x2$1 = param[3],
        x1$8 = param[2],
        x0$12 = param[1],
        _bA_ = copy_expression(x2$1),
        _bB_ = copy_loc(copy_Longident_t, x1$8);
       return [13, copy_expression(x0$12), _bB_, _bA_];
      case 14:
       var x0$13 = param[1];
       return [14, caml_call2(Stdlib_List[20], copy_expression, x0$13)];
      case 15:
       var
        x2$2 = param[3],
        x1$9 = param[2],
        x0$14 = param[1],
        _bC_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x2$2),
        _bD_ = copy_expression(x1$9);
       return [15, copy_expression(x0$14), _bD_, _bC_];
      case 16:
       var x1$10 = param[2], x0$15 = param[1], _bE_ = copy_expression(x1$10);
       return [16, copy_expression(x0$15), _bE_];
      case 17:
       var x1$11 = param[2], x0$16 = param[1], _bF_ = copy_expression(x1$11);
       return [17, copy_expression(x0$16), _bF_];
      case 18:
       var
        x4 = param[5],
        x3$0 = param[4],
        x2$3 = param[3],
        x1$12 = param[2],
        x0$17 = param[1],
        _bG_ = copy_expression(x4),
        _bH_ = copy_direction_flag(x3$0),
        _bI_ = copy_expression(x2$3),
        _bJ_ = copy_expression(x1$12);
       return [18, copy_pattern(x0$17), _bJ_, _bI_, _bH_, _bG_];
      case 19:
       var x1$13 = param[2], x0$18 = param[1], _bK_ = copy_core_type(x1$13);
       return [19, copy_expression(x0$18), _bK_];
      case 20:
       var
        x2$4 = param[3],
        x1$14 = param[2],
        x0$19 = param[1],
        _bL_ = copy_core_type(x2$4),
        _bM_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$14);
       return [20, copy_expression(x0$19), _bM_, _bL_];
      case 21:
       var
        x1$15 = param[2],
        x0$20 = param[1],
        _bN_ = copy_loc(copy_label, x1$15);
       return [21, copy_expression(x0$20), _bN_];
      case 22:
       var x0$21 = param[1]; return [22, copy_loc(copy_Longident_t, x0$21)];
      case 23:
       var x1$16 = param[2], x0$22 = param[1], _bO_ = copy_expression(x1$16);
       return [23, copy_loc(copy_label, x0$22), _bO_];
      case 24:
       var x0$23 = param[1];
       return [24,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _bV_ = copy_expression(x1);
                  return [0, copy_loc(copy_label, x0), _bV_];
                 },
                 x0$23)];
      case 25:
       var
        x2$5 = param[3],
        x1$17 = param[2],
        x0$24 = param[1],
        _bP_ = copy_expression(x2$5),
        _bQ_ = copy_module_expr(x1$17);
       return [25, copy_loc(function(x){return x;}, x0$24), _bQ_, _bP_];
      case 26:
       var x1$18 = param[2], x0$25 = param[1], _bR_ = copy_expression(x1$18);
       return [26, copy_extension_constructor(x0$25), _bR_];
      case 27:
       var x0$26 = param[1]; return [27, copy_expression(x0$26)];
      case 28:
       var x0$27 = param[1]; return [28, copy_expression(x0$27)];
      case 29:
       var
        x1$19 = param[2],
        x0$28 = param[1],
        _bS_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1$19);
       return [29, copy_expression(x0$28), _bS_];
      case 30:
       var x0$29 = param[1]; return [30, copy_class_structure(x0$29)];
      case 31:
       var x1$20 = param[2], x0$30 = param[1], _bT_ = copy_expression(x1$20);
       return [31, copy_loc(function(x){return x;}, x0$30), _bT_];
      case 32:
       var x0$31 = param[1]; return [32, copy_module_expr(x0$31)];
      case 33:
       var x1$21 = param[2], x0$32 = param[1], _bU_ = copy_expression(x1$21);
       return [33, copy_open_infos(copy_module_expr, x0$32), _bU_];
      case 34:
       var x0$33 = param[1]; return [34, copy_letop(x0$33)];
      default: var x0$34 = param[1]; return [35, copy_extension(x0$34)];
    }
   }
   function copy_letop(param){
    var
     body = param[3],
     ands = param[2],
     let$0 = param[1],
     _bn_ = copy_expression(body),
     _bo_ = caml_call2(Stdlib_List[20], copy_binding_op, ands);
    return [0, copy_binding_op(let$0), _bo_, _bn_];
   }
   function copy_binding_op(param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     _bl_ = copy_expression(pbop_exp),
     _bm_ = copy_pattern(pbop_pat);
    return [0,
            copy_loc(function(x){return x;}, pbop_op),
            _bm_,
            _bl_,
            pbop_loc];
   }
   function copy_direction_flag(param){return param ? 1 : 0;}
   function copy_cases(x){return caml_call2(Stdlib_List[20], copy_case, x);}
   function copy_case(param){
    var
     pc_rhs = param[3],
     pc_guard = param[2],
     pc_lhs = param[1],
     _bj_ = copy_expression(pc_rhs),
     _bk_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, pc_guard);
    return [0, copy_pattern(pc_lhs), _bk_, _bj_];
   }
   function copy_value_binding(param){
    var
     pvb_loc = param[4],
     pvb_attributes = param[3],
     pvb_expr = param[2],
     pvb_pat = param[1],
     _bh_ = copy_attributes(pvb_attributes),
     _bi_ = copy_expression(pvb_expr);
    return [0, copy_pattern(pvb_pat), _bi_, _bh_, pvb_loc];
   }
   function copy_pattern(param){
    var
     ppat_attributes = param[4],
     ppat_loc_stack = param[3],
     ppat_loc = param[2],
     ppat_desc = param[1],
     _bf_ = copy_attributes(ppat_attributes),
     _bg_ = caml_call2(Stdlib_List[20], copy_location, ppat_loc_stack);
    return [0, copy_pattern_desc(ppat_desc), ppat_loc, _bg_, _bf_];
   }
   function copy_pattern_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(function(x){return x;}, x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _a9_ = copy_loc(function(x){return x;}, x1);
       return [1, copy_pattern(x0$0), _a9_];
      case 2:
       var x0$1 = param[1]; return [2, copy_constant(x0$1)];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _a__ = copy_constant(x1$0);
       return [3, copy_constant(x0$2), _a__];
      case 4:
       var x0$3 = param[1];
       return [4, caml_call2(Stdlib_List[20], copy_pattern, x0$3)];
      case 5:
       var
        x1$1 = param[2],
        x0$4 = param[1],
        _a$_ = caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$1);
       return [5, copy_loc(copy_Longident_t, x0$4), _a$_];
      case 6:
       var x1$2 = param[2], x0$5 = param[1];
       return [6, x0$5, caml_call2(Astlib_Stdlib0[2][1], copy_pattern, x1$2)];
      case 7:
       var x1$3 = param[2], x0$6 = param[1], _ba_ = copy_closed_flag(x1$3);
       return [7,
               caml_call2
                (Stdlib_List[20],
                 function(x){
                  var x1 = x[2], x0 = x[1], _be_ = copy_pattern(x1);
                  return [0, copy_loc(copy_Longident_t, x0), _be_];
                 },
                 x0$6),
               _ba_];
      case 8:
       var x0$7 = param[1];
       return [8, caml_call2(Stdlib_List[20], copy_pattern, x0$7)];
      case 9:
       var x1$4 = param[2], x0$8 = param[1], _bb_ = copy_pattern(x1$4);
       return [9, copy_pattern(x0$8), _bb_];
      case 10:
       var x1$5 = param[2], x0$9 = param[1], _bc_ = copy_core_type(x1$5);
       return [10, copy_pattern(x0$9), _bc_];
      case 11:
       var x0$10 = param[1]; return [11, copy_loc(copy_Longident_t, x0$10)];
      case 12:
       var x0$11 = param[1]; return [12, copy_pattern(x0$11)];
      case 13:
       var x0$12 = param[1];
       return [13, copy_loc(function(x){return x;}, x0$12)];
      case 14:
       var x0$13 = param[1]; return [14, copy_pattern(x0$13)];
      case 15:
       var x0$14 = param[1]; return [15, copy_extension(x0$14)];
      default:
       var x1$6 = param[2], x0$15 = param[1], _bd_ = copy_pattern(x1$6);
       return [16, copy_loc(copy_Longident_t, x0$15), _bd_];
    }
   }
   function copy_core_type(param){
    var
     ptyp_attributes = param[4],
     ptyp_loc_stack = param[3],
     ptyp_loc = param[2],
     ptyp_desc = param[1],
     _a7_ = copy_attributes(ptyp_attributes),
     _a8_ = caml_call2(Stdlib_List[20], copy_location, ptyp_loc_stack);
    return [0, copy_core_type_desc(ptyp_desc), ptyp_loc, _a8_, _a7_];
   }
   function copy_core_type_desc(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, x0];
      case 1:
       var
        x2 = param[3],
        x1 = param[2],
        x0$0 = param[1],
        _aZ_ = copy_core_type(x2),
        _a0_ = copy_core_type(x1);
       return [1, copy_arg_label(x0$0), _a0_, _aZ_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_core_type, x0$1)];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _a1_ = caml_call2(Stdlib_List[20], copy_core_type, x1$0);
       return [3, copy_loc(copy_Longident_t, x0$2), _a1_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _a2_ = copy_closed_flag(x1$1);
       return [4, caml_call2(Stdlib_List[20], copy_object_field, x0$3), _a2_];
      case 5:
       var
        x1$2 = param[2],
        x0$4 = param[1],
        _a3_ = caml_call2(Stdlib_List[20], copy_core_type, x1$2);
       return [5, copy_loc(copy_Longident_t, x0$4), _a3_];
      case 6:
       var x1$3 = param[2], x0$5 = param[1];
       return [6, copy_core_type(x0$5), x1$3];
      case 7:
       var
        x2$0 = param[3],
        x1$4 = param[2],
        x0$6 = param[1],
        _a4_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return caml_call2(Stdlib_List[20], copy_label, x);},
            x2$0),
        _a5_ = copy_closed_flag(x1$4);
       return [7,
               caml_call2(Stdlib_List[20], copy_row_field, x0$6),
               _a5_,
               _a4_];
      case 8:
       var x1$5 = param[2], x0$7 = param[1], _a6_ = copy_core_type(x1$5);
       return [8,
               caml_call2
                (Stdlib_List[20],
                 function(x){return copy_loc(function(x){return x;}, x);},
                 x0$7),
               _a6_];
      case 9:
       var x0$8 = param[1]; return [9, copy_package_type(x0$8)];
      default: var x0$9 = param[1]; return [10, copy_extension(x0$9)];
    }
   }
   function copy_package_type(x){
    var
     x1 = x[2],
     x0 = x[1],
     _aX_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _aY_ = copy_core_type(x1);
          return [0, copy_loc(copy_Longident_t, x0), _aY_];
         },
         x1);
    return [0, copy_loc(copy_Longident_t, x0), _aX_];
   }
   function copy_row_field(param){
    var
     prf_attributes = param[3],
     prf_loc = param[2],
     prf_desc = param[1],
     _aW_ = copy_attributes(prf_attributes);
    return [0, copy_row_field_desc(prf_desc), prf_loc, _aW_];
   }
   function copy_row_field_desc(param){
    if(0 === param[0]){
     var
      x2 = param[3],
      x1 = param[2],
      x0 = param[1],
      _aV_ = caml_call2(Stdlib_List[20], copy_core_type, x2);
     return [0, copy_loc(copy_label, x0), x1, _aV_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_object_field(param){
    var
     pof_attributes = param[3],
     pof_loc = param[2],
     pof_desc = param[1],
     _aU_ = copy_attributes(pof_attributes);
    return [0, copy_object_field_desc(pof_desc), pof_loc, _aU_];
   }
   function copy_attributes(x){
    return caml_call2(Stdlib_List[20], copy_attribute, x);
   }
   function copy_attribute(param){
    var
     attr_loc = param[3],
     attr_payload = param[2],
     attr_name = param[1],
     _aT_ = copy_payload(attr_payload);
    return [0, copy_loc(function(x){return x;}, attr_name), _aT_, attr_loc];
   }
   function copy_payload(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_structure(x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var x0$1 = param[1]; return [2, copy_core_type(x0$1)];
      default:
       var
        x1 = param[2],
        x0$2 = param[1],
        _aS_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1);
       return [3, copy_pattern(x0$2), _aS_];
    }
   }
   function copy_structure(x){
    return caml_call2(Stdlib_List[20], copy_structure_item, x);
   }
   function copy_structure_item(param){
    var pstr_loc = param[2], pstr_desc = param[1];
    return [0, copy_structure_item_desc(pstr_desc), pstr_loc];
   }
   function copy_structure_item_desc(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _aO_ = copy_attributes(x1);
       return [0, copy_expression(x0), _aO_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _aP_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$0);
       return [1, copy_rec_flag(x0$0), _aP_];
      case 2:
       var x0$1 = param[1]; return [2, copy_value_description(x0$1)];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aQ_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1$1);
       return [3, copy_rec_flag(x0$2), _aQ_];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_extension(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_type_exception(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_binding(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_binding, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1];
       return [9, copy_open_infos(copy_module_expr, x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, caml_call2(Stdlib_List[20], copy_class_declaration, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12, copy_include_infos(copy_module_expr, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$2 = param[2], x0$13 = param[1], _aR_ = copy_attributes(x1$2);
       return [14, copy_extension(x0$13), _aR_];
    }
   }
   function copy_include_declaration(x){
    return copy_include_infos(copy_module_expr, x);
   }
   function copy_class_declaration(x){
    return copy_class_infos(copy_class_expr, x);
   }
   function copy_class_expr(param){
    var
     pcl_attributes = param[3],
     pcl_loc = param[2],
     pcl_desc = param[1],
     _aN_ = copy_attributes(pcl_attributes);
    return [0, copy_class_expr_desc(pcl_desc), pcl_loc, _aN_];
   }
   function copy_class_expr_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _aD_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _aD_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_structure(x0$0)];
      case 2:
       var
        x3 = param[4],
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        _aE_ = copy_class_expr(x3),
        _aF_ = copy_pattern(x2),
        _aG_ = caml_call2(Astlib_Stdlib0[2][1], copy_expression, x1$0);
       return [2, copy_arg_label(x0$1), _aG_, _aF_, _aE_];
      case 3:
       var
        x1$1 = param[2],
        x0$2 = param[1],
        _aH_ =
          caml_call2
           (Stdlib_List[20],
            function(x){
             var x1 = x[2], x0 = x[1], _aM_ = copy_expression(x1);
             return [0, copy_arg_label(x0), _aM_];
            },
            x1$1);
       return [3, copy_class_expr(x0$2), _aH_];
      case 4:
       var
        x2$0 = param[3],
        x1$2 = param[2],
        x0$3 = param[1],
        _aI_ = copy_class_expr(x2$0),
        _aJ_ = caml_call2(Stdlib_List[20], copy_value_binding, x1$2);
       return [4, copy_rec_flag(x0$3), _aJ_, _aI_];
      case 5:
       var x1$3 = param[2], x0$4 = param[1], _aK_ = copy_class_type(x1$3);
       return [5, copy_class_expr(x0$4), _aK_];
      case 6:
       var x0$5 = param[1]; return [6, copy_extension(x0$5)];
      default:
       var x1$4 = param[2], x0$6 = param[1], _aL_ = copy_class_expr(x1$4);
       return [7, copy_open_description(x0$6), _aL_];
    }
   }
   function copy_class_structure(param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     _aC_ = caml_call2(Stdlib_List[20], copy_class_field, pcstr_fields);
    return [0, copy_pattern(pcstr_self), _aC_];
   }
   function copy_class_field(param){
    var
     pcf_attributes = param[3],
     pcf_loc = param[2],
     pcf_desc = param[1],
     _aB_ = copy_attributes(pcf_attributes);
    return [0, copy_class_field_desc(pcf_desc), pcf_loc, _aB_];
   }
   function copy_class_field_desc(param){
    switch(param[0]){
      case 0:
       var
        x2 = param[3],
        x1 = param[2],
        x0 = param[1],
        _au_ =
          caml_call2
           (Astlib_Stdlib0[2][1],
            function(x){return copy_loc(function(x){return x;}, x);},
            x2),
        _av_ = copy_class_expr(x1);
       return [0, copy_override_flag(x0), _av_, _au_];
      case 1:
       var
        x0$0 = param[1],
        x2$0 = x0$0[3],
        x1$0 = x0$0[2],
        x0$1 = x0$0[1],
        _aw_ = copy_class_field_kind(x2$0),
        _ax_ = copy_mutable_flag(x1$0);
       return [1, [0, copy_loc(copy_label, x0$1), _ax_, _aw_]];
      case 2:
       var
        x0$2 = param[1],
        x2$1 = x0$2[3],
        x1$1 = x0$2[2],
        x0$3 = x0$2[1],
        _ay_ = copy_class_field_kind(x2$1),
        _az_ = copy_private_flag(x1$1);
       return [2, [0, copy_loc(copy_label, x0$3), _az_, _ay_]];
      case 3:
       var
        x0$4 = param[1],
        x1$2 = x0$4[2],
        x0$5 = x0$4[1],
        _aA_ = copy_core_type(x1$2);
       return [3, [0, copy_core_type(x0$5), _aA_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_expression(x0$6)];
      case 5:
       var x0$7 = param[1]; return [5, copy_attribute(x0$7)];
      default: var x0$8 = param[1]; return [6, copy_extension(x0$8)];
    }
   }
   function copy_class_field_kind(param){
    if(0 === param[0]){var x0 = param[1]; return [0, copy_core_type(x0)];}
    var x1 = param[2], x0$0 = param[1], _at_ = copy_expression(x1);
    return [1, copy_override_flag(x0$0), _at_];
   }
   function copy_open_declaration(x){
    return copy_open_infos(copy_module_expr, x);
   }
   function copy_module_binding(param){
    var
     pmb_loc = param[4],
     pmb_attributes = param[3],
     pmb_expr = param[2],
     pmb_name = param[1],
     _ar_ = copy_attributes(pmb_attributes),
     _as_ = copy_module_expr(pmb_expr);
    return [0,
            copy_loc(function(x){return x;}, pmb_name),
            _as_,
            _ar_,
            pmb_loc];
   }
   function copy_module_expr(param){
    var
     pmod_attributes = param[3],
     pmod_loc = param[2],
     pmod_desc = param[1],
     _aq_ = copy_attributes(pmod_attributes);
    return [0, copy_module_expr_desc(pmod_desc), pmod_loc, _aq_];
   }
   function copy_module_expr_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_structure(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _am_ = copy_module_expr(x2),
        _an_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, x1);
       return [2, copy_loc(function(x){return x;}, x0$1), _an_, _am_];
      case 3:
       var x1$0 = param[2], x0$2 = param[1], _ao_ = copy_module_expr(x1$0);
       return [3, copy_module_expr(x0$2), _ao_];
      case 4:
       var x1$1 = param[2], x0$3 = param[1], _ap_ = copy_module_type(x1$1);
       return [4, copy_module_expr(x0$3), _ap_];
      case 5:
       var x0$4 = param[1]; return [5, copy_expression(x0$4)];
      default: var x0$5 = param[1]; return [6, copy_extension(x0$5)];
    }
   }
   function copy_module_type(param){
    var
     pmty_attributes = param[3],
     pmty_loc = param[2],
     pmty_desc = param[1],
     _al_ = copy_attributes(pmty_attributes);
    return [0, copy_module_type_desc(pmty_desc), pmty_loc, _al_];
   }
   function copy_module_type_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_loc(copy_Longident_t, x0)];
      case 1:
       var x0$0 = param[1]; return [1, copy_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1 = param[2],
        x0$1 = param[1],
        _ai_ = copy_module_type(x2),
        _aj_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, x1);
       return [2, copy_loc(function(x){return x;}, x0$1), _aj_, _ai_];
      case 3:
       var
        x1$0 = param[2],
        x0$2 = param[1],
        _ak_ = caml_call2(Stdlib_List[20], copy_with_constraint, x1$0);
       return [3, copy_module_type(x0$2), _ak_];
      case 4:
       var x0$3 = param[1]; return [4, copy_module_expr(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_extension(x0$4)];
      default:
       var x0$5 = param[1]; return [6, copy_loc(copy_Longident_t, x0$5)];
    }
   }
   function copy_with_constraint(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1], _ae_ = copy_type_declaration(x1);
       return [0, copy_loc(copy_Longident_t, x0), _ae_];
      case 1:
       var
        x1$0 = param[2],
        x0$0 = param[1],
        _af_ = copy_loc(copy_Longident_t, x1$0);
       return [1, copy_loc(copy_Longident_t, x0$0), _af_];
      case 2:
       var
        x1$1 = param[2],
        x0$1 = param[1],
        _ag_ = copy_type_declaration(x1$1);
       return [2, copy_loc(copy_Longident_t, x0$1), _ag_];
      default:
       var
        x1$2 = param[2],
        x0$2 = param[1],
        _ah_ = copy_loc(copy_Longident_t, x1$2);
       return [3, copy_loc(copy_Longident_t, x0$2), _ah_];
    }
   }
   function copy_signature(x){
    return caml_call2(Stdlib_List[20], copy_signature_item, x);
   }
   function copy_signature_item(param){
    var psig_loc = param[2], psig_desc = param[1];
    return [0, copy_signature_item_desc(psig_desc), psig_loc];
   }
   function copy_signature_item_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_value_description(x0)];
      case 1:
       var
        x1 = param[2],
        x0$0 = param[1],
        _ac_ = caml_call2(Stdlib_List[20], copy_type_declaration, x1);
       return [1, copy_rec_flag(x0$0), _ac_];
      case 2:
       var x0$1 = param[1];
       return [2, caml_call2(Stdlib_List[20], copy_type_declaration, x0$1)];
      case 3:
       var x0$2 = param[1]; return [3, copy_type_extension(x0$2)];
      case 4:
       var x0$3 = param[1]; return [4, copy_type_exception(x0$3)];
      case 5:
       var x0$4 = param[1]; return [5, copy_module_declaration(x0$4)];
      case 6:
       var x0$5 = param[1]; return [6, copy_module_substitution(x0$5)];
      case 7:
       var x0$6 = param[1];
       return [7, caml_call2(Stdlib_List[20], copy_module_declaration, x0$6)];
      case 8:
       var x0$7 = param[1]; return [8, copy_module_type_declaration(x0$7)];
      case 9:
       var x0$8 = param[1]; return [9, copy_open_description(x0$8)];
      case 10:
       var x0$9 = param[1];
       return [10, copy_include_infos(copy_module_type, x0$9)];
      case 11:
       var x0$10 = param[1];
       return [11, caml_call2(Stdlib_List[20], copy_class_description, x0$10)];
      case 12:
       var x0$11 = param[1];
       return [12,
               caml_call2(Stdlib_List[20], copy_class_type_declaration, x0$11)];
      case 13:
       var x0$12 = param[1]; return [13, copy_attribute(x0$12)];
      default:
       var x1$0 = param[2], x0$13 = param[1], _ad_ = copy_attributes(x1$0);
       return [14, copy_extension(x0$13), _ad_];
    }
   }
   function copy_class_type_declaration(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_description(x){
    return copy_class_infos(copy_class_type, x);
   }
   function copy_class_type(param){
    var
     pcty_attributes = param[3],
     pcty_loc = param[2],
     pcty_desc = param[1],
     _ab_ = copy_attributes(pcty_attributes);
    return [0, copy_class_type_desc(pcty_desc), pcty_loc, _ab_];
   }
   function copy_class_type_desc(param){
    switch(param[0]){
      case 0:
       var
        x1 = param[2],
        x0 = param[1],
        _Z_ = caml_call2(Stdlib_List[20], copy_core_type, x1);
       return [0, copy_loc(copy_Longident_t, x0), _Z_];
      case 1:
       var x0$0 = param[1]; return [1, copy_class_signature(x0$0)];
      case 2:
       var
        x2 = param[3],
        x1$0 = param[2],
        x0$1 = param[1],
        ___ = copy_class_type(x2),
        _$_ = copy_core_type(x1$0);
       return [2, copy_arg_label(x0$1), _$_, ___];
      case 3:
       var x0$2 = param[1]; return [3, copy_extension(x0$2)];
      default:
       var x1$1 = param[2], x0$3 = param[1], _aa_ = copy_class_type(x1$1);
       return [4, copy_open_description(x0$3), _aa_];
    }
   }
   function copy_class_signature(param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     _Y_ = caml_call2(Stdlib_List[20], copy_class_type_field, pcsig_fields);
    return [0, copy_core_type(pcsig_self), _Y_];
   }
   function copy_class_type_field(param){
    var
     pctf_attributes = param[3],
     pctf_loc = param[2],
     pctf_desc = param[1],
     _X_ = copy_attributes(pctf_attributes);
    return [0, copy_class_type_field_desc(pctf_desc), pctf_loc, _X_];
   }
   function copy_class_type_field_desc(param){
    switch(param[0]){
      case 0:
       var x0 = param[1]; return [0, copy_class_type(x0)];
      case 1:
       var
        x0$0 = param[1],
        x3 = x0$0[4],
        x2 = x0$0[3],
        x1 = x0$0[2],
        x0$1 = x0$0[1],
        _Q_ = copy_core_type(x3),
        _R_ = copy_virtual_flag(x2),
        _S_ = copy_mutable_flag(x1);
       return [1, [0, copy_loc(copy_label, x0$1), _S_, _R_, _Q_]];
      case 2:
       var
        x0$2 = param[1],
        x3$0 = x0$2[4],
        x2$0 = x0$2[3],
        x1$0 = x0$2[2],
        x0$3 = x0$2[1],
        _T_ = copy_core_type(x3$0),
        _U_ = copy_virtual_flag(x2$0),
        _V_ = copy_private_flag(x1$0);
       return [2, [0, copy_loc(copy_label, x0$3), _V_, _U_, _T_]];
      case 3:
       var
        x0$4 = param[1],
        x1$1 = x0$4[2],
        x0$5 = x0$4[1],
        _W_ = copy_core_type(x1$1);
       return [3, [0, copy_core_type(x0$5), _W_]];
      case 4:
       var x0$6 = param[1]; return [4, copy_attribute(x0$6)];
      default: var x0$7 = param[1]; return [5, copy_extension(x0$7)];
    }
   }
   function copy_extension(x){
    var x1 = x[2], x0 = x[1], _P_ = copy_payload(x1);
    return [0, copy_loc(function(x){return x;}, x0), _P_];
   }
   function copy_class_infos(f0, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pci_params = param[2],
     pci_virt = param[1],
     _K_ = copy_attributes(pci_attributes),
     _L_ = caml_call1(f0, pci_expr),
     _M_ = copy_loc(function(x){return x;}, pci_name),
     _N_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _O_ = copy_variance(x1);
          return [0, copy_core_type(x0), _O_];
         },
         pci_params);
    return [0, copy_virtual_flag(pci_virt), _N_, _M_, _L_, pci_loc, _K_];
   }
   function copy_virtual_flag(param){return param ? 1 : 0;}
   function copy_include_description(x){
    return copy_include_infos(copy_module_type, x);
   }
   function copy_include_infos(f0, param){
    var
     pincl_attributes = param[3],
     pincl_loc = param[2],
     pincl_mod = param[1],
     _J_ = copy_attributes(pincl_attributes);
    return [0, caml_call1(f0, pincl_mod), pincl_loc, _J_];
   }
   function copy_open_description(x){
    return copy_open_infos
            (function(x){return copy_loc(copy_Longident_t, x);}, x);
   }
   function copy_open_infos(f0, param){
    var
     popen_attributes = param[4],
     popen_loc = param[3],
     popen_override = param[2],
     popen_expr = param[1],
     _H_ = copy_attributes(popen_attributes),
     _I_ = copy_override_flag(popen_override);
    return [0, caml_call1(f0, popen_expr), _I_, popen_loc, _H_];
   }
   function copy_override_flag(param){return param ? 1 : 0;}
   function copy_module_type_declaration(param){
    var
     pmtd_loc = param[4],
     pmtd_attributes = param[3],
     pmtd_type = param[2],
     pmtd_name = param[1],
     _F_ = copy_attributes(pmtd_attributes),
     _G_ = caml_call2(Astlib_Stdlib0[2][1], copy_module_type, pmtd_type);
    return [0,
            copy_loc(function(x){return x;}, pmtd_name),
            _G_,
            _F_,
            pmtd_loc];
   }
   function copy_module_substitution(param){
    var
     pms_loc = param[4],
     pms_attributes = param[3],
     pms_manifest = param[2],
     pms_name = param[1],
     _D_ = copy_attributes(pms_attributes),
     _E_ = copy_loc(copy_Longident_t, pms_manifest);
    return [0, copy_loc(function(x){return x;}, pms_name), _E_, _D_, pms_loc];
   }
   function copy_module_declaration(param){
    var
     pmd_loc = param[4],
     pmd_attributes = param[3],
     pmd_type = param[2],
     pmd_name = param[1],
     _B_ = copy_attributes(pmd_attributes),
     _C_ = copy_module_type(pmd_type);
    return [0, copy_loc(function(x){return x;}, pmd_name), _C_, _B_, pmd_loc];
   }
   function copy_type_exception(param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     _A_ = copy_attributes(ptyexn_attributes);
    return [0,
            copy_extension_constructor(ptyexn_constructor),
            ptyexn_loc,
            _A_];
   }
   function copy_type_extension(param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     _v_ = copy_attributes(ptyext_attributes),
     _w_ = copy_private_flag(ptyext_private),
     _x_ =
       caml_call2
        (Stdlib_List[20], copy_extension_constructor, ptyext_constructors),
     _y_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _z_ = copy_variance(x1);
          return [0, copy_core_type(x0), _z_];
         },
         ptyext_params);
    return [0,
            copy_loc(copy_Longident_t, ptyext_path),
            _y_,
            _x_,
            _w_,
            ptyext_loc,
            _v_];
   }
   function copy_extension_constructor(param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     _t_ = copy_attributes(pext_attributes),
     _u_ = copy_extension_constructor_kin(pext_kind);
    return [0,
            copy_loc(function(x){return x;}, pext_name),
            _u_,
            pext_loc,
            _t_];
   }
   function copy_extension_constructor_kin(param){
    if(0 === param[0]){
     var
      x1 = param[2],
      x0 = param[1],
      _s_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, x1);
     return [0, copy_constructor_arguments(x0), _s_];
    }
    var x0$0 = param[1];
    return [1, copy_loc(copy_Longident_t, x0$0)];
   }
   function copy_type_declaration(param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     _k_ = copy_attributes(ptype_attributes),
     _l_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, ptype_manifest),
     _m_ = copy_private_flag(ptype_private),
     _n_ = copy_type_kind(ptype_kind),
     _o_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x2 = x[3], x1 = x[2], x0 = x[1], _r_ = copy_core_type(x1);
          return [0, copy_core_type(x0), _r_, x2];
         },
         ptype_cstrs),
     _p_ =
       caml_call2
        (Stdlib_List[20],
         function(x){
          var x1 = x[2], x0 = x[1], _q_ = copy_variance(x1);
          return [0, copy_core_type(x0), _q_];
         },
         ptype_params);
    return [0,
            copy_loc(function(x){return x;}, ptype_name),
            _p_,
            _o_,
            _n_,
            _m_,
            _l_,
            _k_,
            ptype_loc];
   }
   function copy_private_flag(param){return param ? 1 : 0;}
   function copy_type_kind(param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_constructor_declaration, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_constructor_declaration(param){
    var
     pcd_attributes = param[5],
     pcd_loc = param[4],
     pcd_res = param[3],
     pcd_args = param[2],
     pcd_name = param[1],
     _h_ = copy_attributes(pcd_attributes),
     _i_ = caml_call2(Astlib_Stdlib0[2][1], copy_core_type, pcd_res),
     _j_ = copy_constructor_arguments(pcd_args);
    return [0,
            copy_loc(function(x){return x;}, pcd_name),
            _j_,
            _i_,
            pcd_loc,
            _h_];
   }
   function copy_constructor_arguments(param){
    if(0 === param[0]){
     var x0 = param[1];
     return [0, caml_call2(Stdlib_List[20], copy_core_type, x0)];
    }
    var x0$0 = param[1];
    return [1, caml_call2(Stdlib_List[20], copy_label_declaration, x0$0)];
   }
   function copy_label_declaration(param){
    var
     pld_attributes = param[5],
     pld_loc = param[4],
     pld_type = param[3],
     pld_mutable = param[2],
     pld_name = param[1],
     _e_ = copy_attributes(pld_attributes),
     _f_ = copy_core_type(pld_type),
     _g_ = copy_mutable_flag(pld_mutable);
    return [0,
            copy_loc(function(x){return x;}, pld_name),
            _g_,
            _f_,
            pld_loc,
            _e_];
   }
   function copy_mutable_flag(param){return param ? 1 : 0;}
   function copy_variance(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function copy_value_description(param){
    var
     pval_loc = param[5],
     pval_attributes = param[4],
     pval_prim = param[3],
     pval_type = param[2],
     pval_name = param[1],
     _b_ = copy_attributes(pval_attributes),
     _c_ = caml_call2(Stdlib_List[20], function(x){return x;}, pval_prim),
     _d_ = copy_core_type(pval_type);
    return [0,
            copy_loc(function(x){return x;}, pval_name),
            _d_,
            _c_,
            _b_,
            pval_loc];
   }
   function copy_object_field_desc(param){
    if(0 === param[0]){
     var x1 = param[2], x0 = param[1], _a_ = copy_core_type(x1);
     return [0, copy_loc(copy_label, x0), _a_];
    }
    var x0$0 = param[1];
    return [1, copy_core_type(x0$0)];
   }
   function copy_arg_label(param){
    if(typeof param === "number") return 0;
    if(0 === param[0]){var x0 = param[1]; return [0, x0];}
    var x0$0 = param[1];
    return [1, x0$0];
   }
   function copy_closed_flag(param){return param ? 1 : 0;}
   function copy_label(x){return x;}
   function copy_rec_flag(param){return param ? 1 : 0;}
   function copy_constant(param){
    switch(param[0]){
      case 0:
       var x1 = param[2], x0 = param[1];
       return [0,
               x0,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1)];
      case 1:
       var x0$0 = param[1]; return [1, x0$0];
      case 2:
       var x1$0 = param[2], x0$1 = param[1];
       return [2,
               x0$1,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$0)];
      default:
       var x1$1 = param[2], x0$2 = param[1];
       return [3,
               x0$2,
               caml_call2(Astlib_Stdlib0[2][1], function(x){return x;}, x1$1)];
    }
   }
   function copy_Longident_t(x){return x;}
   function copy_loc(f0, param){
    var loc = param[2], txt = param[1];
    return [0, caml_call1(f0, txt), loc];
   }
   function copy_location(x){return x;}
   var
    Astlib_Migrate_408_409 =
      [0,
       copy_toplevel_phrase,
       copy_toplevel_directive,
       copy_directive_argument,
       copy_directive_argument_desc,
       copy_typ,
       copy_pat,
       copy_expr,
       copy_expression,
       copy_expression_desc,
       copy_letop,
       copy_binding_op,
       copy_direction_flag,
       copy_cases,
       copy_case,
       copy_value_binding,
       copy_pattern,
       copy_pattern_desc,
       copy_core_type,
       copy_core_type_desc,
       copy_package_type,
       copy_row_field,
       copy_row_field_desc,
       copy_object_field,
       copy_attributes,
       copy_attribute,
       copy_payload,
       copy_structure,
       copy_structure_item,
       copy_structure_item_desc,
       copy_include_declaration,
       copy_class_declaration,
       copy_class_expr,
       copy_class_expr_desc,
       copy_class_structure,
       copy_class_field,
       copy_class_field_desc,
       copy_class_field_kind,
       copy_open_declaration,
       copy_module_binding,
       copy_module_expr,
       copy_module_expr_desc,
       copy_module_type,
       copy_module_type_desc,
       copy_with_constraint,
       copy_signature,
       copy_signature_item,
       copy_signature_item_desc,
       copy_class_type_declaration,
       copy_class_description,
       copy_class_type,
       copy_class_type_desc,
       copy_class_signature,
       copy_class_type_field,
       copy_class_type_field_desc,
       copy_extension,
       copy_class_infos,
       copy_virtual_flag,
       copy_include_description,
       copy_include_infos,
       copy_open_description,
       copy_open_infos,
       copy_override_flag,
       copy_module_type_declaration,
       copy_module_substitution,
       copy_module_declaration,
       copy_type_exception,
       copy_type_extension,
       copy_extension_constructor,
       copy_extension_constructor_kin,
       copy_type_declaration,
       copy_private_flag,
       copy_type_kind,
       copy_constructor_declaration,
       copy_constructor_arguments,
       copy_label_declaration,
       copy_mutable_flag,
       copy_variance,
       copy_value_description,
       copy_object_field_desc,
       copy_arg_label,
       copy_closed_flag,
       copy_label,
       copy_rec_flag,
       copy_constant,
       copy_Longident_t,
       copy_loc,
       copy_location];
   runtime.caml_register_global
    (2, Astlib_Migrate_408_409, "Astlib__Migrate_408_409");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Keyword
//# unitInfo: Requires: Clflags, Stdlib, Stdlib__List, Stdlib__Option, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Option = global_data.Stdlib__Option,
    Clflags = global_data.Clflags,
    _a_ = [0, 0, 0];
   function is_keyword(param){
    var switch$0 = caml_string_compare(param, "lsl");
    if(0 <= switch$0){
     if(0 >= switch$0) return 1;
     var switch$1 = caml_string_compare(param, "private");
     if(0 <= switch$1){
      if(0 >= switch$1) return 1;
      var switch$2 = caml_string_compare(param, "try");
      if(0 <= switch$2){
       if(0 >= switch$2) return 1;
       if(param === "type") return 1;
       if(param === "val") return 1;
       if(param === "virtual") return 1;
       if(param === "when") return 1;
       if(param === "while") return 1;
       if(param === "with") return 1;
      }
      else{
       if(param === "rec") return 1;
       if(param === "sig") return 1;
       if(param === "struct") return 1;
       if(param === "then") return 1;
       if(param === "to") return 1;
       if(param === "true") return 1;
      }
     }
     else{
      var switch$3 = caml_string_compare(param, "mutable");
      if(0 <= switch$3){
       if(0 >= switch$3) return 1;
       if(param === "new") return 1;
       if(param === "nonrec") return 1;
       if(param === "object") return 1;
       if(param === "of") return 1;
       if(param === "open") return 1;
       if(param === "or") return 1;
      }
      else{
       if(param === "lsr") return 1;
       if(param === "lxor") return 1;
       if(param === "match") return 1;
       if(param === "method") return 1;
       if(param === "mod") return 1;
       if(param === "module") return 1;
      }
     }
    }
    else{
     var switch$4 = caml_string_compare(param, "false");
     if(0 <= switch$4){
      if(0 >= switch$4) return 1;
      var switch$5 = caml_string_compare(param, "include");
      if(0 <= switch$5){
       if(0 >= switch$5) return 1;
       if(param === "inherit") return 1;
       if(param === "initializer") return 1;
       if(param === "land") return 1;
       if(param === "lazy") return 1;
       if(param === "let") return 1;
       if(param === "lor") return 1;
      }
      else{
       if(param === "for") return 1;
       if(param === "fun") return 1;
       if(param === "function") return 1;
       if(param === "functor") return 1;
       if(param === "if") return 1;
       if(param === "in") return 1;
      }
     }
     else{
      var switch$6 = caml_string_compare(param, "do");
      if(0 <= switch$6){
       if(0 >= switch$6) return 1;
       if(param === "done") return 1;
       if(param === "downto") return 1;
       if(param === "else") return 1;
       if(param === "end") return 1;
       if(param === "exception") return 1;
       if(param === "external") return 1;
      }
      else{
       if(param === "and") return 1;
       if(param === "as") return 1;
       if(param === "asr") return 1;
       if(param === "assert") return 1;
       if(param === "begin") return 1;
       if(param === "class") return 1;
       if(param === "constraint") return 1;
      }
     }
    }
    return 0;
   }
   function apply_keyword_edition(cli, param){
    a:
    {
     try{var s$0 = runtime.caml_sys_getenv("OCAMLPARAM");}
     catch(_g_){
      var _b_ = caml_wrap_exception(_g_);
      if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
      var from_ocaml_param = 0;
      break a;
     }
     if(caml_call2(Stdlib_String[9], s$0, cst))
      var items = 0;
     else{
      var c = runtime.caml_string_get(s$0, 0);
      b:
      {
       c:
       {
        if(45 <= c){
         if(60 <= c){if(124 === c) break c;} else if(58 <= c) break c;
        }
        else if(32 === c || 44 <= c) break c;
        var _f_ = caml_call2(Stdlib_String[17], 44, s$0);
        break b;
       }
       var
        _e_ = caml_call2(Stdlib_String[17], c, s$0),
        _f_ = caml_call1(Stdlib_List[7], _e_);
      }
      var items = _f_;
     }
     var
      fold_settings =
        function(param, item){
         var after_cli = param[2], acc = param[1];
         if(item === "_" && ! acc) return [0, acc, 1];
         var len = runtime.caml_ml_string_length(item);
         if
          (9 <= len
           && caml_call3(Stdlib_String[16], item, 0, 9) === "keywords=")
          return [0,
                  [0, caml_call3(Stdlib_String[16], item, 9, len - 9 | 0)],
                  after_cli];
         return [0, acc, after_cli];
        },
      match = caml_call3(Stdlib_List[26], fold_settings, _a_, items),
      after_cli = match[2],
      from_ocaml_param$0 = match[1];
     if(from_ocaml_param$0)
      var s$1 = from_ocaml_param$0[1], _d_ = [0, [0, s$1, after_cli]];
     else
      var _d_ = 0;
     var from_ocaml_param = _d_;
    }
    a:
    {
     b:
     {
      if(cli){
       if(from_ocaml_param){
        var _c_ = from_ocaml_param[1];
        if(_c_[2]){var s = _c_[1]; break b;}
       }
       var keyword_edition = cli;
       break a;
      }
      if(! from_ocaml_param){var keyword_edition = 0; break a;}
      var s = from_ocaml_param[1][1];
     }
     var keyword_edition = [0, s];
    }
    if(caml_call1(Stdlib_Option[11], keyword_edition))
     Clflags[160][1] = keyword_edition;
    return 0;
   }
   var Astlib_Keyword = [0, is_keyword, apply_keyword_edition];
   runtime.caml_register_global(66, Astlib_Keyword, "Astlib__Keyword");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Config
//# unitInfo: Requires: Config
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Config = global_data.Config,
    ast_intf_magic_number = Config[30],
    ast_impl_magic_number = Config[31],
    Astlib_Config = [0, ast_intf_magic_number, ast_impl_magic_number];
   runtime.caml_register_global(1, Astlib_Config, "Astlib__Config");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_metadata
//# unitInfo: Requires: Ast_mapper
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Ast_mapper = global_data.Ast_mapper,
    tool_name = Ast_mapper[2],
    add_ppx_context_str = Ast_mapper[10],
    add_ppx_context_sig = Ast_mapper[11],
    drop_ppx_context_str = Ast_mapper[12],
    drop_ppx_context_sig = Ast_mapper[13],
    set_cookie = Ast_mapper[14],
    get_cookie = Ast_mapper[15],
    Astlib_Ast_metadata =
      [0,
       add_ppx_context_str,
       drop_ppx_context_str,
       add_ppx_context_sig,
       drop_ppx_context_sig,
       tool_name,
       set_cookie,
       get_cookie];
   runtime.caml_register_global
    (1, Astlib_Ast_metadata, "Astlib__Ast_metadata");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib
//# unitInfo: Requires: Compmisc, Pprintast
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Compmisc = global_data.Compmisc,
    Pprintast = global_data.Pprintast,
    longident = Pprintast[1],
    constr = Pprintast[2],
    expression = Pprintast[3],
    string_of_expression = Pprintast[4],
    pattern = Pprintast[5],
    core_type = Pprintast[6],
    signature = Pprintast[7],
    structure = Pprintast[8],
    string_of_structure = Pprintast[9],
    module_expr = Pprintast[10],
    toplevel_phrase = Pprintast[11],
    top_phrase = Pprintast[12],
    class_field = Pprintast[13],
    class_type_field = Pprintast[14],
    class_expr = Pprintast[15],
    class_type = Pprintast[16],
    module_type = Pprintast[17],
    binding = Pprintast[20],
    payload = Pprintast[21],
    tyvar_of_name = Pprintast[22],
    tyvar = Pprintast[23],
    Doc = Pprintast[24];
   function structure_item(fmt, t){
    return caml_call2(structure, fmt, [0, t, 0]);
   }
   function signature_item(fmt, t){
    return caml_call2(signature, fmt, [0, t, 0]);
   }
   var
    Unavailable =
      [248,
       "Astlib.Compiler_pprintast.Unavailable",
       runtime.caml_fresh_oo_id(0)],
    Compiler_pprintast =
      [0,
       longident,
       constr,
       expression,
       string_of_expression,
       pattern,
       core_type,
       signature,
       structure,
       string_of_structure,
       module_expr,
       toplevel_phrase,
       top_phrase,
       class_field,
       class_type_field,
       class_expr,
       class_type,
       module_type,
       binding,
       payload,
       tyvar_of_name,
       tyvar,
       Doc,
       structure_item,
       signature_item,
       Unavailable];
   function init_error_reporting_style_usi(param){return caml_call1(Compmisc[4], 0);
   }
   var Astlib = [0, Compiler_pprintast, init_error_reporting_style_usi];
   runtime.caml_register_global(3, Astlib, "Astlib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_407
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M023",
    ast_intf_magic_number = "Caml1999N023",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_407 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_407, "Astlib__Ast_407");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_406
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M022",
    ast_intf_magic_number = "Caml1999N022",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_406 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_406, "Astlib__Ast_406");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_405
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M020",
    ast_intf_magic_number = "Caml1999N018",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_405 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_405, "Astlib__Ast_405");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_404
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M020",
    ast_intf_magic_number = "Caml1999N018",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_404 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_404, "Astlib__Ast_404");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_403
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M019",
    ast_intf_magic_number = "Caml1999N018",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_403 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_403, "Astlib__Ast_403");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Astlib__Ast_402
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    ast_impl_magic_number = "Caml1999M016",
    ast_intf_magic_number = "Caml1999N015",
    Asttypes = [0],
    Parsetree = [0],
    Config = [0, ast_impl_magic_number, ast_intf_magic_number],
    Astlib_Ast_402 = [0, Asttypes, Parsetree, Config];
   runtime.caml_register_global(2, Astlib_Ast_402, "Astlib__Ast_402");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
